/* Generated by gen_ubx from /home/dino/paparazzi/conf/ubx.xml */
/* Please DO NOT EDIT */

#include "mcu_periph/link_device.h"

#include "subsystems/gps/gps_ubx.h"

#define UBX_SYNC1 0xB5
#define UBX_SYNC2 0x62

#define UBX_NAV_ID 0x01

#define UBX_NAV_POSLLH_ID 0x02
#define UBX_NAV_POSLLH_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_POSLLH_LON(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_POSLLH_LAT(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_POSLLH_HEIGHT(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_POSLLH_HMSL(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_POSLLH_Hacc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_POSLLH_Vacc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)

static inline void UbxSend_NAV_POSLLH(struct link_device *dev, uint32_t itow, int32_t lon, int32_t lat, int32_t height, int32_t hmsl, uint32_t hacc, uint32_t vacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_POSLLH_ID, 28);
  uint32_t _itow = itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _lon = lon; ubx_send_bytes(dev, 4, (uint8_t*)&_lon);
  int32_t _lat = lat; ubx_send_bytes(dev, 4, (uint8_t*)&_lat);
  int32_t _height = height; ubx_send_bytes(dev, 4, (uint8_t*)&_height);
  int32_t _hmsl = hmsl; ubx_send_bytes(dev, 4, (uint8_t*)&_hmsl);
  uint32_t _hacc = hacc; ubx_send_bytes(dev, 4, (uint8_t*)&_hacc);
  uint32_t _vacc = vacc; ubx_send_bytes(dev, 4, (uint8_t*)&_vacc);
  ubx_trailer(dev);
}

#define UBX_NAV_DOP_ID 0x04
#define UBX_NAV_DOP_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_DOP_GDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8)
#define UBX_NAV_DOP_PDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+6)|*((uint8_t*)_ubx_payload+1+6)<<8)
#define UBX_NAV_DOP_TDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8)
#define UBX_NAV_DOP_VDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+10)|*((uint8_t*)_ubx_payload+1+10)<<8)
#define UBX_NAV_DOP_HDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8)
#define UBX_NAV_DOP_NDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+14)|*((uint8_t*)_ubx_payload+1+14)<<8)
#define UBX_NAV_DOP_EDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8)

static inline void UbxSend_NAV_DOP(struct link_device *dev, uint32_t itow, uint16_t gdop, uint16_t pdop, uint16_t tdop, uint16_t vdop, uint16_t hdop, uint16_t ndop, uint16_t edop) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_DOP_ID, 18);
  uint32_t _itow = itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint16_t _gdop = gdop; ubx_send_bytes(dev, 2, (uint8_t*)&_gdop);
  uint16_t _pdop = pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint16_t _tdop = tdop; ubx_send_bytes(dev, 2, (uint8_t*)&_tdop);
  uint16_t _vdop = vdop; ubx_send_bytes(dev, 2, (uint8_t*)&_vdop);
  uint16_t _hdop = hdop; ubx_send_bytes(dev, 2, (uint8_t*)&_hdop);
  uint16_t _ndop = ndop; ubx_send_bytes(dev, 2, (uint8_t*)&_ndop);
  uint16_t _edop = edop; ubx_send_bytes(dev, 2, (uint8_t*)&_edop);
  ubx_trailer(dev);
}

#define UBX_NAV_SOL_ID 0x06
#define UBX_NAV_SOL_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_SOL_Frac(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_SOL_week(_ubx_payload) (int16_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8)
#define UBX_NAV_SOL_GPSfix(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+10))
#define UBX_NAV_SOL_Flags(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+11))
#define UBX_NAV_SOL_ECEF_X(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_SOL_ECEF_Y(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_SOL_ECEF_Z(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_SOL_Pacc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_NAV_SOL_ECEFVX(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+28)|*((uint8_t*)_ubx_payload+1+28)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_SOL_ECEFVY(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+32)|*((uint8_t*)_ubx_payload+1+32)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+32))<<24)
#define UBX_NAV_SOL_ECEFVZ(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+36)|*((uint8_t*)_ubx_payload+1+36)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+36))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+36))<<24)
#define UBX_NAV_SOL_Sacc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+40)|*((uint8_t*)_ubx_payload+1+40)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+40))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+40))<<24)
#define UBX_NAV_SOL_PDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+44)|*((uint8_t*)_ubx_payload+1+44)<<8)
#define UBX_NAV_SOL_res1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+46))
#define UBX_NAV_SOL_numSV(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+47))
#define UBX_NAV_SOL_res2(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+48)|*((uint8_t*)_ubx_payload+1+48)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+48))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+48))<<24)

static inline void UbxSend_NAV_SOL(struct link_device *dev, uint32_t itow, int32_t frac, int16_t week, uint8_t gpsfix, uint8_t flags, int32_t ecef_x, int32_t ecef_y, int32_t ecef_z, uint32_t pacc, int32_t ecefvx, int32_t ecefvy, int32_t ecefvz, uint32_t sacc, uint16_t pdop, uint8_t res1, uint8_t numsv, uint32_t res2) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_SOL_ID, 52);
  uint32_t _itow = itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _frac = frac; ubx_send_bytes(dev, 4, (uint8_t*)&_frac);
  int16_t _week = week; ubx_send_bytes(dev, 2, (uint8_t*)&_week);
  uint8_t _gpsfix = gpsfix; ubx_send_bytes(dev, 1, (uint8_t*)&_gpsfix);
  uint8_t _flags = flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  int32_t _ecef_x = ecef_x; ubx_send_bytes(dev, 4, (uint8_t*)&_ecef_x);
  int32_t _ecef_y = ecef_y; ubx_send_bytes(dev, 4, (uint8_t*)&_ecef_y);
  int32_t _ecef_z = ecef_z; ubx_send_bytes(dev, 4, (uint8_t*)&_ecef_z);
  uint32_t _pacc = pacc; ubx_send_bytes(dev, 4, (uint8_t*)&_pacc);
  int32_t _ecefvx = ecefvx; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvx);
  int32_t _ecefvy = ecefvy; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvy);
  int32_t _ecefvz = ecefvz; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvz);
  uint32_t _sacc = sacc; ubx_send_bytes(dev, 4, (uint8_t*)&_sacc);
  uint16_t _pdop = pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint8_t _res1 = res1; ubx_send_bytes(dev, 1, (uint8_t*)&_res1);
  uint8_t _numsv = numsv; ubx_send_bytes(dev, 1, (uint8_t*)&_numsv);
  uint32_t _res2 = res2; ubx_send_bytes(dev, 4, (uint8_t*)&_res2);
  ubx_trailer(dev);
}

#define UBX_NAV_POSUTM_ID 0x08
#define UBX_NAV_POSUTM_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_POSUTM_EAST(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_POSUTM_NORTH(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_POSUTM_ALT(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_POSUTM_ZONE(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+16))
#define UBX_NAV_POSUTM_HEM(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+17))

static inline void UbxSend_NAV_POSUTM(struct link_device *dev, uint32_t itow, int32_t east, int32_t north, int32_t alt, int8_t zone, int8_t hem) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_POSUTM_ID, 18);
  uint32_t _itow = itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _east = east; ubx_send_bytes(dev, 4, (uint8_t*)&_east);
  int32_t _north = north; ubx_send_bytes(dev, 4, (uint8_t*)&_north);
  int32_t _alt = alt; ubx_send_bytes(dev, 4, (uint8_t*)&_alt);
  int8_t _zone = zone; ubx_send_bytes(dev, 1, (uint8_t*)&_zone);
  int8_t _hem = hem; ubx_send_bytes(dev, 1, (uint8_t*)&_hem);
  ubx_trailer(dev);
}

#define UBX_NAV_STATUS_ID 0x03
#define UBX_NAV_STATUS_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_STATUS_GPSfix(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_NAV_STATUS_Flags(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_NAV_STATUS_DiffS(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_NAV_STATUS_res(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_NAV_STATUS_TTFF(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_STATUS_MSSS(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+12))<<24)

static inline void UbxSend_NAV_STATUS(struct link_device *dev, uint32_t itow, uint8_t gpsfix, uint8_t flags, uint8_t diffs, uint8_t res, uint32_t ttff, uint32_t msss) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_STATUS_ID, 16);
  uint32_t _itow = itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint8_t _gpsfix = gpsfix; ubx_send_bytes(dev, 1, (uint8_t*)&_gpsfix);
  uint8_t _flags = flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  uint8_t _diffs = diffs; ubx_send_bytes(dev, 1, (uint8_t*)&_diffs);
  uint8_t _res = res; ubx_send_bytes(dev, 1, (uint8_t*)&_res);
  uint32_t _ttff = ttff; ubx_send_bytes(dev, 4, (uint8_t*)&_ttff);
  uint32_t _msss = msss; ubx_send_bytes(dev, 4, (uint8_t*)&_msss);
  ubx_trailer(dev);
}

#define UBX_NAV_VELNED_ID 0x12
#define UBX_NAV_VELNED_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_VELNED_VEL_N(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_VELNED_VEL_E(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_VELNED_VEL_D(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_VELNED_Speed(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_VELNED_GSpeed(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_VELNED_Heading(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_NAV_VELNED_SAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+28)|*((uint8_t*)_ubx_payload+1+28)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_VELNED_CAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+32)|*((uint8_t*)_ubx_payload+1+32)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+32))<<24)

static inline void UbxSend_NAV_VELNED(struct link_device *dev, uint32_t itow, int32_t vel_n, int32_t vel_e, int32_t vel_d, uint32_t speed, uint32_t gspeed, int32_t heading, uint32_t sacc, uint32_t cacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_VELNED_ID, 36);
  uint32_t _itow = itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _vel_n = vel_n; ubx_send_bytes(dev, 4, (uint8_t*)&_vel_n);
  int32_t _vel_e = vel_e; ubx_send_bytes(dev, 4, (uint8_t*)&_vel_e);
  int32_t _vel_d = vel_d; ubx_send_bytes(dev, 4, (uint8_t*)&_vel_d);
  uint32_t _speed = speed; ubx_send_bytes(dev, 4, (uint8_t*)&_speed);
  uint32_t _gspeed = gspeed; ubx_send_bytes(dev, 4, (uint8_t*)&_gspeed);
  int32_t _heading = heading; ubx_send_bytes(dev, 4, (uint8_t*)&_heading);
  uint32_t _sacc = sacc; ubx_send_bytes(dev, 4, (uint8_t*)&_sacc);
  uint32_t _cacc = cacc; ubx_send_bytes(dev, 4, (uint8_t*)&_cacc);
  ubx_trailer(dev);
}

#define UBX_NAV_SVINFO_ID 0x30
#define UBX_NAV_SVINFO_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_SVINFO_NCH(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_NAV_SVINFO_RES1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_NAV_SVINFO_RES2(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+6)|*((uint8_t*)_ubx_payload+1+6)<<8)
#define UBX_NAV_SVINFO_chn(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+8+12*_ubx_block))
#define UBX_NAV_SVINFO_SVID(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+9+12*_ubx_block))
#define UBX_NAV_SVINFO_Flags(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+10+12*_ubx_block))
#define UBX_NAV_SVINFO_QI(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+11+12*_ubx_block))
#define UBX_NAV_SVINFO_CNO(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+12+12*_ubx_block))
#define UBX_NAV_SVINFO_Elev(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+13+12*_ubx_block))
#define UBX_NAV_SVINFO_Azim(_ubx_payload,_ubx_block) (int16_t)(*((uint8_t*)_ubx_payload+14+12*_ubx_block)|*((uint8_t*)_ubx_payload+1+14+12*_ubx_block)<<8)
#define UBX_NAV_SVINFO_PRRes(_ubx_payload,_ubx_block) (int32_t)(*((uint8_t*)_ubx_payload+16+12*_ubx_block)|*((uint8_t*)_ubx_payload+1+16+12*_ubx_block)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16+12*_ubx_block))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16+12*_ubx_block))<<24)

static inline void UbxSend_NAV_SVINFO(struct link_device *dev, uint32_t itow, uint8_t nch, uint8_t res1, uint16_t res2, uint8_t chn, uint8_t svid, uint8_t flags, int8_t qi, uint8_t cno, int8_t elev, int16_t azim, int32_t prres) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_SVINFO_ID, 20);
  uint32_t _itow = itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint8_t _nch = nch; ubx_send_bytes(dev, 1, (uint8_t*)&_nch);
  uint8_t _res1 = res1; ubx_send_bytes(dev, 1, (uint8_t*)&_res1);
  uint16_t _res2 = res2; ubx_send_bytes(dev, 2, (uint8_t*)&_res2);
  uint8_t _chn = chn; ubx_send_bytes(dev, 1, (uint8_t*)&_chn);
  uint8_t _svid = svid; ubx_send_bytes(dev, 1, (uint8_t*)&_svid);
  uint8_t _flags = flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  int8_t _qi = qi; ubx_send_bytes(dev, 1, (uint8_t*)&_qi);
  uint8_t _cno = cno; ubx_send_bytes(dev, 1, (uint8_t*)&_cno);
  int8_t _elev = elev; ubx_send_bytes(dev, 1, (uint8_t*)&_elev);
  int16_t _azim = azim; ubx_send_bytes(dev, 2, (uint8_t*)&_azim);
  int32_t _prres = prres; ubx_send_bytes(dev, 4, (uint8_t*)&_prres);
  ubx_trailer(dev);
}

#define UBX_CFG_ID 0x06

#define UBX_CFG_PRT_ID 0x00
#define UBX_CFG_PRT_PortId(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+0+20*_ubx_block))
#define UBX_CFG_PRT_ReS0(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+1+20*_ubx_block))
#define UBX_CFG_PRT_ReS1(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+2+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+2+20*_ubx_block)<<8)
#define UBX_CFG_PRT_Mode(_ubx_payload,_ubx_block) (uint32_t)(*((uint8_t*)_ubx_payload+4+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+4+20*_ubx_block)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4+20*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4+20*_ubx_block))<<24)
#define UBX_CFG_PRT_Baudrate(_ubx_payload,_ubx_block) (uint32_t)(*((uint8_t*)_ubx_payload+8+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+8+20*_ubx_block)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8+20*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8+20*_ubx_block))<<24)
#define UBX_CFG_PRT_In_proto_mask(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+12+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+12+20*_ubx_block)<<8)
#define UBX_CFG_PRT_Out_proto_mask(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+14+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+14+20*_ubx_block)<<8)
#define UBX_CFG_PRT_Flags(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+16+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+16+20*_ubx_block)<<8)
#define UBX_CFG_PRT_Res2(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+18+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+18+20*_ubx_block)<<8)

static inline void UbxSend_CFG_PRT(struct link_device *dev, uint8_t portid, uint8_t res0, uint16_t res1, uint32_t mode, uint32_t baudrate, uint16_t in_proto_mask, uint16_t out_proto_mask, uint16_t flags, uint16_t res2) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_PRT_ID, 20);
  uint8_t _portid = portid; ubx_send_bytes(dev, 1, (uint8_t*)&_portid);
  uint8_t _res0 = res0; ubx_send_bytes(dev, 1, (uint8_t*)&_res0);
  uint16_t _res1 = res1; ubx_send_bytes(dev, 2, (uint8_t*)&_res1);
  uint32_t _mode = mode; ubx_send_bytes(dev, 4, (uint8_t*)&_mode);
  uint32_t _baudrate = baudrate; ubx_send_bytes(dev, 4, (uint8_t*)&_baudrate);
  uint16_t _in_proto_mask = in_proto_mask; ubx_send_bytes(dev, 2, (uint8_t*)&_in_proto_mask);
  uint16_t _out_proto_mask = out_proto_mask; ubx_send_bytes(dev, 2, (uint8_t*)&_out_proto_mask);
  uint16_t _flags = flags; ubx_send_bytes(dev, 2, (uint8_t*)&_flags);
  uint16_t _res2 = res2; ubx_send_bytes(dev, 2, (uint8_t*)&_res2);
  ubx_trailer(dev);
}

#define UBX_CFG_PRT_POLL_ID 0x00

static inline void UbxSend_CFG_PRT_POLL(struct link_device *dev) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_PRT_POLL_ID, 0);
  ubx_trailer(dev);
}

#define UBX_CFG_MSG_ID 0x01
#define UBX_CFG_MSG_Class(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_MSG_MsgId(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_MSG_Rate(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))

static inline void UbxSend_CFG_MSG(struct link_device *dev, uint8_t class, uint8_t msgid, uint8_t rate) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_MSG_ID, 3);
  uint8_t _class = class; ubx_send_bytes(dev, 1, (uint8_t*)&_class);
  uint8_t _msgid = msgid; ubx_send_bytes(dev, 1, (uint8_t*)&_msgid);
  uint8_t _rate = rate; ubx_send_bytes(dev, 1, (uint8_t*)&_rate);
  ubx_trailer(dev);
}

#define UBX_CFG_NAV_ID 0x03
#define UBX_CFG_NAV_Platform(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_NAV_MinSvs(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_NAV_MaxSvs(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_NAV_MinCN0(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_NAV_AbsCN0(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_CFG_NAV_MinELE(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_CFG_NAV_DGPSTTR(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_CFG_NAV_DGPST0(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_CFG_NAV_PRCAGE(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+8))
#define UBX_CFG_NAV_CPCAGE(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+9))
#define UBX_CFG_NAV_MinCLT(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+10)|*((uint8_t*)_ubx_payload+1+10)<<8)
#define UBX_CFG_NAV_AbsCLT(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8)
#define UBX_CFG_NAV_MaxDR(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+14))
#define UBX_CFG_NAV_NAVOPT(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+15))
#define UBX_CFG_NAV_PDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8)
#define UBX_CFG_NAV_TDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+18)|*((uint8_t*)_ubx_payload+1+18)<<8)
#define UBX_CFG_NAV_PACC(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8)
#define UBX_CFG_NAV_TACC(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+22)|*((uint8_t*)_ubx_payload+1+22)<<8)
#define UBX_CFG_NAV_FACC(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8)
#define UBX_CFG_NAV_StaticThres(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+26))
#define UBX_CFG_NAV_reserved(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+27))

static inline void UbxSend_CFG_NAV(struct link_device *dev, uint8_t platform, uint8_t minsvs, uint8_t maxsvs, uint8_t mincn0, uint8_t abscn0, uint8_t minele, uint8_t dgpsttr, uint8_t dgpst0, uint8_t prcage, uint8_t cpcage, uint16_t minclt, uint16_t absclt, uint8_t maxdr, uint8_t navopt, uint16_t pdop, uint16_t tdop, uint16_t pacc, uint16_t tacc, uint16_t facc, uint8_t staticthres, uint8_t reserved) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_NAV_ID, 28);
  uint8_t _platform = platform; ubx_send_bytes(dev, 1, (uint8_t*)&_platform);
  uint8_t _minsvs = minsvs; ubx_send_bytes(dev, 1, (uint8_t*)&_minsvs);
  uint8_t _maxsvs = maxsvs; ubx_send_bytes(dev, 1, (uint8_t*)&_maxsvs);
  uint8_t _mincn0 = mincn0; ubx_send_bytes(dev, 1, (uint8_t*)&_mincn0);
  uint8_t _abscn0 = abscn0; ubx_send_bytes(dev, 1, (uint8_t*)&_abscn0);
  uint8_t _minele = minele; ubx_send_bytes(dev, 1, (uint8_t*)&_minele);
  uint8_t _dgpsttr = dgpsttr; ubx_send_bytes(dev, 1, (uint8_t*)&_dgpsttr);
  uint8_t _dgpst0 = dgpst0; ubx_send_bytes(dev, 1, (uint8_t*)&_dgpst0);
  uint8_t _prcage = prcage; ubx_send_bytes(dev, 1, (uint8_t*)&_prcage);
  uint8_t _cpcage = cpcage; ubx_send_bytes(dev, 1, (uint8_t*)&_cpcage);
  uint16_t _minclt = minclt; ubx_send_bytes(dev, 2, (uint8_t*)&_minclt);
  uint16_t _absclt = absclt; ubx_send_bytes(dev, 2, (uint8_t*)&_absclt);
  uint8_t _maxdr = maxdr; ubx_send_bytes(dev, 1, (uint8_t*)&_maxdr);
  uint8_t _navopt = navopt; ubx_send_bytes(dev, 1, (uint8_t*)&_navopt);
  uint16_t _pdop = pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint16_t _tdop = tdop; ubx_send_bytes(dev, 2, (uint8_t*)&_tdop);
  uint16_t _pacc = pacc; ubx_send_bytes(dev, 2, (uint8_t*)&_pacc);
  uint16_t _tacc = tacc; ubx_send_bytes(dev, 2, (uint8_t*)&_tacc);
  uint16_t _facc = facc; ubx_send_bytes(dev, 2, (uint8_t*)&_facc);
  uint8_t _staticthres = staticthres; ubx_send_bytes(dev, 1, (uint8_t*)&_staticthres);
  uint8_t _reserved = reserved; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved);
  ubx_trailer(dev);
}

#define UBX_CFG_RST_ID 0x04
#define UBX_CFG_RST_nav_bbr(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8)
#define UBX_CFG_RST_Reset(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_RST_Res(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))

static inline void UbxSend_CFG_RST(struct link_device *dev, uint16_t nav_bbr, uint8_t reset, uint8_t res) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_RST_ID, 4);
  uint16_t _nav_bbr = nav_bbr; ubx_send_bytes(dev, 2, (uint8_t*)&_nav_bbr);
  uint8_t _reset = reset; ubx_send_bytes(dev, 1, (uint8_t*)&_reset);
  uint8_t _res = res; ubx_send_bytes(dev, 1, (uint8_t*)&_res);
  ubx_trailer(dev);
}

#define UBX_CFG_RATE_ID 0x08
#define UBX_CFG_RATE_Meas(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8)
#define UBX_CFG_RATE_Nav(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+2)|*((uint8_t*)_ubx_payload+1+2)<<8)
#define UBX_CFG_RATE_Time(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8)

static inline void UbxSend_CFG_RATE(struct link_device *dev, uint16_t meas, uint16_t nav, uint16_t time) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_RATE_ID, 6);
  uint16_t _meas = meas; ubx_send_bytes(dev, 2, (uint8_t*)&_meas);
  uint16_t _nav = nav; ubx_send_bytes(dev, 2, (uint8_t*)&_nav);
  uint16_t _time = time; ubx_send_bytes(dev, 2, (uint8_t*)&_time);
  ubx_trailer(dev);
}

#define UBX_CFG_CFG_ID 0x09
#define UBX_CFG_CFG_Clear_mask(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_CFG_CFG_Save_mask(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_CFG_CFG_Load_mask(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)

static inline void UbxSend_CFG_CFG(struct link_device *dev, uint32_t clear_mask, uint32_t save_mask, uint32_t load_mask) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_CFG_ID, 12);
  uint32_t _clear_mask = clear_mask; ubx_send_bytes(dev, 4, (uint8_t*)&_clear_mask);
  uint32_t _save_mask = save_mask; ubx_send_bytes(dev, 4, (uint8_t*)&_save_mask);
  uint32_t _load_mask = load_mask; ubx_send_bytes(dev, 4, (uint8_t*)&_load_mask);
  ubx_trailer(dev);
}

#define UBX_CFG_SBAS_ID 0x16
#define UBX_CFG_SBAS_mode(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_SBAS_usage(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_SBAS_maxbas(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_SBAS_reserved(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_SBAS_scanmode(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)

static inline void UbxSend_CFG_SBAS(struct link_device *dev, uint8_t mode, uint8_t usage, uint8_t maxbas, uint8_t reserved, uint32_t scanmode) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_SBAS_ID, 8);
  uint8_t _mode = mode; ubx_send_bytes(dev, 1, (uint8_t*)&_mode);
  uint8_t _usage = usage; ubx_send_bytes(dev, 1, (uint8_t*)&_usage);
  uint8_t _maxbas = maxbas; ubx_send_bytes(dev, 1, (uint8_t*)&_maxbas);
  uint8_t _reserved = reserved; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved);
  uint32_t _scanmode = scanmode; ubx_send_bytes(dev, 4, (uint8_t*)&_scanmode);
  ubx_trailer(dev);
}

#define UBX_CFG_NAV5_ID 0x24
#define UBX_CFG_NAV5_mask(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8)
#define UBX_CFG_NAV5_dynModel(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_NAV5_fixModel(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_NAV5_fixedAlt(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_CFG_NAV5_fixedAltVar(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_CFG_NAV5_minElev(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+12))
#define UBX_CFG_NAV5_drLimit(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+13))
#define UBX_CFG_NAV5_dDop(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+14)|*((uint8_t*)_ubx_payload+1+14)<<8)
#define UBX_CFG_NAV5_tDop(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8)
#define UBX_CFG_NAV5_pAcc(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+18)|*((uint8_t*)_ubx_payload+1+18)<<8)
#define UBX_CFG_NAV5_tAcc(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8)
#define UBX_CFG_NAV5_staticHoldThresh(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+22))
#define UBX_CFG_NAV5_res1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+23))
#define UBX_CFG_NAV5_res2(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_CFG_NAV5_res3(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+28)|*((uint8_t*)_ubx_payload+1+28)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_CFG_NAV5_res4(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+32)|*((uint8_t*)_ubx_payload+1+32)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+32))<<24)

static inline void UbxSend_CFG_NAV5(struct link_device *dev, uint16_t mask, uint8_t dynmodel, uint8_t fixmodel, int32_t fixedalt, uint32_t fixedaltvar, int8_t minelev, uint8_t drlimit, uint16_t ddop, uint16_t tdop, uint16_t pacc, uint16_t tacc, uint8_t staticholdthresh, uint8_t res1, uint32_t res2, uint32_t res3, uint32_t res4) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_NAV5_ID, 36);
  uint16_t _mask = mask; ubx_send_bytes(dev, 2, (uint8_t*)&_mask);
  uint8_t _dynmodel = dynmodel; ubx_send_bytes(dev, 1, (uint8_t*)&_dynmodel);
  uint8_t _fixmodel = fixmodel; ubx_send_bytes(dev, 1, (uint8_t*)&_fixmodel);
  int32_t _fixedalt = fixedalt; ubx_send_bytes(dev, 4, (uint8_t*)&_fixedalt);
  uint32_t _fixedaltvar = fixedaltvar; ubx_send_bytes(dev, 4, (uint8_t*)&_fixedaltvar);
  int8_t _minelev = minelev; ubx_send_bytes(dev, 1, (uint8_t*)&_minelev);
  uint8_t _drlimit = drlimit; ubx_send_bytes(dev, 1, (uint8_t*)&_drlimit);
  uint16_t _ddop = ddop; ubx_send_bytes(dev, 2, (uint8_t*)&_ddop);
  uint16_t _tdop = tdop; ubx_send_bytes(dev, 2, (uint8_t*)&_tdop);
  uint16_t _pacc = pacc; ubx_send_bytes(dev, 2, (uint8_t*)&_pacc);
  uint16_t _tacc = tacc; ubx_send_bytes(dev, 2, (uint8_t*)&_tacc);
  uint8_t _staticholdthresh = staticholdthresh; ubx_send_bytes(dev, 1, (uint8_t*)&_staticholdthresh);
  uint8_t _res1 = res1; ubx_send_bytes(dev, 1, (uint8_t*)&_res1);
  uint32_t _res2 = res2; ubx_send_bytes(dev, 4, (uint8_t*)&_res2);
  uint32_t _res3 = res3; ubx_send_bytes(dev, 4, (uint8_t*)&_res3);
  uint32_t _res4 = res4; ubx_send_bytes(dev, 4, (uint8_t*)&_res4);
  ubx_trailer(dev);
}

#define UBX_ACK_ID 0x05

#define UBX_ACK_ACK_ID 0x01
#define UBX_ACK_ACK_ClsID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_ACK_ACK_MsgID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))

static inline void UbxSend_ACK_ACK(struct link_device *dev, uint8_t clsid, uint8_t msgid) {
  ubx_header(dev, UBX_ACK_ID, UBX_ACK_ACK_ID, 2);
  uint8_t _clsid = clsid; ubx_send_bytes(dev, 1, (uint8_t*)&_clsid);
  uint8_t _msgid = msgid; ubx_send_bytes(dev, 1, (uint8_t*)&_msgid);
  ubx_trailer(dev);
}

#define UBX_ACK_NAK_ID 0x00
#define UBX_ACK_NAK_ClsID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_ACK_NAK_MsgID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))

static inline void UbxSend_ACK_NAK(struct link_device *dev, uint8_t clsid, uint8_t msgid) {
  ubx_header(dev, UBX_ACK_ID, UBX_ACK_NAK_ID, 2);
  uint8_t _clsid = clsid; ubx_send_bytes(dev, 1, (uint8_t*)&_clsid);
  uint8_t _msgid = msgid; ubx_send_bytes(dev, 1, (uint8_t*)&_msgid);
  ubx_trailer(dev);
}

#define UBX_RXM_ID 0x02

#define UBX_RXM_RAW_ID 0x10
#define UBX_RXM_RAW_iTOW(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_RXM_RAW_week(_ubx_payload) (int16_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8)
#define UBX_RXM_RAW_numSV(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_RXM_RAW_reserverd1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_RXM_RAW_cpMes(_ubx_payload,_ubx_block) ({ union { uint64_t u; double f; } _f; _f.u = (uint64_t)(*((uint8_t*)_ubx_payload+8+24*_ubx_block)|((uint64_t)*((uint8_t*)_ubx_payload+1+8+24*_ubx_block))<<8|((uint64_t)*((uint8_t*)_ubx_payload+2+8+24*_ubx_block))<<16|((uint64_t)*((uint8_t*)_ubx_payload+3+8+24*_ubx_block))<<24|((uint64_t)*((uint8_t*)_ubx_payload+4+8+24*_ubx_block))<<32|((uint64_t)*((uint8_t*)_ubx_payload+5+8+24*_ubx_block))<<40|((uint64_t)*((uint8_t*)_ubx_payload+6+8+24*_ubx_block))<<48|((uint64_t)*((uint8_t*)_ubx_payload+7+8+24*_ubx_block))<<56); /*Swap32IfBigEndian(_f.u)*/; _f.f; })
#define UBX_RXM_RAW_prMes(_ubx_payload,_ubx_block) ({ union { uint64_t u; double f; } _f; _f.u = (uint64_t)(*((uint8_t*)_ubx_payload+16+24*_ubx_block)|((uint64_t)*((uint8_t*)_ubx_payload+1+16+24*_ubx_block))<<8|((uint64_t)*((uint8_t*)_ubx_payload+2+16+24*_ubx_block))<<16|((uint64_t)*((uint8_t*)_ubx_payload+3+16+24*_ubx_block))<<24|((uint64_t)*((uint8_t*)_ubx_payload+4+16+24*_ubx_block))<<32|((uint64_t)*((uint8_t*)_ubx_payload+5+16+24*_ubx_block))<<40|((uint64_t)*((uint8_t*)_ubx_payload+6+16+24*_ubx_block))<<48|((uint64_t)*((uint8_t*)_ubx_payload+7+16+24*_ubx_block))<<56); /*Swap32IfBigEndian(_f.u)*/; _f.f; })
#define UBX_RXM_RAW_doMes(_ubx_payload,_ubx_block) ({ union { uint32_t u; float f; } _f; _f.u = (uint32_t)(*((uint8_t*)_ubx_payload+24+24*_ubx_block)|*((uint8_t*)_ubx_payload+1+24+24*_ubx_block)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24+24*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24+24*_ubx_block))<<24); _f.f; })
#define UBX_RXM_RAW_sv(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+28+24*_ubx_block))
#define UBX_RXM_RAW_mesQI(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+29+24*_ubx_block))
#define UBX_RXM_RAW_cno(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+30+24*_ubx_block))
#define UBX_RXM_RAW_lli(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+31+24*_ubx_block))

static inline void UbxSend_RXM_RAW(struct link_device *dev, int32_t itow, int16_t week, uint8_t numsv, uint8_t reserverd1, double cpmes, double prmes, float domes, uint8_t sv, int8_t mesqi, int8_t cno, uint8_t lli) {
  ubx_header(dev, UBX_RXM_ID, UBX_RXM_RAW_ID, 32);
  int32_t _itow = itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int16_t _week = week; ubx_send_bytes(dev, 2, (uint8_t*)&_week);
  uint8_t _numsv = numsv; ubx_send_bytes(dev, 1, (uint8_t*)&_numsv);
  uint8_t _reserverd1 = reserverd1; ubx_send_bytes(dev, 1, (uint8_t*)&_reserverd1);
  double _cpmes = cpmes; ubx_send_bytes(dev, 8, (uint8_t*)&_cpmes);
  double _prmes = prmes; ubx_send_bytes(dev, 8, (uint8_t*)&_prmes);
  float _domes = domes; ubx_send_bytes(dev, 4, (uint8_t*)&_domes);
  uint8_t _sv = sv; ubx_send_bytes(dev, 1, (uint8_t*)&_sv);
  int8_t _mesqi = mesqi; ubx_send_bytes(dev, 1, (uint8_t*)&_mesqi);
  int8_t _cno = cno; ubx_send_bytes(dev, 1, (uint8_t*)&_cno);
  uint8_t _lli = lli; ubx_send_bytes(dev, 1, (uint8_t*)&_lli);
  ubx_trailer(dev);
}

#define UBX_RXM_SFRB_ID 0x11
#define UBX_RXM_SFRB_chn(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_RXM_SFRB_svid(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_RXM_SFRB_dwrd0(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+2)|*((uint8_t*)_ubx_payload+1+2)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+2))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+2))<<24)
#define UBX_RXM_SFRB_dwrd1(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+6)|*((uint8_t*)_ubx_payload+1+6)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+6))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+6))<<24)
#define UBX_RXM_SFRB_dwrd2(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+10)|*((uint8_t*)_ubx_payload+1+10)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+10))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+10))<<24)
#define UBX_RXM_SFRB_dwrd3(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+14)|*((uint8_t*)_ubx_payload+1+14)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+14))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+14))<<24)
#define UBX_RXM_SFRB_dwrd4(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+18)|*((uint8_t*)_ubx_payload+1+18)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+18))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+18))<<24)
#define UBX_RXM_SFRB_dwrd5(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+22)|*((uint8_t*)_ubx_payload+1+22)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+22))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+22))<<24)
#define UBX_RXM_SFRB_dwrd6(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+26)|*((uint8_t*)_ubx_payload+1+26)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+26))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+26))<<24)
#define UBX_RXM_SFRB_dwrd7(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+30)|*((uint8_t*)_ubx_payload+1+30)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+30))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+30))<<24)
#define UBX_RXM_SFRB_dwrd8(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+34)|*((uint8_t*)_ubx_payload+1+34)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+34))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+34))<<24)
#define UBX_RXM_SFRB_dwrd9(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+38)|*((uint8_t*)_ubx_payload+1+38)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+38))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+38))<<24)

static inline void UbxSend_RXM_SFRB(struct link_device *dev, uint8_t chn, uint8_t svid, uint32_t dwrd0, uint32_t dwrd1, uint32_t dwrd2, uint32_t dwrd3, uint32_t dwrd4, uint32_t dwrd5, uint32_t dwrd6, uint32_t dwrd7, uint32_t dwrd8, uint32_t dwrd9) {
  ubx_header(dev, UBX_RXM_ID, UBX_RXM_SFRB_ID, 42);
  uint8_t _chn = chn; ubx_send_bytes(dev, 1, (uint8_t*)&_chn);
  uint8_t _svid = svid; ubx_send_bytes(dev, 1, (uint8_t*)&_svid);
  uint32_t _dwrd0 = dwrd0; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd0);
  uint32_t _dwrd1 = dwrd1; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd1);
  uint32_t _dwrd2 = dwrd2; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd2);
  uint32_t _dwrd3 = dwrd3; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd3);
  uint32_t _dwrd4 = dwrd4; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd4);
  uint32_t _dwrd5 = dwrd5; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd5);
  uint32_t _dwrd6 = dwrd6; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd6);
  uint32_t _dwrd7 = dwrd7; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd7);
  uint32_t _dwrd8 = dwrd8; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd8);
  uint32_t _dwrd9 = dwrd9; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd9);
  ubx_trailer(dev);
}

#define UBX_MON_ID 0x0A

#define UBX_MON_GET_VER_ID 0x04

static inline void UbxSend_MON_GET_VER(struct link_device *dev) {
  ubx_header(dev, UBX_MON_ID, UBX_MON_GET_VER_ID, 0);
  ubx_trailer(dev);
}

#define UBX_MON_VER_ID 0x04
#define UBX_MON_VER_c(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+0+1*_ubx_block))

static inline void UbxSend_MON_VER(struct link_device *dev, uint8_t c) {
  ubx_header(dev, UBX_MON_ID, UBX_MON_VER_ID, 1);
  uint8_t _c = c; ubx_send_bytes(dev, 1, (uint8_t*)&_c);
  ubx_trailer(dev);
}
