   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"sys_time.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_f2d
  20              		.global	__aeabi_dadd
  21              		.global	__aeabi_d2uiz
  22              		.section	.text.sys_time_register_timer,"ax",%progbits
  23              		.align	1
  24              		.global	sys_time_register_timer
  25              		.thumb
  26              		.thumb_func
  28              	sys_time_register_timer:
  29              	.LFB23:
  30              		.file 1 "mcu_periph/sys_time.c"
   1:mcu_periph/sys_time.c **** /*
   2:mcu_periph/sys_time.c ****  *
   3:mcu_periph/sys_time.c ****  * Copyright (C) 2009-2011 The Paparazzi Team
   4:mcu_periph/sys_time.c ****  *
   5:mcu_periph/sys_time.c ****  * This file is part of paparazzi.
   6:mcu_periph/sys_time.c ****  *
   7:mcu_periph/sys_time.c ****  * paparazzi is free software; you can redistribute it and/or modify
   8:mcu_periph/sys_time.c ****  * it under the terms of the GNU General Public License as published by
   9:mcu_periph/sys_time.c ****  * the Free Software Foundation; either version 2, or (at your option)
  10:mcu_periph/sys_time.c ****  * any later version.
  11:mcu_periph/sys_time.c ****  *
  12:mcu_periph/sys_time.c ****  * paparazzi is distributed in the hope that it will be useful,
  13:mcu_periph/sys_time.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:mcu_periph/sys_time.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:mcu_periph/sys_time.c ****  * GNU General Public License for more details.
  16:mcu_periph/sys_time.c ****  *
  17:mcu_periph/sys_time.c ****  * You should have received a copy of the GNU General Public License
  18:mcu_periph/sys_time.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  19:mcu_periph/sys_time.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  20:mcu_periph/sys_time.c ****  * Boston, MA 02111-1307, USA.
  21:mcu_periph/sys_time.c ****  *
  22:mcu_periph/sys_time.c ****  */
  23:mcu_periph/sys_time.c **** 
  24:mcu_periph/sys_time.c **** /**
  25:mcu_periph/sys_time.c ****  * @file mcu_periph/sys_time.c
  26:mcu_periph/sys_time.c ****  * @brief Architecture independent timing functions.
  27:mcu_periph/sys_time.c ****  *
  28:mcu_periph/sys_time.c ****  */
  29:mcu_periph/sys_time.c **** 
  30:mcu_periph/sys_time.c **** #include "mcu_periph/sys_time.h"
  31:mcu_periph/sys_time.c **** #include "mcu.h"
  32:mcu_periph/sys_time.c **** 
  33:mcu_periph/sys_time.c **** PRINT_CONFIG_VAR(SYS_TIME_FREQUENCY)
  34:mcu_periph/sys_time.c **** 
  35:mcu_periph/sys_time.c **** struct sys_time sys_time;
  36:mcu_periph/sys_time.c **** 
  37:mcu_periph/sys_time.c **** int sys_time_register_timer(float duration, sys_time_cb cb)
  38:mcu_periph/sys_time.c **** {
  31              		.loc 1 38 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              	.LVL0:
  39:mcu_periph/sys_time.c **** 
  40:mcu_periph/sys_time.c ****   uint32_t start_time = sys_time.nb_tick;
  36              		.loc 1 40 0
  37 0000 184B     		ldr	r3, .L8
  38:mcu_periph/sys_time.c **** {
  38              		.loc 1 38 0
  39 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  40              		.cfi_def_cfa_offset 24
  41              		.cfi_offset 4, -24
  42              		.cfi_offset 5, -20
  43              		.cfi_offset 6, -16
  44              		.cfi_offset 7, -12
  45              		.cfi_offset 8, -8
  46              		.cfi_offset 14, -4
  38:mcu_periph/sys_time.c **** {
  47              		.loc 1 38 0
  48 0006 07EE900A 		fmsr	s15, r0
  49              		.loc 1 40 0
  50 000a D3F80880 		ldr	r8, [r3, #8]
  51              	.LVL1:
  52              	.LBB7:
  41:mcu_periph/sys_time.c ****   for (int i = 0; i < SYS_TIME_NB_TIMER; i++) {
  53              		.loc 1 41 0
  54 000e 0024     		movs	r4, #0
  55 0010 1A46     		mov	r2, r3
  56              	.LVL2:
  57              	.L4:
  58 0012 1425     		movs	r5, #20
  59 0014 05FB0425 		mla	r5, r5, r4, r2
  42:mcu_periph/sys_time.c ****     if (!sys_time.timer[i].in_use) {
  60              		.loc 1 42 0
  61 0018 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
  62 001a DBB9     		cbnz	r3, .L2
  43:mcu_periph/sys_time.c ****       sys_time.timer[i].cb         = cb;
  44:mcu_periph/sys_time.c ****       sys_time.timer[i].elapsed    = FALSE;
  63              		.loc 1 44 0
  64 001c 2B75     		strb	r3, [r5, #20]
  65              	.LVL3:
  66              	.LBB8:
  67              	.LBB9:
  68              		.file 2 "./mcu_periph/sys_time.h"
   1:./mcu_periph/sys_time.h **** /*
   2:./mcu_periph/sys_time.h ****  *
   3:./mcu_periph/sys_time.h ****  * Copyright (C) 2009-2011 The Paparazzi Team
   4:./mcu_periph/sys_time.h ****  *
   5:./mcu_periph/sys_time.h ****  * This file is part of paparazzi.
   6:./mcu_periph/sys_time.h ****  *
   7:./mcu_periph/sys_time.h ****  * paparazzi is free software; you can redistribute it and/or modify
   8:./mcu_periph/sys_time.h ****  * it under the terms of the GNU General Public License as published by
   9:./mcu_periph/sys_time.h ****  * the Free Software Foundation; either version 2, or (at your option)
  10:./mcu_periph/sys_time.h ****  * any later version.
  11:./mcu_periph/sys_time.h ****  *
  12:./mcu_periph/sys_time.h ****  * paparazzi is distributed in the hope that it will be useful,
  13:./mcu_periph/sys_time.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:./mcu_periph/sys_time.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:./mcu_periph/sys_time.h ****  * GNU General Public License for more details.
  16:./mcu_periph/sys_time.h ****  *
  17:./mcu_periph/sys_time.h ****  * You should have received a copy of the GNU General Public License
  18:./mcu_periph/sys_time.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  19:./mcu_periph/sys_time.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  20:./mcu_periph/sys_time.h ****  * Boston, MA 02111-1307, USA.
  21:./mcu_periph/sys_time.h ****  *
  22:./mcu_periph/sys_time.h ****  */
  23:./mcu_periph/sys_time.h **** 
  24:./mcu_periph/sys_time.h **** /**
  25:./mcu_periph/sys_time.h ****  * @file mcu_periph/sys_time.h
  26:./mcu_periph/sys_time.h ****  * @brief Architecture independent timing functions.
  27:./mcu_periph/sys_time.h ****  *
  28:./mcu_periph/sys_time.h ****  */
  29:./mcu_periph/sys_time.h **** 
  30:./mcu_periph/sys_time.h **** #ifndef SYS_TIME_H
  31:./mcu_periph/sys_time.h **** #define SYS_TIME_H
  32:./mcu_periph/sys_time.h **** 
  33:./mcu_periph/sys_time.h **** #include <inttypes.h>
  34:./mcu_periph/sys_time.h **** #include <stdlib.h>
  35:./mcu_periph/sys_time.h **** #include "std.h"
  36:./mcu_periph/sys_time.h **** 
  37:./mcu_periph/sys_time.h **** #include BOARD_CONFIG
  38:./mcu_periph/sys_time.h **** 
  39:./mcu_periph/sys_time.h **** #ifndef SYS_TIME_NB_TIMER
  40:./mcu_periph/sys_time.h **** #define SYS_TIME_NB_TIMER 16
  41:./mcu_periph/sys_time.h **** #endif
  42:./mcu_periph/sys_time.h **** 
  43:./mcu_periph/sys_time.h **** 
  44:./mcu_periph/sys_time.h **** /**
  45:./mcu_periph/sys_time.h ****  * (Default) sys_time timer frequency in Hz.
  46:./mcu_periph/sys_time.h ****  * sys_time.resolution is set from this define.
  47:./mcu_periph/sys_time.h ****  */
  48:./mcu_periph/sys_time.h **** #ifndef SYS_TIME_FREQUENCY
  49:./mcu_periph/sys_time.h **** #if defined PERIODIC_FREQUENCY
  50:./mcu_periph/sys_time.h **** #define SYS_TIME_FREQUENCY (2 * PERIODIC_FREQUENCY)
  51:./mcu_periph/sys_time.h **** #else
  52:./mcu_periph/sys_time.h **** #define SYS_TIME_FREQUENCY 1000
  53:./mcu_periph/sys_time.h **** #endif
  54:./mcu_periph/sys_time.h **** #endif
  55:./mcu_periph/sys_time.h **** 
  56:./mcu_periph/sys_time.h **** 
  57:./mcu_periph/sys_time.h **** typedef uint8_t tid_t; ///< sys_time timer id type
  58:./mcu_periph/sys_time.h **** typedef void (*sys_time_cb)(uint8_t id);
  59:./mcu_periph/sys_time.h **** 
  60:./mcu_periph/sys_time.h **** struct sys_time_timer {
  61:./mcu_periph/sys_time.h ****   bool_t          in_use;
  62:./mcu_periph/sys_time.h ****   sys_time_cb     cb;
  63:./mcu_periph/sys_time.h ****   volatile bool_t elapsed;
  64:./mcu_periph/sys_time.h ****   uint32_t        end_time; ///< in SYS_TIME_TICKS
  65:./mcu_periph/sys_time.h ****   uint32_t        duration; ///< in SYS_TIME_TICKS
  66:./mcu_periph/sys_time.h **** };
  67:./mcu_periph/sys_time.h **** 
  68:./mcu_periph/sys_time.h **** struct sys_time {
  69:./mcu_periph/sys_time.h ****   volatile uint32_t nb_sec;       ///< full seconds since startup
  70:./mcu_periph/sys_time.h ****   volatile uint32_t nb_sec_rem;   ///< remainder of seconds since startup in CPU_TICKS
  71:./mcu_periph/sys_time.h ****   volatile uint32_t nb_tick;      ///< SYS_TIME_TICKS since startup
  72:./mcu_periph/sys_time.h ****   struct sys_time_timer timer[SYS_TIME_NB_TIMER];
  73:./mcu_periph/sys_time.h **** 
  74:./mcu_periph/sys_time.h ****   float resolution;               ///< sys_time_timer resolution in seconds
  75:./mcu_periph/sys_time.h ****   uint32_t ticks_per_sec;         ///< sys_time ticks per second (SYS_TIME_FREQUENCY)
  76:./mcu_periph/sys_time.h ****   uint32_t resolution_cpu_ticks;  ///< sys_time_timer resolution in cpu ticks
  77:./mcu_periph/sys_time.h ****   uint32_t cpu_ticks_per_sec;     ///< cpu ticks per second
  78:./mcu_periph/sys_time.h **** };
  79:./mcu_periph/sys_time.h **** 
  80:./mcu_periph/sys_time.h **** extern struct sys_time sys_time;
  81:./mcu_periph/sys_time.h **** 
  82:./mcu_periph/sys_time.h **** 
  83:./mcu_periph/sys_time.h **** extern void sys_time_init(void);
  84:./mcu_periph/sys_time.h **** 
  85:./mcu_periph/sys_time.h **** /**
  86:./mcu_periph/sys_time.h ****  * Register a new system timer.
  87:./mcu_periph/sys_time.h ****  * @param duration Duration in seconds until the timer elapses.
  88:./mcu_periph/sys_time.h ****  * @param cb Callback function that is called from the ISR when timer elapses, or NULL
  89:./mcu_periph/sys_time.h ****  * @return -1 if it failed, the timer id otherwise
  90:./mcu_periph/sys_time.h ****  */
  91:./mcu_periph/sys_time.h **** extern int sys_time_register_timer(float duration, sys_time_cb cb);
  92:./mcu_periph/sys_time.h **** 
  93:./mcu_periph/sys_time.h **** /**
  94:./mcu_periph/sys_time.h ****  * Cancel a system timer by id.
  95:./mcu_periph/sys_time.h ****  * @param id Timer id.
  96:./mcu_periph/sys_time.h ****  */
  97:./mcu_periph/sys_time.h **** extern void sys_time_cancel_timer(tid_t id);
  98:./mcu_periph/sys_time.h **** 
  99:./mcu_periph/sys_time.h **** /**
 100:./mcu_periph/sys_time.h ****  * Update the duration until a timer elapses.
 101:./mcu_periph/sys_time.h ****  * @param id Timer id
 102:./mcu_periph/sys_time.h ****  * @param duration Duration in seconds until the timer elapses.
 103:./mcu_periph/sys_time.h ****  */
 104:./mcu_periph/sys_time.h **** extern void sys_time_update_timer(tid_t id, float duration);
 105:./mcu_periph/sys_time.h **** 
 106:./mcu_periph/sys_time.h **** /**
 107:./mcu_periph/sys_time.h ****  * Check if timer has elapsed.
 108:./mcu_periph/sys_time.h ****  * @param id Timer id
 109:./mcu_periph/sys_time.h ****  * @return TRUE if timer has elapsed
 110:./mcu_periph/sys_time.h ****  */
 111:./mcu_periph/sys_time.h **** static inline bool_t sys_time_check_and_ack_timer(tid_t id)
 112:./mcu_periph/sys_time.h **** {
 113:./mcu_periph/sys_time.h ****   if (sys_time.timer[id].elapsed) {
 114:./mcu_periph/sys_time.h ****     sys_time.timer[id].elapsed = FALSE;
 115:./mcu_periph/sys_time.h ****     return TRUE;
 116:./mcu_periph/sys_time.h ****   }
 117:./mcu_periph/sys_time.h ****   return FALSE;
 118:./mcu_periph/sys_time.h **** }
 119:./mcu_periph/sys_time.h **** 
 120:./mcu_periph/sys_time.h **** /**
 121:./mcu_periph/sys_time.h ****  * Get the time in seconds since startup.
 122:./mcu_periph/sys_time.h ****  * @return current system time as float with sys_time.resolution
 123:./mcu_periph/sys_time.h ****  */
 124:./mcu_periph/sys_time.h **** static inline float get_sys_time_float(void)
 125:./mcu_periph/sys_time.h **** {
 126:./mcu_periph/sys_time.h ****   return (float)(sys_time.nb_sec + (float)(sys_time.nb_sec_rem) / sys_time.cpu_ticks_per_sec);
 127:./mcu_periph/sys_time.h **** }
 128:./mcu_periph/sys_time.h **** 
 129:./mcu_periph/sys_time.h **** 
 130:./mcu_periph/sys_time.h **** /*
 131:./mcu_periph/sys_time.h ****  * Convenience functions to convert between seconds and sys_time ticks.
 132:./mcu_periph/sys_time.h ****  */
 133:./mcu_periph/sys_time.h **** static inline uint32_t sys_time_ticks_of_sec(float seconds)
 134:./mcu_periph/sys_time.h **** {
 135:./mcu_periph/sys_time.h ****   return (uint32_t)(seconds * sys_time.ticks_per_sec + 0.5);
  69              		.loc 2 135 0
  70 001e 114B     		ldr	r3, .L8
  71              	.LBE9:
  72              	.LBE8:
  43:mcu_periph/sys_time.c ****       sys_time.timer[i].cb         = cb;
  73              		.loc 1 43 0
  74 0020 2961     		str	r1, [r5, #16]
  75              	.LBB11:
  76              	.LBB10:
  77              		.loc 2 135 0
  78 0022 93ED547A 		flds	s14, [r3, #336]	@ int
  79 0026 B8EE477A 		fuitos	s14, s14
  80 002a 27EE877A 		fmuls	s14, s15, s14
  81 002e 17EE100A 		fmrs	r0, s14
  82              	.LVL4:
  83 0032 FFF7FEFF 		bl	__aeabi_f2d
  84              	.LVL5:
  85 0036 0022     		movs	r2, #0
  86 0038 0B4B     		ldr	r3, .L8+4
  87 003a FFF7FEFF 		bl	__aeabi_dadd
  88              	.LVL6:
  89 003e FFF7FEFF 		bl	__aeabi_d2uiz
  90              	.LVL7:
  91              	.LBE10:
  92              	.LBE11:
  45:mcu_periph/sys_time.c ****       sys_time.timer[i].end_time   = start_time + sys_time_ticks_of_sec(duration);
  93              		.loc 1 45 0
  94 0042 00EB0803 		add	r3, r0, r8
  95 0046 AB61     		str	r3, [r5, #24]
  96              	.LVL8:
  46:mcu_periph/sys_time.c ****       sys_time.timer[i].duration   = sys_time_ticks_of_sec(duration);
  47:mcu_periph/sys_time.c ****       sys_time.timer[i].in_use     = TRUE;
  97              		.loc 1 47 0
  98 0048 0123     		movs	r3, #1
  99 004a 2B73     		strb	r3, [r5, #12]
  46:mcu_periph/sys_time.c ****       sys_time.timer[i].duration   = sys_time_ticks_of_sec(duration);
 100              		.loc 1 46 0
 101 004c E861     		str	r0, [r5, #28]
  48:mcu_periph/sys_time.c ****       return i;
 102              		.loc 1 48 0
 103 004e 2046     		mov	r0, r4
 104 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 105              	.LVL9:
 106              	.L2:
  41:mcu_periph/sys_time.c ****   for (int i = 0; i < SYS_TIME_NB_TIMER; i++) {
 107              		.loc 1 41 0
 108 0054 0134     		adds	r4, r4, #1
 109              	.LVL10:
 110 0056 102C     		cmp	r4, #16
 111 0058 DBD1     		bne	.L4
 112              	.LBE7:
  49:mcu_periph/sys_time.c ****     }
  50:mcu_periph/sys_time.c ****   }
  51:mcu_periph/sys_time.c ****   return -1;
 113              		.loc 1 51 0
 114 005a 4FF0FF30 		mov	r0, #-1
 115              	.LVL11:
  52:mcu_periph/sys_time.c **** }
 116              		.loc 1 52 0
 117 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 118              	.LVL12:
 119              	.L9:
 120 0062 00BF     		.align	2
 121              	.L8:
 122 0064 00000000 		.word	.LANCHOR0
 123 0068 0000E03F 		.word	1071644672
 124              		.cfi_endproc
 125              	.LFE23:
 127              		.section	.text.sys_time_cancel_timer,"ax",%progbits
 128              		.align	1
 129              		.global	sys_time_cancel_timer
 130              		.thumb
 131              		.thumb_func
 133              	sys_time_cancel_timer:
 134              	.LFB24:
  53:mcu_periph/sys_time.c **** 
  54:mcu_periph/sys_time.c **** 
  55:mcu_periph/sys_time.c **** void sys_time_cancel_timer(tid_t id)
  56:mcu_periph/sys_time.c **** {
 135              		.loc 1 56 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 140              	.LVL13:
  57:mcu_periph/sys_time.c ****   sys_time.timer[id].in_use     = FALSE;
 141              		.loc 1 57 0
 142 0000 054B     		ldr	r3, .L11
 143 0002 1422     		movs	r2, #20
 144 0004 02FB0030 		mla	r0, r2, r0, r3
 145              	.LVL14:
 146 0008 0023     		movs	r3, #0
 147 000a 0373     		strb	r3, [r0, #12]
  58:mcu_periph/sys_time.c ****   sys_time.timer[id].cb         = NULL;
 148              		.loc 1 58 0
 149 000c 0361     		str	r3, [r0, #16]
  59:mcu_periph/sys_time.c ****   sys_time.timer[id].elapsed    = FALSE;
 150              		.loc 1 59 0
 151 000e 0375     		strb	r3, [r0, #20]
  60:mcu_periph/sys_time.c ****   sys_time.timer[id].end_time   = 0;
 152              		.loc 1 60 0
 153 0010 8361     		str	r3, [r0, #24]
  61:mcu_periph/sys_time.c ****   sys_time.timer[id].duration   = 0;
 154              		.loc 1 61 0
 155 0012 C361     		str	r3, [r0, #28]
 156 0014 7047     		bx	lr
 157              	.L12:
 158 0016 00BF     		.align	2
 159              	.L11:
 160 0018 00000000 		.word	.LANCHOR0
 161              		.cfi_endproc
 162              	.LFE24:
 164              		.section	.text.sys_time_update_timer,"ax",%progbits
 165              		.align	1
 166              		.global	sys_time_update_timer
 167              		.thumb
 168              		.thumb_func
 170              	sys_time_update_timer:
 171              	.LFB25:
  62:mcu_periph/sys_time.c **** }
  63:mcu_periph/sys_time.c **** 
  64:mcu_periph/sys_time.c **** // FIXME: race condition ??
  65:mcu_periph/sys_time.c **** void sys_time_update_timer(tid_t id, float duration)
  66:mcu_periph/sys_time.c **** {
 172              		.loc 1 66 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              	.LVL15:
 177 0000 38B5     		push	{r3, r4, r5, lr}
 178              		.cfi_def_cfa_offset 16
 179              		.cfi_offset 3, -16
 180              		.cfi_offset 4, -12
 181              		.cfi_offset 5, -8
 182              		.cfi_offset 14, -4
 183              	.LBB16:
 184              	.LBB17:
 185              		.loc 2 135 0
 186 0002 0F4C     		ldr	r4, .L14
 187 0004 94ED547A 		flds	s14, [r4, #336]	@ int
 188 0008 F8EE477A 		fuitos	s15, s14
 189 000c 07EE101A 		fmsr	s14, r1
 190 0010 27EE277A 		fmuls	s14, s14, s15
 191              	.LBE17:
 192              	.LBE16:
 193              		.loc 1 66 0
 194 0014 0546     		mov	r5, r0
 195              	.LBB19:
 196              	.LBB18:
 197              		.loc 2 135 0
 198 0016 17EE100A 		fmrs	r0, s14
 199              	.LVL16:
 200 001a FFF7FEFF 		bl	__aeabi_f2d
 201              	.LVL17:
 202 001e 0022     		movs	r2, #0
 203 0020 084B     		ldr	r3, .L14+4
 204 0022 FFF7FEFF 		bl	__aeabi_dadd
 205              	.LVL18:
 206 0026 FFF7FEFF 		bl	__aeabi_d2uiz
 207              	.LVL19:
 208              	.LBE18:
 209              	.LBE19:
  67:mcu_periph/sys_time.c ****   mcu_int_disable();
  68:mcu_periph/sys_time.c ****   sys_time.timer[id].end_time -= (sys_time.timer[id].duration - sys_time_ticks_of_sec(duration));
 210              		.loc 1 68 0
 211 002a 1422     		movs	r2, #20
 212 002c 02FB0544 		mla	r4, r2, r5, r4
 213 0030 A369     		ldr	r3, [r4, #24]
 214 0032 E169     		ldr	r1, [r4, #28]
  69:mcu_periph/sys_time.c ****   sys_time.timer[id].duration = sys_time_ticks_of_sec(duration);
 215              		.loc 1 69 0
 216 0034 E061     		str	r0, [r4, #28]
  68:mcu_periph/sys_time.c ****   sys_time.timer[id].end_time -= (sys_time.timer[id].duration - sys_time_ticks_of_sec(duration));
 217              		.loc 1 68 0
 218 0036 591A     		subs	r1, r3, r1
 219 0038 0144     		add	r1, r1, r0
 220 003a A161     		str	r1, [r4, #24]
 221              	.LVL20:
 222 003c 38BD     		pop	{r3, r4, r5, pc}
 223              	.L15:
 224 003e 00BF     		.align	2
 225              	.L14:
 226 0040 00000000 		.word	.LANCHOR0
 227 0044 0000E03F 		.word	1071644672
 228              		.cfi_endproc
 229              	.LFE25:
 231              		.section	.text.sys_time_init,"ax",%progbits
 232              		.align	1
 233              		.global	sys_time_init
 234              		.thumb
 235              		.thumb_func
 237              	sys_time_init:
 238              	.LFB26:
  70:mcu_periph/sys_time.c ****   mcu_int_enable();
  71:mcu_periph/sys_time.c **** }
  72:mcu_periph/sys_time.c **** 
  73:mcu_periph/sys_time.c **** void sys_time_init(void)
  74:mcu_periph/sys_time.c **** {
 239              		.loc 1 74 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
  75:mcu_periph/sys_time.c ****   sys_time.nb_sec     = 0;
 243              		.loc 1 75 0
 244 0000 104B     		ldr	r3, .L20
  76:mcu_periph/sys_time.c ****   sys_time.nb_sec_rem = 0;
  77:mcu_periph/sys_time.c ****   sys_time.nb_tick    = 0;
  78:mcu_periph/sys_time.c **** 
  79:mcu_periph/sys_time.c ****   sys_time.ticks_per_sec = SYS_TIME_FREQUENCY;
 245              		.loc 1 79 0
 246 0002 4FF48062 		mov	r2, #1024
  74:mcu_periph/sys_time.c **** {
 247              		.loc 1 74 0
 248 0006 10B5     		push	{r4, lr}
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 4, -8
 251              		.cfi_offset 14, -4
  75:mcu_periph/sys_time.c ****   sys_time.nb_sec     = 0;
 252              		.loc 1 75 0
 253 0008 0021     		movs	r1, #0
 254              		.loc 1 79 0
 255 000a C3F85021 		str	r2, [r3, #336]
  80:mcu_periph/sys_time.c ****   sys_time.resolution = 1.0 / sys_time.ticks_per_sec;
 256              		.loc 1 80 0
 257 000e 4FF06A52 		mov	r2, #981467136
  75:mcu_periph/sys_time.c ****   sys_time.nb_sec     = 0;
 258              		.loc 1 75 0
 259 0012 1960     		str	r1, [r3]
 260              		.loc 1 80 0
 261 0014 C3F84C21 		str	r2, [r3, #332]	@ float
 262              	.LVL21:
  76:mcu_periph/sys_time.c ****   sys_time.nb_sec_rem = 0;
 263              		.loc 1 76 0
 264 0018 5960     		str	r1, [r3, #4]
 265 001a 1C46     		mov	r4, r3
  77:mcu_periph/sys_time.c ****   sys_time.nb_tick    = 0;
 266              		.loc 1 77 0
 267 001c 9960     		str	r1, [r3, #8]
 268              	.LVL22:
 269              	.L18:
 270              	.LBB20:
  81:mcu_periph/sys_time.c **** 
  82:mcu_periph/sys_time.c ****   for (unsigned int i = 0; i < SYS_TIME_NB_TIMER; i++) {
  83:mcu_periph/sys_time.c ****     sys_time.timer[i].in_use     = FALSE;
  84:mcu_periph/sys_time.c ****     sys_time.timer[i].cb         = NULL;
  85:mcu_periph/sys_time.c ****     sys_time.timer[i].elapsed    = FALSE;
 271              		.loc 1 85 0 discriminator 2
 272 001e 1420     		movs	r0, #20
 273 0020 00FB0140 		mla	r0, r0, r1, r4
  82:mcu_periph/sys_time.c ****   for (unsigned int i = 0; i < SYS_TIME_NB_TIMER; i++) {
 274              		.loc 1 82 0 discriminator 2
 275 0024 0131     		adds	r1, r1, #1
 276              	.LVL23:
  83:mcu_periph/sys_time.c ****     sys_time.timer[i].in_use     = FALSE;
 277              		.loc 1 83 0 discriminator 2
 278 0026 0022     		movs	r2, #0
  82:mcu_periph/sys_time.c ****   for (unsigned int i = 0; i < SYS_TIME_NB_TIMER; i++) {
 279              		.loc 1 82 0 discriminator 2
 280 0028 1029     		cmp	r1, #16
  83:mcu_periph/sys_time.c ****     sys_time.timer[i].in_use     = FALSE;
 281              		.loc 1 83 0 discriminator 2
 282 002a 1A73     		strb	r2, [r3, #12]
  84:mcu_periph/sys_time.c ****     sys_time.timer[i].cb         = NULL;
 283              		.loc 1 84 0 discriminator 2
 284 002c 1A61     		str	r2, [r3, #16]
 285              		.loc 1 85 0 discriminator 2
 286 002e 0275     		strb	r2, [r0, #20]
 287 0030 03F11403 		add	r3, r3, #20
  86:mcu_periph/sys_time.c ****     sys_time.timer[i].end_time   = 0;
 288              		.loc 1 86 0 discriminator 2
 289 0034 5A60     		str	r2, [r3, #4]
  87:mcu_periph/sys_time.c ****     sys_time.timer[i].duration   = 0;
 290              		.loc 1 87 0 discriminator 2
 291 0036 9A60     		str	r2, [r3, #8]
  82:mcu_periph/sys_time.c ****   for (unsigned int i = 0; i < SYS_TIME_NB_TIMER; i++) {
 292              		.loc 1 82 0 discriminator 2
 293 0038 F1D1     		bne	.L18
 294              	.LBE20:
  88:mcu_periph/sys_time.c ****   }
  89:mcu_periph/sys_time.c **** 
  90:mcu_periph/sys_time.c ****   sys_time_arch_init();
  91:mcu_periph/sys_time.c **** }
 295              		.loc 1 91 0
 296 003a BDE81040 		pop	{r4, lr}
  90:mcu_periph/sys_time.c ****   sys_time_arch_init();
 297              		.loc 1 90 0
 298 003e FFF7FEBF 		b	sys_time_arch_init
 299              	.LVL24:
 300              	.L21:
 301 0042 00BF     		.align	2
 302              	.L20:
 303 0044 00000000 		.word	.LANCHOR0
 304              		.cfi_endproc
 305              	.LFE26:
 307              		.global	sys_time
 308              		.section	.bss.sys_time,"aw",%nobits
 309              		.align	2
 310              		.set	.LANCHOR0,. + 0
 313              	sys_time:
 314 0000 00000000 		.space	348
 314      00000000 
 314      00000000 
 314      00000000 
 314      00000000 
 315              		.text
 316              	.Letext0:
 317              		.file 3 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 318              		.file 4 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 319              		.file 5 "/home/lsk/paparazzi/sw/include/std.h"
 320              		.file 6 "../ext/libopencm3/include/libopencm3/stm32/f4/rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sys_time.c
     /tmp/ccIzB6Lx.s:23     .text.sys_time_register_timer:00000000 $t
     /tmp/ccIzB6Lx.s:28     .text.sys_time_register_timer:00000000 sys_time_register_timer
     /tmp/ccIzB6Lx.s:122    .text.sys_time_register_timer:00000064 $d
     /tmp/ccIzB6Lx.s:128    .text.sys_time_cancel_timer:00000000 $t
     /tmp/ccIzB6Lx.s:133    .text.sys_time_cancel_timer:00000000 sys_time_cancel_timer
     /tmp/ccIzB6Lx.s:160    .text.sys_time_cancel_timer:00000018 $d
     /tmp/ccIzB6Lx.s:165    .text.sys_time_update_timer:00000000 $t
     /tmp/ccIzB6Lx.s:170    .text.sys_time_update_timer:00000000 sys_time_update_timer
     /tmp/ccIzB6Lx.s:226    .text.sys_time_update_timer:00000040 $d
     /tmp/ccIzB6Lx.s:232    .text.sys_time_init:00000000 $t
     /tmp/ccIzB6Lx.s:237    .text.sys_time_init:00000000 sys_time_init
     /tmp/ccIzB6Lx.s:303    .text.sys_time_init:00000044 $d
     /tmp/ccIzB6Lx.s:313    .bss.sys_time:00000000 sys_time
     /tmp/ccIzB6Lx.s:309    .bss.sys_time:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.61e172dafa1e7adfbd840ee8b103061f
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.6.9e4229723f5523536bc8f574589d6a99
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.stddef.h.263.49e44f5ee9cdd8820580fc4aa239e32a
                           .group:00000000 wm4.inttypes.h.24.4db40689d622c4d3b547b5801303bdae
                           .group:00000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.184.e5e1bea8c259692d06c9231e54cad476
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.1a82a3cc35cb0a04319c41bcf41d2a02
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.math.h.35.13c5bec129ef04ad1bb0a1152b29c624
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.krooz_sd.h.2.013366a614baabbe44cc2bbd3205e3d1
                           .group:00000000 wm4.sys_time.h.40.92f532b5cea824e0ec5ea845e7275d34
                           .group:00000000 wm4.common.h.21.22efaac882611267214d0a36f6f15e74
                           .group:00000000 wm4.memorymap.h.21.0c01d18fc5814f65c6ceb1822d4030fa
                           .group:00000000 wm4.memorymap.h.28.85f6f5de65b1d4294c70f79052a0b8c0
                           .group:00000000 wm4.gpio_common_all.h.37.fedbbcb9179f773c905aa3c3e4b7dbdd
                           .group:00000000 wm4.gpio_common_f234.h.48.ee30692f386eaf6801df27cae93943b1
                           .group:00000000 wm4.gpio_common_f24.h.48.4e4be5e3ebe26aee10d604e2d0fecde8
                           .group:00000000 wm4.rcc.h.46.c4bbaa886b7ca1bd1829424ae12e70af
                           .group:00000000 wm4.systick.h.44.34e759e1f218a187b07e9a617cb1d556
                           .group:00000000 wm4.sys_time.h.213.4ee43452c5934214134db56488f53299
                           .group:00000000 wm4.mcu_arch.h.30.9e61c0408281ef19f3143a9b685c0b7d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dadd
__aeabi_d2uiz
sys_time_arch_init
