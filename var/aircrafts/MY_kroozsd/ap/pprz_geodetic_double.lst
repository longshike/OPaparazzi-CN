   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"pprz_geodetic_double.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_dmul
  20              		.global	__aeabi_dadd
  21              		.global	__aeabi_dsub
  22              		.global	__aeabi_ddiv
  23              		.section	.text.lla_of_ecef_d,"ax",%progbits
  24              		.align	1
  25              		.global	lla_of_ecef_d
  26              		.thumb
  27              		.thumb_func
  29              	lla_of_ecef_d:
  30              	.LFB41:
  31              		.file 1 "math/pprz_geodetic_double.c"
   1:math/pprz_geodetic_double.c **** /*
   2:math/pprz_geodetic_double.c ****  * Copyright (C) 2008-2014 The Paparazzi Team
   3:math/pprz_geodetic_double.c ****  *
   4:math/pprz_geodetic_double.c ****  * This file is part of paparazzi.
   5:math/pprz_geodetic_double.c ****  *
   6:math/pprz_geodetic_double.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:math/pprz_geodetic_double.c ****  * it under the terms of the GNU General Public License as published by
   8:math/pprz_geodetic_double.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:math/pprz_geodetic_double.c ****  * any later version.
  10:math/pprz_geodetic_double.c ****  *
  11:math/pprz_geodetic_double.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:math/pprz_geodetic_double.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:math/pprz_geodetic_double.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:math/pprz_geodetic_double.c ****  * GNU General Public License for more details.
  15:math/pprz_geodetic_double.c ****  *
  16:math/pprz_geodetic_double.c ****  * You should have received a copy of the GNU General Public License
  17:math/pprz_geodetic_double.c ****  * along with paparazzi; see the file COPYING.  If not, see
  18:math/pprz_geodetic_double.c ****  * <http://www.gnu.org/licenses/>.
  19:math/pprz_geodetic_double.c ****  */
  20:math/pprz_geodetic_double.c **** 
  21:math/pprz_geodetic_double.c **** /**
  22:math/pprz_geodetic_double.c ****  * @file pprz_geodetic_double.c
  23:math/pprz_geodetic_double.c ****  * @brief Paparazzi double-precision floating point math for geodetic calculations.
  24:math/pprz_geodetic_double.c ****  *
  25:math/pprz_geodetic_double.c ****  *
  26:math/pprz_geodetic_double.c ****  */
  27:math/pprz_geodetic_double.c **** 
  28:math/pprz_geodetic_double.c **** #include "pprz_geodetic_double.h"
  29:math/pprz_geodetic_double.c **** 
  30:math/pprz_geodetic_double.c **** #include <math.h>
  31:math/pprz_geodetic_double.c **** #include "std.h" /* for RadOfDeg */
  32:math/pprz_geodetic_double.c **** 
  33:math/pprz_geodetic_double.c **** 
  34:math/pprz_geodetic_double.c **** void ltp_def_from_ecef_d(struct LtpDef_d *def, struct EcefCoor_d *ecef)
  35:math/pprz_geodetic_double.c **** {
  36:math/pprz_geodetic_double.c **** 
  37:math/pprz_geodetic_double.c ****   /* store the origin of the tangeant plane       */
  38:math/pprz_geodetic_double.c ****   VECT3_COPY(def->ecef, *ecef);
  39:math/pprz_geodetic_double.c ****   /* compute the lla representation of the origin */
  40:math/pprz_geodetic_double.c ****   lla_of_ecef_d(&def->lla, &def->ecef);
  41:math/pprz_geodetic_double.c ****   /* store the rotation matrix                    */
  42:math/pprz_geodetic_double.c ****   const double sin_lat = sin(def->lla.lat);
  43:math/pprz_geodetic_double.c ****   const double cos_lat = cos(def->lla.lat);
  44:math/pprz_geodetic_double.c ****   const double sin_lon = sin(def->lla.lon);
  45:math/pprz_geodetic_double.c ****   const double cos_lon = cos(def->lla.lon);
  46:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[0] = -sin_lon;
  47:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[1] =  cos_lon;
  48:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[2] =  0.;
  49:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat * cos_lon;
  50:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[4] = -sin_lat * sin_lon;
  51:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[5] =  cos_lat;
  52:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[6] =  cos_lat * cos_lon;
  53:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[7] =  cos_lat * sin_lon;
  54:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[8] =  sin_lat;
  55:math/pprz_geodetic_double.c **** 
  56:math/pprz_geodetic_double.c **** }
  57:math/pprz_geodetic_double.c **** 
  58:math/pprz_geodetic_double.c **** /* http://en.wikipedia.org/wiki/Geodetic_system */
  59:math/pprz_geodetic_double.c **** void lla_of_ecef_d(struct LlaCoor_d *lla, struct EcefCoor_d *ecef)
  60:math/pprz_geodetic_double.c **** {
  32              		.loc 1 60 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 48
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  36              	.LVL0:
  37 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  38              		.cfi_def_cfa_offset 36
  39              		.cfi_offset 4, -36
  40              		.cfi_offset 5, -32
  41              		.cfi_offset 6, -28
  42              		.cfi_offset 7, -24
  43              		.cfi_offset 8, -20
  44              		.cfi_offset 9, -16
  45              		.cfi_offset 10, -12
  46              		.cfi_offset 11, -8
  47              		.cfi_offset 14, -4
  48 0004 8A46     		mov	r10, r1
  49 0006 8346     		mov	fp, r0
  61:math/pprz_geodetic_double.c **** 
  62:math/pprz_geodetic_double.c ****   // FIXME : make an ellipsoid struct
  63:math/pprz_geodetic_double.c ****   static const double a = 6378137.0;           /* earth semimajor axis in meters */
  64:math/pprz_geodetic_double.c ****   static const double f = 1. / 298.257223563;  /* reciprocal flattening          */
  65:math/pprz_geodetic_double.c ****   const double b = a * (1. - f);               /* semi-minor axis                */
  66:math/pprz_geodetic_double.c ****   const double b2 = b * b;
  67:math/pprz_geodetic_double.c **** 
  68:math/pprz_geodetic_double.c ****   const double e2 = 2.*f - (f * f);            /* first eccentricity squared     */
  69:math/pprz_geodetic_double.c ****   const double ep2 = f * (2. - f) / ((1. - f) * (1. - f)); /* second eccentricity squared    */
  70:math/pprz_geodetic_double.c ****   const double E2 = a * a - b2;
  71:math/pprz_geodetic_double.c **** 
  72:math/pprz_geodetic_double.c **** 
  73:math/pprz_geodetic_double.c ****   const double z2 = ecef->z * ecef->z;
  50              		.loc 1 73 0
  51 0008 D1E90401 		ldrd	r0, [r1, #16]
  52              	.LVL1:
  60:math/pprz_geodetic_double.c **** {
  53              		.loc 1 60 0
  54 000c 8DB0     		sub	sp, sp, #52
  55              		.cfi_def_cfa_offset 88
  56              		.loc 1 73 0
  57 000e 0246     		mov	r2, r0
  58 0010 0B46     		mov	r3, r1
  59 0012 FFF7FEFF 		bl	__aeabi_dmul
  60              	.LVL2:
  61 0016 CDE90001 		strd	r0, [sp]
  62              	.LVL3:
  74:math/pprz_geodetic_double.c ****   const double r2 = ecef->x * ecef->x + ecef->y * ecef->y;
  63              		.loc 1 74 0
  64 001a DAE90001 		ldrd	r0, [r10]
  65              	.LVL4:
  66 001e 0246     		mov	r2, r0
  67 0020 0B46     		mov	r3, r1
  68 0022 FFF7FEFF 		bl	__aeabi_dmul
  69              	.LVL5:
  70 0026 DAE90267 		ldrd	r6, [r10, #8]
  71 002a 0446     		mov	r4, r0
  72 002c 0D46     		mov	r5, r1
  73 002e 3246     		mov	r2, r6
  74 0030 3B46     		mov	r3, r7
  75 0032 3046     		mov	r0, r6
  76 0034 3946     		mov	r1, r7
  77 0036 FFF7FEFF 		bl	__aeabi_dmul
  78              	.LVL6:
  79 003a 0246     		mov	r2, r0
  80 003c 0B46     		mov	r3, r1
  81 003e 2046     		mov	r0, r4
  82 0040 2946     		mov	r1, r5
  83 0042 FFF7FEFF 		bl	__aeabi_dadd
  84              	.LVL7:
  85 0046 CDE90601 		strd	r0, [sp, #24]
  86              	.LVL8:
  75:math/pprz_geodetic_double.c ****   const double r = sqrt(r2);
  87              		.loc 1 75 0
  88 004a FFF7FEFF 		bl	sqrt
  89              	.LVL9:
  76:math/pprz_geodetic_double.c ****   const double F = 54.*b2 * z2;
  90              		.loc 1 76 0
  91 004e C9A3     		adr	r3, .L2+76
  92 0050 D3E90023 		ldrd	r2, [r3]
  75:math/pprz_geodetic_double.c ****   const double r = sqrt(r2);
  93              		.loc 1 75 0
  94 0054 CDE90401 		strd	r0, [sp, #16]
  95              	.LVL10:
  96              		.loc 1 76 0
  97 0058 DDE90001 		ldrd	r0, [sp]
  98              	.LVL11:
  99 005c FFF7FEFF 		bl	__aeabi_dmul
 100              	.LVL12:
  77:math/pprz_geodetic_double.c ****   const double G = r2 + (1 - e2) * z2 - e2 * E2;
 101              		.loc 1 77 0
 102 0060 B7A3     		adr	r3, .L2+24
 103 0062 D3E90023 		ldrd	r2, [r3]
  76:math/pprz_geodetic_double.c ****   const double F = 54.*b2 * z2;
 104              		.loc 1 76 0
 105 0066 CDE90201 		strd	r0, [sp, #8]
 106              	.LVL13:
 107              		.loc 1 77 0
 108 006a DDE90001 		ldrd	r0, [sp]
 109              	.LVL14:
 110 006e FFF7FEFF 		bl	__aeabi_dmul
 111              	.LVL15:
 112 0072 CDE90801 		strd	r0, [sp, #32]
 113 0076 DDE90823 		ldrd	r2, [sp, #32]
 114 007a DDE90601 		ldrd	r0, [sp, #24]
 115 007e FFF7FEFF 		bl	__aeabi_dadd
 116              	.LVL16:
 117 0082 BEA3     		adr	r3, .L2+84
 118 0084 D3E90023 		ldrd	r2, [r3]
 119 0088 FFF7FEFF 		bl	__aeabi_dsub
 120              	.LVL17:
  78:math/pprz_geodetic_double.c ****   const double c = (e2 * e2 * F * r2) / (G * G * G);
 121              		.loc 1 78 0
 122 008c BDA3     		adr	r3, .L2+92
 123 008e D3E90023 		ldrd	r2, [r3]
  77:math/pprz_geodetic_double.c ****   const double G = r2 + (1 - e2) * z2 - e2 * E2;
 124              		.loc 1 77 0
 125 0092 8046     		mov	r8, r0
 126 0094 8946     		mov	r9, r1
 127              	.LVL18:
 128              		.loc 1 78 0
 129 0096 DDE90201 		ldrd	r0, [sp, #8]
 130 009a FFF7FEFF 		bl	__aeabi_dmul
 131              	.LVL19:
 132 009e DDE90623 		ldrd	r2, [sp, #24]
 133 00a2 FFF7FEFF 		bl	__aeabi_dmul
 134              	.LVL20:
 135 00a6 4246     		mov	r2, r8
 136 00a8 0446     		mov	r4, r0
 137 00aa 0D46     		mov	r5, r1
 138 00ac 4B46     		mov	r3, r9
 139 00ae 4046     		mov	r0, r8
 140 00b0 4946     		mov	r1, r9
 141 00b2 FFF7FEFF 		bl	__aeabi_dmul
 142              	.LVL21:
 143 00b6 4246     		mov	r2, r8
 144 00b8 4B46     		mov	r3, r9
 145 00ba FFF7FEFF 		bl	__aeabi_dmul
 146              	.LVL22:
 147 00be 0246     		mov	r2, r0
 148 00c0 0B46     		mov	r3, r1
 149 00c2 2046     		mov	r0, r4
 150 00c4 2946     		mov	r1, r5
 151 00c6 FFF7FEFF 		bl	__aeabi_ddiv
 152              	.LVL23:
  79:math/pprz_geodetic_double.c ****   const double s = pow((1 + c + sqrt(c * c + 2 * c)), 1. / 3.);
 153              		.loc 1 79 0
 154 00ca 0246     		mov	r2, r0
 155 00cc 0B46     		mov	r3, r1
  78:math/pprz_geodetic_double.c ****   const double c = (e2 * e2 * F * r2) / (G * G * G);
 156              		.loc 1 78 0
 157 00ce 0446     		mov	r4, r0
 158 00d0 0D46     		mov	r5, r1
 159              	.LVL24:
 160              		.loc 1 79 0
 161 00d2 FFF7FEFF 		bl	__aeabi_dmul
 162              	.LVL25:
 163 00d6 2246     		mov	r2, r4
 164 00d8 0646     		mov	r6, r0
 165 00da 0F46     		mov	r7, r1
 166 00dc 2B46     		mov	r3, r5
 167 00de 2046     		mov	r0, r4
 168 00e0 2946     		mov	r1, r5
 169 00e2 FFF7FEFF 		bl	__aeabi_dadd
 170              	.LVL26:
 171 00e6 0246     		mov	r2, r0
 172 00e8 0B46     		mov	r3, r1
 173 00ea 3046     		mov	r0, r6
 174 00ec 3946     		mov	r1, r7
 175 00ee FFF7FEFF 		bl	__aeabi_dadd
 176              	.LVL27:
 177 00f2 FFF7FEFF 		bl	sqrt
 178              	.LVL28:
 179 00f6 0022     		movs	r2, #0
 180 00f8 0646     		mov	r6, r0
 181 00fa 0F46     		mov	r7, r1
 182 00fc 2046     		mov	r0, r4
 183 00fe 2946     		mov	r1, r5
 184 0100 994B     		ldr	r3, .L2+64
 185 0102 FFF7FEFF 		bl	__aeabi_dadd
 186              	.LVL29:
 187 0106 3246     		mov	r2, r6
 188 0108 3B46     		mov	r3, r7
 189 010a FFF7FEFF 		bl	__aeabi_dadd
 190              	.LVL30:
 191 010e 86A3     		adr	r3, .L2
 192 0110 D3E90023 		ldrd	r2, [r3]
 193 0114 FFF7FEFF 		bl	pow
 194              	.LVL31:
  80:math/pprz_geodetic_double.c ****   const double s1 = 1 + s + 1 / s;
 195              		.loc 1 80 0
 196 0118 0022     		movs	r2, #0
 197 011a 934B     		ldr	r3, .L2+64
  79:math/pprz_geodetic_double.c ****   const double s = pow((1 + c + sqrt(c * c + 2 * c)), 1. / 3.);
 198              		.loc 1 79 0
 199 011c 0646     		mov	r6, r0
 200 011e 0F46     		mov	r7, r1
 201              	.LVL32:
 202              		.loc 1 80 0
 203 0120 FFF7FEFF 		bl	__aeabi_dadd
 204              	.LVL33:
 205 0124 3246     		mov	r2, r6
 206 0126 0446     		mov	r4, r0
 207              	.LVL34:
 208 0128 0D46     		mov	r5, r1
 209 012a 3B46     		mov	r3, r7
 210 012c 0020     		movs	r0, #0
 211 012e 8E49     		ldr	r1, .L2+64
 212 0130 FFF7FEFF 		bl	__aeabi_ddiv
 213              	.LVL35:
 214 0134 0246     		mov	r2, r0
 215 0136 0B46     		mov	r3, r1
 216 0138 2046     		mov	r0, r4
 217 013a 2946     		mov	r1, r5
 218 013c FFF7FEFF 		bl	__aeabi_dadd
 219              	.LVL36:
  81:math/pprz_geodetic_double.c ****   const double P = F / (3 * s1 * s1 * G * G);
 220              		.loc 1 81 0
 221 0140 0022     		movs	r2, #0
  80:math/pprz_geodetic_double.c ****   const double s1 = 1 + s + 1 / s;
 222              		.loc 1 80 0
 223 0142 0446     		mov	r4, r0
 224 0144 0D46     		mov	r5, r1
 225              	.LVL37:
 226              		.loc 1 81 0
 227 0146 894B     		ldr	r3, .L2+68
 228 0148 FFF7FEFF 		bl	__aeabi_dmul
 229              	.LVL38:
 230 014c 2246     		mov	r2, r4
 231 014e 2B46     		mov	r3, r5
 232 0150 FFF7FEFF 		bl	__aeabi_dmul
 233              	.LVL39:
 234 0154 4246     		mov	r2, r8
 235 0156 4B46     		mov	r3, r9
 236 0158 FFF7FEFF 		bl	__aeabi_dmul
 237              	.LVL40:
 238 015c 4246     		mov	r2, r8
 239 015e 4B46     		mov	r3, r9
 240 0160 FFF7FEFF 		bl	__aeabi_dmul
 241              	.LVL41:
 242 0164 0246     		mov	r2, r0
 243 0166 0B46     		mov	r3, r1
 244 0168 DDE90201 		ldrd	r0, [sp, #8]
 245 016c FFF7FEFF 		bl	__aeabi_ddiv
 246              	.LVL42:
  82:math/pprz_geodetic_double.c ****   const double Q = sqrt(1 + 2 * e2 * e2 * P);
 247              		.loc 1 82 0
 248 0170 6FA3     		adr	r3, .L2+8
 249 0172 D3E90023 		ldrd	r2, [r3]
  81:math/pprz_geodetic_double.c ****   const double P = F / (3 * s1 * s1 * G * G);
 250              		.loc 1 81 0
 251 0176 8046     		mov	r8, r0
 252              	.LVL43:
 253 0178 8946     		mov	r9, r1
 254              	.LVL44:
 255              		.loc 1 82 0
 256 017a FFF7FEFF 		bl	__aeabi_dmul
 257              	.LVL45:
 258 017e 0022     		movs	r2, #0
 259 0180 794B     		ldr	r3, .L2+64
 260 0182 FFF7FEFF 		bl	__aeabi_dadd
 261              	.LVL46:
 262 0186 FFF7FEFF 		bl	sqrt
 263              	.LVL47:
  83:math/pprz_geodetic_double.c ****   const double ro = -(e2 * P * r) / (1 + Q) + sqrt((a * a / 2) * (1 + 1 / Q) - ((1 - e2) * P * z2) 
 264              		.loc 1 83 0
 265 018a 0022     		movs	r2, #0
 266 018c 764B     		ldr	r3, .L2+64
  82:math/pprz_geodetic_double.c ****   const double Q = sqrt(1 + 2 * e2 * e2 * P);
 267              		.loc 1 82 0
 268 018e 0446     		mov	r4, r0
 269              	.LVL48:
 270 0190 0D46     		mov	r5, r1
 271              	.LVL49:
 272              		.loc 1 83 0
 273 0192 FFF7FEFF 		bl	__aeabi_dadd
 274              	.LVL50:
 275 0196 2246     		mov	r2, r4
 276 0198 0646     		mov	r6, r0
 277              	.LVL51:
 278 019a 0F46     		mov	r7, r1
 279 019c 2B46     		mov	r3, r5
 280 019e 0020     		movs	r0, #0
 281 01a0 7149     		ldr	r1, .L2+64
 282 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 283              	.LVL52:
 284 01a6 0022     		movs	r2, #0
 285 01a8 6F4B     		ldr	r3, .L2+64
 286 01aa FFF7FEFF 		bl	__aeabi_dadd
 287              	.LVL53:
 288 01ae 62A3     		adr	r3, .L2+16
 289 01b0 D3E90023 		ldrd	r2, [r3]
 290 01b4 FFF7FEFF 		bl	__aeabi_dmul
 291              	.LVL54:
 292 01b8 61A3     		adr	r3, .L2+24
 293 01ba D3E90023 		ldrd	r2, [r3]
 294 01be CDE90201 		strd	r0, [sp, #8]
 295              	.LVL55:
 296 01c2 4046     		mov	r0, r8
 297 01c4 4946     		mov	r1, r9
 298 01c6 FFF7FEFF 		bl	__aeabi_dmul
 299              	.LVL56:
 300 01ca DDE90023 		ldrd	r2, [sp]
 301 01ce FFF7FEFF 		bl	__aeabi_dmul
 302              	.LVL57:
 303 01d2 3246     		mov	r2, r6
 304 01d4 CDE90A01 		strd	r0, [sp, #40]
 305 01d8 3B46     		mov	r3, r7
 306 01da 2046     		mov	r0, r4
 307 01dc 2946     		mov	r1, r5
 308 01de FFF7FEFF 		bl	__aeabi_dmul
 309              	.LVL58:
 310 01e2 0246     		mov	r2, r0
 311 01e4 0B46     		mov	r3, r1
 312 01e6 DDE90A01 		ldrd	r0, [sp, #40]
 313 01ea FFF7FEFF 		bl	__aeabi_ddiv
 314              	.LVL59:
 315 01ee 0246     		mov	r2, r0
 316 01f0 0B46     		mov	r3, r1
 317 01f2 DDE90201 		ldrd	r0, [sp, #8]
 318 01f6 FFF7FEFF 		bl	__aeabi_dsub
 319              	.LVL60:
  84:math/pprz_geodetic_double.c ****                     (1 + Q)) - P * r2 / 2);
 320              		.loc 1 84 0
 321 01fa DDE90623 		ldrd	r2, [sp, #24]
  83:math/pprz_geodetic_double.c ****   const double ro = -(e2 * P * r) / (1 + Q) + sqrt((a * a / 2) * (1 + 1 / Q) - ((1 - e2) * P * z2) 
 322              		.loc 1 83 0
 323 01fe 0446     		mov	r4, r0
 324              	.LVL61:
 325 0200 0D46     		mov	r5, r1
 326              		.loc 1 84 0
 327 0202 4046     		mov	r0, r8
 328 0204 4946     		mov	r1, r9
 329 0206 FFF7FEFF 		bl	__aeabi_dmul
 330              	.LVL62:
 331 020a 0022     		movs	r2, #0
 332 020c 584B     		ldr	r3, .L2+72
 333 020e FFF7FEFF 		bl	__aeabi_dmul
 334              	.LVL63:
 335 0212 0246     		mov	r2, r0
 336 0214 0B46     		mov	r3, r1
  83:math/pprz_geodetic_double.c ****   const double ro = -(e2 * P * r) / (1 + Q) + sqrt((a * a / 2) * (1 + 1 / Q) - ((1 - e2) * P * z2) 
 337              		.loc 1 83 0
 338 0216 2046     		mov	r0, r4
 339 0218 2946     		mov	r1, r5
 340 021a FFF7FEFF 		bl	__aeabi_dsub
 341              	.LVL64:
 342 021e FFF7FEFF 		bl	sqrt
 343              	.LVL65:
 344 0222 49A3     		adr	r3, .L2+32
 345 0224 D3E90023 		ldrd	r2, [r3]
 346 0228 0446     		mov	r4, r0
 347 022a 0D46     		mov	r5, r1
 348              	.LVL66:
 349 022c 4046     		mov	r0, r8
 350 022e 4946     		mov	r1, r9
 351 0230 FFF7FEFF 		bl	__aeabi_dmul
 352              	.LVL67:
 353 0234 DDE90423 		ldrd	r2, [sp, #16]
 354 0238 FFF7FEFF 		bl	__aeabi_dmul
 355              	.LVL68:
 356 023c 01F10043 		add	r3, r1, #-2147483648
 357 0240 3246     		mov	r2, r6
 358 0242 1946     		mov	r1, r3
 359 0244 3B46     		mov	r3, r7
 360 0246 FFF7FEFF 		bl	__aeabi_ddiv
 361              	.LVL69:
 362 024a 2246     		mov	r2, r4
 363 024c 2B46     		mov	r3, r5
 364 024e FFF7FEFF 		bl	__aeabi_dadd
 365              	.LVL70:
  85:math/pprz_geodetic_double.c ****   const double tmp = (r - e2 * ro) * (r - e2 * ro);
 366              		.loc 1 85 0
 367 0252 3DA3     		adr	r3, .L2+32
 368 0254 D3E90023 		ldrd	r2, [r3]
 369 0258 FFF7FEFF 		bl	__aeabi_dmul
 370              	.LVL71:
 371 025c 0246     		mov	r2, r0
 372 025e 0B46     		mov	r3, r1
 373 0260 DDE90401 		ldrd	r0, [sp, #16]
 374 0264 FFF7FEFF 		bl	__aeabi_dsub
 375              	.LVL72:
 376 0268 0246     		mov	r2, r0
 377 026a 0B46     		mov	r3, r1
 378 026c FFF7FEFF 		bl	__aeabi_dmul
 379              	.LVL73:
  86:math/pprz_geodetic_double.c ****   const double U = sqrt(tmp + z2);
 380              		.loc 1 86 0
 381 0270 DDE90023 		ldrd	r2, [sp]
  85:math/pprz_geodetic_double.c ****   const double tmp = (r - e2 * ro) * (r - e2 * ro);
 382              		.loc 1 85 0
 383 0274 0446     		mov	r4, r0
 384              	.LVL74:
 385 0276 0D46     		mov	r5, r1
 386              	.LVL75:
 387              		.loc 1 86 0
 388 0278 FFF7FEFF 		bl	__aeabi_dadd
 389              	.LVL76:
 390 027c FFF7FEFF 		bl	sqrt
 391              	.LVL77:
  87:math/pprz_geodetic_double.c ****   const double V = sqrt(tmp + (1 - e2) * z2);
 392              		.loc 1 87 0
 393 0280 DDE90823 		ldrd	r2, [sp, #32]
  86:math/pprz_geodetic_double.c ****   const double U = sqrt(tmp + z2);
 394              		.loc 1 86 0
 395 0284 8046     		mov	r8, r0
 396              	.LVL78:
 397 0286 8946     		mov	r9, r1
 398              	.LVL79:
 399              		.loc 1 87 0
 400 0288 2046     		mov	r0, r4
 401 028a 2946     		mov	r1, r5
 402 028c FFF7FEFF 		bl	__aeabi_dadd
 403              	.LVL80:
 404 0290 FFF7FEFF 		bl	sqrt
 405              	.LVL81:
  88:math/pprz_geodetic_double.c ****   const double zo = (b2 * ecef->z) / (a * V);
 406              		.loc 1 88 0
 407 0294 2EA3     		adr	r3, .L2+40
 408 0296 D3E90023 		ldrd	r2, [r3]
 409 029a FFF7FEFF 		bl	__aeabi_dmul
 410              	.LVL82:
 411 029e 0646     		mov	r6, r0
 412 02a0 0F46     		mov	r7, r1
  89:math/pprz_geodetic_double.c **** 
  90:math/pprz_geodetic_double.c ****   lla->alt = U * (1 - b2 / (a * V));
 413              		.loc 1 90 0
 414 02a2 3246     		mov	r2, r6
 415 02a4 3B46     		mov	r3, r7
 416 02a6 2CA1     		adr	r1, .L2+48
 417 02a8 D1E90001 		ldrd	r0, [r1]
 418 02ac FFF7FEFF 		bl	__aeabi_ddiv
 419              	.LVL83:
 420 02b0 0246     		mov	r2, r0
 421 02b2 0B46     		mov	r3, r1
 422 02b4 0020     		movs	r0, #0
 423 02b6 2C49     		ldr	r1, .L2+64
 424 02b8 FFF7FEFF 		bl	__aeabi_dsub
 425              	.LVL84:
 426 02bc 0246     		mov	r2, r0
 427 02be 0B46     		mov	r3, r1
 428 02c0 4046     		mov	r0, r8
 429 02c2 4946     		mov	r1, r9
  88:math/pprz_geodetic_double.c ****   const double zo = (b2 * ecef->z) / (a * V);
 430              		.loc 1 88 0
 431 02c4 DAE90445 		ldrd	r4, [r10, #16]
 432              	.LVL85:
 433              		.loc 1 90 0
 434 02c8 FFF7FEFF 		bl	__aeabi_dmul
 435              	.LVL86:
  88:math/pprz_geodetic_double.c ****   const double zo = (b2 * ecef->z) / (a * V);
 436              		.loc 1 88 0
 437 02cc 22A3     		adr	r3, .L2+48
 438 02ce D3E90023 		ldrd	r2, [r3]
 439              		.loc 1 90 0
 440 02d2 CBE90401 		strd	r0, [fp, #16]
  88:math/pprz_geodetic_double.c ****   const double zo = (b2 * ecef->z) / (a * V);
 441              		.loc 1 88 0
 442 02d6 2046     		mov	r0, r4
 443 02d8 2946     		mov	r1, r5
 444 02da FFF7FEFF 		bl	__aeabi_dmul
 445              	.LVL87:
 446 02de 3246     		mov	r2, r6
 447 02e0 3B46     		mov	r3, r7
 448 02e2 FFF7FEFF 		bl	__aeabi_ddiv
 449              	.LVL88:
  91:math/pprz_geodetic_double.c ****   lla->lat = atan((ecef->z + ep2 * zo) / r);
 450              		.loc 1 91 0
 451 02e6 1EA3     		adr	r3, .L2+56
 452 02e8 D3E90023 		ldrd	r2, [r3]
 453 02ec FFF7FEFF 		bl	__aeabi_dmul
 454              	.LVL89:
 455 02f0 0246     		mov	r2, r0
 456 02f2 0B46     		mov	r3, r1
 457 02f4 2046     		mov	r0, r4
 458 02f6 2946     		mov	r1, r5
 459 02f8 FFF7FEFF 		bl	__aeabi_dadd
 460              	.LVL90:
 461 02fc DDE90423 		ldrd	r2, [sp, #16]
 462 0300 FFF7FEFF 		bl	__aeabi_ddiv
 463              	.LVL91:
 464 0304 FFF7FEFF 		bl	atan
 465              	.LVL92:
  92:math/pprz_geodetic_double.c ****   lla->lon = atan2(ecef->y, ecef->x);
 466              		.loc 1 92 0
 467 0308 DAE90023 		ldrd	r2, [r10]
  91:math/pprz_geodetic_double.c ****   lla->lat = atan((ecef->z + ep2 * zo) / r);
 468              		.loc 1 91 0
 469 030c CBE90001 		strd	r0, [fp]
 470              		.loc 1 92 0
 471 0310 DAE90201 		ldrd	r0, [r10, #8]
 472 0314 FFF7FEFF 		bl	atan2
 473              	.LVL93:
 474 0318 CBE90201 		strd	r0, [fp, #8]
  93:math/pprz_geodetic_double.c **** 
  94:math/pprz_geodetic_double.c **** }
 475              		.loc 1 94 0
 476 031c 0DB0     		add	sp, sp, #52
 477              	.LVL94:
 478              		@ sp needed
 479 031e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 480              	.LVL95:
 481              	.L3:
 482 0322 00BFAFF3 		.align	3
 482      0080
 483              	.L2:
 484 0328 55555555 		.word	1431655765
 485 032c 5555D53F 		.word	1070945621
 486 0330 F27A402C 		.word	742423282
 487 0334 EE7E173F 		.word	1058504430
 488 0338 80B82F4C 		.word	1278195840
 489 033c D97FB242 		.word	1118994393
 490 0340 D6021CDE 		.word	-568589610
 491 0344 28C9EF3F 		.word	1072679208
 492 0348 F094FEF1 		.word	-234973968
 493 034c 906B7B3F 		.word	1065053072
 494 0350 00000040 		.word	1073741824
 495 0354 A6545841 		.word	1096307878
 496 0358 B98AEB2E 		.word	787188409
 497 035c 2560C242 		.word	1120034853
 498 0360 D2DC97E1 		.word	-510141230
 499 0364 DF9A7B3F 		.word	1065065183
 500 0368 0000F03F 		.word	1072693248
 501 036c 00000840 		.word	1074266112
 502 0370 0000E03F 		.word	1071644672
 503 0374 187A2DBF 		.word	-1087538664
 504 0378 3E021F43 		.word	1126105662
 505 037c 6801A78D 		.word	-1918434968
 506 0380 8A2ADB41 		.word	1104882314
 507 0384 F27A402C 		.word	742423282
 508 0388 EE7E073F 		.word	1057455854
 509              		.cfi_endproc
 510              	.LFE41:
 512 038c AFF30080 		.section	.text.ltp_def_from_ecef_d,"ax",%progbits
 513              		.align	1
 514              		.global	ltp_def_from_ecef_d
 515              		.thumb
 516              		.thumb_func
 518              	ltp_def_from_ecef_d:
 519              	.LFB40:
  35:math/pprz_geodetic_double.c **** {
 520              		.loc 1 35 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 16
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              	.LVL96:
 525 0000 2DE9FF4D 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, fp, lr}
 526              		.cfi_def_cfa_offset 48
 527              		.cfi_offset 0, -48
 528              		.cfi_offset 1, -44
 529              		.cfi_offset 2, -40
 530              		.cfi_offset 3, -36
 531              		.cfi_offset 4, -32
 532              		.cfi_offset 5, -28
 533              		.cfi_offset 6, -24
 534              		.cfi_offset 7, -20
 535              		.cfi_offset 8, -16
 536              		.cfi_offset 10, -12
 537              		.cfi_offset 11, -8
 538              		.cfi_offset 14, -4
  38:math/pprz_geodetic_double.c ****   VECT3_COPY(def->ecef, *ecef);
 539              		.loc 1 38 0
 540 0004 D1E90023 		ldrd	r2, [r1]
 541 0008 C0E90023 		strd	r2, [r0]
 542 000c D1E90223 		ldrd	r2, [r1, #8]
 543 0010 C0E90223 		strd	r2, [r0, #8]
 544 0014 D1E90423 		ldrd	r2, [r1, #16]
  35:math/pprz_geodetic_double.c **** {
 545              		.loc 1 35 0
 546 0018 8046     		mov	r8, r0
  38:math/pprz_geodetic_double.c ****   VECT3_COPY(def->ecef, *ecef);
 547              		.loc 1 38 0
 548 001a C0E90423 		strd	r2, [r0, #16]
  40:math/pprz_geodetic_double.c ****   lla_of_ecef_d(&def->lla, &def->ecef);
 549              		.loc 1 40 0
 550 001e 4146     		mov	r1, r8
 551              	.LVL97:
 552 0020 1830     		adds	r0, r0, #24
 553              	.LVL98:
 554 0022 FFF7FEFF 		bl	lla_of_ecef_d
 555              	.LVL99:
  42:math/pprz_geodetic_double.c ****   const double sin_lat = sin(def->lla.lat);
 556              		.loc 1 42 0
 557 0026 D8E90645 		ldrd	r4, [r8, #24]
 558 002a 2046     		mov	r0, r4
 559 002c 2946     		mov	r1, r5
 560 002e FFF7FEFF 		bl	sin
 561              	.LVL100:
 562 0032 CDE90001 		strd	r0, [sp]
 563              	.LVL101:
  43:math/pprz_geodetic_double.c ****   const double cos_lat = cos(def->lla.lat);
 564              		.loc 1 43 0
 565 0036 2046     		mov	r0, r4
 566              	.LVL102:
 567 0038 2946     		mov	r1, r5
 568 003a FFF7FEFF 		bl	cos
 569              	.LVL103:
  44:math/pprz_geodetic_double.c ****   const double sin_lon = sin(def->lla.lon);
 570              		.loc 1 44 0
 571 003e D8E90867 		ldrd	r6, [r8, #32]
  43:math/pprz_geodetic_double.c ****   const double cos_lat = cos(def->lla.lat);
 572              		.loc 1 43 0
 573 0042 CDE90201 		strd	r0, [sp, #8]
 574              	.LVL104:
  44:math/pprz_geodetic_double.c ****   const double sin_lon = sin(def->lla.lon);
 575              		.loc 1 44 0
 576 0046 3046     		mov	r0, r6
 577              	.LVL105:
 578 0048 3946     		mov	r1, r7
 579 004a FFF7FEFF 		bl	sin
 580              	.LVL106:
 581 004e 0446     		mov	r4, r0
 582 0050 0D46     		mov	r5, r1
 583              	.LVL107:
  45:math/pprz_geodetic_double.c ****   const double cos_lon = cos(def->lla.lon);
 584              		.loc 1 45 0
 585 0052 3046     		mov	r0, r6
 586 0054 3946     		mov	r1, r7
 587 0056 FFF7FEFF 		bl	cos
 588              	.LVL108:
  46:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[0] = -sin_lon;
 589              		.loc 1 46 0
 590 005a 05F10043 		add	r3, r5, #-2147483648
 591 005e C8F83430 		str	r3, [r8, #52]
  48:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[2] =  0.;
 592              		.loc 1 48 0
 593 0062 0022     		movs	r2, #0
 594 0064 0023     		movs	r3, #0
 595 0066 C8E91023 		strd	r2, [r8, #64]
  49:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat * cos_lon;
 596              		.loc 1 49 0
 597 006a 019B     		ldr	r3, [sp, #4]
 598 006c 009E     		ldr	r6, [sp]
  46:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[0] = -sin_lon;
 599              		.loc 1 46 0
 600 006e C8F83040 		str	r4, [r8, #48]
  45:math/pprz_geodetic_double.c ****   const double cos_lon = cos(def->lla.lon);
 601              		.loc 1 45 0
 602 0072 8246     		mov	r10, r0
 603 0074 8B46     		mov	fp, r1
 604              	.LVL109:
  49:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat * cos_lon;
 605              		.loc 1 49 0
 606 0076 03F10047 		add	r7, r3, #-2147483648
 607 007a 5246     		mov	r2, r10
 608 007c 5B46     		mov	r3, fp
  47:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[1] =  cos_lon;
 609              		.loc 1 47 0
 610 007e C8E90EAB 		strd	r10, [r8, #56]
  49:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat * cos_lon;
 611              		.loc 1 49 0
 612 0082 3046     		mov	r0, r6
 613 0084 3946     		mov	r1, r7
 614 0086 FFF7FEFF 		bl	__aeabi_dmul
 615              	.LVL110:
  50:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[4] = -sin_lat * sin_lon;
 616              		.loc 1 50 0
 617 008a 2246     		mov	r2, r4
  49:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat * cos_lon;
 618              		.loc 1 49 0
 619 008c C8E91201 		strd	r0, [r8, #72]
  50:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[4] = -sin_lat * sin_lon;
 620              		.loc 1 50 0
 621 0090 2B46     		mov	r3, r5
 622 0092 3046     		mov	r0, r6
 623 0094 3946     		mov	r1, r7
 624 0096 FFF7FEFF 		bl	__aeabi_dmul
 625              	.LVL111:
  51:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[5] =  cos_lat;
 626              		.loc 1 51 0
 627 009a 9DED027B 		fldd	d7, [sp, #8]
  50:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[4] = -sin_lat * sin_lon;
 628              		.loc 1 50 0
 629 009e C8E91401 		strd	r0, [r8, #80]
  51:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[5] =  cos_lat;
 630              		.loc 1 51 0
 631 00a2 88ED167B 		fstd	d7, [r8, #88]
  52:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[6] =  cos_lat * cos_lon;
 632              		.loc 1 52 0
 633 00a6 51EC170B 		fmrrd	r0, r1, d7
 634 00aa 5246     		mov	r2, r10
 635 00ac 5B46     		mov	r3, fp
 636 00ae FFF7FEFF 		bl	__aeabi_dmul
 637              	.LVL112:
  53:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[7] =  cos_lat * sin_lon;
 638              		.loc 1 53 0
 639 00b2 2246     		mov	r2, r4
  52:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[6] =  cos_lat * cos_lon;
 640              		.loc 1 52 0
 641 00b4 C8E91801 		strd	r0, [r8, #96]
  53:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[7] =  cos_lat * sin_lon;
 642              		.loc 1 53 0
 643 00b8 2B46     		mov	r3, r5
 644 00ba DDE90201 		ldrd	r0, [sp, #8]
 645 00be FFF7FEFF 		bl	__aeabi_dmul
 646              	.LVL113:
  54:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[8] =  sin_lat;
 647              		.loc 1 54 0
 648 00c2 9DED007B 		fldd	d7, [sp]
  53:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[7] =  cos_lat * sin_lon;
 649              		.loc 1 53 0
 650 00c6 C8E91A01 		strd	r0, [r8, #104]
  54:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[8] =  sin_lat;
 651              		.loc 1 54 0
 652 00ca 88ED1C7B 		fstd	d7, [r8, #112]
  56:math/pprz_geodetic_double.c **** }
 653              		.loc 1 56 0
 654 00ce 04B0     		add	sp, sp, #16
 655              	.LVL114:
 656              		@ sp needed
 657 00d0 BDE8F08D 		pop	{r4, r5, r6, r7, r8, r10, fp, pc}
 658              		.cfi_endproc
 659              	.LFE40:
 661              		.section	.text.ecef_of_lla_d,"ax",%progbits
 662              		.align	1
 663              		.global	ecef_of_lla_d
 664              		.thumb
 665              		.thumb_func
 667              	ecef_of_lla_d:
 668              	.LFB42:
  95:math/pprz_geodetic_double.c **** 
  96:math/pprz_geodetic_double.c **** void ecef_of_lla_d(struct EcefCoor_d *ecef, struct LlaCoor_d *lla)
  97:math/pprz_geodetic_double.c **** {
 669              		.loc 1 97 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 32
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              	.LVL115:
 674 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 675              		.cfi_def_cfa_offset 32
 676              		.cfi_offset 4, -32
 677              		.cfi_offset 5, -28
 678              		.cfi_offset 6, -24
 679              		.cfi_offset 7, -20
 680              		.cfi_offset 8, -16
 681              		.cfi_offset 9, -12
 682              		.cfi_offset 10, -8
 683              		.cfi_offset 14, -4
  98:math/pprz_geodetic_double.c **** 
  99:math/pprz_geodetic_double.c ****   // FIXME : make an ellipsoid struct
 100:math/pprz_geodetic_double.c ****   static const double a = 6378137.0;           /* earth semimajor axis in meters */
 101:math/pprz_geodetic_double.c ****   static const double f = 1. / 298.257223563;  /* reciprocal flattening          */
 102:math/pprz_geodetic_double.c ****   const double e2 = 2.*f - (f * f);            /* first eccentricity squared     */
 103:math/pprz_geodetic_double.c **** 
 104:math/pprz_geodetic_double.c ****   const double sin_lat = sin(lla->lat);
 684              		.loc 1 104 0
 685 0004 D1E90089 		ldrd	r8, [r1]
  97:math/pprz_geodetic_double.c **** {
 686              		.loc 1 97 0
 687 0008 88B0     		sub	sp, sp, #32
 688              		.cfi_def_cfa_offset 64
  97:math/pprz_geodetic_double.c **** {
 689              		.loc 1 97 0
 690 000a 8246     		mov	r10, r0
 691 000c 0E46     		mov	r6, r1
 692              		.loc 1 104 0
 693 000e 4046     		mov	r0, r8
 694              	.LVL116:
 695 0010 4946     		mov	r1, r9
 696              	.LVL117:
 697 0012 FFF7FEFF 		bl	sin
 698              	.LVL118:
 699 0016 0446     		mov	r4, r0
 700 0018 0D46     		mov	r5, r1
 701              	.LVL119:
 105:math/pprz_geodetic_double.c ****   const double cos_lat = cos(lla->lat);
 702              		.loc 1 105 0
 703 001a 4046     		mov	r0, r8
 704 001c 4946     		mov	r1, r9
 705 001e FFF7FEFF 		bl	cos
 706              	.LVL120:
 106:math/pprz_geodetic_double.c ****   const double sin_lon = sin(lla->lon);
 707              		.loc 1 106 0
 708 0022 D6E90223 		ldrd	r2, [r6, #8]
 105:math/pprz_geodetic_double.c ****   const double cos_lat = cos(lla->lat);
 709              		.loc 1 105 0
 710 0026 8046     		mov	r8, r0
 711 0028 8946     		mov	r9, r1
 712              	.LVL121:
 713              		.loc 1 106 0
 714 002a 1046     		mov	r0, r2
 715 002c 1946     		mov	r1, r3
 716 002e 0192     		str	r2, [sp, #4]
 717 0030 0093     		str	r3, [sp]
 718 0032 FFF7FEFF 		bl	sin
 719              	.LVL122:
 107:math/pprz_geodetic_double.c ****   const double cos_lon = cos(lla->lon);
 720              		.loc 1 107 0
 721 0036 019A     		ldr	r2, [sp, #4]
 722 0038 009B     		ldr	r3, [sp]
 106:math/pprz_geodetic_double.c ****   const double sin_lon = sin(lla->lon);
 723              		.loc 1 106 0
 724 003a CDE90201 		strd	r0, [sp, #8]
 725              	.LVL123:
 726              		.loc 1 107 0
 727 003e 1046     		mov	r0, r2
 728              	.LVL124:
 729 0040 1946     		mov	r1, r3
 730 0042 FFF7FEFF 		bl	cos
 731              	.LVL125:
 108:math/pprz_geodetic_double.c ****   const double chi = sqrt(1. - e2 * sin_lat * sin_lat);
 732              		.loc 1 108 0
 733 0046 2DA3     		adr	r3, .L6+20
 734 0048 D3E90023 		ldrd	r2, [r3]
 107:math/pprz_geodetic_double.c ****   const double cos_lon = cos(lla->lon);
 735              		.loc 1 107 0
 736 004c CDE90401 		strd	r0, [sp, #16]
 737              	.LVL126:
 738              		.loc 1 108 0
 739 0050 2046     		mov	r0, r4
 740              	.LVL127:
 741 0052 2946     		mov	r1, r5
 742 0054 FFF7FEFF 		bl	__aeabi_dmul
 743              	.LVL128:
 744 0058 2246     		mov	r2, r4
 745 005a 2B46     		mov	r3, r5
 746 005c FFF7FEFF 		bl	__aeabi_dmul
 747              	.LVL129:
 748 0060 0246     		mov	r2, r0
 749 0062 0B46     		mov	r3, r1
 750 0064 0020     		movs	r0, #0
 751 0066 2449     		ldr	r1, .L6+16
 752 0068 FFF7FEFF 		bl	__aeabi_dsub
 753              	.LVL130:
 754 006c FFF7FEFF 		bl	sqrt
 755              	.LVL131:
 756 0070 0246     		mov	r2, r0
 757 0072 0B46     		mov	r3, r1
 758              	.LVL132:
 109:math/pprz_geodetic_double.c ****   const double a_chi = a / chi;
 759              		.loc 1 109 0
 760 0074 1CA1     		adr	r1, .L6
 761 0076 D1E90001 		ldrd	r0, [r1]
 762 007a FFF7FEFF 		bl	__aeabi_ddiv
 763              	.LVL133:
 110:math/pprz_geodetic_double.c **** 
 111:math/pprz_geodetic_double.c ****   ecef->x = (a_chi + lla->alt) * cos_lat * cos_lon;
 764              		.loc 1 111 0
 765 007e 06F11007 		add	r7, r6, #16
 766 0082 D7E90067 		ldrd	r6, [r7]
 767              	.LVL134:
 768 0086 3246     		mov	r2, r6
 769 0088 3B46     		mov	r3, r7
 109:math/pprz_geodetic_double.c ****   const double a_chi = a / chi;
 770              		.loc 1 109 0
 771 008a CDE90601 		strd	r0, [sp, #24]
 772              	.LVL135:
 773              		.loc 1 111 0
 774 008e FFF7FEFF 		bl	__aeabi_dadd
 775              	.LVL136:
 776 0092 4246     		mov	r2, r8
 777 0094 4B46     		mov	r3, r9
 778 0096 FFF7FEFF 		bl	__aeabi_dmul
 779              	.LVL137:
 780 009a DDE90423 		ldrd	r2, [sp, #16]
 781 009e 8046     		mov	r8, r0
 782              	.LVL138:
 783 00a0 8946     		mov	r9, r1
 784 00a2 FFF7FEFF 		bl	__aeabi_dmul
 785              	.LVL139:
 112:math/pprz_geodetic_double.c ****   ecef->y = (a_chi + lla->alt) * cos_lat * sin_lon;
 786              		.loc 1 112 0
 787 00a6 DDE90223 		ldrd	r2, [sp, #8]
 111:math/pprz_geodetic_double.c ****   ecef->x = (a_chi + lla->alt) * cos_lat * cos_lon;
 788              		.loc 1 111 0
 789 00aa CAE90001 		strd	r0, [r10]
 790              		.loc 1 112 0
 791 00ae 4046     		mov	r0, r8
 792 00b0 4946     		mov	r1, r9
 793 00b2 FFF7FEFF 		bl	__aeabi_dmul
 794              	.LVL140:
 113:math/pprz_geodetic_double.c ****   ecef->z = (a_chi * (1. - e2) + lla->alt) * sin_lat;
 795              		.loc 1 113 0
 796 00b6 0EA3     		adr	r3, .L6+8
 797 00b8 D3E90023 		ldrd	r2, [r3]
 112:math/pprz_geodetic_double.c ****   ecef->y = (a_chi + lla->alt) * cos_lat * sin_lon;
 798              		.loc 1 112 0
 799 00bc CAE90201 		strd	r0, [r10, #8]
 800              		.loc 1 113 0
 801 00c0 DDE90601 		ldrd	r0, [sp, #24]
 802 00c4 FFF7FEFF 		bl	__aeabi_dmul
 803              	.LVL141:
 804 00c8 3246     		mov	r2, r6
 805 00ca 3B46     		mov	r3, r7
 806 00cc FFF7FEFF 		bl	__aeabi_dadd
 807              	.LVL142:
 808 00d0 2246     		mov	r2, r4
 809 00d2 2B46     		mov	r3, r5
 810 00d4 FFF7FEFF 		bl	__aeabi_dmul
 811              	.LVL143:
 812 00d8 CAE90401 		strd	r0, [r10, #16]
 114:math/pprz_geodetic_double.c **** }
 813              		.loc 1 114 0
 814 00dc 08B0     		add	sp, sp, #32
 815              		@ sp needed
 816 00de BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 817              	.LVL144:
 818              	.L7:
 819 00e2 00BFAFF3 		.align	3
 819      0080
 820              	.L6:
 821 00e8 00000040 		.word	1073741824
 822 00ec A6545841 		.word	1096307878
 823 00f0 D6021CDE 		.word	-568589610
 824 00f4 28C9EF3F 		.word	1072679208
 825 00f8 0000F03F 		.word	1072693248
 826 00fc F094FEF1 		.word	-234973968
 827 0100 906B7B3F 		.word	1065053072
 828              		.cfi_endproc
 829              	.LFE42:
 831 0104 AFF30080 		.section	.text.enu_of_ecef_point_d,"ax",%progbits
 832              		.align	1
 833              		.global	enu_of_ecef_point_d
 834              		.thumb
 835              		.thumb_func
 837              	enu_of_ecef_point_d:
 838              	.LFB43:
 115:math/pprz_geodetic_double.c **** 
 116:math/pprz_geodetic_double.c **** void enu_of_ecef_point_d(struct EnuCoor_d *enu, struct LtpDef_d *def, struct EcefCoor_d *ecef)
 117:math/pprz_geodetic_double.c **** {
 839              		.loc 1 117 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 8
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              	.LVL145:
 844 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 845              		.cfi_def_cfa_offset 48
 846              		.cfi_offset 0, -48
 847              		.cfi_offset 1, -44
 848              		.cfi_offset 2, -40
 849              		.cfi_offset 4, -36
 850              		.cfi_offset 5, -32
 851              		.cfi_offset 6, -28
 852              		.cfi_offset 7, -24
 853              		.cfi_offset 8, -20
 854              		.cfi_offset 9, -16
 855              		.cfi_offset 10, -12
 856              		.cfi_offset 11, -8
 857              		.cfi_offset 14, -4
 858              		.loc 1 117 0
 859 0004 0E46     		mov	r6, r1
 860 0006 0746     		mov	r7, r0
 861 0008 1446     		mov	r4, r2
 118:math/pprz_geodetic_double.c ****   struct EcefCoor_d delta;
 119:math/pprz_geodetic_double.c ****   VECT3_DIFF(delta, *ecef, def->ecef);
 862              		.loc 1 119 0
 863 000a D2E90001 		ldrd	r0, [r2]
 864              	.LVL146:
 865 000e D6E90023 		ldrd	r2, [r6]
 866              	.LVL147:
 867 0012 FFF7FEFF 		bl	__aeabi_dsub
 868              	.LVL148:
 869 0016 D6E90223 		ldrd	r2, [r6, #8]
 870 001a 8046     		mov	r8, r0
 871 001c 8946     		mov	r9, r1
 872              	.LVL149:
 873 001e D4E90201 		ldrd	r0, [r4, #8]
 874 0022 FFF7FEFF 		bl	__aeabi_dsub
 875              	.LVL150:
 876 0026 D6E90423 		ldrd	r2, [r6, #16]
 877 002a 8246     		mov	r10, r0
 878 002c 8B46     		mov	fp, r1
 879              	.LVL151:
 880 002e D4E90401 		ldrd	r0, [r4, #16]
 881 0032 FFF7FEFF 		bl	__aeabi_dsub
 882              	.LVL152:
 120:math/pprz_geodetic_double.c ****   MAT33_VECT3_MUL(*enu, def->ltp_of_ecef, delta);
 883              		.loc 1 120 0
 884 0036 D6E90C23 		ldrd	r2, [r6, #48]
 119:math/pprz_geodetic_double.c ****   VECT3_DIFF(delta, *ecef, def->ecef);
 885              		.loc 1 119 0
 886 003a CDE90001 		strd	r0, [sp]
 887              	.LVL153:
 888              		.loc 1 120 0
 889 003e 4046     		mov	r0, r8
 890              	.LVL154:
 891 0040 4946     		mov	r1, r9
 892 0042 FFF7FEFF 		bl	__aeabi_dmul
 893              	.LVL155:
 894 0046 D6E90E23 		ldrd	r2, [r6, #56]
 895 004a 0446     		mov	r4, r0
 896              	.LVL156:
 897 004c 0D46     		mov	r5, r1
 898 004e 5046     		mov	r0, r10
 899 0050 5946     		mov	r1, fp
 900 0052 FFF7FEFF 		bl	__aeabi_dmul
 901              	.LVL157:
 902 0056 0246     		mov	r2, r0
 903 0058 0B46     		mov	r3, r1
 904 005a 2046     		mov	r0, r4
 905 005c 2946     		mov	r1, r5
 906 005e FFF7FEFF 		bl	__aeabi_dadd
 907              	.LVL158:
 908 0062 D6E91023 		ldrd	r2, [r6, #64]
 909 0066 0446     		mov	r4, r0
 910 0068 0D46     		mov	r5, r1
 911 006a DDE90001 		ldrd	r0, [sp]
 912 006e FFF7FEFF 		bl	__aeabi_dmul
 913              	.LVL159:
 914 0072 0246     		mov	r2, r0
 915 0074 0B46     		mov	r3, r1
 916 0076 2046     		mov	r0, r4
 917 0078 2946     		mov	r1, r5
 918 007a FFF7FEFF 		bl	__aeabi_dadd
 919              	.LVL160:
 920 007e D6E91223 		ldrd	r2, [r6, #72]
 921 0082 C7E90001 		strd	r0, [r7]
 922 0086 4046     		mov	r0, r8
 923 0088 4946     		mov	r1, r9
 924 008a FFF7FEFF 		bl	__aeabi_dmul
 925              	.LVL161:
 926 008e D6E91423 		ldrd	r2, [r6, #80]
 927 0092 0446     		mov	r4, r0
 928 0094 0D46     		mov	r5, r1
 929 0096 5046     		mov	r0, r10
 930 0098 5946     		mov	r1, fp
 931 009a FFF7FEFF 		bl	__aeabi_dmul
 932              	.LVL162:
 933 009e 0246     		mov	r2, r0
 934 00a0 0B46     		mov	r3, r1
 935 00a2 2046     		mov	r0, r4
 936 00a4 2946     		mov	r1, r5
 937 00a6 FFF7FEFF 		bl	__aeabi_dadd
 938              	.LVL163:
 939 00aa D6E91623 		ldrd	r2, [r6, #88]
 940 00ae 0446     		mov	r4, r0
 941 00b0 0D46     		mov	r5, r1
 942 00b2 DDE90001 		ldrd	r0, [sp]
 943 00b6 FFF7FEFF 		bl	__aeabi_dmul
 944              	.LVL164:
 945 00ba 0246     		mov	r2, r0
 946 00bc 0B46     		mov	r3, r1
 947 00be 2046     		mov	r0, r4
 948 00c0 2946     		mov	r1, r5
 949 00c2 FFF7FEFF 		bl	__aeabi_dadd
 950              	.LVL165:
 951 00c6 D6E91823 		ldrd	r2, [r6, #96]
 952 00ca C7E90201 		strd	r0, [r7, #8]
 953 00ce 4046     		mov	r0, r8
 954 00d0 4946     		mov	r1, r9
 955 00d2 FFF7FEFF 		bl	__aeabi_dmul
 956              	.LVL166:
 957 00d6 D6E91A23 		ldrd	r2, [r6, #104]
 958 00da 0446     		mov	r4, r0
 959 00dc 0D46     		mov	r5, r1
 960 00de 5046     		mov	r0, r10
 961 00e0 5946     		mov	r1, fp
 962 00e2 FFF7FEFF 		bl	__aeabi_dmul
 963              	.LVL167:
 964 00e6 0246     		mov	r2, r0
 965 00e8 0B46     		mov	r3, r1
 966 00ea 2046     		mov	r0, r4
 967 00ec 2946     		mov	r1, r5
 968 00ee FFF7FEFF 		bl	__aeabi_dadd
 969              	.LVL168:
 970 00f2 D6E91C23 		ldrd	r2, [r6, #112]
 971 00f6 0446     		mov	r4, r0
 972 00f8 0D46     		mov	r5, r1
 973 00fa DDE90001 		ldrd	r0, [sp]
 974 00fe FFF7FEFF 		bl	__aeabi_dmul
 975              	.LVL169:
 976 0102 0246     		mov	r2, r0
 977 0104 0B46     		mov	r3, r1
 978 0106 2046     		mov	r0, r4
 979 0108 2946     		mov	r1, r5
 980 010a FFF7FEFF 		bl	__aeabi_dadd
 981              	.LVL170:
 982 010e C7E90401 		strd	r0, [r7, #16]
 121:math/pprz_geodetic_double.c **** }
 983              		.loc 1 121 0
 984 0112 03B0     		add	sp, sp, #12
 985              	.LVL171:
 986              		@ sp needed
 987 0114 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 988              		.cfi_endproc
 989              	.LFE43:
 991              		.section	.text.ned_of_ecef_point_d,"ax",%progbits
 992              		.align	1
 993              		.global	ned_of_ecef_point_d
 994              		.thumb
 995              		.thumb_func
 997              	ned_of_ecef_point_d:
 998              	.LFB44:
 122:math/pprz_geodetic_double.c **** 
 123:math/pprz_geodetic_double.c **** void ned_of_ecef_point_d(struct NedCoor_d *ned, struct LtpDef_d *def, struct EcefCoor_d *ecef)
 124:math/pprz_geodetic_double.c **** {
 999              		.loc 1 124 0
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 24
 1002              		@ frame_needed = 0, uses_anonymous_args = 0
 1003              	.LVL172:
 1004 0000 10B5     		push	{r4, lr}
 1005              		.cfi_def_cfa_offset 8
 1006              		.cfi_offset 4, -8
 1007              		.cfi_offset 14, -4
 1008 0002 86B0     		sub	sp, sp, #24
 1009              		.cfi_def_cfa_offset 32
 1010              		.loc 1 124 0
 1011 0004 0446     		mov	r4, r0
 125:math/pprz_geodetic_double.c ****   struct EnuCoor_d enu;
 126:math/pprz_geodetic_double.c ****   enu_of_ecef_point_d(&enu, def, ecef);
 1012              		.loc 1 126 0
 1013 0006 6846     		mov	r0, sp
 1014              	.LVL173:
 1015 0008 FFF7FEFF 		bl	enu_of_ecef_point_d
 1016              	.LVL174:
 127:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(*ned, enu);
 1017              		.loc 1 127 0
 1018 000c DDE90223 		ldrd	r2, [sp, #8]
 1019 0010 C4E90023 		strd	r2, [r4]
 1020 0014 DDE90023 		ldrd	r2, [sp]
 1021 0018 C4E90223 		strd	r2, [r4, #8]
 1022 001c 049B     		ldr	r3, [sp, #16]
 1023 001e 2361     		str	r3, [r4, #16]
 1024 0020 059B     		ldr	r3, [sp, #20]
 1025 0022 03F10043 		add	r3, r3, #-2147483648
 1026 0026 6361     		str	r3, [r4, #20]
 128:math/pprz_geodetic_double.c **** }
 1027              		.loc 1 128 0
 1028 0028 06B0     		add	sp, sp, #24
 1029              		@ sp needed
 1030 002a 10BD     		pop	{r4, pc}
 1031              		.cfi_endproc
 1032              	.LFE44:
 1034              		.section	.text.enu_of_ecef_vect_d,"ax",%progbits
 1035              		.align	1
 1036              		.global	enu_of_ecef_vect_d
 1037              		.thumb
 1038              		.thumb_func
 1040              	enu_of_ecef_vect_d:
 1041              	.LFB45:
 129:math/pprz_geodetic_double.c **** 
 130:math/pprz_geodetic_double.c **** void enu_of_ecef_vect_d(struct EnuCoor_d *enu, struct LtpDef_d *def, struct EcefCoor_d *ecef)
 131:math/pprz_geodetic_double.c **** {
 1042              		.loc 1 131 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 8
 1045              		@ frame_needed = 0, uses_anonymous_args = 0
 1046              	.LVL175:
 1047 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1048              		.cfi_def_cfa_offset 48
 1049              		.cfi_offset 0, -48
 1050              		.cfi_offset 1, -44
 1051              		.cfi_offset 2, -40
 1052              		.cfi_offset 4, -36
 1053              		.cfi_offset 5, -32
 1054              		.cfi_offset 6, -28
 1055              		.cfi_offset 7, -24
 1056              		.cfi_offset 8, -20
 1057              		.cfi_offset 9, -16
 1058              		.cfi_offset 10, -12
 1059              		.cfi_offset 11, -8
 1060              		.cfi_offset 14, -4
 132:math/pprz_geodetic_double.c ****   MAT33_VECT3_MUL(*enu, def->ltp_of_ecef, *ecef);
 1061              		.loc 1 132 0
 1062 0004 D2E90089 		ldrd	r8, [r2]
 1063 0008 92ED047B 		fldd	d7, [r2, #16]
 131:math/pprz_geodetic_double.c **** {
 1064              		.loc 1 131 0
 1065 000c 0E46     		mov	r6, r1
 1066              		.loc 1 132 0
 1067 000e D2E902AB 		ldrd	r10, [r2, #8]
 131:math/pprz_geodetic_double.c **** {
 1068              		.loc 1 131 0
 1069 0012 0746     		mov	r7, r0
 1070              		.loc 1 132 0
 1071 0014 D6E90C23 		ldrd	r2, [r6, #48]
 1072              	.LVL176:
 1073 0018 4046     		mov	r0, r8
 1074              	.LVL177:
 1075 001a 4946     		mov	r1, r9
 1076              	.LVL178:
 1077 001c 8DED007B 		fstd	d7, [sp]
 1078 0020 FFF7FEFF 		bl	__aeabi_dmul
 1079              	.LVL179:
 1080 0024 D6E90E23 		ldrd	r2, [r6, #56]
 1081 0028 0446     		mov	r4, r0
 1082 002a 0D46     		mov	r5, r1
 1083 002c 5046     		mov	r0, r10
 1084 002e 5946     		mov	r1, fp
 1085 0030 FFF7FEFF 		bl	__aeabi_dmul
 1086              	.LVL180:
 1087 0034 0246     		mov	r2, r0
 1088 0036 0B46     		mov	r3, r1
 1089 0038 2046     		mov	r0, r4
 1090 003a 2946     		mov	r1, r5
 1091 003c FFF7FEFF 		bl	__aeabi_dadd
 1092              	.LVL181:
 1093 0040 D6E91023 		ldrd	r2, [r6, #64]
 1094 0044 0446     		mov	r4, r0
 1095 0046 0D46     		mov	r5, r1
 1096 0048 DDE90001 		ldrd	r0, [sp]
 1097 004c FFF7FEFF 		bl	__aeabi_dmul
 1098              	.LVL182:
 1099 0050 0246     		mov	r2, r0
 1100 0052 0B46     		mov	r3, r1
 1101 0054 2046     		mov	r0, r4
 1102 0056 2946     		mov	r1, r5
 1103 0058 FFF7FEFF 		bl	__aeabi_dadd
 1104              	.LVL183:
 1105 005c D6E91223 		ldrd	r2, [r6, #72]
 1106 0060 C7E90001 		strd	r0, [r7]
 1107 0064 4046     		mov	r0, r8
 1108 0066 4946     		mov	r1, r9
 1109 0068 FFF7FEFF 		bl	__aeabi_dmul
 1110              	.LVL184:
 1111 006c D6E91423 		ldrd	r2, [r6, #80]
 1112 0070 0446     		mov	r4, r0
 1113 0072 0D46     		mov	r5, r1
 1114 0074 5046     		mov	r0, r10
 1115 0076 5946     		mov	r1, fp
 1116 0078 FFF7FEFF 		bl	__aeabi_dmul
 1117              	.LVL185:
 1118 007c 0246     		mov	r2, r0
 1119 007e 0B46     		mov	r3, r1
 1120 0080 2046     		mov	r0, r4
 1121 0082 2946     		mov	r1, r5
 1122 0084 FFF7FEFF 		bl	__aeabi_dadd
 1123              	.LVL186:
 1124 0088 D6E91623 		ldrd	r2, [r6, #88]
 1125 008c 0446     		mov	r4, r0
 1126 008e 0D46     		mov	r5, r1
 1127 0090 DDE90001 		ldrd	r0, [sp]
 1128 0094 FFF7FEFF 		bl	__aeabi_dmul
 1129              	.LVL187:
 1130 0098 0246     		mov	r2, r0
 1131 009a 0B46     		mov	r3, r1
 1132 009c 2046     		mov	r0, r4
 1133 009e 2946     		mov	r1, r5
 1134 00a0 FFF7FEFF 		bl	__aeabi_dadd
 1135              	.LVL188:
 1136 00a4 D6E91823 		ldrd	r2, [r6, #96]
 1137 00a8 C7E90201 		strd	r0, [r7, #8]
 1138 00ac 4046     		mov	r0, r8
 1139 00ae 4946     		mov	r1, r9
 1140 00b0 FFF7FEFF 		bl	__aeabi_dmul
 1141              	.LVL189:
 1142 00b4 D6E91A23 		ldrd	r2, [r6, #104]
 1143 00b8 0446     		mov	r4, r0
 1144 00ba 0D46     		mov	r5, r1
 1145 00bc 5046     		mov	r0, r10
 1146 00be 5946     		mov	r1, fp
 1147 00c0 FFF7FEFF 		bl	__aeabi_dmul
 1148              	.LVL190:
 1149 00c4 0246     		mov	r2, r0
 1150 00c6 0B46     		mov	r3, r1
 1151 00c8 2046     		mov	r0, r4
 1152 00ca 2946     		mov	r1, r5
 1153 00cc FFF7FEFF 		bl	__aeabi_dadd
 1154              	.LVL191:
 1155 00d0 D6E91C23 		ldrd	r2, [r6, #112]
 1156 00d4 0446     		mov	r4, r0
 1157 00d6 0D46     		mov	r5, r1
 1158 00d8 DDE90001 		ldrd	r0, [sp]
 1159 00dc FFF7FEFF 		bl	__aeabi_dmul
 1160              	.LVL192:
 1161 00e0 0246     		mov	r2, r0
 1162 00e2 0B46     		mov	r3, r1
 1163 00e4 2046     		mov	r0, r4
 1164 00e6 2946     		mov	r1, r5
 1165 00e8 FFF7FEFF 		bl	__aeabi_dadd
 1166              	.LVL193:
 1167 00ec C7E90401 		strd	r0, [r7, #16]
 133:math/pprz_geodetic_double.c **** }
 1168              		.loc 1 133 0
 1169 00f0 03B0     		add	sp, sp, #12
 1170              		@ sp needed
 1171 00f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1172              		.cfi_endproc
 1173              	.LFE45:
 1175              		.section	.text.ned_of_ecef_vect_d,"ax",%progbits
 1176              		.align	1
 1177              		.global	ned_of_ecef_vect_d
 1178              		.thumb
 1179              		.thumb_func
 1181              	ned_of_ecef_vect_d:
 1182              	.LFB46:
 134:math/pprz_geodetic_double.c **** 
 135:math/pprz_geodetic_double.c **** void ned_of_ecef_vect_d(struct NedCoor_d *ned, struct LtpDef_d *def, struct EcefCoor_d *ecef)
 136:math/pprz_geodetic_double.c **** {
 1183              		.loc 1 136 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 24
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              	.LVL194:
 1188 0000 10B5     		push	{r4, lr}
 1189              		.cfi_def_cfa_offset 8
 1190              		.cfi_offset 4, -8
 1191              		.cfi_offset 14, -4
 1192 0002 86B0     		sub	sp, sp, #24
 1193              		.cfi_def_cfa_offset 32
 1194              		.loc 1 136 0
 1195 0004 0446     		mov	r4, r0
 137:math/pprz_geodetic_double.c ****   struct EnuCoor_d enu;
 138:math/pprz_geodetic_double.c ****   enu_of_ecef_vect_d(&enu, def, ecef);
 1196              		.loc 1 138 0
 1197 0006 6846     		mov	r0, sp
 1198              	.LVL195:
 1199 0008 FFF7FEFF 		bl	enu_of_ecef_vect_d
 1200              	.LVL196:
 139:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(*ned, enu);
 1201              		.loc 1 139 0
 1202 000c DDE90223 		ldrd	r2, [sp, #8]
 1203 0010 C4E90023 		strd	r2, [r4]
 1204 0014 DDE90023 		ldrd	r2, [sp]
 1205 0018 C4E90223 		strd	r2, [r4, #8]
 1206 001c 049B     		ldr	r3, [sp, #16]
 1207 001e 2361     		str	r3, [r4, #16]
 1208 0020 059B     		ldr	r3, [sp, #20]
 1209 0022 03F10043 		add	r3, r3, #-2147483648
 1210 0026 6361     		str	r3, [r4, #20]
 140:math/pprz_geodetic_double.c **** }
 1211              		.loc 1 140 0
 1212 0028 06B0     		add	sp, sp, #24
 1213              		@ sp needed
 1214 002a 10BD     		pop	{r4, pc}
 1215              		.cfi_endproc
 1216              	.LFE46:
 1218              		.section	.text.ecef_of_enu_point_d,"ax",%progbits
 1219              		.align	1
 1220              		.global	ecef_of_enu_point_d
 1221              		.thumb
 1222              		.thumb_func
 1224              	ecef_of_enu_point_d:
 1225              	.LFB47:
 141:math/pprz_geodetic_double.c **** 
 142:math/pprz_geodetic_double.c **** 
 143:math/pprz_geodetic_double.c **** 
 144:math/pprz_geodetic_double.c **** void ecef_of_enu_point_d(struct EcefCoor_d *ecef, struct LtpDef_d *def, struct EnuCoor_d *enu)
 145:math/pprz_geodetic_double.c **** {
 1226              		.loc 1 145 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 16
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              	.LVL197:
 1231 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1232              		.cfi_def_cfa_offset 36
 1233              		.cfi_offset 4, -36
 1234              		.cfi_offset 5, -32
 1235              		.cfi_offset 6, -28
 1236              		.cfi_offset 7, -24
 1237              		.cfi_offset 8, -20
 1238              		.cfi_offset 9, -16
 1239              		.cfi_offset 10, -12
 1240              		.cfi_offset 11, -8
 1241              		.cfi_offset 14, -4
 146:math/pprz_geodetic_double.c ****   MAT33_VECT3_TRANSP_MUL(*ecef, def->ltp_of_ecef, *enu);
 1242              		.loc 1 146 0
 1243 0004 D2E90067 		ldrd	r6, [r2]
 1244 0008 92ED047B 		fldd	d7, [r2, #16]
 145:math/pprz_geodetic_double.c **** {
 1245              		.loc 1 145 0
 1246 000c 8846     		mov	r8, r1
 1247 000e 85B0     		sub	sp, sp, #20
 1248              		.cfi_def_cfa_offset 56
 1249              		.loc 1 146 0
 1250 0010 D2E902AB 		ldrd	r10, [r2, #8]
 145:math/pprz_geodetic_double.c **** {
 1251              		.loc 1 145 0
 1252 0014 8146     		mov	r9, r0
 1253              		.loc 1 146 0
 1254 0016 D8E90C23 		ldrd	r2, [r8, #48]
 1255              	.LVL198:
 1256 001a 3046     		mov	r0, r6
 1257              	.LVL199:
 1258 001c 3946     		mov	r1, r7
 1259              	.LVL200:
 1260 001e 8DED007B 		fstd	d7, [sp]
 1261 0022 FFF7FEFF 		bl	__aeabi_dmul
 1262              	.LVL201:
 1263 0026 D8E91223 		ldrd	r2, [r8, #72]
 1264 002a 0446     		mov	r4, r0
 1265 002c 0D46     		mov	r5, r1
 1266 002e 5046     		mov	r0, r10
 1267 0030 5946     		mov	r1, fp
 1268 0032 FFF7FEFF 		bl	__aeabi_dmul
 1269              	.LVL202:
 1270 0036 0246     		mov	r2, r0
 1271 0038 0B46     		mov	r3, r1
 1272 003a 2046     		mov	r0, r4
 1273 003c 2946     		mov	r1, r5
 1274 003e FFF7FEFF 		bl	__aeabi_dadd
 1275              	.LVL203:
 1276 0042 D8E91823 		ldrd	r2, [r8, #96]
 1277 0046 0446     		mov	r4, r0
 1278 0048 0D46     		mov	r5, r1
 1279 004a DDE90001 		ldrd	r0, [sp]
 1280 004e FFF7FEFF 		bl	__aeabi_dmul
 1281              	.LVL204:
 1282 0052 0246     		mov	r2, r0
 1283 0054 0B46     		mov	r3, r1
 1284 0056 2046     		mov	r0, r4
 1285 0058 2946     		mov	r1, r5
 1286 005a FFF7FEFF 		bl	__aeabi_dadd
 1287              	.LVL205:
 1288 005e D8E90E23 		ldrd	r2, [r8, #56]
 1289 0062 CDE90201 		strd	r0, [sp, #8]
 1290 0066 C9E90001 		strd	r0, [r9]
 1291 006a 3046     		mov	r0, r6
 1292 006c 3946     		mov	r1, r7
 1293 006e FFF7FEFF 		bl	__aeabi_dmul
 1294              	.LVL206:
 1295 0072 D8E91423 		ldrd	r2, [r8, #80]
 1296 0076 0446     		mov	r4, r0
 1297 0078 0D46     		mov	r5, r1
 1298 007a 5046     		mov	r0, r10
 1299 007c 5946     		mov	r1, fp
 1300 007e FFF7FEFF 		bl	__aeabi_dmul
 1301              	.LVL207:
 1302 0082 0246     		mov	r2, r0
 1303 0084 0B46     		mov	r3, r1
 1304 0086 2046     		mov	r0, r4
 1305 0088 2946     		mov	r1, r5
 1306 008a FFF7FEFF 		bl	__aeabi_dadd
 1307              	.LVL208:
 1308 008e D8E91A23 		ldrd	r2, [r8, #104]
 1309 0092 0446     		mov	r4, r0
 1310 0094 0D46     		mov	r5, r1
 1311 0096 DDE90001 		ldrd	r0, [sp]
 1312 009a FFF7FEFF 		bl	__aeabi_dmul
 1313              	.LVL209:
 1314 009e 0246     		mov	r2, r0
 1315 00a0 0B46     		mov	r3, r1
 1316 00a2 2046     		mov	r0, r4
 1317 00a4 2946     		mov	r1, r5
 1318 00a6 FFF7FEFF 		bl	__aeabi_dadd
 1319              	.LVL210:
 1320 00aa 0446     		mov	r4, r0
 1321 00ac 0D46     		mov	r5, r1
 1322 00ae D8E91023 		ldrd	r2, [r8, #64]
 1323 00b2 C9E90245 		strd	r4, [r9, #8]
 1324 00b6 3046     		mov	r0, r6
 1325 00b8 3946     		mov	r1, r7
 1326 00ba FFF7FEFF 		bl	__aeabi_dmul
 1327              	.LVL211:
 1328 00be D8E91623 		ldrd	r2, [r8, #88]
 1329 00c2 0646     		mov	r6, r0
 1330 00c4 0F46     		mov	r7, r1
 1331 00c6 5046     		mov	r0, r10
 1332 00c8 5946     		mov	r1, fp
 1333 00ca FFF7FEFF 		bl	__aeabi_dmul
 1334              	.LVL212:
 1335 00ce 0246     		mov	r2, r0
 1336 00d0 0B46     		mov	r3, r1
 1337 00d2 3046     		mov	r0, r6
 1338 00d4 3946     		mov	r1, r7
 1339 00d6 FFF7FEFF 		bl	__aeabi_dadd
 1340              	.LVL213:
 1341 00da D8E91C23 		ldrd	r2, [r8, #112]
 1342 00de 0646     		mov	r6, r0
 1343 00e0 0F46     		mov	r7, r1
 1344 00e2 DDE90001 		ldrd	r0, [sp]
 1345 00e6 FFF7FEFF 		bl	__aeabi_dmul
 1346              	.LVL214:
 1347 00ea 0246     		mov	r2, r0
 1348 00ec 0B46     		mov	r3, r1
 1349 00ee 3046     		mov	r0, r6
 1350 00f0 3946     		mov	r1, r7
 1351 00f2 FFF7FEFF 		bl	__aeabi_dadd
 1352              	.LVL215:
 1353 00f6 0646     		mov	r6, r0
 1354 00f8 0F46     		mov	r7, r1
 147:math/pprz_geodetic_double.c ****   VECT3_ADD(*ecef, def->ecef);
 1355              		.loc 1 147 0
 1356 00fa D8E90023 		ldrd	r2, [r8]
 1357 00fe DDE90201 		ldrd	r0, [sp, #8]
 146:math/pprz_geodetic_double.c ****   MAT33_VECT3_TRANSP_MUL(*ecef, def->ltp_of_ecef, *enu);
 1358              		.loc 1 146 0
 1359 0102 C9E90467 		strd	r6, [r9, #16]
 1360              		.loc 1 147 0
 1361 0106 FFF7FEFF 		bl	__aeabi_dadd
 1362              	.LVL216:
 1363 010a C9E90001 		strd	r0, [r9]
 1364 010e D8E90223 		ldrd	r2, [r8, #8]
 1365 0112 2046     		mov	r0, r4
 1366 0114 2946     		mov	r1, r5
 1367 0116 FFF7FEFF 		bl	__aeabi_dadd
 1368              	.LVL217:
 1369 011a D8E90423 		ldrd	r2, [r8, #16]
 1370 011e C9E90201 		strd	r0, [r9, #8]
 1371 0122 3046     		mov	r0, r6
 1372 0124 3946     		mov	r1, r7
 1373 0126 FFF7FEFF 		bl	__aeabi_dadd
 1374              	.LVL218:
 1375 012a C9E90401 		strd	r0, [r9, #16]
 148:math/pprz_geodetic_double.c **** }
 1376              		.loc 1 148 0
 1377 012e 05B0     		add	sp, sp, #20
 1378              		@ sp needed
 1379 0130 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1380              		.cfi_endproc
 1381              	.LFE47:
 1383              		.section	.text.ecef_of_ned_point_d,"ax",%progbits
 1384              		.align	1
 1385              		.global	ecef_of_ned_point_d
 1386              		.thumb
 1387              		.thumb_func
 1389              	ecef_of_ned_point_d:
 1390              	.LFB48:
 149:math/pprz_geodetic_double.c **** 
 150:math/pprz_geodetic_double.c **** void ecef_of_ned_point_d(struct EcefCoor_d *ecef, struct LtpDef_d *def, struct NedCoor_d *ned)
 151:math/pprz_geodetic_double.c **** {
 1391              		.loc 1 151 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 24
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 1395              	.LVL219:
 1396 0000 30B5     		push	{r4, r5, lr}
 1397              		.cfi_def_cfa_offset 12
 1398              		.cfi_offset 4, -12
 1399              		.cfi_offset 5, -8
 1400              		.cfi_offset 14, -4
 152:math/pprz_geodetic_double.c ****   struct EnuCoor_d enu;
 153:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(enu, *ned);
 1401              		.loc 1 153 0
 1402 0002 D2E90245 		ldrd	r4, [r2, #8]
 151:math/pprz_geodetic_double.c **** {
 1403              		.loc 1 151 0
 1404 0006 87B0     		sub	sp, sp, #28
 1405              		.cfi_def_cfa_offset 40
 1406              		.loc 1 153 0
 1407 0008 1369     		ldr	r3, [r2, #16]
 1408 000a 0493     		str	r3, [sp, #16]
 1409 000c CDE90045 		strd	r4, [sp]
 1410 0010 5369     		ldr	r3, [r2, #20]
 1411 0012 D2E90045 		ldrd	r4, [r2]
 1412 0016 03F10043 		add	r3, r3, #-2147483648
 154:math/pprz_geodetic_double.c ****   ecef_of_enu_point_d(ecef, def, &enu);
 1413              		.loc 1 154 0
 1414 001a 6A46     		mov	r2, sp
 1415              	.LVL220:
 153:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(enu, *ned);
 1416              		.loc 1 153 0
 1417 001c CDE90245 		strd	r4, [sp, #8]
 1418 0020 0593     		str	r3, [sp, #20]
 1419              		.loc 1 154 0
 1420 0022 FFF7FEFF 		bl	ecef_of_enu_point_d
 1421              	.LVL221:
 155:math/pprz_geodetic_double.c **** }
 1422              		.loc 1 155 0
 1423 0026 07B0     		add	sp, sp, #28
 1424              		@ sp needed
 1425 0028 30BD     		pop	{r4, r5, pc}
 1426              		.cfi_endproc
 1427              	.LFE48:
 1429              		.section	.text.ecef_of_enu_vect_d,"ax",%progbits
 1430              		.align	1
 1431              		.global	ecef_of_enu_vect_d
 1432              		.thumb
 1433              		.thumb_func
 1435              	ecef_of_enu_vect_d:
 1436              	.LFB49:
 156:math/pprz_geodetic_double.c **** 
 157:math/pprz_geodetic_double.c **** void ecef_of_enu_vect_d(struct EcefCoor_d *ecef, struct LtpDef_d *def, struct EnuCoor_d *enu)
 158:math/pprz_geodetic_double.c **** {
 1437              		.loc 1 158 0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 8
 1440              		@ frame_needed = 0, uses_anonymous_args = 0
 1441              	.LVL222:
 1442 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1443              		.cfi_def_cfa_offset 48
 1444              		.cfi_offset 0, -48
 1445              		.cfi_offset 1, -44
 1446              		.cfi_offset 2, -40
 1447              		.cfi_offset 4, -36
 1448              		.cfi_offset 5, -32
 1449              		.cfi_offset 6, -28
 1450              		.cfi_offset 7, -24
 1451              		.cfi_offset 8, -20
 1452              		.cfi_offset 9, -16
 1453              		.cfi_offset 10, -12
 1454              		.cfi_offset 11, -8
 1455              		.cfi_offset 14, -4
 159:math/pprz_geodetic_double.c ****   MAT33_VECT3_TRANSP_MUL(*ecef, def->ltp_of_ecef, *enu);
 1456              		.loc 1 159 0
 1457 0004 D2E90089 		ldrd	r8, [r2]
 1458 0008 92ED047B 		fldd	d7, [r2, #16]
 158:math/pprz_geodetic_double.c **** {
 1459              		.loc 1 158 0
 1460 000c 0E46     		mov	r6, r1
 1461              		.loc 1 159 0
 1462 000e D2E902AB 		ldrd	r10, [r2, #8]
 158:math/pprz_geodetic_double.c **** {
 1463              		.loc 1 158 0
 1464 0012 0746     		mov	r7, r0
 1465              		.loc 1 159 0
 1466 0014 D6E90C23 		ldrd	r2, [r6, #48]
 1467              	.LVL223:
 1468 0018 4046     		mov	r0, r8
 1469              	.LVL224:
 1470 001a 4946     		mov	r1, r9
 1471              	.LVL225:
 1472 001c 8DED007B 		fstd	d7, [sp]
 1473 0020 FFF7FEFF 		bl	__aeabi_dmul
 1474              	.LVL226:
 1475 0024 D6E91223 		ldrd	r2, [r6, #72]
 1476 0028 0446     		mov	r4, r0
 1477 002a 0D46     		mov	r5, r1
 1478 002c 5046     		mov	r0, r10
 1479 002e 5946     		mov	r1, fp
 1480 0030 FFF7FEFF 		bl	__aeabi_dmul
 1481              	.LVL227:
 1482 0034 0246     		mov	r2, r0
 1483 0036 0B46     		mov	r3, r1
 1484 0038 2046     		mov	r0, r4
 1485 003a 2946     		mov	r1, r5
 1486 003c FFF7FEFF 		bl	__aeabi_dadd
 1487              	.LVL228:
 1488 0040 D6E91823 		ldrd	r2, [r6, #96]
 1489 0044 0446     		mov	r4, r0
 1490 0046 0D46     		mov	r5, r1
 1491 0048 DDE90001 		ldrd	r0, [sp]
 1492 004c FFF7FEFF 		bl	__aeabi_dmul
 1493              	.LVL229:
 1494 0050 0246     		mov	r2, r0
 1495 0052 0B46     		mov	r3, r1
 1496 0054 2046     		mov	r0, r4
 1497 0056 2946     		mov	r1, r5
 1498 0058 FFF7FEFF 		bl	__aeabi_dadd
 1499              	.LVL230:
 1500 005c D6E90E23 		ldrd	r2, [r6, #56]
 1501 0060 C7E90001 		strd	r0, [r7]
 1502 0064 4046     		mov	r0, r8
 1503 0066 4946     		mov	r1, r9
 1504 0068 FFF7FEFF 		bl	__aeabi_dmul
 1505              	.LVL231:
 1506 006c D6E91423 		ldrd	r2, [r6, #80]
 1507 0070 0446     		mov	r4, r0
 1508 0072 0D46     		mov	r5, r1
 1509 0074 5046     		mov	r0, r10
 1510 0076 5946     		mov	r1, fp
 1511 0078 FFF7FEFF 		bl	__aeabi_dmul
 1512              	.LVL232:
 1513 007c 0246     		mov	r2, r0
 1514 007e 0B46     		mov	r3, r1
 1515 0080 2046     		mov	r0, r4
 1516 0082 2946     		mov	r1, r5
 1517 0084 FFF7FEFF 		bl	__aeabi_dadd
 1518              	.LVL233:
 1519 0088 D6E91A23 		ldrd	r2, [r6, #104]
 1520 008c 0446     		mov	r4, r0
 1521 008e 0D46     		mov	r5, r1
 1522 0090 DDE90001 		ldrd	r0, [sp]
 1523 0094 FFF7FEFF 		bl	__aeabi_dmul
 1524              	.LVL234:
 1525 0098 0246     		mov	r2, r0
 1526 009a 0B46     		mov	r3, r1
 1527 009c 2046     		mov	r0, r4
 1528 009e 2946     		mov	r1, r5
 1529 00a0 FFF7FEFF 		bl	__aeabi_dadd
 1530              	.LVL235:
 1531 00a4 D6E91023 		ldrd	r2, [r6, #64]
 1532 00a8 C7E90201 		strd	r0, [r7, #8]
 1533 00ac 4046     		mov	r0, r8
 1534 00ae 4946     		mov	r1, r9
 1535 00b0 FFF7FEFF 		bl	__aeabi_dmul
 1536              	.LVL236:
 1537 00b4 D6E91623 		ldrd	r2, [r6, #88]
 1538 00b8 0446     		mov	r4, r0
 1539 00ba 0D46     		mov	r5, r1
 1540 00bc 5046     		mov	r0, r10
 1541 00be 5946     		mov	r1, fp
 1542 00c0 FFF7FEFF 		bl	__aeabi_dmul
 1543              	.LVL237:
 1544 00c4 0246     		mov	r2, r0
 1545 00c6 0B46     		mov	r3, r1
 1546 00c8 2046     		mov	r0, r4
 1547 00ca 2946     		mov	r1, r5
 1548 00cc FFF7FEFF 		bl	__aeabi_dadd
 1549              	.LVL238:
 1550 00d0 D6E91C23 		ldrd	r2, [r6, #112]
 1551 00d4 0446     		mov	r4, r0
 1552 00d6 0D46     		mov	r5, r1
 1553 00d8 DDE90001 		ldrd	r0, [sp]
 1554 00dc FFF7FEFF 		bl	__aeabi_dmul
 1555              	.LVL239:
 1556 00e0 0246     		mov	r2, r0
 1557 00e2 0B46     		mov	r3, r1
 1558 00e4 2046     		mov	r0, r4
 1559 00e6 2946     		mov	r1, r5
 1560 00e8 FFF7FEFF 		bl	__aeabi_dadd
 1561              	.LVL240:
 1562 00ec C7E90401 		strd	r0, [r7, #16]
 160:math/pprz_geodetic_double.c **** }
 1563              		.loc 1 160 0
 1564 00f0 03B0     		add	sp, sp, #12
 1565              		@ sp needed
 1566 00f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1567              		.cfi_endproc
 1568              	.LFE49:
 1570              		.section	.text.ecef_of_ned_vect_d,"ax",%progbits
 1571              		.align	1
 1572              		.global	ecef_of_ned_vect_d
 1573              		.thumb
 1574              		.thumb_func
 1576              	ecef_of_ned_vect_d:
 1577              	.LFB50:
 161:math/pprz_geodetic_double.c **** 
 162:math/pprz_geodetic_double.c **** void ecef_of_ned_vect_d(struct EcefCoor_d *ecef, struct LtpDef_d *def, struct NedCoor_d *ned)
 163:math/pprz_geodetic_double.c **** {
 1578              		.loc 1 163 0
 1579              		.cfi_startproc
 1580              		@ args = 0, pretend = 0, frame = 24
 1581              		@ frame_needed = 0, uses_anonymous_args = 0
 1582              	.LVL241:
 1583 0000 30B5     		push	{r4, r5, lr}
 1584              		.cfi_def_cfa_offset 12
 1585              		.cfi_offset 4, -12
 1586              		.cfi_offset 5, -8
 1587              		.cfi_offset 14, -4
 164:math/pprz_geodetic_double.c ****   struct EnuCoor_d enu;
 165:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(enu, *ned);
 1588              		.loc 1 165 0
 1589 0002 D2E90245 		ldrd	r4, [r2, #8]
 163:math/pprz_geodetic_double.c **** {
 1590              		.loc 1 163 0
 1591 0006 87B0     		sub	sp, sp, #28
 1592              		.cfi_def_cfa_offset 40
 1593              		.loc 1 165 0
 1594 0008 1369     		ldr	r3, [r2, #16]
 1595 000a 0493     		str	r3, [sp, #16]
 1596 000c CDE90045 		strd	r4, [sp]
 1597 0010 5369     		ldr	r3, [r2, #20]
 1598 0012 D2E90045 		ldrd	r4, [r2]
 1599 0016 03F10043 		add	r3, r3, #-2147483648
 166:math/pprz_geodetic_double.c ****   ecef_of_enu_vect_d(ecef, def, &enu);
 1600              		.loc 1 166 0
 1601 001a 6A46     		mov	r2, sp
 1602              	.LVL242:
 165:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(enu, *ned);
 1603              		.loc 1 165 0
 1604 001c CDE90245 		strd	r4, [sp, #8]
 1605 0020 0593     		str	r3, [sp, #20]
 1606              		.loc 1 166 0
 1607 0022 FFF7FEFF 		bl	ecef_of_enu_vect_d
 1608              	.LVL243:
 167:math/pprz_geodetic_double.c **** }
 1609              		.loc 1 167 0
 1610 0026 07B0     		add	sp, sp, #28
 1611              		@ sp needed
 1612 0028 30BD     		pop	{r4, r5, pc}
 1613              		.cfi_endproc
 1614              	.LFE50:
 1616              		.section	.text.enu_of_lla_point_d,"ax",%progbits
 1617              		.align	1
 1618              		.global	enu_of_lla_point_d
 1619              		.thumb
 1620              		.thumb_func
 1622              	enu_of_lla_point_d:
 1623              	.LFB51:
 168:math/pprz_geodetic_double.c **** 
 169:math/pprz_geodetic_double.c **** 
 170:math/pprz_geodetic_double.c **** void enu_of_lla_point_d(struct EnuCoor_d *enu, struct LtpDef_d *def, struct LlaCoor_d *lla)
 171:math/pprz_geodetic_double.c **** {
 1624              		.loc 1 171 0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 24
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              	.LVL244:
 1629 0000 30B5     		push	{r4, r5, lr}
 1630              		.cfi_def_cfa_offset 12
 1631              		.cfi_offset 4, -12
 1632              		.cfi_offset 5, -8
 1633              		.cfi_offset 14, -4
 1634 0002 87B0     		sub	sp, sp, #28
 1635              		.cfi_def_cfa_offset 40
 1636              		.loc 1 171 0
 1637 0004 0546     		mov	r5, r0
 1638 0006 0C46     		mov	r4, r1
 172:math/pprz_geodetic_double.c ****   struct EcefCoor_d ecef;
 173:math/pprz_geodetic_double.c ****   ecef_of_lla_d(&ecef, lla);
 1639              		.loc 1 173 0
 1640 0008 6846     		mov	r0, sp
 1641              	.LVL245:
 1642 000a 1146     		mov	r1, r2
 1643              	.LVL246:
 1644 000c FFF7FEFF 		bl	ecef_of_lla_d
 1645              	.LVL247:
 174:math/pprz_geodetic_double.c ****   enu_of_ecef_point_d(enu, def, &ecef);
 1646              		.loc 1 174 0
 1647 0010 2846     		mov	r0, r5
 1648 0012 2146     		mov	r1, r4
 1649 0014 6A46     		mov	r2, sp
 1650 0016 FFF7FEFF 		bl	enu_of_ecef_point_d
 1651              	.LVL248:
 175:math/pprz_geodetic_double.c **** }
 1652              		.loc 1 175 0
 1653 001a 07B0     		add	sp, sp, #28
 1654              		@ sp needed
 1655 001c 30BD     		pop	{r4, r5, pc}
 1656              		.cfi_endproc
 1657              	.LFE51:
 1659              		.section	.text.ned_of_lla_point_d,"ax",%progbits
 1660              		.align	1
 1661              		.global	ned_of_lla_point_d
 1662              		.thumb
 1663              		.thumb_func
 1665              	ned_of_lla_point_d:
 1666              	.LFB52:
 176:math/pprz_geodetic_double.c **** 
 177:math/pprz_geodetic_double.c **** void ned_of_lla_point_d(struct NedCoor_d *ned, struct LtpDef_d *def, struct LlaCoor_d *lla)
 178:math/pprz_geodetic_double.c **** {
 1667              		.loc 1 178 0
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 24
 1670              		@ frame_needed = 0, uses_anonymous_args = 0
 1671              	.LVL249:
 1672 0000 30B5     		push	{r4, r5, lr}
 1673              		.cfi_def_cfa_offset 12
 1674              		.cfi_offset 4, -12
 1675              		.cfi_offset 5, -8
 1676              		.cfi_offset 14, -4
 1677 0002 87B0     		sub	sp, sp, #28
 1678              		.cfi_def_cfa_offset 40
 1679              		.loc 1 178 0
 1680 0004 0546     		mov	r5, r0
 1681 0006 0C46     		mov	r4, r1
 179:math/pprz_geodetic_double.c ****   struct EcefCoor_d ecef;
 180:math/pprz_geodetic_double.c ****   ecef_of_lla_d(&ecef, lla);
 1682              		.loc 1 180 0
 1683 0008 6846     		mov	r0, sp
 1684              	.LVL250:
 1685 000a 1146     		mov	r1, r2
 1686              	.LVL251:
 1687 000c FFF7FEFF 		bl	ecef_of_lla_d
 1688              	.LVL252:
 181:math/pprz_geodetic_double.c ****   ned_of_ecef_point_d(ned, def, &ecef);
 1689              		.loc 1 181 0
 1690 0010 2846     		mov	r0, r5
 1691 0012 2146     		mov	r1, r4
 1692 0014 6A46     		mov	r2, sp
 1693 0016 FFF7FEFF 		bl	ned_of_ecef_point_d
 1694              	.LVL253:
 182:math/pprz_geodetic_double.c **** }
 1695              		.loc 1 182 0
 1696 001a 07B0     		add	sp, sp, #28
 1697              		@ sp needed
 1698 001c 30BD     		pop	{r4, r5, pc}
 1699              		.cfi_endproc
 1700              	.LFE52:
 1702              		.section	.text.gc_of_gd_lat_d,"ax",%progbits
 1703              		.align	1
 1704              		.global	gc_of_gd_lat_d
 1705              		.thumb
 1706              		.thumb_func
 1708              	gc_of_gd_lat_d:
 1709              	.LFB53:
 183:math/pprz_geodetic_double.c **** 
 184:math/pprz_geodetic_double.c **** 
 185:math/pprz_geodetic_double.c **** /* geocentric latitude of geodetic latitude */
 186:math/pprz_geodetic_double.c **** double gc_of_gd_lat_d(double gd_lat, double hmsl)
 187:math/pprz_geodetic_double.c **** {
 1710              		.loc 1 187 0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 16
 1713              		@ frame_needed = 0, uses_anonymous_args = 0
 1714              	.LVL254:
 1715 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1716              		.cfi_def_cfa_offset 36
 1717              		.cfi_offset 4, -36
 1718              		.cfi_offset 5, -32
 1719              		.cfi_offset 6, -28
 1720              		.cfi_offset 7, -24
 1721              		.cfi_offset 8, -20
 1722              		.cfi_offset 9, -16
 1723              		.cfi_offset 10, -12
 1724              		.cfi_offset 11, -8
 1725              		.cfi_offset 14, -4
 1726 0004 85B0     		sub	sp, sp, #20
 1727              		.cfi_def_cfa_offset 56
 1728              		.loc 1 187 0
 1729 0006 1446     		mov	r4, r2
 1730 0008 1D46     		mov	r5, r3
 1731 000a 8046     		mov	r8, r0
 1732 000c 8946     		mov	r9, r1
 188:math/pprz_geodetic_double.c ****   const double a = 6378137.0;           /* earth semimajor axis in meters */
 189:math/pprz_geodetic_double.c ****   const double f = 1. / 298.257223563;  /* reciprocal flattening          */
 190:math/pprz_geodetic_double.c ****   const double c2 = (1. - f) * (1. - f);
 191:math/pprz_geodetic_double.c ****   /* geocentric latitude at the planet surface */
 192:math/pprz_geodetic_double.c ****   double ls = atan(c2 * tan(gd_lat));
 1733              		.loc 1 192 0
 1734 000e FFF7FEFF 		bl	tan
 1735              	.LVL255:
 1736 0012 2DA3     		adr	r3, .L19
 1737 0014 D3E90023 		ldrd	r2, [r3]
 1738 0018 FFF7FEFF 		bl	__aeabi_dmul
 1739              	.LVL256:
 1740 001c FFF7FEFF 		bl	atan
 1741              	.LVL257:
 1742 0020 0646     		mov	r6, r0
 1743 0022 0F46     		mov	r7, r1
 1744              	.LVL258:
 193:math/pprz_geodetic_double.c ****   return atan2(hmsl * sin(gd_lat) + a * sin(ls), hmsl * cos(gd_lat) + a * cos(ls));
 1745              		.loc 1 193 0
 1746 0024 4046     		mov	r0, r8
 1747 0026 4946     		mov	r1, r9
 1748 0028 FFF7FEFF 		bl	sin
 1749              	.LVL259:
 1750 002c 0246     		mov	r2, r0
 1751 002e 0B46     		mov	r3, r1
 1752 0030 3046     		mov	r0, r6
 1753 0032 3946     		mov	r1, r7
 1754 0034 0192     		str	r2, [sp, #4]
 1755 0036 0093     		str	r3, [sp]
 1756 0038 FFF7FEFF 		bl	sin
 1757              	.LVL260:
 1758 003c 8246     		mov	r10, r0
 1759 003e 8B46     		mov	fp, r1
 1760 0040 4046     		mov	r0, r8
 1761 0042 4946     		mov	r1, r9
 1762 0044 FFF7FEFF 		bl	cos
 1763              	.LVL261:
 1764 0048 CDE90201 		strd	r0, [sp, #8]
 1765 004c 3046     		mov	r0, r6
 1766 004e 3946     		mov	r1, r7
 1767 0050 FFF7FEFF 		bl	cos
 1768              	.LVL262:
 1769 0054 019A     		ldr	r2, [sp, #4]
 1770 0056 009B     		ldr	r3, [sp]
 1771 0058 8046     		mov	r8, r0
 1772 005a 8946     		mov	r9, r1
 1773 005c 2046     		mov	r0, r4
 1774 005e 2946     		mov	r1, r5
 1775 0060 FFF7FEFF 		bl	__aeabi_dmul
 1776              	.LVL263:
 1777 0064 1AA3     		adr	r3, .L19+8
 1778 0066 D3E90023 		ldrd	r2, [r3]
 1779 006a 0646     		mov	r6, r0
 1780              	.LVL264:
 1781 006c 0F46     		mov	r7, r1
 1782 006e 5046     		mov	r0, r10
 1783 0070 5946     		mov	r1, fp
 1784 0072 FFF7FEFF 		bl	__aeabi_dmul
 1785              	.LVL265:
 1786 0076 0246     		mov	r2, r0
 1787 0078 0B46     		mov	r3, r1
 1788 007a 3046     		mov	r0, r6
 1789 007c 3946     		mov	r1, r7
 1790 007e FFF7FEFF 		bl	__aeabi_dadd
 1791              	.LVL266:
 1792 0082 DDE90223 		ldrd	r2, [sp, #8]
 1793 0086 0646     		mov	r6, r0
 1794 0088 0F46     		mov	r7, r1
 1795 008a 2046     		mov	r0, r4
 1796 008c 2946     		mov	r1, r5
 1797 008e FFF7FEFF 		bl	__aeabi_dmul
 1798              	.LVL267:
 1799 0092 0FA3     		adr	r3, .L19+8
 1800 0094 D3E90023 		ldrd	r2, [r3]
 1801 0098 0446     		mov	r4, r0
 1802 009a 0D46     		mov	r5, r1
 1803 009c 4046     		mov	r0, r8
 1804 009e 4946     		mov	r1, r9
 1805 00a0 FFF7FEFF 		bl	__aeabi_dmul
 1806              	.LVL268:
 1807 00a4 0246     		mov	r2, r0
 1808 00a6 0B46     		mov	r3, r1
 1809 00a8 2046     		mov	r0, r4
 1810 00aa 2946     		mov	r1, r5
 1811 00ac FFF7FEFF 		bl	__aeabi_dadd
 1812              	.LVL269:
 1813 00b0 0246     		mov	r2, r0
 1814 00b2 0B46     		mov	r3, r1
 1815 00b4 3046     		mov	r0, r6
 1816 00b6 3946     		mov	r1, r7
 194:math/pprz_geodetic_double.c **** }
 1817              		.loc 1 194 0
 1818 00b8 05B0     		add	sp, sp, #20
 1819              		@ sp needed
 1820 00ba BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 193:math/pprz_geodetic_double.c ****   return atan2(hmsl * sin(gd_lat) + a * sin(ls), hmsl * cos(gd_lat) + a * cos(ls));
 1821              		.loc 1 193 0
 1822 00be FFF7FEBF 		b	atan2
 1823              	.LVL270:
 1824              	.L20:
 1825 00c2 00BFAFF3 		.align	3
 1825      0080
 1826              	.L19:
 1827 00c8 D6021CDE 		.word	-568589610
 1828 00cc 28C9EF3F 		.word	1072679208
 1829 00d0 00000040 		.word	1073741824
 1830 00d4 A6545841 		.word	1096307878
 1831              		.cfi_endproc
 1832              	.LFE53:
 1834              		.global	__aeabi_d2f
 1835              		.global	__aeabi_f2d
 1836              		.global	__aeabi_i2d
 1837              		.global	__aeabi_dcmpgt
 1838              		.section	.text.lla_of_utm_d,"ax",%progbits
 1839              		.align	1
 1840              		.global	lla_of_utm_d
 1841              		.thumb
 1842              		.thumb_func
 1844              	lla_of_utm_d:
 1845              	.LFB57:
 195:math/pprz_geodetic_double.c **** 
 196:math/pprz_geodetic_double.c **** 
 197:math/pprz_geodetic_double.c **** #include "math/pprz_geodetic_utm.h"
 198:math/pprz_geodetic_double.c **** 
 199:math/pprz_geodetic_double.c **** static inline double UNUSED isometric_latitude_d(double phi, double e)
 200:math/pprz_geodetic_double.c **** {
 201:math/pprz_geodetic_double.c ****   return log(tan(M_PI_4 + phi / 2.0)) - e / 2.0 * log((1.0 + e * sin(phi)) / (1.0 - e * sin(phi)));
 202:math/pprz_geodetic_double.c **** }
 203:math/pprz_geodetic_double.c **** 
 204:math/pprz_geodetic_double.c **** static inline double isometric_latitude_fast_d(double phi)
 205:math/pprz_geodetic_double.c **** {
 206:math/pprz_geodetic_double.c ****   return log(tan(M_PI_4 + phi / 2.0));
 207:math/pprz_geodetic_double.c **** }
 208:math/pprz_geodetic_double.c **** 
 209:math/pprz_geodetic_double.c **** static inline double inverse_isometric_latitude_d(double lat, double e, double epsilon)
 210:math/pprz_geodetic_double.c **** {
 211:math/pprz_geodetic_double.c ****   double exp_l = exp(lat);
 212:math/pprz_geodetic_double.c ****   double phi0 = 2 * atan(exp_l) - M_PI_2;
 213:math/pprz_geodetic_double.c ****   double phi_;
 214:math/pprz_geodetic_double.c ****   uint8_t max_iter = 3; /* To be sure to return */
 215:math/pprz_geodetic_double.c **** 
 216:math/pprz_geodetic_double.c ****   do {
 217:math/pprz_geodetic_double.c ****     phi_ = phi0;
 218:math/pprz_geodetic_double.c ****     double sin_phi = e * sin(phi_);
 219:math/pprz_geodetic_double.c ****     phi0 = 2 * atan(pow((1 + sin_phi) / (1. - sin_phi), e / 2.) * exp_l) - M_PI_2;
 220:math/pprz_geodetic_double.c ****     max_iter--;
 221:math/pprz_geodetic_double.c ****   } while (max_iter && fabs(phi_ - phi0) > epsilon);
 222:math/pprz_geodetic_double.c **** 
 223:math/pprz_geodetic_double.c ****   return phi0;
 224:math/pprz_geodetic_double.c **** }
 225:math/pprz_geodetic_double.c **** 
 226:math/pprz_geodetic_double.c **** #define CI(v) {         \
 227:math/pprz_geodetic_double.c ****     double tmp = v.x;       \
 228:math/pprz_geodetic_double.c ****     v.x = -v.y;         \
 229:math/pprz_geodetic_double.c ****     v.y = tmp;          \
 230:math/pprz_geodetic_double.c ****   }
 231:math/pprz_geodetic_double.c **** 
 232:math/pprz_geodetic_double.c **** #define CExp(v) {       \
 233:math/pprz_geodetic_double.c ****     double e = exp(v.x);      \
 234:math/pprz_geodetic_double.c ****     v.x = e*cosf(v.y);        \
 235:math/pprz_geodetic_double.c ****     v.y = e*sinf(v.y);        \
 236:math/pprz_geodetic_double.c ****   }
 237:math/pprz_geodetic_double.c **** 
 238:math/pprz_geodetic_double.c **** #define CSin(v) {       \
 239:math/pprz_geodetic_double.c ****     CI(v);          \
 240:math/pprz_geodetic_double.c ****     struct DoubleVect2 vstar = {-v.x, -v.y};  \
 241:math/pprz_geodetic_double.c ****     CExp(v);          \
 242:math/pprz_geodetic_double.c ****     CExp(vstar);        \
 243:math/pprz_geodetic_double.c ****     VECT2_SUB(v, vstar);      \
 244:math/pprz_geodetic_double.c ****     VECT2_SMUL(v, v, -0.5);     \
 245:math/pprz_geodetic_double.c ****     CI(v);          \
 246:math/pprz_geodetic_double.c ****   }
 247:math/pprz_geodetic_double.c **** 
 248:math/pprz_geodetic_double.c **** void lla_of_utm_d(struct LlaCoor_d *lla, struct UtmCoor_d *utm)
 249:math/pprz_geodetic_double.c **** {
 1846              		.loc 1 249 0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 48
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
 1850              	.LVL271:
 1851 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1852              		.cfi_def_cfa_offset 36
 1853              		.cfi_offset 4, -36
 1854              		.cfi_offset 5, -32
 1855              		.cfi_offset 6, -28
 1856              		.cfi_offset 7, -24
 1857              		.cfi_offset 8, -20
 1858              		.cfi_offset 9, -16
 1859              		.cfi_offset 10, -12
 1860              		.cfi_offset 11, -8
 1861              		.cfi_offset 14, -4
 1862 0004 8DB0     		sub	sp, sp, #52
 1863              		.cfi_def_cfa_offset 88
 1864              		.loc 1 249 0
 1865 0006 8B46     		mov	fp, r1
 1866 0008 0390     		str	r0, [sp, #12]
 250:math/pprz_geodetic_double.c **** 
 251:math/pprz_geodetic_double.c ****   struct DoubleVect2 v = {utm->north - DELTA_NORTH, utm->east - DELTA_EAST};
 252:math/pprz_geodetic_double.c ****   double scale = 1 / N / serie_coeff_proj_mercator[0];
 253:math/pprz_geodetic_double.c ****   VECT2_SMUL(v, v, scale);
 1867              		.loc 1 253 0
 1868 000a BEA3     		adr	r3, .L29+68
 1869 000c D3E90023 		ldrd	r2, [r3]
 1870 0010 D1E90001 		ldrd	r0, [r1]
 1871              	.LVL272:
 1872 0014 FFF7FEFF 		bl	__aeabi_dmul
 1873              	.LVL273:
 251:math/pprz_geodetic_double.c ****   struct DoubleVect2 v = {utm->north - DELTA_NORTH, utm->east - DELTA_EAST};
 1874              		.loc 1 251 0
 1875 0018 BCA3     		adr	r3, .L29+76
 1876 001a D3E90023 		ldrd	r2, [r3]
 1877              		.loc 1 253 0
 1878 001e CDE90001 		strd	r0, [sp]
 1879              	.LVL274:
 251:math/pprz_geodetic_double.c ****   struct DoubleVect2 v = {utm->north - DELTA_NORTH, utm->east - DELTA_EAST};
 1880              		.loc 1 251 0
 1881 0022 DBE90201 		ldrd	r0, [fp, #8]
 1882              	.LVL275:
 1883 0026 FFF7FEFF 		bl	__aeabi_dsub
 1884              	.LVL276:
 1885              		.loc 1 253 0
 1886 002a B6A3     		adr	r3, .L29+68
 1887 002c D3E90023 		ldrd	r2, [r3]
 1888 0030 FFF7FEFF 		bl	__aeabi_dmul
 1889              	.LVL277:
 1890 0034 CDE90401 		strd	r0, [sp, #16]
 1891              	.LVL278:
 254:math/pprz_geodetic_double.c **** 
 255:math/pprz_geodetic_double.c ****   // first order taylor serie of something ?
 256:math/pprz_geodetic_double.c ****   struct DoubleVect2 v1;
 257:math/pprz_geodetic_double.c ****   VECT2_SMUL(v1, v, 2.);
 1892              		.loc 1 257 0
 1893 0038 DDE90001 		ldrd	r0, [sp]
 1894              	.LVL279:
 1895 003c 0246     		mov	r2, r0
 1896 003e 0B46     		mov	r3, r1
 1897 0040 FFF7FEFF 		bl	__aeabi_dadd
 1898              	.LVL280:
 1899 0044 0446     		mov	r4, r0
 1900 0046 0D46     		mov	r5, r1
 1901              	.LVL281:
 1902 0048 DDE90401 		ldrd	r0, [sp, #16]
 1903 004c 0246     		mov	r2, r0
 1904 004e 0B46     		mov	r3, r1
 1905 0050 FFF7FEFF 		bl	__aeabi_dadd
 1906              	.LVL282:
 1907 0054 8046     		mov	r8, r0
 1908 0056 8946     		mov	r9, r1
 1909              	.LVL283:
 1910              	.LBB13:
 1911              	.LBB14:
 258:math/pprz_geodetic_double.c ****   CSin(v1);
 1912              		.loc 1 258 0
 1913 0058 4046     		mov	r0, r8
 1914 005a 09F10041 		add	r1, r9, #-2147483648
 1915              	.LBE14:
 1916              	.LBB15:
 1917 005e FFF7FEFF 		bl	exp
 1918              	.LVL284:
 1919 0062 CDE90601 		strd	r0, [sp, #24]
 1920              	.LVL285:
 1921 0066 2946     		mov	r1, r5
 1922 0068 2046     		mov	r0, r4
 1923              	.LVL286:
 1924 006a FFF7FEFF 		bl	__aeabi_d2f
 1925              	.LVL287:
 1926 006e 0646     		mov	r6, r0	@ float
 1927 0070 FFF7FEFF 		bl	cosf
 1928              	.LVL288:
 1929 0074 0746     		mov	r7, r0	@ float
 1930              	.LVL289:
 1931 0076 3046     		mov	r0, r6	@ float
 1932              	.LVL290:
 1933 0078 FFF7FEFF 		bl	sinf
 1934              	.LVL291:
 1935              	.LBE15:
 1936              	.LBB16:
 1937 007c 4946     		mov	r1, r9
 1938              	.LBE16:
 1939              	.LBB17:
 1940 007e 8246     		mov	r10, r0	@ float
 1941              	.LVL292:
 1942              	.LBE17:
 1943              	.LBB18:
 1944 0080 4046     		mov	r0, r8
 1945              	.LVL293:
 1946 0082 FFF7FEFF 		bl	exp
 1947              	.LVL294:
 1948 0086 CDE90801 		strd	r0, [sp, #32]
 1949              	.LVL295:
 1950              	.LBE18:
 1951 008a 05F10041 		add	r1, r5, #-2147483648
 1952 008e 2046     		mov	r0, r4
 1953              	.LVL296:
 1954              	.LBB19:
 1955 0090 FFF7FEFF 		bl	__aeabi_d2f
 1956              	.LVL297:
 1957 0094 0446     		mov	r4, r0	@ float
 1958              	.LVL298:
 1959 0096 FFF7FEFF 		bl	cosf
 1960              	.LVL299:
 1961 009a 0646     		mov	r6, r0	@ float
 1962              	.LVL300:
 1963 009c 2046     		mov	r0, r4	@ float
 1964              	.LVL301:
 1965 009e FFF7FEFF 		bl	sinf
 1966              	.LVL302:
 1967 00a2 8046     		mov	r8, r0	@ float
 1968              	.LVL303:
 1969              	.LBE19:
 1970              	.LBB20:
 1971 00a4 5046     		mov	r0, r10	@ float
 1972              	.LVL304:
 1973 00a6 FFF7FEFF 		bl	__aeabi_f2d
 1974              	.LVL305:
 1975 00aa 0246     		mov	r2, r0
 1976 00ac 0B46     		mov	r3, r1
 1977 00ae DDE90601 		ldrd	r0, [sp, #24]
 1978 00b2 FFF7FEFF 		bl	__aeabi_dmul
 1979              	.LVL306:
 1980 00b6 0446     		mov	r4, r0
 1981              	.LBE20:
 1982              	.LBB21:
 1983 00b8 4046     		mov	r0, r8	@ float
 1984              	.LBE21:
 1985              	.LBB22:
 1986 00ba 0D46     		mov	r5, r1
 1987              	.LBE22:
 1988              	.LBB23:
 1989 00bc FFF7FEFF 		bl	__aeabi_f2d
 1990              	.LVL307:
 1991 00c0 0246     		mov	r2, r0
 1992 00c2 0B46     		mov	r3, r1
 1993 00c4 DDE90801 		ldrd	r0, [sp, #32]
 1994 00c8 FFF7FEFF 		bl	__aeabi_dmul
 1995              	.LVL308:
 1996 00cc 0246     		mov	r2, r0
 1997 00ce 0B46     		mov	r3, r1
 1998              	.LBE23:
 1999 00d0 2046     		mov	r0, r4
 2000 00d2 2946     		mov	r1, r5
 2001 00d4 FFF7FEFF 		bl	__aeabi_dsub
 2002              	.LVL309:
 2003 00d8 0022     		movs	r2, #0
 2004 00da 874B     		ldr	r3, .L29+56
 2005 00dc FFF7FEFF 		bl	__aeabi_dmul
 2006              	.LVL310:
 2007              	.LBB24:
 2008 00e0 01F10043 		add	r3, r1, #-2147483648
 2009              	.LBE24:
 2010              	.LBE13:
 259:math/pprz_geodetic_double.c ****   VECT2_SMUL(v1, v1, serie_coeff_proj_mercator[1]);
 2011              		.loc 1 259 0
 2012 00e4 1946     		mov	r1, r3
 2013 00e6 76A3     		adr	r3, .L29
 2014 00e8 D3E90023 		ldrd	r2, [r3]
 2015 00ec FFF7FEFF 		bl	__aeabi_dmul
 2016              	.LVL311:
 2017 00f0 0246     		mov	r2, r0
 2018 00f2 0B46     		mov	r3, r1
 260:math/pprz_geodetic_double.c ****   VECT2_SUB(v, v1);
 2019              		.loc 1 260 0
 2020 00f4 DDE90001 		ldrd	r0, [sp]
 2021 00f8 FFF7FEFF 		bl	__aeabi_dsub
 2022              	.LVL312:
 2023 00fc 8046     		mov	r8, r0
 2024              	.LVL313:
 2025              	.LBB30:
 2026              	.LBB25:
 258:math/pprz_geodetic_double.c ****   CSin(v1);
 2027              		.loc 1 258 0
 2028 00fe 3846     		mov	r0, r7	@ float
 2029              	.LBE25:
 2030              	.LBE30:
 2031              		.loc 1 260 0
 2032 0100 8946     		mov	r9, r1
 2033              	.LVL314:
 2034              	.LBB31:
 2035              	.LBB26:
 258:math/pprz_geodetic_double.c ****   CSin(v1);
 2036              		.loc 1 258 0
 2037 0102 FFF7FEFF 		bl	__aeabi_f2d
 2038              	.LVL315:
 2039 0106 0246     		mov	r2, r0
 2040 0108 0B46     		mov	r3, r1
 2041 010a DDE90601 		ldrd	r0, [sp, #24]
 2042 010e FFF7FEFF 		bl	__aeabi_dmul
 2043              	.LVL316:
 2044 0112 0446     		mov	r4, r0
 2045              	.LBE26:
 2046              	.LBB27:
 2047 0114 3046     		mov	r0, r6	@ float
 2048              	.LBE27:
 2049              	.LBB28:
 2050 0116 0D46     		mov	r5, r1
 2051              	.LBE28:
 2052              	.LBB29:
 2053 0118 FFF7FEFF 		bl	__aeabi_f2d
 2054              	.LVL317:
 2055 011c 0246     		mov	r2, r0
 2056 011e 0B46     		mov	r3, r1
 2057 0120 DDE90801 		ldrd	r0, [sp, #32]
 2058 0124 FFF7FEFF 		bl	__aeabi_dmul
 2059              	.LVL318:
 2060 0128 0246     		mov	r2, r0
 2061 012a 0B46     		mov	r3, r1
 2062              	.LBE29:
 2063 012c 2046     		mov	r0, r4
 2064 012e 2946     		mov	r1, r5
 2065 0130 FFF7FEFF 		bl	__aeabi_dsub
 2066              	.LVL319:
 2067 0134 0022     		movs	r2, #0
 2068 0136 704B     		ldr	r3, .L29+56
 2069 0138 FFF7FEFF 		bl	__aeabi_dmul
 2070              	.LVL320:
 2071              	.LBE31:
 259:math/pprz_geodetic_double.c ****   VECT2_SMUL(v1, v1, serie_coeff_proj_mercator[1]);
 2072              		.loc 1 259 0
 2073 013c 60A3     		adr	r3, .L29
 2074 013e D3E90023 		ldrd	r2, [r3]
 2075 0142 FFF7FEFF 		bl	__aeabi_dmul
 2076              	.LVL321:
 2077 0146 0246     		mov	r2, r0
 2078 0148 0B46     		mov	r3, r1
 2079              		.loc 1 260 0
 2080 014a DDE90401 		ldrd	r0, [sp, #16]
 2081 014e FFF7FEFF 		bl	__aeabi_dsub
 2082              	.LVL322:
 2083 0152 0446     		mov	r4, r0
 261:math/pprz_geodetic_double.c **** 
 262:math/pprz_geodetic_double.c ****   double lambda_c = LambdaOfUtmZone(utm->zone);
 2084              		.loc 1 262 0
 2085 0154 9BF81800 		ldrb	r0, [fp, #24]	@ zero_extendqisi2
 2086 0158 0623     		movs	r3, #6
 2087 015a 0138     		subs	r0, r0, #1
 2088 015c 5843     		muls	r0, r3, r0
 2089 015e B138     		subs	r0, r0, #177
 260:math/pprz_geodetic_double.c ****   VECT2_SUB(v, v1);
 2090              		.loc 1 260 0
 2091 0160 0D46     		mov	r5, r1
 2092              	.LVL323:
 2093              		.loc 1 262 0
 2094 0162 FFF7FEFF 		bl	__aeabi_i2d
 2095              	.LVL324:
 2096 0166 58A3     		adr	r3, .L29+8
 2097 0168 D3E90023 		ldrd	r2, [r3]
 2098 016c FFF7FEFF 		bl	__aeabi_dmul
 2099              	.LVL325:
 2100 0170 0646     		mov	r6, r0
 2101              	.LVL326:
 2102 0172 0F46     		mov	r7, r1
 2103              	.LVL327:
 263:math/pprz_geodetic_double.c ****   lla->lon = lambda_c + atan(sinh(v.y) / cos(v.x));
 2104              		.loc 1 263 0
 2105 0174 2046     		mov	r0, r4
 2106 0176 2946     		mov	r1, r5
 2107 0178 FFF7FEFF 		bl	sinh
 2108              	.LVL328:
 2109 017c CDE90001 		strd	r0, [sp]
 2110 0180 4046     		mov	r0, r8
 2111 0182 4946     		mov	r1, r9
 2112 0184 FFF7FEFF 		bl	cos
 2113              	.LVL329:
 2114 0188 0246     		mov	r2, r0
 2115 018a 0B46     		mov	r3, r1
 2116 018c DDE90001 		ldrd	r0, [sp]
 2117 0190 FFF7FEFF 		bl	__aeabi_ddiv
 2118              	.LVL330:
 2119 0194 FFF7FEFF 		bl	atan
 2120              	.LVL331:
 2121 0198 0246     		mov	r2, r0
 2122 019a 0B46     		mov	r3, r1
 2123 019c 3046     		mov	r0, r6
 2124 019e 3946     		mov	r1, r7
 2125 01a0 FFF7FEFF 		bl	__aeabi_dadd
 2126              	.LVL332:
 2127 01a4 039B     		ldr	r3, [sp, #12]
 2128 01a6 C3E90201 		strd	r0, [r3, #8]
 264:math/pprz_geodetic_double.c ****   double phi = asin(sin(v.x) / cosh(v.y));
 2129              		.loc 1 264 0
 2130 01aa 4046     		mov	r0, r8
 2131 01ac 4946     		mov	r1, r9
 2132 01ae FFF7FEFF 		bl	sin
 2133              	.LVL333:
 2134 01b2 0646     		mov	r6, r0
 2135              	.LVL334:
 2136 01b4 0F46     		mov	r7, r1
 2137 01b6 2046     		mov	r0, r4
 2138 01b8 2946     		mov	r1, r5
 2139 01ba FFF7FEFF 		bl	cosh
 2140              	.LVL335:
 2141 01be 0246     		mov	r2, r0
 2142 01c0 0B46     		mov	r3, r1
 2143 01c2 3046     		mov	r0, r6
 2144 01c4 3946     		mov	r1, r7
 2145 01c6 FFF7FEFF 		bl	__aeabi_ddiv
 2146              	.LVL336:
 2147 01ca FFF7FEFF 		bl	asin
 2148              	.LVL337:
 2149              	.LBB32:
 2150              	.LBB33:
 206:math/pprz_geodetic_double.c ****   return log(tan(M_PI_4 + phi / 2.0));
 2151              		.loc 1 206 0
 2152 01ce 0022     		movs	r2, #0
 2153 01d0 4A4B     		ldr	r3, .L29+60
 2154 01d2 FFF7FEFF 		bl	__aeabi_dmul
 2155              	.LVL338:
 2156 01d6 3EA3     		adr	r3, .L29+16
 2157 01d8 D3E90023 		ldrd	r2, [r3]
 2158 01dc FFF7FEFF 		bl	__aeabi_dadd
 2159              	.LVL339:
 2160 01e0 FFF7FEFF 		bl	tan
 2161              	.LVL340:
 2162 01e4 FFF7FEFF 		bl	log
 2163              	.LVL341:
 2164              	.LBE33:
 2165              	.LBE32:
 2166              	.LBB34:
 2167              	.LBB35:
 211:math/pprz_geodetic_double.c ****   double exp_l = exp(lat);
 2168              		.loc 1 211 0
 2169 01e8 FFF7FEFF 		bl	exp
 2170              	.LVL342:
 2171 01ec CDE90001 		strd	r0, [sp]
 2172              	.LVL343:
 212:math/pprz_geodetic_double.c ****   double phi0 = 2 * atan(exp_l) - M_PI_2;
 2173              		.loc 1 212 0
 2174 01f0 FFF7FEFF 		bl	atan
 2175              	.LVL344:
 2176 01f4 0246     		mov	r2, r0
 2177 01f6 0B46     		mov	r3, r1
 2178 01f8 FFF7FEFF 		bl	__aeabi_dadd
 2179              	.LVL345:
 2180 01fc 36A3     		adr	r3, .L29+24
 2181 01fe D3E90023 		ldrd	r2, [r3]
 2182 0202 FFF7FEFF 		bl	__aeabi_dsub
 2183              	.LVL346:
 2184 0206 4FF0030A 		mov	r10, #3
 2185 020a 0446     		mov	r4, r0
 2186              	.LVL347:
 2187 020c 0D46     		mov	r5, r1
 2188              	.LVL348:
 2189              	.L25:
 2190              	.LBB36:
 218:math/pprz_geodetic_double.c ****     double sin_phi = e * sin(phi_);
 2191              		.loc 1 218 0
 2192 020e 2046     		mov	r0, r4
 2193 0210 2946     		mov	r1, r5
 2194 0212 FFF7FEFF 		bl	sin
 2195              	.LVL349:
 2196 0216 32A3     		adr	r3, .L29+32
 2197 0218 D3E90023 		ldrd	r2, [r3]
 2198 021c FFF7FEFF 		bl	__aeabi_dmul
 2199              	.LVL350:
 219:math/pprz_geodetic_double.c ****     phi0 = 2 * atan(pow((1 + sin_phi) / (1. - sin_phi), e / 2.) * exp_l) - M_PI_2;
 2200              		.loc 1 219 0
 2201 0220 0022     		movs	r2, #0
 2202 0222 374B     		ldr	r3, .L29+64
 218:math/pprz_geodetic_double.c ****     double sin_phi = e * sin(phi_);
 2203              		.loc 1 218 0
 2204 0224 8046     		mov	r8, r0
 2205 0226 8946     		mov	r9, r1
 2206              	.LVL351:
 219:math/pprz_geodetic_double.c ****     phi0 = 2 * atan(pow((1 + sin_phi) / (1. - sin_phi), e / 2.) * exp_l) - M_PI_2;
 2207              		.loc 1 219 0
 2208 0228 FFF7FEFF 		bl	__aeabi_dadd
 2209              	.LVL352:
 2210 022c 4246     		mov	r2, r8
 2211 022e 0646     		mov	r6, r0
 2212 0230 0F46     		mov	r7, r1
 2213 0232 4B46     		mov	r3, r9
 2214 0234 0020     		movs	r0, #0
 2215 0236 3249     		ldr	r1, .L29+64
 2216 0238 FFF7FEFF 		bl	__aeabi_dsub
 2217              	.LVL353:
 2218 023c 0246     		mov	r2, r0
 2219 023e 0B46     		mov	r3, r1
 2220 0240 3046     		mov	r0, r6
 2221 0242 3946     		mov	r1, r7
 2222 0244 FFF7FEFF 		bl	__aeabi_ddiv
 2223              	.LVL354:
 2224 0248 27A3     		adr	r3, .L29+40
 2225 024a D3E90023 		ldrd	r2, [r3]
 2226 024e FFF7FEFF 		bl	pow
 2227              	.LVL355:
 2228 0252 DDE90023 		ldrd	r2, [sp]
 2229 0256 FFF7FEFF 		bl	__aeabi_dmul
 2230              	.LVL356:
 2231 025a FFF7FEFF 		bl	atan
 2232              	.LVL357:
 2233 025e 0246     		mov	r2, r0
 2234 0260 0B46     		mov	r3, r1
 2235 0262 FFF7FEFF 		bl	__aeabi_dadd
 2236              	.LVL358:
 2237 0266 1CA3     		adr	r3, .L29+24
 2238 0268 D3E90023 		ldrd	r2, [r3]
 2239 026c FFF7FEFF 		bl	__aeabi_dsub
 2240              	.LVL359:
 2241 0270 0AF1FF3A 		add	r10, r10, #-1
 2242              	.LVL360:
 2243              	.LBE36:
 221:math/pprz_geodetic_double.c ****   } while (max_iter && fabs(phi_ - phi0) > epsilon);
 2244              		.loc 1 221 0
 2245 0274 1AF0FF0A 		ands	r10, r10, #255
 2246              	.LVL361:
 2247              	.LBB37:
 219:math/pprz_geodetic_double.c ****     phi0 = 2 * atan(pow((1 + sin_phi) / (1. - sin_phi), e / 2.) * exp_l) - M_PI_2;
 2248              		.loc 1 219 0
 2249 0278 0646     		mov	r6, r0
 2250 027a 0F46     		mov	r7, r1
 2251              	.LVL362:
 2252              	.LBE37:
 221:math/pprz_geodetic_double.c ****   } while (max_iter && fabs(phi_ - phi0) > epsilon);
 2253              		.loc 1 221 0
 2254 027c 09D1     		bne	.L22
 2255              	.L23:
 2256              	.LBE35:
 2257              	.LBE34:
 265:math/pprz_geodetic_double.c ****   double il = isometric_latitude_fast_d(phi);
 266:math/pprz_geodetic_double.c ****   lla->lat = inverse_isometric_latitude_d(il, E, 1e-8);
 267:math/pprz_geodetic_double.c **** 
 268:math/pprz_geodetic_double.c ****   // copy alt above reference ellipsoid
 269:math/pprz_geodetic_double.c ****   lla->alt = utm->alt;
 2258              		.loc 1 269 0
 2259 027e DBE90423 		ldrd	r2, [fp, #16]
 266:math/pprz_geodetic_double.c ****   lla->lat = inverse_isometric_latitude_d(il, E, 1e-8);
 2260              		.loc 1 266 0
 2261 0282 0399     		ldr	r1, [sp, #12]
 2262 0284 C1E90067 		strd	r6, [r1]
 2263              		.loc 1 269 0
 2264 0288 C1E90423 		strd	r2, [r1, #16]
 270:math/pprz_geodetic_double.c **** 
 271:math/pprz_geodetic_double.c **** }
 2265              		.loc 1 271 0
 2266 028c 0DB0     		add	sp, sp, #52
 2267              	.LVL363:
 2268              		@ sp needed
 2269 028e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2270              	.LVL364:
 2271              	.L22:
 2272              	.LBB40:
 2273              	.LBB39:
 221:math/pprz_geodetic_double.c ****   } while (max_iter && fabs(phi_ - phi0) > epsilon);
 2274              		.loc 1 221 0
 2275 0292 3246     		mov	r2, r6
 2276 0294 3B46     		mov	r3, r7
 2277 0296 2046     		mov	r0, r4
 2278 0298 2946     		mov	r1, r5
 2279 029a FFF7FEFF 		bl	__aeabi_dsub
 2280              	.LVL365:
 2281 029e 21F00043 		bic	r3, r1, #-2147483648
 2282 02a2 0B93     		str	r3, [sp, #44]
 2283 02a4 0A90     		str	r0, [sp, #40]
 2284 02a6 DDE90A01 		ldrd	r0, [sp, #40]
 2285 02aa 11A3     		adr	r3, .L29+48
 2286 02ac D3E90023 		ldrd	r2, [r3]
 2287 02b0 FFF7FEFF 		bl	__aeabi_dcmpgt
 2288              	.LVL366:
 2289 02b4 0028     		cmp	r0, #0
 2290 02b6 E2D0     		beq	.L23
 2291              	.LBB38:
 219:math/pprz_geodetic_double.c ****     phi0 = 2 * atan(pow((1 + sin_phi) / (1. - sin_phi), e / 2.) * exp_l) - M_PI_2;
 2292              		.loc 1 219 0
 2293 02b8 3446     		mov	r4, r6
 2294              	.LVL367:
 2295 02ba 3D46     		mov	r5, r7
 2296 02bc A7E7     		b	.L25
 2297              	.L30:
 2298 02be 00BF     		.align	3
 2299              	.L29:
 2300 02c0 000000C0 		.word	-1073741824
 2301 02c4 A0674B3F 		.word	1061906336
 2302 02c8 399D52A2 		.word	-1571644103
 2303 02cc 46DF913F 		.word	1066524486
 2304 02d0 182D4454 		.word	1413754136
 2305 02d4 FB21E93F 		.word	1072243195
 2306 02d8 182D4454 		.word	1413754136
 2307 02dc FB21F93F 		.word	1073291771
 2308 02e0 37B2C93D 		.word	1036628535
 2309 02e4 1AF2B43F 		.word	1068823066
 2310 02e8 37B2C93D 		.word	1036628535
 2311 02ec 1AF2A43F 		.word	1067774490
 2312 02f0 3A8C30E2 		.word	-500134854
 2313 02f4 8E79453E 		.word	1044740494
 2314 02f8 0000E0BF 		.word	-1075838976
 2315 02fc 0000E03F 		.word	1071644672
 2316 0300 0000F03F 		.word	1072693248
 2317 0304 3E72EF54 		.word	1424978494
 2318 0308 5016853E 		.word	1048909392
 2319 030c 00000000 		.word	0
 2320 0310 80841E41 		.word	1092519040
 2321              	.LBE38:
 2322              	.LBE39:
 2323              	.LBE40:
 2324              		.cfi_endproc
 2325              	.LFE57:
 2327 0314 AFF30080 		.text
 2328              	.Letext0:
 2329              		.file 2 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 2330              		.file 3 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 2331              		.file 4 "math/pprz_algebra_double.h"
 2332              		.file 5 "math/pprz_geodetic_double.h"
 2333              		.file 6 "./math/pprz_geodetic_utm.h"
 2334              		.file 7 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pprz_geodetic_double.c
     /tmp/cc8idws0.s:24     .text.lla_of_ecef_d:00000000 $t
     /tmp/cc8idws0.s:29     .text.lla_of_ecef_d:00000000 lla_of_ecef_d
     /tmp/cc8idws0.s:484    .text.lla_of_ecef_d:00000328 $d
     /tmp/cc8idws0.s:513    .text.ltp_def_from_ecef_d:00000000 $t
     /tmp/cc8idws0.s:518    .text.ltp_def_from_ecef_d:00000000 ltp_def_from_ecef_d
     /tmp/cc8idws0.s:662    .text.ecef_of_lla_d:00000000 $t
     /tmp/cc8idws0.s:667    .text.ecef_of_lla_d:00000000 ecef_of_lla_d
     /tmp/cc8idws0.s:821    .text.ecef_of_lla_d:000000e8 $d
     /tmp/cc8idws0.s:832    .text.enu_of_ecef_point_d:00000000 $t
     /tmp/cc8idws0.s:837    .text.enu_of_ecef_point_d:00000000 enu_of_ecef_point_d
     /tmp/cc8idws0.s:992    .text.ned_of_ecef_point_d:00000000 $t
     /tmp/cc8idws0.s:997    .text.ned_of_ecef_point_d:00000000 ned_of_ecef_point_d
     /tmp/cc8idws0.s:1035   .text.enu_of_ecef_vect_d:00000000 $t
     /tmp/cc8idws0.s:1040   .text.enu_of_ecef_vect_d:00000000 enu_of_ecef_vect_d
     /tmp/cc8idws0.s:1176   .text.ned_of_ecef_vect_d:00000000 $t
     /tmp/cc8idws0.s:1181   .text.ned_of_ecef_vect_d:00000000 ned_of_ecef_vect_d
     /tmp/cc8idws0.s:1219   .text.ecef_of_enu_point_d:00000000 $t
     /tmp/cc8idws0.s:1224   .text.ecef_of_enu_point_d:00000000 ecef_of_enu_point_d
     /tmp/cc8idws0.s:1384   .text.ecef_of_ned_point_d:00000000 $t
     /tmp/cc8idws0.s:1389   .text.ecef_of_ned_point_d:00000000 ecef_of_ned_point_d
     /tmp/cc8idws0.s:1430   .text.ecef_of_enu_vect_d:00000000 $t
     /tmp/cc8idws0.s:1435   .text.ecef_of_enu_vect_d:00000000 ecef_of_enu_vect_d
     /tmp/cc8idws0.s:1571   .text.ecef_of_ned_vect_d:00000000 $t
     /tmp/cc8idws0.s:1576   .text.ecef_of_ned_vect_d:00000000 ecef_of_ned_vect_d
     /tmp/cc8idws0.s:1617   .text.enu_of_lla_point_d:00000000 $t
     /tmp/cc8idws0.s:1622   .text.enu_of_lla_point_d:00000000 enu_of_lla_point_d
     /tmp/cc8idws0.s:1660   .text.ned_of_lla_point_d:00000000 $t
     /tmp/cc8idws0.s:1665   .text.ned_of_lla_point_d:00000000 ned_of_lla_point_d
     /tmp/cc8idws0.s:1703   .text.gc_of_gd_lat_d:00000000 $t
     /tmp/cc8idws0.s:1708   .text.gc_of_gd_lat_d:00000000 gc_of_gd_lat_d
     /tmp/cc8idws0.s:1827   .text.gc_of_gd_lat_d:000000c8 $d
     /tmp/cc8idws0.s:1839   .text.lla_of_utm_d:00000000 $t
     /tmp/cc8idws0.s:1844   .text.lla_of_utm_d:00000000 lla_of_utm_d
     /tmp/cc8idws0.s:2300   .text.lla_of_utm_d:000002c0 $d
                     .debug_frame:00000010 $d
     /tmp/cc8idws0.s:512    .text.lla_of_ecef_d:0000038c $t
     /tmp/cc8idws0.s:831    .text.ecef_of_lla_d:00000104 $t
     /tmp/cc8idws0.s:2327   .text.lla_of_utm_d:00000314 $t
                           .group:00000000 wm4.0.61e172dafa1e7adfbd840ee8b103061f
                           .group:00000000 wm4.pprz_geodetic.h.35.f7fdb5d11659b92d11c7ce67b6317005
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4._default_types.h.6.9e4229723f5523536bc8f574589d6a99
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.56.a2d04de9d47039852021e66fca39bb58
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.stdint.h.10.d0f8e374834fcfc2e296d5d5fe82f02a
                           .group:00000000 wm4.inttypes.h.24.4db40689d622c4d3b547b5801303bdae
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.math.h.35.6ddd393aa87bd6f6206738d11f2687bd
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_algebra_float.h.32.544614e70075e1ed5693f00f6a441312
                           .group:00000000 wm4.pprz_algebra_double.h.91.82ca62ae962f4b4f295322d977f2dad5
                           .group:00000000 wm4.pprz_geodetic_utm.h.31.62f7b8d6a14b5a86d16c21424652c0cf

UNDEFINED SYMBOLS
__aeabi_dmul
__aeabi_dadd
__aeabi_dsub
__aeabi_ddiv
sqrt
pow
atan
atan2
sin
cos
tan
__aeabi_d2f
__aeabi_f2d
__aeabi_i2d
__aeabi_dcmpgt
exp
cosf
sinf
sinh
cosh
asin
log
