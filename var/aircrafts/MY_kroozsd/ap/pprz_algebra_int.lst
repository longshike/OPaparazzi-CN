   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"pprz_algebra_int.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.int32_quat_wrap_shortest,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	int32_quat_wrap_shortest:
  25              	.LFB7:
  26              		.file 1 "math/pprz_algebra_int.h"
   1:math/pprz_algebra_int.h **** /*
   2:math/pprz_algebra_int.h ****  * Copyright (C) 2008-2014 The Paparazzi Team
   3:math/pprz_algebra_int.h ****  *
   4:math/pprz_algebra_int.h ****  * This file is part of paparazzi.
   5:math/pprz_algebra_int.h ****  *
   6:math/pprz_algebra_int.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:math/pprz_algebra_int.h ****  * it under the terms of the GNU General Public License as published by
   8:math/pprz_algebra_int.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:math/pprz_algebra_int.h ****  * any later version.
  10:math/pprz_algebra_int.h ****  *
  11:math/pprz_algebra_int.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:math/pprz_algebra_int.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:math/pprz_algebra_int.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:math/pprz_algebra_int.h ****  * GNU General Public License for more details.
  15:math/pprz_algebra_int.h ****  *
  16:math/pprz_algebra_int.h ****  * You should have received a copy of the GNU General Public License
  17:math/pprz_algebra_int.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:math/pprz_algebra_int.h ****  * <http://www.gnu.org/licenses/>.
  19:math/pprz_algebra_int.h ****  */
  20:math/pprz_algebra_int.h **** 
  21:math/pprz_algebra_int.h **** /**
  22:math/pprz_algebra_int.h ****  * @file pprz_algebra_int.h
  23:math/pprz_algebra_int.h ****  * @brief Paparazzi fixed point algebra.
  24:math/pprz_algebra_int.h ****  *
  25:math/pprz_algebra_int.h ****  * @addtogroup math_algebra
  26:math/pprz_algebra_int.h ****  * @{
  27:math/pprz_algebra_int.h ****  * @addtogroup math_algebra_int Fixed Point Algebra
  28:math/pprz_algebra_int.h ****  * @{
  29:math/pprz_algebra_int.h ****  */
  30:math/pprz_algebra_int.h **** 
  31:math/pprz_algebra_int.h **** #ifndef PPRZ_ALGEBRA_INT_H
  32:math/pprz_algebra_int.h **** #define PPRZ_ALGEBRA_INT_H
  33:math/pprz_algebra_int.h **** 
  34:math/pprz_algebra_int.h **** #ifdef __cplusplus
  35:math/pprz_algebra_int.h **** extern "C" {
  36:math/pprz_algebra_int.h **** #endif
  37:math/pprz_algebra_int.h **** 
  38:math/pprz_algebra_int.h **** #include "std.h"
  39:math/pprz_algebra_int.h **** #include "math/pprz_algebra.h"
  40:math/pprz_algebra_int.h **** #include "math/pprz_trig_int.h"
  41:math/pprz_algebra_int.h **** #include <stdlib.h>
  42:math/pprz_algebra_int.h **** 
  43:math/pprz_algebra_int.h **** 
  44:math/pprz_algebra_int.h **** struct Uint8Vect3 {
  45:math/pprz_algebra_int.h ****   uint8_t x;
  46:math/pprz_algebra_int.h ****   uint8_t y;
  47:math/pprz_algebra_int.h ****   uint8_t z;
  48:math/pprz_algebra_int.h **** };
  49:math/pprz_algebra_int.h **** 
  50:math/pprz_algebra_int.h **** struct Int8Vect3 {
  51:math/pprz_algebra_int.h ****   int8_t x;
  52:math/pprz_algebra_int.h ****   int8_t y;
  53:math/pprz_algebra_int.h ****   int8_t z;
  54:math/pprz_algebra_int.h **** };
  55:math/pprz_algebra_int.h **** 
  56:math/pprz_algebra_int.h **** struct Uint16Vect3 {
  57:math/pprz_algebra_int.h ****   uint16_t x;
  58:math/pprz_algebra_int.h ****   uint16_t y;
  59:math/pprz_algebra_int.h ****   uint16_t z;
  60:math/pprz_algebra_int.h **** };
  61:math/pprz_algebra_int.h **** 
  62:math/pprz_algebra_int.h **** struct Int16Vect3 {
  63:math/pprz_algebra_int.h ****   int16_t x;
  64:math/pprz_algebra_int.h ****   int16_t y;
  65:math/pprz_algebra_int.h ****   int16_t z;
  66:math/pprz_algebra_int.h **** };
  67:math/pprz_algebra_int.h **** 
  68:math/pprz_algebra_int.h **** #define INT32_POS_FRAC 8
  69:math/pprz_algebra_int.h **** #define INT32_POS_OF_CM 2.56
  70:math/pprz_algebra_int.h **** #define INT32_POS_OF_CM_NUM 64
  71:math/pprz_algebra_int.h **** #define INT32_POS_OF_CM_DEN 25
  72:math/pprz_algebra_int.h **** 
  73:math/pprz_algebra_int.h **** #define INT32_SPEED_FRAC 19
  74:math/pprz_algebra_int.h **** #define INT32_SPEED_OF_CM_S 5242.88
  75:math/pprz_algebra_int.h **** #define INT32_SPEED_OF_CM_S_NUM 41943
  76:math/pprz_algebra_int.h **** #define INT32_SPEED_OF_CM_S_DEN 8
  77:math/pprz_algebra_int.h **** 
  78:math/pprz_algebra_int.h **** #define INT32_ACCEL_FRAC 10
  79:math/pprz_algebra_int.h **** #define INT32_MAG_FRAC 11
  80:math/pprz_algebra_int.h **** 
  81:math/pprz_algebra_int.h **** #define INT32_PERCENTAGE_FRAC 10
  82:math/pprz_algebra_int.h **** 
  83:math/pprz_algebra_int.h **** struct Int32Vect2 {
  84:math/pprz_algebra_int.h ****   int32_t x;
  85:math/pprz_algebra_int.h ****   int32_t y;
  86:math/pprz_algebra_int.h **** };
  87:math/pprz_algebra_int.h **** 
  88:math/pprz_algebra_int.h **** struct Int32Vect3 {
  89:math/pprz_algebra_int.h ****   int32_t x;
  90:math/pprz_algebra_int.h ****   int32_t y;
  91:math/pprz_algebra_int.h ****   int32_t z;
  92:math/pprz_algebra_int.h **** };
  93:math/pprz_algebra_int.h **** 
  94:math/pprz_algebra_int.h **** /* Rotation quaternions                         */
  95:math/pprz_algebra_int.h **** #define INT32_QUAT_FRAC 15
  96:math/pprz_algebra_int.h **** /**
  97:math/pprz_algebra_int.h ****  * @brief Rotation quaternion
  98:math/pprz_algebra_int.h ****  * @details Units: BFP with #INT32_QUAT_FRAC */
  99:math/pprz_algebra_int.h **** struct Int32Quat {
 100:math/pprz_algebra_int.h ****   int32_t qi;
 101:math/pprz_algebra_int.h ****   int32_t qx;
 102:math/pprz_algebra_int.h ****   int32_t qy;
 103:math/pprz_algebra_int.h ****   int32_t qz;
 104:math/pprz_algebra_int.h **** };
 105:math/pprz_algebra_int.h **** 
 106:math/pprz_algebra_int.h **** 
 107:math/pprz_algebra_int.h **** struct Int64Quat {
 108:math/pprz_algebra_int.h ****   int64_t qi;
 109:math/pprz_algebra_int.h ****   int64_t qx;
 110:math/pprz_algebra_int.h ****   int64_t qy;
 111:math/pprz_algebra_int.h ****   int64_t qz;
 112:math/pprz_algebra_int.h **** };
 113:math/pprz_algebra_int.h **** 
 114:math/pprz_algebra_int.h **** 
 115:math/pprz_algebra_int.h **** /* Euler angles                                 */
 116:math/pprz_algebra_int.h **** #define INT32_ANGLE_FRAC 12
 117:math/pprz_algebra_int.h **** #define INT32_RATE_FRAC 12
 118:math/pprz_algebra_int.h **** #define INT32_ANGLE_PI_4   (int32_t)ANGLE_BFP_OF_REAL(   0.7853981633974483096156608458198757)
 119:math/pprz_algebra_int.h **** #define INT32_ANGLE_PI_2   (int32_t)ANGLE_BFP_OF_REAL(   1.5707963267948966192313216916397514)
 120:math/pprz_algebra_int.h **** #define INT32_ANGLE_PI     (int32_t)ANGLE_BFP_OF_REAL(   3.1415926535897932384626433832795029)
 121:math/pprz_algebra_int.h **** #define INT32_ANGLE_2_PI   (int32_t)ANGLE_BFP_OF_REAL(2.*3.1415926535897932384626433832795029)
 122:math/pprz_algebra_int.h **** 
 123:math/pprz_algebra_int.h **** #define INT32_RAD_OF_DEG(_deg) (int32_t)(((int64_t)(_deg) * 14964008)/857374503)
 124:math/pprz_algebra_int.h **** #define INT32_DEG_OF_RAD(_rad) (int32_t)(((int64_t)(_rad) * 857374503)/14964008)
 125:math/pprz_algebra_int.h **** 
 126:math/pprz_algebra_int.h **** #define INT32_ANGLE_NORMALIZE(_a) {             \
 127:math/pprz_algebra_int.h ****     while ((_a) > INT32_ANGLE_PI)  (_a) -= INT32_ANGLE_2_PI;    \
 128:math/pprz_algebra_int.h ****     while ((_a) < -INT32_ANGLE_PI) (_a) += INT32_ANGLE_2_PI;    \
 129:math/pprz_algebra_int.h ****   }
 130:math/pprz_algebra_int.h **** 
 131:math/pprz_algebra_int.h **** #define INT32_COURSE_NORMALIZE(_a) {                \
 132:math/pprz_algebra_int.h ****     while ((_a) < 0) (_a) += INT32_ANGLE_2_PI;                  \
 133:math/pprz_algebra_int.h ****     while ((_a) >= INT32_ANGLE_2_PI)  (_a) -= INT32_ANGLE_2_PI; \
 134:math/pprz_algebra_int.h ****   }
 135:math/pprz_algebra_int.h **** 
 136:math/pprz_algebra_int.h **** 
 137:math/pprz_algebra_int.h **** struct Int16Eulers {
 138:math/pprz_algebra_int.h ****   int16_t phi;
 139:math/pprz_algebra_int.h ****   int16_t theta;
 140:math/pprz_algebra_int.h ****   int16_t psi;
 141:math/pprz_algebra_int.h **** };
 142:math/pprz_algebra_int.h **** 
 143:math/pprz_algebra_int.h **** /**
 144:math/pprz_algebra_int.h ****  * @brief euler angles
 145:math/pprz_algebra_int.h ****  * @details Units: rad in BFP with #INT32_ANGLE_FRAC */
 146:math/pprz_algebra_int.h **** struct Int32Eulers {
 147:math/pprz_algebra_int.h ****   int32_t phi;   ///< in rad with #INT32_ANGLE_FRAC
 148:math/pprz_algebra_int.h ****   int32_t theta; ///< in rad with #INT32_ANGLE_FRAC
 149:math/pprz_algebra_int.h ****   int32_t psi;   ///< in rad with #INT32_ANGLE_FRAC
 150:math/pprz_algebra_int.h **** };
 151:math/pprz_algebra_int.h **** 
 152:math/pprz_algebra_int.h **** 
 153:math/pprz_algebra_int.h **** /* Rotation matrix. */
 154:math/pprz_algebra_int.h **** #define INT32_TRIG_FRAC 14
 155:math/pprz_algebra_int.h **** 
 156:math/pprz_algebra_int.h **** /**
 157:math/pprz_algebra_int.h ****  * @brief rotation matrix
 158:math/pprz_algebra_int.h ****  * @details Units: rad in BFP with #INT32_TRIG_FRAC */
 159:math/pprz_algebra_int.h **** struct Int32RMat {
 160:math/pprz_algebra_int.h ****   int32_t m[3 * 3];
 161:math/pprz_algebra_int.h **** };
 162:math/pprz_algebra_int.h **** 
 163:math/pprz_algebra_int.h **** /* 3x3 matrix                                    */
 164:math/pprz_algebra_int.h **** struct Int32Mat33 {
 165:math/pprz_algebra_int.h ****   int32_t m[3 * 3];
 166:math/pprz_algebra_int.h **** };
 167:math/pprz_algebra_int.h **** 
 168:math/pprz_algebra_int.h **** /* Rotational speed                              */
 169:math/pprz_algebra_int.h **** struct Int16Rates {
 170:math/pprz_algebra_int.h ****   int16_t p;
 171:math/pprz_algebra_int.h ****   int16_t q;
 172:math/pprz_algebra_int.h ****   int16_t r;
 173:math/pprz_algebra_int.h **** };
 174:math/pprz_algebra_int.h **** 
 175:math/pprz_algebra_int.h **** /* Rotational speed                              */
 176:math/pprz_algebra_int.h **** /**
 177:math/pprz_algebra_int.h ****  * @brief angular rates
 178:math/pprz_algebra_int.h ****  * @details Units: rad/s in BFP with #INT32_RATE_FRAC */
 179:math/pprz_algebra_int.h **** struct Int32Rates {
 180:math/pprz_algebra_int.h ****   int32_t p; ///< in rad/s with #INT32_RATE_FRAC
 181:math/pprz_algebra_int.h ****   int32_t q; ///< in rad/s with #INT32_RATE_FRAC
 182:math/pprz_algebra_int.h ****   int32_t r; ///< in rad/s with #INT32_RATE_FRAC
 183:math/pprz_algebra_int.h **** };
 184:math/pprz_algebra_int.h **** 
 185:math/pprz_algebra_int.h **** struct Int64Rates {
 186:math/pprz_algebra_int.h ****   int64_t p;
 187:math/pprz_algebra_int.h ****   int64_t q;
 188:math/pprz_algebra_int.h ****   int64_t r;
 189:math/pprz_algebra_int.h **** };
 190:math/pprz_algebra_int.h **** 
 191:math/pprz_algebra_int.h **** 
 192:math/pprz_algebra_int.h **** struct Int64Vect2 {
 193:math/pprz_algebra_int.h ****   int64_t x;
 194:math/pprz_algebra_int.h ****   int64_t y;
 195:math/pprz_algebra_int.h **** };
 196:math/pprz_algebra_int.h **** 
 197:math/pprz_algebra_int.h **** struct Int64Vect3 {
 198:math/pprz_algebra_int.h ****   int64_t x;
 199:math/pprz_algebra_int.h ****   int64_t y;
 200:math/pprz_algebra_int.h ****   int64_t z;
 201:math/pprz_algebra_int.h **** };
 202:math/pprz_algebra_int.h **** 
 203:math/pprz_algebra_int.h **** 
 204:math/pprz_algebra_int.h **** // Real (floating point) ->  Binary Fixed Point  (int)
 205:math/pprz_algebra_int.h **** #define BFP_OF_REAL(_vr, _frac)    ((_vr)*(1<<(_frac)))
 206:math/pprz_algebra_int.h **** #define FLOAT_OF_BFP(_vbfp, _frac) ((float)(_vbfp)/(1<<(_frac)))
 207:math/pprz_algebra_int.h **** #define DOUBLE_OF_BFP(_vbfp, _frac) ((double)(_vbfp)/(1<<(_frac)))
 208:math/pprz_algebra_int.h **** #define RATE_BFP_OF_REAL(_af)   BFP_OF_REAL((_af), INT32_RATE_FRAC)
 209:math/pprz_algebra_int.h **** #define RATE_FLOAT_OF_BFP(_ai)  FLOAT_OF_BFP((_ai), INT32_RATE_FRAC)
 210:math/pprz_algebra_int.h **** #define ANGLE_BFP_OF_REAL(_af)  BFP_OF_REAL((_af), INT32_ANGLE_FRAC)
 211:math/pprz_algebra_int.h **** #define ANGLE_FLOAT_OF_BFP(_ai) FLOAT_OF_BFP((_ai), INT32_ANGLE_FRAC)
 212:math/pprz_algebra_int.h **** #define QUAT1_BFP_OF_REAL(_qf)  BFP_OF_REAL((_qf), INT32_QUAT_FRAC)
 213:math/pprz_algebra_int.h **** #define QUAT1_FLOAT_OF_BFP(_qi) FLOAT_OF_BFP((_qi), INT32_QUAT_FRAC)
 214:math/pprz_algebra_int.h **** #define TRIG_BFP_OF_REAL(_tf)   BFP_OF_REAL((_tf), INT32_TRIG_FRAC)
 215:math/pprz_algebra_int.h **** #define TRIG_FLOAT_OF_BFP(_ti)  FLOAT_OF_BFP((_ti),INT32_TRIG_FRAC)
 216:math/pprz_algebra_int.h **** #define POS_BFP_OF_REAL(_af)    BFP_OF_REAL((_af), INT32_POS_FRAC)
 217:math/pprz_algebra_int.h **** #define POS_FLOAT_OF_BFP(_ai)   FLOAT_OF_BFP((_ai), INT32_POS_FRAC)
 218:math/pprz_algebra_int.h **** #define SPEED_BFP_OF_REAL(_af)  BFP_OF_REAL((_af), INT32_SPEED_FRAC)
 219:math/pprz_algebra_int.h **** #define SPEED_FLOAT_OF_BFP(_ai) FLOAT_OF_BFP((_ai), INT32_SPEED_FRAC)
 220:math/pprz_algebra_int.h **** #define ACCEL_BFP_OF_REAL(_af)  BFP_OF_REAL((_af), INT32_ACCEL_FRAC)
 221:math/pprz_algebra_int.h **** #define ACCEL_FLOAT_OF_BFP(_ai) FLOAT_OF_BFP((_ai), INT32_ACCEL_FRAC)
 222:math/pprz_algebra_int.h **** #define MAG_BFP_OF_REAL(_af)    BFP_OF_REAL((_af), INT32_MAG_FRAC)
 223:math/pprz_algebra_int.h **** #define MAG_FLOAT_OF_BFP(_ai)   FLOAT_OF_BFP((_ai), INT32_MAG_FRAC)
 224:math/pprz_algebra_int.h **** 
 225:math/pprz_algebra_int.h **** #define INT_MULT_RSHIFT(_a, _b, _r) (((_a)*(_b))>>(_r))
 226:math/pprz_algebra_int.h **** 
 227:math/pprz_algebra_int.h **** 
 228:math/pprz_algebra_int.h **** extern uint32_t int32_sqrt(uint32_t in);
 229:math/pprz_algebra_int.h **** #define INT32_SQRT(_out,_in) { _out = int32_sqrt(_in); }
 230:math/pprz_algebra_int.h **** 
 231:math/pprz_algebra_int.h **** 
 232:math/pprz_algebra_int.h **** /*
 233:math/pprz_algebra_int.h ****  * Dimension 2 Vectors
 234:math/pprz_algebra_int.h ****  */
 235:math/pprz_algebra_int.h **** 
 236:math/pprz_algebra_int.h **** #define INT_VECT2_ZERO(_v) VECT2_ASSIGN(_v, 0, 0)
 237:math/pprz_algebra_int.h **** 
 238:math/pprz_algebra_int.h **** /* macros also usable if _v is not a Int32Vect2, but a different struct with x,y members */
 239:math/pprz_algebra_int.h **** #define INT32_VECT2_NORM(_v) int32_sqrt(VECT2_NORM2(_v))
 240:math/pprz_algebra_int.h **** 
 241:math/pprz_algebra_int.h **** /** return squared norm of 2D vector */
 242:math/pprz_algebra_int.h **** static inline uint32_t int32_vect2_norm2(struct Int32Vect2 *v)
 243:math/pprz_algebra_int.h **** {
 244:math/pprz_algebra_int.h ****   return v->x * v->x + v->y * v->y;
 245:math/pprz_algebra_int.h **** }
 246:math/pprz_algebra_int.h **** 
 247:math/pprz_algebra_int.h **** /** return norm of 2D vector */
 248:math/pprz_algebra_int.h **** static inline uint32_t int32_vect2_norm(struct Int32Vect2 *v)
 249:math/pprz_algebra_int.h **** {
 250:math/pprz_algebra_int.h ****   return int32_sqrt(int32_vect2_norm2(v));
 251:math/pprz_algebra_int.h **** }
 252:math/pprz_algebra_int.h **** 
 253:math/pprz_algebra_int.h **** /** normalize 2D vector inplace */
 254:math/pprz_algebra_int.h **** static inline void int32_vect2_normalize(struct Int32Vect2 *v, uint8_t frac)
 255:math/pprz_algebra_int.h **** {
 256:math/pprz_algebra_int.h ****   const uint32_t n = int32_vect2_norm(v);
 257:math/pprz_algebra_int.h ****   if (n > 0) {
 258:math/pprz_algebra_int.h ****     const int32_t f = BFP_OF_REAL((1.), frac);
 259:math/pprz_algebra_int.h ****     v->x = v->x * f / (int32_t)n;
 260:math/pprz_algebra_int.h ****     v->y = v->y * f / (int32_t)n;
 261:math/pprz_algebra_int.h ****   }
 262:math/pprz_algebra_int.h **** }
 263:math/pprz_algebra_int.h **** 
 264:math/pprz_algebra_int.h **** #define INT32_VECT2_NORMALIZE(_v,_frac) int32_vect2_normalize(&(_v), _frac)
 265:math/pprz_algebra_int.h **** 
 266:math/pprz_algebra_int.h **** 
 267:math/pprz_algebra_int.h **** #define INT32_VECT2_RSHIFT(_o, _i, _r) { \
 268:math/pprz_algebra_int.h ****     (_o).x = ((_i).x >> (_r)); \
 269:math/pprz_algebra_int.h ****     (_o).y = ((_i).y >> (_r)); \
 270:math/pprz_algebra_int.h ****   }
 271:math/pprz_algebra_int.h **** 
 272:math/pprz_algebra_int.h **** #define INT32_VECT2_LSHIFT(_o, _i, _l) { \
 273:math/pprz_algebra_int.h ****     (_o).x = ((_i).x << (_l)); \
 274:math/pprz_algebra_int.h ****     (_o).y = ((_i).y << (_l)); \
 275:math/pprz_algebra_int.h ****   }
 276:math/pprz_algebra_int.h **** 
 277:math/pprz_algebra_int.h **** #define INT32_VECT2_SCALE_2(_a, _b, _num, _den) {   \
 278:math/pprz_algebra_int.h ****     (_a).x = ((_b).x * (_num)) / (_den);        \
 279:math/pprz_algebra_int.h ****     (_a).y = ((_b).y * (_num)) / (_den);        \
 280:math/pprz_algebra_int.h ****   }
 281:math/pprz_algebra_int.h **** 
 282:math/pprz_algebra_int.h **** /*
 283:math/pprz_algebra_int.h ****  * Dimension 3 Vectors
 284:math/pprz_algebra_int.h ****  */
 285:math/pprz_algebra_int.h **** 
 286:math/pprz_algebra_int.h **** #define INT_VECT3_ZERO(_v) VECT3_ASSIGN(_v, 0, 0, 0)
 287:math/pprz_algebra_int.h **** #define INT32_VECT3_ZERO(_v) VECT3_ASSIGN(_v, 0, 0, 0)
 288:math/pprz_algebra_int.h **** 
 289:math/pprz_algebra_int.h **** #define INT32_VECT3_SCALE_2(_a, _b, _num, _den) {   \
 290:math/pprz_algebra_int.h ****     (_a).x = ((_b).x * (_num)) / (_den);        \
 291:math/pprz_algebra_int.h ****     (_a).y = ((_b).y * (_num)) / (_den);        \
 292:math/pprz_algebra_int.h ****     (_a).z = ((_b).z * (_num)) / (_den);        \
 293:math/pprz_algebra_int.h ****   }
 294:math/pprz_algebra_int.h **** 
 295:math/pprz_algebra_int.h **** #define INT32_VECT3_NORM(_v) int32_sqrt(VECT3_NORM2(_v))
 296:math/pprz_algebra_int.h **** 
 297:math/pprz_algebra_int.h **** #define INT32_VECT3_RSHIFT(_o, _i, _r) { \
 298:math/pprz_algebra_int.h ****     (_o).x = ((_i).x >> (_r));       \
 299:math/pprz_algebra_int.h ****     (_o).y = ((_i).y >> (_r));       \
 300:math/pprz_algebra_int.h ****     (_o).z = ((_i).z >> (_r));       \
 301:math/pprz_algebra_int.h ****   }
 302:math/pprz_algebra_int.h **** 
 303:math/pprz_algebra_int.h **** #define INT32_VECT3_LSHIFT(_o, _i, _l) { \
 304:math/pprz_algebra_int.h ****     (_o).x = ((_i).x << (_l));       \
 305:math/pprz_algebra_int.h ****     (_o).y = ((_i).y << (_l));       \
 306:math/pprz_algebra_int.h ****     (_o).z = ((_i).z << (_l));       \
 307:math/pprz_algebra_int.h ****   }
 308:math/pprz_algebra_int.h **** 
 309:math/pprz_algebra_int.h **** 
 310:math/pprz_algebra_int.h **** 
 311:math/pprz_algebra_int.h **** /*
 312:math/pprz_algebra_int.h ****  * 3x3 Matrices
 313:math/pprz_algebra_int.h ****  */
 314:math/pprz_algebra_int.h **** #define INT32_MAT33_ZERO(_m) {                      \
 315:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 0) = 0;                     \
 316:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 1) = 0;                     \
 317:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 2) = 0;                     \
 318:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 0) = 0;                     \
 319:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 1) = 0;                     \
 320:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 2) = 0;                     \
 321:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 0) = 0;                     \
 322:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 1) = 0;                     \
 323:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 2) = 0;                     \
 324:math/pprz_algebra_int.h ****   }
 325:math/pprz_algebra_int.h **** 
 326:math/pprz_algebra_int.h **** #define INT32_MAT33_DIAG(_m, _d00, _d11, _d22) {    \
 327:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 0) = (_d00);                \
 328:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 1) = 0;                     \
 329:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 2) = 0;                     \
 330:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 0) = 0;                     \
 331:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 1) = (_d11);                \
 332:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 2) = 0;                     \
 333:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 0) = 0;                     \
 334:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 1) = 0;                     \
 335:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 2) = (_d22);                \
 336:math/pprz_algebra_int.h ****   }
 337:math/pprz_algebra_int.h **** 
 338:math/pprz_algebra_int.h **** 
 339:math/pprz_algebra_int.h **** 
 340:math/pprz_algebra_int.h **** /*
 341:math/pprz_algebra_int.h ****  * Rotation matrices
 342:math/pprz_algebra_int.h ****  */
 343:math/pprz_algebra_int.h **** 
 344:math/pprz_algebra_int.h **** /** initialises a rotation matrix to identity */
 345:math/pprz_algebra_int.h **** static inline void int32_rmat_identity(struct Int32RMat *rm)
 346:math/pprz_algebra_int.h **** {
 347:math/pprz_algebra_int.h ****   INT32_MAT33_DIAG(*rm, TRIG_BFP_OF_REAL(1.), TRIG_BFP_OF_REAL(1.), TRIG_BFP_OF_REAL(1.));
 348:math/pprz_algebra_int.h **** }
 349:math/pprz_algebra_int.h **** 
 350:math/pprz_algebra_int.h **** /** Composition (multiplication) of two rotation matrices.
 351:math/pprz_algebra_int.h ****  * m_a2c = m_a2b comp m_b2c , aka  m_a2c = m_b2c * m_a2b
 352:math/pprz_algebra_int.h ****  */
 353:math/pprz_algebra_int.h **** extern void int32_rmat_comp(struct Int32RMat *m_a2c, struct Int32RMat *m_a2b,
 354:math/pprz_algebra_int.h ****                             struct Int32RMat *m_b2c);
 355:math/pprz_algebra_int.h **** 
 356:math/pprz_algebra_int.h **** /** Composition (multiplication) of two rotation matrices.
 357:math/pprz_algebra_int.h ****  * m_a2b = m_a2c comp_inv m_b2c , aka  m_a2b = inv(_m_b2c) * m_a2c
 358:math/pprz_algebra_int.h ****  */
 359:math/pprz_algebra_int.h **** extern void int32_rmat_comp_inv(struct Int32RMat *m_a2b, struct Int32RMat *m_a2c,
 360:math/pprz_algebra_int.h ****                                 struct Int32RMat *m_b2c);
 361:math/pprz_algebra_int.h **** 
 362:math/pprz_algebra_int.h **** /** rotate 3D vector by rotation matrix.
 363:math/pprz_algebra_int.h ****  * vb = m_a2b * va
 364:math/pprz_algebra_int.h ****  */
 365:math/pprz_algebra_int.h **** extern void int32_rmat_vmult(struct Int32Vect3 *vb, struct Int32RMat *m_a2b,
 366:math/pprz_algebra_int.h ****                              struct Int32Vect3 *va);
 367:math/pprz_algebra_int.h **** 
 368:math/pprz_algebra_int.h **** /** rotate 3D vector by transposed rotation matrix.
 369:math/pprz_algebra_int.h ****  * vb = m_b2a^T * va
 370:math/pprz_algebra_int.h ****  */
 371:math/pprz_algebra_int.h **** extern void int32_rmat_transp_vmult(struct Int32Vect3 *vb, struct Int32RMat *m_b2a,
 372:math/pprz_algebra_int.h ****                                     struct Int32Vect3 *va);
 373:math/pprz_algebra_int.h **** 
 374:math/pprz_algebra_int.h **** /** rotate anglular rates by rotation matrix.
 375:math/pprz_algebra_int.h ****  * rb = m_a2b * ra
 376:math/pprz_algebra_int.h ****  */
 377:math/pprz_algebra_int.h **** extern void int32_rmat_ratemult(struct Int32Rates *rb, struct Int32RMat *m_a2b,
 378:math/pprz_algebra_int.h ****                                 struct Int32Rates *ra);
 379:math/pprz_algebra_int.h **** 
 380:math/pprz_algebra_int.h **** /** rotate anglular rates by transposed rotation matrix.
 381:math/pprz_algebra_int.h ****  * rb = m_b2a^T * ra
 382:math/pprz_algebra_int.h ****  */
 383:math/pprz_algebra_int.h **** extern void int32_rmat_transp_ratemult(struct Int32Rates *rb, struct Int32RMat *m_b2a,
 384:math/pprz_algebra_int.h ****                                        struct Int32Rates *ra);
 385:math/pprz_algebra_int.h **** 
 386:math/pprz_algebra_int.h **** /// Convert unit quaternion to rotation matrix.
 387:math/pprz_algebra_int.h **** extern void int32_rmat_of_quat(struct Int32RMat *rm, struct Int32Quat *q);
 388:math/pprz_algebra_int.h **** 
 389:math/pprz_algebra_int.h **** /** Rotation matrix from 321 Euler angles (int).
 390:math/pprz_algebra_int.h ****  * The Euler angles are interpreted as zy'x'' (intrinsic) rotation.
 391:math/pprz_algebra_int.h ****  * First rotate around z with psi, then around the new y' with theta,
 392:math/pprz_algebra_int.h ****  * then around new x'' with phi.
 393:math/pprz_algebra_int.h ****  * This is the same as a xyz (extrinsic) rotation,
 394:math/pprz_algebra_int.h ****  * rotating around the fixed x, then y then z axis.
 395:math/pprz_algebra_int.h ****  * - psi range: -pi < psi <= pi
 396:math/pprz_algebra_int.h ****  * - theta range: -pi/2 <= theta <= pi/2
 397:math/pprz_algebra_int.h ****  * - phi range: -pi < phi <= pi
 398:math/pprz_algebra_int.h ****  * @param[out] rm pointer to rotation matrix
 399:math/pprz_algebra_int.h ****  * @param[in]  e pointer to Euler angles
 400:math/pprz_algebra_int.h ****  */
 401:math/pprz_algebra_int.h **** extern void int32_rmat_of_eulers_321(struct Int32RMat *rm, struct Int32Eulers *e);
 402:math/pprz_algebra_int.h **** 
 403:math/pprz_algebra_int.h **** /// Rotation matrix from 312 Euler angles.
 404:math/pprz_algebra_int.h **** extern void int32_rmat_of_eulers_312(struct Int32RMat *rm, struct Int32Eulers *e);
 405:math/pprz_algebra_int.h **** 
 406:math/pprz_algebra_int.h **** /// Rotation matrix from Euler angles.
 407:math/pprz_algebra_int.h **** #define int32_rmat_of_eulers int32_rmat_of_eulers_321
 408:math/pprz_algebra_int.h **** 
 409:math/pprz_algebra_int.h **** /* defines for backwards compatibility */
 410:math/pprz_algebra_int.h **** #define INT32_RMAT_COMP(_m_a2c, _m_a2b, _m_b2c) int32_rmat_comp(&(_m_a2c), &(_m_a2b), &(_m_b2c))
 411:math/pprz_algebra_int.h **** #define INT32_RMAT_COMP_INV(_m_a2b, _m_a2c, _m_b2c) int32_rmat_comp_inv(&(_m_a2b), &(_m_a2c), &(_m_
 412:math/pprz_algebra_int.h **** #define INT32_RMAT_VMULT(_vb, _m_a2b, _va) int32_rmat_vmult(&(_vb), &(_m_a2b), &(_va))
 413:math/pprz_algebra_int.h **** #define INT32_RMAT_TRANSP_VMULT(_vb, _m_b2a, _va) int32_rmat_transp_vmult(&(_vb), &(_m_b2a), &(_va)
 414:math/pprz_algebra_int.h **** #define INT32_RMAT_RATEMULT(_rb, _m_a2b, _ra) int32_rmat_ratemult(&(_rb), &(_m_a2b), &(_ra))
 415:math/pprz_algebra_int.h **** #define INT32_RMAT_TRANSP_RATEMULT(_rb, _m_b2a, _ra) int32_rmat_ratemult(&(_rb), &(_m_b2a), &(_ra))
 416:math/pprz_algebra_int.h **** 
 417:math/pprz_algebra_int.h **** #define INT32_RMAT_OF_QUAT(_rm, _q) int32_rmat_of_quat(&(_rm), &(_q))
 418:math/pprz_algebra_int.h **** #define INT32_RMAT_OF_EULERS(_rm, _e) int32_rmat_of_eulers_321(&(_rm), &(_e))
 419:math/pprz_algebra_int.h **** #define INT32_RMAT_OF_EULERS_321(_rm, _e) int32_rmat_of_eulers_321(&(_rm), &(_e))
 420:math/pprz_algebra_int.h **** #define INT32_RMAT_OF_EULERS_312(_rm, _e) int32_rmat_of_eulers_312(&(_rm), &(_e))
 421:math/pprz_algebra_int.h **** 
 422:math/pprz_algebra_int.h **** 
 423:math/pprz_algebra_int.h **** /*
 424:math/pprz_algebra_int.h ****  *
 425:math/pprz_algebra_int.h ****  * Quaternions
 426:math/pprz_algebra_int.h ****  *
 427:math/pprz_algebra_int.h ****  */
 428:math/pprz_algebra_int.h **** 
 429:math/pprz_algebra_int.h **** /** initialises a quaternion to identity */
 430:math/pprz_algebra_int.h **** static inline void int32_quat_identity(struct Int32Quat *q)
 431:math/pprz_algebra_int.h **** {
 432:math/pprz_algebra_int.h ****   q->qi = QUAT1_BFP_OF_REAL(1);
 433:math/pprz_algebra_int.h ****   q->qx = 0;
 434:math/pprz_algebra_int.h ****   q->qy = 0;
 435:math/pprz_algebra_int.h ****   q->qz = 0;
 436:math/pprz_algebra_int.h **** }
 437:math/pprz_algebra_int.h **** 
 438:math/pprz_algebra_int.h **** /** Norm of a quaternion.
 439:math/pprz_algebra_int.h ****  */
 440:math/pprz_algebra_int.h **** static inline uint32_t int32_quat_norm(struct Int32Quat *q)
 441:math/pprz_algebra_int.h **** {
 442:math/pprz_algebra_int.h ****   uint32_t n2 = q->qi * q->qi + q->qx * q->qx + q->qy * q->qy + q->qz * q->qz;
 443:math/pprz_algebra_int.h ****   return int32_sqrt(n2);
 444:math/pprz_algebra_int.h **** }
 445:math/pprz_algebra_int.h **** 
 446:math/pprz_algebra_int.h **** static inline void int32_quat_wrap_shortest(struct Int32Quat *q)
 447:math/pprz_algebra_int.h **** {
  27              		.loc 1 447 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 448:math/pprz_algebra_int.h ****   if (q->qi < 0) {
  33              		.loc 1 448 0
  34 0000 0368     		ldr	r3, [r0]
  35 0002 002B     		cmp	r3, #0
  36 0004 0ADA     		bge	.L1
 449:math/pprz_algebra_int.h ****     QUAT_EXPLEMENTARY(*q, *q);
  37              		.loc 1 449 0
  38 0006 5B42     		negs	r3, r3
  39 0008 0360     		str	r3, [r0]
  40 000a 4368     		ldr	r3, [r0, #4]
  41 000c 5B42     		negs	r3, r3
  42 000e 4360     		str	r3, [r0, #4]
  43 0010 8368     		ldr	r3, [r0, #8]
  44 0012 5B42     		negs	r3, r3
  45 0014 8360     		str	r3, [r0, #8]
  46 0016 C368     		ldr	r3, [r0, #12]
  47 0018 5B42     		negs	r3, r3
  48 001a C360     		str	r3, [r0, #12]
  49              	.L1:
  50 001c 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE7:
  54              		.section	.text.int32_sqrt,"ax",%progbits
  55              		.align	1
  56              		.global	int32_sqrt
  57              		.thumb
  58              		.thumb_func
  60              	int32_sqrt:
  61              	.LFB9:
  62              		.file 2 "math/pprz_algebra_int.c"
   1:math/pprz_algebra_int.c **** /*
   2:math/pprz_algebra_int.c ****  * Copyright (C) 2008-2014 The Paparazzi Team
   3:math/pprz_algebra_int.c ****  *
   4:math/pprz_algebra_int.c ****  * This file is part of paparazzi.
   5:math/pprz_algebra_int.c ****  *
   6:math/pprz_algebra_int.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:math/pprz_algebra_int.c ****  * it under the terms of the GNU General Public License as published by
   8:math/pprz_algebra_int.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:math/pprz_algebra_int.c ****  * any later version.
  10:math/pprz_algebra_int.c ****  *
  11:math/pprz_algebra_int.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:math/pprz_algebra_int.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:math/pprz_algebra_int.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:math/pprz_algebra_int.c ****  * GNU General Public License for more details.
  15:math/pprz_algebra_int.c ****  *
  16:math/pprz_algebra_int.c ****  * You should have received a copy of the GNU General Public License
  17:math/pprz_algebra_int.c ****  * along with paparazzi; see the file COPYING.  If not, see
  18:math/pprz_algebra_int.c ****  * <http://www.gnu.org/licenses/>.
  19:math/pprz_algebra_int.c ****  */
  20:math/pprz_algebra_int.c **** 
  21:math/pprz_algebra_int.c **** /**
  22:math/pprz_algebra_int.c ****  * @file pprz_algebra_int.c
  23:math/pprz_algebra_int.c ****  * @brief Paparazzi fixed point algebra.
  24:math/pprz_algebra_int.c ****  *
  25:math/pprz_algebra_int.c ****  */
  26:math/pprz_algebra_int.c **** 
  27:math/pprz_algebra_int.c **** #include "pprz_algebra_int.h"
  28:math/pprz_algebra_int.c **** 
  29:math/pprz_algebra_int.c **** #define INT32_SQRT_MAX_ITER 40
  30:math/pprz_algebra_int.c **** uint32_t int32_sqrt(uint32_t in)
  31:math/pprz_algebra_int.c **** {
  63              		.loc 2 31 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68              	.LVL1:
  32:math/pprz_algebra_int.c ****   if (in == 0) {
  69              		.loc 2 32 0
  70 0000 78B1     		cbz	r0, .L5
  71 0002 0246     		mov	r2, r0
  72 0004 2821     		movs	r1, #40
  73              	.L6:
  74              	.LVL2:
  75              	.LBB7:
  76              	.LBB8:
  33:math/pprz_algebra_int.c ****     return 0;
  34:math/pprz_algebra_int.c ****   } else {
  35:math/pprz_algebra_int.c ****     uint32_t s1, s2;
  36:math/pprz_algebra_int.c ****     uint8_t iter = 0;
  37:math/pprz_algebra_int.c ****     s2 = in;
  38:math/pprz_algebra_int.c ****     do {
  39:math/pprz_algebra_int.c ****       s1 = s2;
  40:math/pprz_algebra_int.c ****       s2 = in / s1;
  77              		.loc 2 40 0
  78 0006 B0FBF2F3 		udiv	r3, r0, r2
  79              	.LVL3:
  41:math/pprz_algebra_int.c ****       s2 += s1;
  80              		.loc 2 41 0
  81 000a 1344     		add	r3, r3, r2
  82              	.LVL4:
  42:math/pprz_algebra_int.c ****       s2 /= 2;
  83              		.loc 2 42 0
  84 000c 5B08     		lsrs	r3, r3, #1
  85              	.LVL5:
  43:math/pprz_algebra_int.c ****       iter++;
  44:math/pprz_algebra_int.c ****     } while (((s1 - s2) > 1) && (iter < INT32_SQRT_MAX_ITER));
  86              		.loc 2 44 0
  87 000e D21A     		subs	r2, r2, r3
  88              	.LVL6:
  89 0010 012A     		cmp	r2, #1
  90 0012 05D9     		bls	.L9
  91 0014 0139     		subs	r1, r1, #1
  92              	.LVL7:
  93 0016 11F0FF01 		ands	r1, r1, #255
  94              	.LVL8:
  95 001a 01D0     		beq	.L9
  42:math/pprz_algebra_int.c ****       s2 /= 2;
  96              		.loc 2 42 0
  97 001c 1A46     		mov	r2, r3
  98 001e F2E7     		b	.L6
  99              	.L9:
 100 0020 1846     		mov	r0, r3
 101              	.LVL9:
 102              	.L5:
 103              	.LBE8:
 104              	.LBE7:
  45:math/pprz_algebra_int.c ****     return s2;
  46:math/pprz_algebra_int.c ****   }
  47:math/pprz_algebra_int.c **** }
 105              		.loc 2 47 0
 106 0022 7047     		bx	lr
 107              		.cfi_endproc
 108              	.LFE9:
 110              		.section	.text.int32_quat_normalize,"ax",%progbits
 111              		.align	1
 112              		.thumb
 113              		.thumb_func
 115              	int32_quat_normalize:
 116              	.LFB8:
 450:math/pprz_algebra_int.h ****   }
 451:math/pprz_algebra_int.h **** }
 452:math/pprz_algebra_int.h **** 
 453:math/pprz_algebra_int.h **** /** normalize a quaternion inplace */
 454:math/pprz_algebra_int.h **** static inline void int32_quat_normalize(struct Int32Quat *q)
 455:math/pprz_algebra_int.h **** {
 117              		.loc 1 455 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL10:
 122 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 123              		.cfi_def_cfa_offset 24
 124              		.cfi_offset 4, -24
 125              		.cfi_offset 5, -20
 126              		.cfi_offset 6, -16
 127              		.cfi_offset 7, -12
 128              		.cfi_offset 8, -8
 129              		.cfi_offset 14, -4
 130              	.LBB11:
 131              	.LBB12:
 442:math/pprz_algebra_int.h ****   uint32_t n2 = q->qi * q->qi + q->qx * q->qx + q->qy * q->qy + q->qz * q->qz;
 132              		.loc 1 442 0
 133 0004 4768     		ldr	r7, [r0, #4]
 134 0006 D0F80080 		ldr	r8, [r0]
 135 000a 8668     		ldr	r6, [r0, #8]
 136 000c C568     		ldr	r5, [r0, #12]
 137              	.LVL11:
 138              	.LBE12:
 139              	.LBE11:
 140              		.loc 1 455 0
 141 000e 0446     		mov	r4, r0
 142              	.LBB14:
 143              	.LBB13:
 442:math/pprz_algebra_int.h ****   uint32_t n2 = q->qi * q->qi + q->qx * q->qx + q->qy * q->qy + q->qz * q->qz;
 144              		.loc 1 442 0
 145 0010 07FB07F0 		mul	r0, r7, r7
 146              	.LVL12:
 147 0014 08FB0800 		mla	r0, r8, r8, r0
 148 0018 06FB0600 		mla	r0, r6, r6, r0
 443:math/pprz_algebra_int.h ****   return int32_sqrt(n2);
 149              		.loc 1 443 0
 150 001c 05FB0500 		mla	r0, r5, r5, r0
 151              	.LVL13:
 152 0020 FFF7FEFF 		bl	int32_sqrt
 153              	.LVL14:
 154              	.LBE13:
 155              	.LBE14:
 456:math/pprz_algebra_int.h ****   int32_t n = int32_quat_norm(q);
 457:math/pprz_algebra_int.h ****   if (n > 0) {
 156              		.loc 1 457 0
 157 0024 0028     		cmp	r0, #0
 158 0026 10DD     		ble	.L11
 458:math/pprz_algebra_int.h ****     q->qi = q->qi * QUAT1_BFP_OF_REAL(1) / n;
 159              		.loc 1 458 0
 160 0028 4FEAC838 		lsl	r8, r8, #15
 161              	.LVL15:
 459:math/pprz_algebra_int.h ****     q->qx = q->qx * QUAT1_BFP_OF_REAL(1) / n;
 162              		.loc 1 459 0
 163 002c FF03     		lsls	r7, r7, #15
 460:math/pprz_algebra_int.h ****     q->qy = q->qy * QUAT1_BFP_OF_REAL(1) / n;
 164              		.loc 1 460 0
 165 002e F603     		lsls	r6, r6, #15
 461:math/pprz_algebra_int.h ****     q->qz = q->qz * QUAT1_BFP_OF_REAL(1) / n;
 166              		.loc 1 461 0
 167 0030 ED03     		lsls	r5, r5, #15
 458:math/pprz_algebra_int.h ****     q->qi = q->qi * QUAT1_BFP_OF_REAL(1) / n;
 168              		.loc 1 458 0
 169 0032 98FBF0F3 		sdiv	r3, r8, r0
 459:math/pprz_algebra_int.h ****     q->qx = q->qx * QUAT1_BFP_OF_REAL(1) / n;
 170              		.loc 1 459 0
 171 0036 97FBF0F7 		sdiv	r7, r7, r0
 460:math/pprz_algebra_int.h ****     q->qy = q->qy * QUAT1_BFP_OF_REAL(1) / n;
 172              		.loc 1 460 0
 173 003a 96FBF0F6 		sdiv	r6, r6, r0
 174              		.loc 1 461 0
 175 003e 95FBF0F0 		sdiv	r0, r5, r0
 176              	.LVL16:
 458:math/pprz_algebra_int.h ****     q->qi = q->qi * QUAT1_BFP_OF_REAL(1) / n;
 177              		.loc 1 458 0
 178 0042 2360     		str	r3, [r4]
 459:math/pprz_algebra_int.h ****     q->qx = q->qx * QUAT1_BFP_OF_REAL(1) / n;
 179              		.loc 1 459 0
 180 0044 6760     		str	r7, [r4, #4]
 460:math/pprz_algebra_int.h ****     q->qy = q->qy * QUAT1_BFP_OF_REAL(1) / n;
 181              		.loc 1 460 0
 182 0046 A660     		str	r6, [r4, #8]
 183              		.loc 1 461 0
 184 0048 E060     		str	r0, [r4, #12]
 185              	.L11:
 186 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 187              		.cfi_endproc
 188              	.LFE8:
 190              		.section	.text.int32_rmat_comp,"ax",%progbits
 191              		.align	1
 192              		.global	int32_rmat_comp
 193              		.thumb
 194              		.thumb_func
 196              	int32_rmat_comp:
 197              	.LFB10:
  48:math/pprz_algebra_int.c **** 
  49:math/pprz_algebra_int.c **** 
  50:math/pprz_algebra_int.c **** /*
  51:math/pprz_algebra_int.c ****  *
  52:math/pprz_algebra_int.c ****  * Rotation matrices
  53:math/pprz_algebra_int.c ****  *
  54:math/pprz_algebra_int.c ****  */
  55:math/pprz_algebra_int.c **** 
  56:math/pprz_algebra_int.c **** /** Composition (multiplication) of two rotation matrices.
  57:math/pprz_algebra_int.c ****  * _m_a2c = _m_a2b comp _m_b2c , aka  _m_a2c = _m_b2c * _m_a2b
  58:math/pprz_algebra_int.c ****  */
  59:math/pprz_algebra_int.c **** void int32_rmat_comp(struct Int32RMat *m_a2c, struct Int32RMat *m_a2b, struct Int32RMat *m_b2c)
  60:math/pprz_algebra_int.c **** {
 198              		.loc 2 60 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 8
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              	.LVL17:
 203 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 204              		.cfi_def_cfa_offset 48
 205              		.cfi_offset 0, -48
 206              		.cfi_offset 1, -44
 207              		.cfi_offset 2, -40
 208              		.cfi_offset 4, -36
 209              		.cfi_offset 5, -32
 210              		.cfi_offset 6, -28
 211              		.cfi_offset 7, -24
 212              		.cfi_offset 8, -20
 213              		.cfi_offset 9, -16
 214              		.cfi_offset 10, -12
 215              		.cfi_offset 11, -8
 216              		.cfi_offset 14, -4
  61:math/pprz_algebra_int.c ****   m_a2c->m[0] = (m_b2c->m[0] * m_a2b->m[0] + m_b2c->m[1] * m_a2b->m[3] + m_b2c->m[2] * m_a2b->m[6])
 217              		.loc 2 61 0
 218 0004 5768     		ldr	r7, [r2, #4]
 219 0006 D1F80C90 		ldr	r9, [r1, #12]
 220 000a 0E68     		ldr	r6, [r1]
 221 000c 1468     		ldr	r4, [r2]
 222 000e D2F808C0 		ldr	ip, [r2, #8]
 223 0012 8D69     		ldr	r5, [r1, #24]
 224 0014 09FB07F3 		mul	r3, r9, r7
 225 0018 06FB0434 		mla	r4, r6, r4, r3
 226 001c 05FB0C44 		mla	r4, r5, ip, r4
 227 0020 A413     		asrs	r4, r4, #14
 228 0022 0460     		str	r4, [r0]
  62:math/pprz_algebra_int.c ****   m_a2c->m[1] = (m_b2c->m[0] * m_a2b->m[1] + m_b2c->m[1] * m_a2b->m[4] + m_b2c->m[2] * m_a2b->m[7])
 229              		.loc 2 62 0
 230 0024 D1F81080 		ldr	r8, [r1, #16]
 231 0028 D2F800A0 		ldr	r10, [r2]
 232 002c 4B68     		ldr	r3, [r1, #4]
 233 002e CC69     		ldr	r4, [r1, #28]
 234 0030 08FB07F7 		mul	r7, r8, r7
 235 0034 03FB0A73 		mla	r3, r3, r10, r7
 236 0038 04FB0C33 		mla	r3, r4, ip, r3
 237 003c 9B13     		asrs	r3, r3, #14
 238 003e 4360     		str	r3, [r0, #4]
  63:math/pprz_algebra_int.c ****   m_a2c->m[2] = (m_b2c->m[0] * m_a2b->m[2] + m_b2c->m[1] * m_a2b->m[5] + m_b2c->m[2] * m_a2b->m[8])
 239              		.loc 2 63 0
 240 0040 D1F814B0 		ldr	fp, [r1, #20]
 241 0044 5768     		ldr	r7, [r2, #4]
 242 0046 8E68     		ldr	r6, [r1, #8]
 243 0048 0B6A     		ldr	r3, [r1, #32]
 244 004a 07FB0BF7 		mul	r7, r7, fp
 245 004e 06FB0A77 		mla	r7, r6, r10, r7
 246 0052 03FB0C76 		mla	r6, r3, ip, r7
 247 0056 B613     		asrs	r6, r6, #14
 248 0058 8660     		str	r6, [r0, #8]
  64:math/pprz_algebra_int.c ****   m_a2c->m[3] = (m_b2c->m[3] * m_a2b->m[0] + m_b2c->m[4] * m_a2b->m[3] + m_b2c->m[5] * m_a2b->m[6])
 249              		.loc 2 64 0
 250 005a D2F810A0 		ldr	r10, [r2, #16]
 251 005e D1F800C0 		ldr	ip, [r1]
 252 0062 D668     		ldr	r6, [r2, #12]
 253 0064 5769     		ldr	r7, [r2, #20]
 254 0066 09FB0AF9 		mul	r9, r9, r10
 255 006a 06FB0C96 		mla	r6, r6, ip, r9
 256 006e 05FB0766 		mla	r6, r5, r7, r6
 257 0072 B613     		asrs	r6, r6, #14
 258 0074 C660     		str	r6, [r0, #12]
  65:math/pprz_algebra_int.c ****   m_a2c->m[4] = (m_b2c->m[3] * m_a2b->m[1] + m_b2c->m[4] * m_a2b->m[4] + m_b2c->m[5] * m_a2b->m[7])
 259              		.loc 2 65 0
 260 0076 4E68     		ldr	r6, [r1, #4]
 261 0078 D2F80C90 		ldr	r9, [r2, #12]
 262 007c 0196     		str	r6, [sp, #4]
 263 007e 08FB0AF8 		mul	r8, r8, r10
 264 0082 06FB0988 		mla	r8, r6, r9, r8
 265 0086 04FB0786 		mla	r6, r4, r7, r8
 266 008a B613     		asrs	r6, r6, #14
 267 008c 0661     		str	r6, [r0, #16]
  66:math/pprz_algebra_int.c ****   m_a2c->m[5] = (m_b2c->m[3] * m_a2b->m[2] + m_b2c->m[4] * m_a2b->m[5] + m_b2c->m[5] * m_a2b->m[8])
 268              		.loc 2 66 0
 269 008e 1669     		ldr	r6, [r2, #16]
 270 0090 D1F808A0 		ldr	r10, [r1, #8]
 271 0094 06FB0BF6 		mul	r6, r6, fp
 272 0098 0AFB0969 		mla	r9, r10, r9, r6
 273 009c 03FB0797 		mla	r7, r3, r7, r9
 274 00a0 BF13     		asrs	r7, r7, #14
 275 00a2 4761     		str	r7, [r0, #20]
  67:math/pprz_algebra_int.c ****   m_a2c->m[6] = (m_b2c->m[6] * m_a2b->m[0] + m_b2c->m[7] * m_a2b->m[3] + m_b2c->m[8] * m_a2b->m[6])
 276              		.loc 2 67 0
 277 00a4 D2F81C90 		ldr	r9, [r2, #28]
 278 00a8 CF68     		ldr	r7, [r1, #12]
 279 00aa 9669     		ldr	r6, [r2, #24]
 280 00ac D2F82080 		ldr	r8, [r2, #32]
 281 00b0 07FB09F7 		mul	r7, r7, r9
 282 00b4 06FB0C76 		mla	r6, r6, ip, r7
 283 00b8 05FB0865 		mla	r5, r5, r8, r6
 284 00bc AD13     		asrs	r5, r5, #14
 285 00be 8561     		str	r5, [r0, #24]
  68:math/pprz_algebra_int.c ****   m_a2c->m[7] = (m_b2c->m[6] * m_a2b->m[1] + m_b2c->m[7] * m_a2b->m[4] + m_b2c->m[8] * m_a2b->m[7])
 286              		.loc 2 68 0
 287 00c0 0D69     		ldr	r5, [r1, #16]
 288 00c2 9669     		ldr	r6, [r2, #24]
 289 00c4 019F     		ldr	r7, [sp, #4]
 290 00c6 05FB09F5 		mul	r5, r5, r9
 291 00ca 07FB0655 		mla	r5, r7, r6, r5
 292 00ce 04FB0854 		mla	r4, r4, r8, r5
 293 00d2 A413     		asrs	r4, r4, #14
 294 00d4 C461     		str	r4, [r0, #28]
  69:math/pprz_algebra_int.c ****   m_a2c->m[8] = (m_b2c->m[6] * m_a2b->m[2] + m_b2c->m[7] * m_a2b->m[5] + m_b2c->m[8] * m_a2b->m[8])
 295              		.loc 2 69 0
 296 00d6 D269     		ldr	r2, [r2, #28]
 297              	.LVL18:
 298 00d8 4969     		ldr	r1, [r1, #20]
 299              	.LVL19:
 300 00da 4A43     		muls	r2, r1, r2
 301 00dc 0AFB062A 		mla	r10, r10, r6, r2
 302 00e0 03FB08A3 		mla	r3, r3, r8, r10
 303 00e4 9B13     		asrs	r3, r3, #14
 304 00e6 0362     		str	r3, [r0, #32]
  70:math/pprz_algebra_int.c **** }
 305              		.loc 2 70 0
 306 00e8 03B0     		add	sp, sp, #12
 307              		@ sp needed
 308 00ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 309              		.cfi_endproc
 310              	.LFE10:
 312              		.section	.text.int32_rmat_comp_inv,"ax",%progbits
 313              		.align	1
 314              		.global	int32_rmat_comp_inv
 315              		.thumb
 316              		.thumb_func
 318              	int32_rmat_comp_inv:
 319              	.LFB11:
  71:math/pprz_algebra_int.c **** 
  72:math/pprz_algebra_int.c **** /** Composition (multiplication) of two rotation matrices.
  73:math/pprz_algebra_int.c ****  * _m_a2b = _m_a2c comp_inv _m_b2c , aka  _m_a2b = inv(_m_b2c) * _m_a2c
  74:math/pprz_algebra_int.c ****  */
  75:math/pprz_algebra_int.c **** void int32_rmat_comp_inv(struct Int32RMat *m_a2b, struct Int32RMat *m_a2c, struct Int32RMat *m_b2c)
  76:math/pprz_algebra_int.c **** {
 320              		.loc 2 76 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              	.LVL20:
  77:math/pprz_algebra_int.c ****   m_a2b->m[0] = (m_b2c->m[0] * m_a2c->m[0] + m_b2c->m[3] * m_a2c->m[3] + m_b2c->m[6] * m_a2c->m[6])
 325              		.loc 2 77 0
 326 0000 D2F80CC0 		ldr	ip, [r2, #12]
 327 0004 1368     		ldr	r3, [r2]
  76:math/pprz_algebra_int.c **** {
 328              		.loc 2 76 0
 329 0006 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 330              		.cfi_def_cfa_offset 36
 331              		.cfi_offset 4, -36
 332              		.cfi_offset 5, -32
 333              		.cfi_offset 6, -28
 334              		.cfi_offset 7, -24
 335              		.cfi_offset 8, -20
 336              		.cfi_offset 9, -16
 337              		.cfi_offset 10, -12
 338              		.cfi_offset 11, -8
 339              		.cfi_offset 14, -4
 340              		.loc 2 77 0
 341 000a D1F80C80 		ldr	r8, [r1, #12]
 342 000e 0C68     		ldr	r4, [r1]
 343 0010 9669     		ldr	r6, [r2, #24]
 344 0012 8D69     		ldr	r5, [r1, #24]
 345 0014 08FB0CF7 		mul	r7, r8, ip
 346 0018 04FB0373 		mla	r3, r4, r3, r7
 347 001c 05FB0633 		mla	r3, r5, r6, r3
 348 0020 9B13     		asrs	r3, r3, #14
 349 0022 0360     		str	r3, [r0]
  78:math/pprz_algebra_int.c ****   m_a2b->m[1] = (m_b2c->m[0] * m_a2c->m[1] + m_b2c->m[3] * m_a2c->m[4] + m_b2c->m[6] * m_a2c->m[7])
 350              		.loc 2 78 0
 351 0024 D1F81090 		ldr	r9, [r1, #16]
 352 0028 D2F800A0 		ldr	r10, [r2]
 353 002c 4B68     		ldr	r3, [r1, #4]
 354 002e CC69     		ldr	r4, [r1, #28]
 355 0030 09FB0CF7 		mul	r7, r9, ip
 356 0034 03FB0A73 		mla	r3, r3, r10, r7
 357 0038 04FB0633 		mla	r3, r4, r6, r3
 358 003c 9B13     		asrs	r3, r3, #14
 359 003e 4360     		str	r3, [r0, #4]
  79:math/pprz_algebra_int.c ****   m_a2b->m[2] = (m_b2c->m[0] * m_a2c->m[2] + m_b2c->m[3] * m_a2c->m[5] + m_b2c->m[6] * m_a2c->m[8])
 360              		.loc 2 79 0
 361 0040 D1F814B0 		ldr	fp, [r1, #20]
 362 0044 8F68     		ldr	r7, [r1, #8]
 363 0046 0B6A     		ldr	r3, [r1, #32]
 364 0048 0BFB0CFC 		mul	ip, fp, ip
 365 004c 07FB0AC7 		mla	r7, r7, r10, ip
 366 0050 03FB0676 		mla	r6, r3, r6, r7
 367 0054 B613     		asrs	r6, r6, #14
 368 0056 8660     		str	r6, [r0, #8]
  80:math/pprz_algebra_int.c ****   m_a2b->m[3] = (m_b2c->m[1] * m_a2c->m[0] + m_b2c->m[4] * m_a2c->m[3] + m_b2c->m[7] * m_a2c->m[6])
 369              		.loc 2 80 0
 370 0058 1669     		ldr	r6, [r2, #16]
 371 005a D2F804C0 		ldr	ip, [r2, #4]
 372 005e D1F800A0 		ldr	r10, [r1]
 373 0062 D769     		ldr	r7, [r2, #28]
 374 0064 08FB06F8 		mul	r8, r8, r6
 375 0068 0AFB0C88 		mla	r8, r10, ip, r8
 376 006c 05FB0788 		mla	r8, r5, r7, r8
 377 0070 4FEAA838 		asr	r8, r8, #14
 378 0074 C0F80C80 		str	r8, [r0, #12]
  81:math/pprz_algebra_int.c ****   m_a2b->m[4] = (m_b2c->m[1] * m_a2c->m[1] + m_b2c->m[4] * m_a2c->m[4] + m_b2c->m[7] * m_a2c->m[7])
 379              		.loc 2 81 0
 380 0078 D1F80480 		ldr	r8, [r1, #4]
 381 007c 09FB06F6 		mul	r6, r9, r6
 382 0080 08FB0C66 		mla	r6, r8, ip, r6
 383 0084 04FB0766 		mla	r6, r4, r7, r6
 384 0088 B613     		asrs	r6, r6, #14
 385 008a 0661     		str	r6, [r0, #16]
  82:math/pprz_algebra_int.c ****   m_a2b->m[5] = (m_b2c->m[1] * m_a2c->m[2] + m_b2c->m[4] * m_a2c->m[5] + m_b2c->m[7] * m_a2c->m[8])
 386              		.loc 2 82 0
 387 008c 1669     		ldr	r6, [r2, #16]
 388 008e D1F80890 		ldr	r9, [r1, #8]
 389 0092 06FB0BF6 		mul	r6, r6, fp
 390 0096 09FB0C6C 		mla	ip, r9, ip, r6
 391 009a 03FB07C7 		mla	r7, r3, r7, ip
 392 009e BF13     		asrs	r7, r7, #14
 393 00a0 4761     		str	r7, [r0, #20]
  83:math/pprz_algebra_int.c ****   m_a2b->m[6] = (m_b2c->m[2] * m_a2c->m[0] + m_b2c->m[5] * m_a2c->m[3] + m_b2c->m[8] * m_a2c->m[6])
 394              		.loc 2 83 0
 395 00a2 9668     		ldr	r6, [r2, #8]
 396 00a4 5769     		ldr	r7, [r2, #20]
 397 00a6 D2F820C0 		ldr	ip, [r2, #32]
 398 00aa CA68     		ldr	r2, [r1, #12]
 399              	.LVL21:
 400 00ac 7A43     		muls	r2, r7, r2
 401 00ae 0AFB062A 		mla	r10, r10, r6, r2
 402 00b2 05FB0CA5 		mla	r5, r5, ip, r10
 403 00b6 AD13     		asrs	r5, r5, #14
 404 00b8 8561     		str	r5, [r0, #24]
  84:math/pprz_algebra_int.c ****   m_a2b->m[7] = (m_b2c->m[2] * m_a2c->m[1] + m_b2c->m[5] * m_a2c->m[4] + m_b2c->m[8] * m_a2c->m[7])
 405              		.loc 2 84 0
 406 00ba 0A69     		ldr	r2, [r1, #16]
 407 00bc 7A43     		muls	r2, r7, r2
 408 00be 08FB0628 		mla	r8, r8, r6, r2
 409 00c2 04FB0C84 		mla	r4, r4, ip, r8
 410 00c6 A413     		asrs	r4, r4, #14
 411 00c8 C461     		str	r4, [r0, #28]
  85:math/pprz_algebra_int.c ****   m_a2b->m[8] = (m_b2c->m[2] * m_a2c->m[2] + m_b2c->m[5] * m_a2c->m[5] + m_b2c->m[8] * m_a2c->m[8])
 412              		.loc 2 85 0
 413 00ca 4A69     		ldr	r2, [r1, #20]
 414 00cc 5743     		muls	r7, r2, r7
 415 00ce 09FB0679 		mla	r9, r9, r6, r7
 416 00d2 03FB0C93 		mla	r3, r3, ip, r9
 417 00d6 9B13     		asrs	r3, r3, #14
 418 00d8 0362     		str	r3, [r0, #32]
 419 00da BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 420              		.cfi_endproc
 421              	.LFE11:
 423              		.section	.text.int32_rmat_vmult,"ax",%progbits
 424              		.align	1
 425              		.global	int32_rmat_vmult
 426              		.thumb
 427              		.thumb_func
 429              	int32_rmat_vmult:
 430              	.LFB12:
  86:math/pprz_algebra_int.c **** }
  87:math/pprz_algebra_int.c **** 
  88:math/pprz_algebra_int.c **** /** rotate 3D vector by rotation matrix.
  89:math/pprz_algebra_int.c ****  * vb = m_a2b * va
  90:math/pprz_algebra_int.c ****  */
  91:math/pprz_algebra_int.c **** void int32_rmat_vmult(struct Int32Vect3 *vb, struct Int32RMat *m_a2b, struct Int32Vect3 *va)
  92:math/pprz_algebra_int.c **** {
 431              		.loc 2 92 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              	.LVL22:
 436 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 437              		.cfi_def_cfa_offset 20
 438              		.cfi_offset 4, -20
 439              		.cfi_offset 5, -16
 440              		.cfi_offset 6, -12
 441              		.cfi_offset 7, -8
 442              		.cfi_offset 14, -4
  93:math/pprz_algebra_int.c ****   vb->x = (m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z) >> INT32_TRIG_FRAC;
 443              		.loc 2 93 0
 444 0002 5568     		ldr	r5, [r2, #4]
 445 0004 4C68     		ldr	r4, [r1, #4]
 446 0006 1768     		ldr	r7, [r2]
 447 0008 0E68     		ldr	r6, [r1]
 448 000a 9368     		ldr	r3, [r2, #8]
 449 000c 6C43     		muls	r4, r5, r4
 450 000e 07FB0646 		mla	r6, r7, r6, r4
 451 0012 8C68     		ldr	r4, [r1, #8]
  94:math/pprz_algebra_int.c ****   vb->y = (m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z) >> INT32_TRIG_FRAC;
 452              		.loc 2 94 0
 453 0014 CF68     		ldr	r7, [r1, #12]
  93:math/pprz_algebra_int.c ****   vb->x = (m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z) >> INT32_TRIG_FRAC;
 454              		.loc 2 93 0
 455 0016 04FB0364 		mla	r4, r4, r3, r6
 456 001a A413     		asrs	r4, r4, #14
 457              		.loc 2 94 0
 458 001c 0E69     		ldr	r6, [r1, #16]
  93:math/pprz_algebra_int.c ****   vb->x = (m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z) >> INT32_TRIG_FRAC;
 459              		.loc 2 93 0
 460 001e 0460     		str	r4, [r0]
 461              		.loc 2 94 0
 462 0020 1468     		ldr	r4, [r2]
 463 0022 6E43     		muls	r6, r5, r6
 464 0024 07FB0467 		mla	r7, r7, r4, r6
 465 0028 4E69     		ldr	r6, [r1, #20]
  95:math/pprz_algebra_int.c ****   vb->z = (m_a2b->m[6] * va->x + m_a2b->m[7] * va->y + m_a2b->m[8] * va->z) >> INT32_TRIG_FRAC;
 466              		.loc 2 95 0
 467 002a 8D69     		ldr	r5, [r1, #24]
  94:math/pprz_algebra_int.c ****   vb->y = (m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z) >> INT32_TRIG_FRAC;
 468              		.loc 2 94 0
 469 002c 06FB0376 		mla	r6, r6, r3, r7
 470 0030 B613     		asrs	r6, r6, #14
 471 0032 4660     		str	r6, [r0, #4]
 472              		.loc 2 95 0
 473 0034 5268     		ldr	r2, [r2, #4]
 474              	.LVL23:
 475 0036 CE69     		ldr	r6, [r1, #28]
 476 0038 5643     		muls	r6, r2, r6
 477 003a 05FB0464 		mla	r4, r5, r4, r6
 478 003e 0D6A     		ldr	r5, [r1, #32]
 479 0040 05FB0343 		mla	r3, r5, r3, r4
 480 0044 9B13     		asrs	r3, r3, #14
 481 0046 8360     		str	r3, [r0, #8]
 482 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 483              		.cfi_endproc
 484              	.LFE12:
 486              		.section	.text.int32_rmat_transp_vmult,"ax",%progbits
 487              		.align	1
 488              		.global	int32_rmat_transp_vmult
 489              		.thumb
 490              		.thumb_func
 492              	int32_rmat_transp_vmult:
 493              	.LFB13:
  96:math/pprz_algebra_int.c **** }
  97:math/pprz_algebra_int.c **** 
  98:math/pprz_algebra_int.c **** /** rotate 3D vector by transposed rotation matrix.
  99:math/pprz_algebra_int.c ****  * vb = m_b2a^T * va
 100:math/pprz_algebra_int.c ****  */
 101:math/pprz_algebra_int.c **** void int32_rmat_transp_vmult(struct Int32Vect3 *vb, struct Int32RMat *m_b2a, struct Int32Vect3 *va)
 102:math/pprz_algebra_int.c **** {
 494              		.loc 2 102 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              	.LVL24:
 499 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 500              		.cfi_def_cfa_offset 20
 501              		.cfi_offset 4, -20
 502              		.cfi_offset 5, -16
 503              		.cfi_offset 6, -12
 504              		.cfi_offset 7, -8
 505              		.cfi_offset 14, -4
 103:math/pprz_algebra_int.c ****   vb->x = (m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z) >> INT32_TRIG_FRAC;
 506              		.loc 2 103 0
 507 0002 5568     		ldr	r5, [r2, #4]
 508 0004 CC68     		ldr	r4, [r1, #12]
 509 0006 1768     		ldr	r7, [r2]
 510 0008 0E68     		ldr	r6, [r1]
 511 000a 9368     		ldr	r3, [r2, #8]
 512 000c 6C43     		muls	r4, r5, r4
 513 000e 07FB0646 		mla	r6, r7, r6, r4
 514 0012 8C69     		ldr	r4, [r1, #24]
 104:math/pprz_algebra_int.c ****   vb->y = (m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z) >> INT32_TRIG_FRAC;
 515              		.loc 2 104 0
 516 0014 4F68     		ldr	r7, [r1, #4]
 103:math/pprz_algebra_int.c ****   vb->x = (m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z) >> INT32_TRIG_FRAC;
 517              		.loc 2 103 0
 518 0016 04FB0364 		mla	r4, r4, r3, r6
 519 001a A413     		asrs	r4, r4, #14
 520              		.loc 2 104 0
 521 001c 0E69     		ldr	r6, [r1, #16]
 103:math/pprz_algebra_int.c ****   vb->x = (m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z) >> INT32_TRIG_FRAC;
 522              		.loc 2 103 0
 523 001e 0460     		str	r4, [r0]
 524              		.loc 2 104 0
 525 0020 1468     		ldr	r4, [r2]
 526 0022 6E43     		muls	r6, r5, r6
 527 0024 07FB0467 		mla	r7, r7, r4, r6
 528 0028 CE69     		ldr	r6, [r1, #28]
 105:math/pprz_algebra_int.c ****   vb->z = (m_b2a->m[2] * va->x + m_b2a->m[5] * va->y + m_b2a->m[8] * va->z) >> INT32_TRIG_FRAC;
 529              		.loc 2 105 0
 530 002a 8D68     		ldr	r5, [r1, #8]
 104:math/pprz_algebra_int.c ****   vb->y = (m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z) >> INT32_TRIG_FRAC;
 531              		.loc 2 104 0
 532 002c 06FB0376 		mla	r6, r6, r3, r7
 533 0030 B613     		asrs	r6, r6, #14
 534 0032 4660     		str	r6, [r0, #4]
 535              		.loc 2 105 0
 536 0034 5268     		ldr	r2, [r2, #4]
 537              	.LVL25:
 538 0036 4E69     		ldr	r6, [r1, #20]
 539 0038 5643     		muls	r6, r2, r6
 540 003a 05FB0464 		mla	r4, r5, r4, r6
 541 003e 0D6A     		ldr	r5, [r1, #32]
 542 0040 05FB0343 		mla	r3, r5, r3, r4
 543 0044 9B13     		asrs	r3, r3, #14
 544 0046 8360     		str	r3, [r0, #8]
 545 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 546              		.cfi_endproc
 547              	.LFE13:
 549              		.section	.text.int32_rmat_ratemult,"ax",%progbits
 550              		.align	1
 551              		.global	int32_rmat_ratemult
 552              		.thumb
 553              		.thumb_func
 555              	int32_rmat_ratemult:
 556              	.LFB14:
 106:math/pprz_algebra_int.c **** }
 107:math/pprz_algebra_int.c **** 
 108:math/pprz_algebra_int.c **** /** rotate anglular rates by rotation matrix.
 109:math/pprz_algebra_int.c ****  * rb = m_a2b * ra
 110:math/pprz_algebra_int.c ****  */
 111:math/pprz_algebra_int.c **** void int32_rmat_ratemult(struct Int32Rates *rb, struct Int32RMat *m_a2b, struct Int32Rates *ra)
 112:math/pprz_algebra_int.c **** {
 557              		.loc 2 112 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              	.LVL26:
 562 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 563              		.cfi_def_cfa_offset 20
 564              		.cfi_offset 4, -20
 565              		.cfi_offset 5, -16
 566              		.cfi_offset 6, -12
 567              		.cfi_offset 7, -8
 568              		.cfi_offset 14, -4
 113:math/pprz_algebra_int.c ****   rb->p = (m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r) >> INT32_TRIG_FRAC;
 569              		.loc 2 113 0
 570 0002 5568     		ldr	r5, [r2, #4]
 571 0004 4C68     		ldr	r4, [r1, #4]
 572 0006 1768     		ldr	r7, [r2]
 573 0008 0E68     		ldr	r6, [r1]
 574 000a 9368     		ldr	r3, [r2, #8]
 575 000c 6C43     		muls	r4, r5, r4
 576 000e 07FB0646 		mla	r6, r7, r6, r4
 577 0012 8C68     		ldr	r4, [r1, #8]
 114:math/pprz_algebra_int.c ****   rb->q = (m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r) >> INT32_TRIG_FRAC;
 578              		.loc 2 114 0
 579 0014 CF68     		ldr	r7, [r1, #12]
 113:math/pprz_algebra_int.c ****   rb->p = (m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r) >> INT32_TRIG_FRAC;
 580              		.loc 2 113 0
 581 0016 04FB0364 		mla	r4, r4, r3, r6
 582 001a A413     		asrs	r4, r4, #14
 583              		.loc 2 114 0
 584 001c 0E69     		ldr	r6, [r1, #16]
 113:math/pprz_algebra_int.c ****   rb->p = (m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r) >> INT32_TRIG_FRAC;
 585              		.loc 2 113 0
 586 001e 0460     		str	r4, [r0]
 587              		.loc 2 114 0
 588 0020 1468     		ldr	r4, [r2]
 589 0022 6E43     		muls	r6, r5, r6
 590 0024 07FB0467 		mla	r7, r7, r4, r6
 591 0028 4E69     		ldr	r6, [r1, #20]
 115:math/pprz_algebra_int.c ****   rb->r = (m_a2b->m[6] * ra->p + m_a2b->m[7] * ra->q + m_a2b->m[8] * ra->r) >> INT32_TRIG_FRAC;
 592              		.loc 2 115 0
 593 002a 8D69     		ldr	r5, [r1, #24]
 114:math/pprz_algebra_int.c ****   rb->q = (m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r) >> INT32_TRIG_FRAC;
 594              		.loc 2 114 0
 595 002c 06FB0376 		mla	r6, r6, r3, r7
 596 0030 B613     		asrs	r6, r6, #14
 597 0032 4660     		str	r6, [r0, #4]
 598              		.loc 2 115 0
 599 0034 5268     		ldr	r2, [r2, #4]
 600              	.LVL27:
 601 0036 CE69     		ldr	r6, [r1, #28]
 602 0038 5643     		muls	r6, r2, r6
 603 003a 05FB0464 		mla	r4, r5, r4, r6
 604 003e 0D6A     		ldr	r5, [r1, #32]
 605 0040 05FB0343 		mla	r3, r5, r3, r4
 606 0044 9B13     		asrs	r3, r3, #14
 607 0046 8360     		str	r3, [r0, #8]
 608 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 609              		.cfi_endproc
 610              	.LFE14:
 612              		.section	.text.int32_rmat_transp_ratemult,"ax",%progbits
 613              		.align	1
 614              		.global	int32_rmat_transp_ratemult
 615              		.thumb
 616              		.thumb_func
 618              	int32_rmat_transp_ratemult:
 619              	.LFB15:
 116:math/pprz_algebra_int.c **** }
 117:math/pprz_algebra_int.c **** 
 118:math/pprz_algebra_int.c **** /** rotate anglular rates by transposed rotation matrix.
 119:math/pprz_algebra_int.c ****  * rb = m_b2a^T * ra
 120:math/pprz_algebra_int.c ****  */
 121:math/pprz_algebra_int.c **** void int32_rmat_transp_ratemult(struct Int32Rates *rb, struct Int32RMat *m_b2a, struct Int32Rates *
 122:math/pprz_algebra_int.c **** {
 620              		.loc 2 122 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              	.LVL28:
 625 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 626              		.cfi_def_cfa_offset 20
 627              		.cfi_offset 4, -20
 628              		.cfi_offset 5, -16
 629              		.cfi_offset 6, -12
 630              		.cfi_offset 7, -8
 631              		.cfi_offset 14, -4
 123:math/pprz_algebra_int.c ****   rb->p = (m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r) >> INT32_TRIG_FRAC;
 632              		.loc 2 123 0
 633 0002 5568     		ldr	r5, [r2, #4]
 634 0004 CC68     		ldr	r4, [r1, #12]
 635 0006 1768     		ldr	r7, [r2]
 636 0008 0E68     		ldr	r6, [r1]
 637 000a 9368     		ldr	r3, [r2, #8]
 638 000c 6C43     		muls	r4, r5, r4
 639 000e 07FB0646 		mla	r6, r7, r6, r4
 640 0012 8C69     		ldr	r4, [r1, #24]
 124:math/pprz_algebra_int.c ****   rb->q = (m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r) >> INT32_TRIG_FRAC;
 641              		.loc 2 124 0
 642 0014 4F68     		ldr	r7, [r1, #4]
 123:math/pprz_algebra_int.c ****   rb->p = (m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r) >> INT32_TRIG_FRAC;
 643              		.loc 2 123 0
 644 0016 04FB0364 		mla	r4, r4, r3, r6
 645 001a A413     		asrs	r4, r4, #14
 646              		.loc 2 124 0
 647 001c 0E69     		ldr	r6, [r1, #16]
 123:math/pprz_algebra_int.c ****   rb->p = (m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r) >> INT32_TRIG_FRAC;
 648              		.loc 2 123 0
 649 001e 0460     		str	r4, [r0]
 650              		.loc 2 124 0
 651 0020 1468     		ldr	r4, [r2]
 652 0022 6E43     		muls	r6, r5, r6
 653 0024 07FB0467 		mla	r7, r7, r4, r6
 654 0028 CE69     		ldr	r6, [r1, #28]
 125:math/pprz_algebra_int.c ****   rb->r = (m_b2a->m[2] * ra->p + m_b2a->m[5] * ra->q + m_b2a->m[8] * ra->r) >> INT32_TRIG_FRAC;
 655              		.loc 2 125 0
 656 002a 8D68     		ldr	r5, [r1, #8]
 124:math/pprz_algebra_int.c ****   rb->q = (m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r) >> INT32_TRIG_FRAC;
 657              		.loc 2 124 0
 658 002c 06FB0376 		mla	r6, r6, r3, r7
 659 0030 B613     		asrs	r6, r6, #14
 660 0032 4660     		str	r6, [r0, #4]
 661              		.loc 2 125 0
 662 0034 5268     		ldr	r2, [r2, #4]
 663              	.LVL29:
 664 0036 4E69     		ldr	r6, [r1, #20]
 665 0038 5643     		muls	r6, r2, r6
 666 003a 05FB0464 		mla	r4, r5, r4, r6
 667 003e 0D6A     		ldr	r5, [r1, #32]
 668 0040 05FB0343 		mla	r3, r5, r3, r4
 669 0044 9B13     		asrs	r3, r3, #14
 670 0046 8360     		str	r3, [r0, #8]
 671 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 672              		.cfi_endproc
 673              	.LFE15:
 675              		.section	.text.int32_rmat_of_quat,"ax",%progbits
 676              		.align	1
 677              		.global	int32_rmat_of_quat
 678              		.thumb
 679              		.thumb_func
 681              	int32_rmat_of_quat:
 682              	.LFB16:
 126:math/pprz_algebra_int.c **** }
 127:math/pprz_algebra_int.c **** 
 128:math/pprz_algebra_int.c **** 
 129:math/pprz_algebra_int.c **** /** Convert unit quaternion to rotation matrix.
 130:math/pprz_algebra_int.c ****  * http://www.mathworks.com/access/helpdesk_r13/help/toolbox/aeroblks/quaternionstodirectioncosinem
 131:math/pprz_algebra_int.c ****  */
 132:math/pprz_algebra_int.c **** void int32_rmat_of_quat(struct Int32RMat *rm, struct Int32Quat *q)
 133:math/pprz_algebra_int.c **** {
 683              		.loc 2 133 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL30:
 688 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 689              		.cfi_def_cfa_offset 28
 690              		.cfi_offset 4, -28
 691              		.cfi_offset 5, -24
 692              		.cfi_offset 6, -20
 693              		.cfi_offset 7, -16
 694              		.cfi_offset 8, -12
 695              		.cfi_offset 9, -8
 696              		.cfi_offset 14, -4
 134:math/pprz_algebra_int.c ****   const int32_t _2qi2_m1  = INT_MULT_RSHIFT(q->qi, q->qi,
 697              		.loc 2 134 0
 698 0004 0D68     		ldr	r5, [r1]
 135:math/pprz_algebra_int.c ****                             INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1) - TRIG_BFP_OF_
 136:math/pprz_algebra_int.c ****   rm->m[0] = INT_MULT_RSHIFT(q->qx, q->qx, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 137:math/pprz_algebra_int.c ****   rm->m[4] = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 699              		.loc 2 137 0
 700 0006 8A68     		ldr	r2, [r1, #8]
 138:math/pprz_algebra_int.c ****   rm->m[8] = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 701              		.loc 2 138 0
 702 0008 CB68     		ldr	r3, [r1, #12]
 136:math/pprz_algebra_int.c ****   rm->m[0] = INT_MULT_RSHIFT(q->qx, q->qx, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 703              		.loc 2 136 0
 704 000a 4C68     		ldr	r4, [r1, #4]
 134:math/pprz_algebra_int.c ****   const int32_t _2qi2_m1  = INT_MULT_RSHIFT(q->qi, q->qi,
 705              		.loc 2 134 0
 706 000c 05FB05F6 		mul	r6, r5, r5
 707 0010 F613     		asrs	r6, r6, #15
 708 0012 A6F58046 		sub	r6, r6, #16384
 709              	.LVL31:
 139:math/pprz_algebra_int.c **** 
 140:math/pprz_algebra_int.c ****   const int32_t _2qiqx = INT_MULT_RSHIFT(q->qi, q->qx, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 710              		.loc 2 140 0
 711 0016 04FB05F1 		mul	r1, r4, r5
 712              	.LVL32:
 141:math/pprz_algebra_int.c ****   const int32_t _2qiqy = INT_MULT_RSHIFT(q->qi, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 713              		.loc 2 141 0
 714 001a 02FB05FC 		mul	ip, r2, r5
 142:math/pprz_algebra_int.c ****   const int32_t _2qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 143:math/pprz_algebra_int.c ****   rm->m[1] = INT_MULT_RSHIFT(q->qx, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 715              		.loc 2 143 0
 716 001e 02FB04F9 		mul	r9, r2, r4
 144:math/pprz_algebra_int.c ****   rm->m[2] = INT_MULT_RSHIFT(q->qx, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 717              		.loc 2 144 0
 718 0022 03FB04F8 		mul	r8, r3, r4
 142:math/pprz_algebra_int.c ****   const int32_t _2qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 719              		.loc 2 142 0
 720 0026 5D43     		muls	r5, r3, r5
 136:math/pprz_algebra_int.c ****   rm->m[0] = INT_MULT_RSHIFT(q->qx, q->qx, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 721              		.loc 2 136 0
 722 0028 6443     		muls	r4, r4, r4
 145:math/pprz_algebra_int.c ****   rm->m[5] = INT_MULT_RSHIFT(q->qy, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 146:math/pprz_algebra_int.c ****   rm->m[0] += _2qi2_m1;
 723              		.loc 2 146 0
 724 002a 06EBE434 		add	r4, r6, r4, asr #15
 142:math/pprz_algebra_int.c ****   const int32_t _2qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 725              		.loc 2 142 0
 726 002e ED13     		asrs	r5, r5, #15
 143:math/pprz_algebra_int.c ****   rm->m[1] = INT_MULT_RSHIFT(q->qx, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 727              		.loc 2 143 0
 728 0030 4FEAE939 		asr	r9, r9, #15
 145:math/pprz_algebra_int.c ****   rm->m[5] = INT_MULT_RSHIFT(q->qy, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 729              		.loc 2 145 0
 730 0034 03FB02F7 		mul	r7, r3, r2
 141:math/pprz_algebra_int.c ****   const int32_t _2qiqy = INT_MULT_RSHIFT(q->qi, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 731              		.loc 2 141 0
 732 0038 4FEAEC3C 		asr	ip, ip, #15
 144:math/pprz_algebra_int.c ****   rm->m[2] = INT_MULT_RSHIFT(q->qx, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 733              		.loc 2 144 0
 734 003c 4FEAE838 		asr	r8, r8, #15
 735              		.loc 2 146 0
 736 0040 0460     		str	r4, [r0]
 137:math/pprz_algebra_int.c ****   rm->m[4] = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 737              		.loc 2 137 0
 738 0042 5243     		muls	r2, r2, r2
 147:math/pprz_algebra_int.c ****   rm->m[3] = rm->m[1] - _2qiqz;
 739              		.loc 2 147 0
 740 0044 C5EB0904 		rsb	r4, r5, r9
 148:math/pprz_algebra_int.c ****   rm->m[6] = rm->m[2] + _2qiqy;
 149:math/pprz_algebra_int.c ****   rm->m[7] = rm->m[5] - _2qiqx;
 150:math/pprz_algebra_int.c ****   rm->m[4] += _2qi2_m1;
 741              		.loc 2 150 0
 742 0048 06EBE232 		add	r2, r6, r2, asr #15
 140:math/pprz_algebra_int.c ****   const int32_t _2qiqx = INT_MULT_RSHIFT(q->qi, q->qx, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 743              		.loc 2 140 0
 744 004c C913     		asrs	r1, r1, #15
 745              	.LVL33:
 145:math/pprz_algebra_int.c ****   rm->m[5] = INT_MULT_RSHIFT(q->qy, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 746              		.loc 2 145 0
 747 004e FF13     		asrs	r7, r7, #15
 147:math/pprz_algebra_int.c ****   rm->m[3] = rm->m[1] - _2qiqz;
 748              		.loc 2 147 0
 749 0050 C460     		str	r4, [r0, #12]
 138:math/pprz_algebra_int.c ****   rm->m[8] = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 750              		.loc 2 138 0
 751 0052 5B43     		muls	r3, r3, r3
 148:math/pprz_algebra_int.c ****   rm->m[6] = rm->m[2] + _2qiqy;
 752              		.loc 2 148 0
 753 0054 08EB0C04 		add	r4, r8, ip
 754 0058 8461     		str	r4, [r0, #24]
 755              		.loc 2 150 0
 756 005a 0261     		str	r2, [r0, #16]
 149:math/pprz_algebra_int.c ****   rm->m[7] = rm->m[5] - _2qiqx;
 757              		.loc 2 149 0
 758 005c 7C1A     		subs	r4, r7, r1
 151:math/pprz_algebra_int.c ****   rm->m[1] += _2qiqz;
 759              		.loc 2 151 0
 760 005e 4D44     		add	r5, r5, r9
 761              	.LVL34:
 152:math/pprz_algebra_int.c ****   rm->m[2] -= _2qiqy;
 762              		.loc 2 152 0
 763 0060 CCEB0802 		rsb	r2, ip, r8
 153:math/pprz_algebra_int.c ****   rm->m[5] += _2qiqx;
 764              		.loc 2 153 0
 765 0064 3944     		add	r1, r1, r7
 766              	.LVL35:
 154:math/pprz_algebra_int.c ****   rm->m[8] += _2qi2_m1;
 767              		.loc 2 154 0
 768 0066 06EBE336 		add	r6, r6, r3, asr #15
 769              	.LVL36:
 149:math/pprz_algebra_int.c ****   rm->m[7] = rm->m[5] - _2qiqx;
 770              		.loc 2 149 0
 771 006a C461     		str	r4, [r0, #28]
 151:math/pprz_algebra_int.c ****   rm->m[1] += _2qiqz;
 772              		.loc 2 151 0
 773 006c 4560     		str	r5, [r0, #4]
 152:math/pprz_algebra_int.c ****   rm->m[2] -= _2qiqy;
 774              		.loc 2 152 0
 775 006e 8260     		str	r2, [r0, #8]
 153:math/pprz_algebra_int.c ****   rm->m[5] += _2qiqx;
 776              		.loc 2 153 0
 777 0070 4161     		str	r1, [r0, #20]
 778              		.loc 2 154 0
 779 0072 0662     		str	r6, [r0, #32]
 780 0074 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 781              		.cfi_endproc
 782              	.LFE16:
 784              		.section	.text.int32_rmat_of_eulers_321,"ax",%progbits
 785              		.align	1
 786              		.global	int32_rmat_of_eulers_321
 787              		.thumb
 788              		.thumb_func
 790              	int32_rmat_of_eulers_321:
 791              	.LFB17:
 155:math/pprz_algebra_int.c **** }
 156:math/pprz_algebra_int.c **** 
 157:math/pprz_algebra_int.c **** 
 158:math/pprz_algebra_int.c **** /** Rotation matrix from 321 Euler angles.
 159:math/pprz_algebra_int.c ****  * http://www.mathworks.com/access/helpdesk_r13/help/toolbox/aeroblks/euleranglestodirectioncosinem
 160:math/pprz_algebra_int.c ****  */
 161:math/pprz_algebra_int.c **** void int32_rmat_of_eulers_321(struct Int32RMat *rm, struct Int32Eulers *e)
 162:math/pprz_algebra_int.c **** {
 792              		.loc 2 162 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 0
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 796              	.LVL37:
 797 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 798              		.cfi_def_cfa_offset 32
 799              		.cfi_offset 4, -32
 800              		.cfi_offset 5, -28
 801              		.cfi_offset 6, -24
 802              		.cfi_offset 7, -20
 803              		.cfi_offset 8, -16
 804              		.cfi_offset 9, -12
 805              		.cfi_offset 10, -8
 806              		.cfi_offset 14, -4
 807              		.loc 2 162 0
 808 0004 0446     		mov	r4, r0
 163:math/pprz_algebra_int.c ****   int32_t sphi;
 164:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(sphi, e->phi);
 809              		.loc 2 164 0
 810 0006 0868     		ldr	r0, [r1]
 811              	.LVL38:
 162:math/pprz_algebra_int.c **** {
 812              		.loc 2 162 0
 813 0008 0D46     		mov	r5, r1
 814              		.loc 2 164 0
 815 000a FFF7FEFF 		bl	pprz_itrig_sin
 816              	.LVL39:
 817 000e 8146     		mov	r9, r0
 818              	.LVL40:
 165:math/pprz_algebra_int.c ****   int32_t cphi;
 166:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cphi, e->phi);
 819              		.loc 2 166 0
 820 0010 2868     		ldr	r0, [r5]
 821              	.LVL41:
 822 0012 FFF7FEFF 		bl	pprz_itrig_cos
 823              	.LVL42:
 824 0016 0746     		mov	r7, r0
 825              	.LVL43:
 167:math/pprz_algebra_int.c ****   int32_t stheta;
 168:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(stheta, e->theta);
 826              		.loc 2 168 0
 827 0018 6868     		ldr	r0, [r5, #4]
 828              	.LVL44:
 829 001a FFF7FEFF 		bl	pprz_itrig_sin
 830              	.LVL45:
 831 001e 8246     		mov	r10, r0
 832              	.LVL46:
 169:math/pprz_algebra_int.c ****   int32_t ctheta;
 170:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(ctheta, e->theta);
 833              		.loc 2 170 0
 834 0020 6868     		ldr	r0, [r5, #4]
 835              	.LVL47:
 836 0022 FFF7FEFF 		bl	pprz_itrig_cos
 837              	.LVL48:
 838 0026 8046     		mov	r8, r0
 839              	.LVL49:
 171:math/pprz_algebra_int.c ****   int32_t spsi;
 172:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(spsi, e->psi);
 840              		.loc 2 172 0
 841 0028 A868     		ldr	r0, [r5, #8]
 842              	.LVL50:
 843 002a FFF7FEFF 		bl	pprz_itrig_sin
 844              	.LVL51:
 845 002e 0646     		mov	r6, r0
 846              	.LVL52:
 173:math/pprz_algebra_int.c ****   int32_t cpsi;
 174:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cpsi, e->psi);
 847              		.loc 2 174 0
 848 0030 A868     		ldr	r0, [r5, #8]
 849              	.LVL53:
 850 0032 FFF7FEFF 		bl	pprz_itrig_cos
 851              	.LVL54:
 852 0036 0346     		mov	r3, r0
 853              	.LVL55:
 175:math/pprz_algebra_int.c **** 
 176:math/pprz_algebra_int.c ****   int32_t ctheta_cpsi = INT_MULT_RSHIFT(ctheta, cpsi,   INT32_TRIG_FRAC);
 854              		.loc 2 176 0
 855 0038 00FB08F0 		mul	r0, r0, r8
 856              	.LVL56:
 857 003c 8013     		asrs	r0, r0, #14
 858              	.LVL57:
 177:math/pprz_algebra_int.c ****   int32_t ctheta_spsi = INT_MULT_RSHIFT(ctheta, spsi,   INT32_TRIG_FRAC);
 178:math/pprz_algebra_int.c ****   int32_t cphi_spsi   = INT_MULT_RSHIFT(cphi,   spsi,   INT32_TRIG_FRAC);
 179:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 180:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 181:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 182:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 183:math/pprz_algebra_int.c ****   int32_t sphi_stheta = INT_MULT_RSHIFT(sphi,   stheta, INT32_TRIG_FRAC);
 184:math/pprz_algebra_int.c ****   int32_t sphi_spsi   = INT_MULT_RSHIFT(sphi,   spsi,   INT32_TRIG_FRAC);
 185:math/pprz_algebra_int.c ****   int32_t sphi_cpsi   = INT_MULT_RSHIFT(sphi,   cpsi,   INT32_TRIG_FRAC);
 186:math/pprz_algebra_int.c **** 
 187:math/pprz_algebra_int.c ****   int32_t sphi_stheta_cpsi = INT_MULT_RSHIFT(sphi_stheta, cpsi, INT32_TRIG_FRAC);
 188:math/pprz_algebra_int.c ****   int32_t sphi_stheta_spsi = INT_MULT_RSHIFT(sphi_stheta, spsi, INT32_TRIG_FRAC);
 189:math/pprz_algebra_int.c ****   int32_t cphi_stheta_cpsi = INT_MULT_RSHIFT(cphi_stheta, cpsi, INT32_TRIG_FRAC);
 190:math/pprz_algebra_int.c ****   int32_t cphi_stheta_spsi = INT_MULT_RSHIFT(cphi_stheta, spsi, INT32_TRIG_FRAC);
 191:math/pprz_algebra_int.c **** 
 192:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 0) = ctheta_cpsi;
 859              		.loc 2 192 0
 860 003e 2060     		str	r0, [r4]
 177:math/pprz_algebra_int.c ****   int32_t ctheta_spsi = INT_MULT_RSHIFT(ctheta, spsi,   INT32_TRIG_FRAC);
 861              		.loc 2 177 0
 862 0040 06FB08F0 		mul	r0, r6, r8
 863              	.LVL58:
 864 0044 8013     		asrs	r0, r0, #14
 865              	.LVL59:
 183:math/pprz_algebra_int.c ****   int32_t sphi_stheta = INT_MULT_RSHIFT(sphi,   stheta, INT32_TRIG_FRAC);
 866              		.loc 2 183 0
 867 0046 0AFB09F1 		mul	r1, r10, r9
 193:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 1) = ctheta_spsi;
 868              		.loc 2 193 0
 869 004a 6060     		str	r0, [r4, #4]
 194:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 2) = -stheta;
 870              		.loc 2 194 0
 871 004c CAF10000 		rsb	r0, r10, #0
 872              	.LVL60:
 183:math/pprz_algebra_int.c ****   int32_t sphi_stheta = INT_MULT_RSHIFT(sphi,   stheta, INT32_TRIG_FRAC);
 873              		.loc 2 183 0
 874 0050 8913     		asrs	r1, r1, #14
 875              		.loc 2 194 0
 876 0052 A060     		str	r0, [r4, #8]
 178:math/pprz_algebra_int.c ****   int32_t cphi_spsi   = INT_MULT_RSHIFT(cphi,   spsi,   INT32_TRIG_FRAC);
 877              		.loc 2 178 0
 878 0054 06FB07F0 		mul	r0, r6, r7
 187:math/pprz_algebra_int.c ****   int32_t sphi_stheta_cpsi = INT_MULT_RSHIFT(sphi_stheta, cpsi, INT32_TRIG_FRAC);
 879              		.loc 2 187 0
 880 0058 03FB01F5 		mul	r5, r3, r1
 881              	.LVL61:
 178:math/pprz_algebra_int.c ****   int32_t cphi_spsi   = INT_MULT_RSHIFT(cphi,   spsi,   INT32_TRIG_FRAC);
 882              		.loc 2 178 0
 883 005c 8013     		asrs	r0, r0, #14
 884              	.LVL62:
 195:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 0) = sphi_stheta_cpsi - cphi_spsi;
 885              		.loc 2 195 0
 886 005e C0EBA530 		rsb	r0, r0, r5, asr #14
 887              	.LVL63:
 888 0062 E060     		str	r0, [r4, #12]
 179:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 889              		.loc 2 179 0
 890 0064 03FB07F0 		mul	r0, r3, r7
 891 0068 8013     		asrs	r0, r0, #14
 892              	.LVL64:
 188:math/pprz_algebra_int.c ****   int32_t sphi_stheta_spsi = INT_MULT_RSHIFT(sphi_stheta, spsi, INT32_TRIG_FRAC);
 893              		.loc 2 188 0
 894 006a 7143     		muls	r1, r6, r1
 196:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 1) = sphi_stheta_spsi + cphi_cpsi;
 895              		.loc 2 196 0
 896 006c 00EBA131 		add	r1, r0, r1, asr #14
 181:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 897              		.loc 2 181 0
 898 0070 0AFB07F2 		mul	r2, r10, r7
 899              		.loc 2 196 0
 900 0074 2161     		str	r1, [r4, #16]
 182:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 901              		.loc 2 182 0
 902 0076 08FB09F1 		mul	r1, r8, r9
 181:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 903              		.loc 2 181 0
 904 007a 9213     		asrs	r2, r2, #14
 905              	.LVL65:
 182:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 906              		.loc 2 182 0
 907 007c 8913     		asrs	r1, r1, #14
 908              	.LVL66:
 189:math/pprz_algebra_int.c ****   int32_t cphi_stheta_cpsi = INT_MULT_RSHIFT(cphi_stheta, cpsi, INT32_TRIG_FRAC);
 909              		.loc 2 189 0
 910 007e 03FB02F0 		mul	r0, r3, r2
 911              	.LVL67:
 197:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 2) = sphi_ctheta;
 912              		.loc 2 197 0
 913 0082 6161     		str	r1, [r4, #20]
 185:math/pprz_algebra_int.c ****   int32_t sphi_cpsi   = INT_MULT_RSHIFT(sphi,   cpsi,   INT32_TRIG_FRAC);
 914              		.loc 2 185 0
 915 0084 03FB09F3 		mul	r3, r3, r9
 916              	.LVL68:
 184:math/pprz_algebra_int.c ****   int32_t sphi_spsi   = INT_MULT_RSHIFT(sphi,   spsi,   INT32_TRIG_FRAC);
 917              		.loc 2 184 0
 918 0088 06FB09F1 		mul	r1, r6, r9
 919              	.LVL69:
 920 008c 8913     		asrs	r1, r1, #14
 921              	.LVL70:
 190:math/pprz_algebra_int.c ****   int32_t cphi_stheta_spsi = INT_MULT_RSHIFT(cphi_stheta, spsi, INT32_TRIG_FRAC);
 922              		.loc 2 190 0
 923 008e 7243     		muls	r2, r6, r2
 924              	.LVL71:
 185:math/pprz_algebra_int.c ****   int32_t sphi_cpsi   = INT_MULT_RSHIFT(sphi,   cpsi,   INT32_TRIG_FRAC);
 925              		.loc 2 185 0
 926 0090 9B13     		asrs	r3, r3, #14
 180:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 927              		.loc 2 180 0
 928 0092 08FB07F7 		mul	r7, r8, r7
 929              	.LVL72:
 198:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 0) = cphi_stheta_cpsi + sphi_spsi;
 930              		.loc 2 198 0
 931 0096 01EBA031 		add	r1, r1, r0, asr #14
 932              	.LVL73:
 199:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 1) = cphi_stheta_spsi - sphi_cpsi;
 933              		.loc 2 199 0
 934 009a C3EBA232 		rsb	r2, r3, r2, asr #14
 180:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 935              		.loc 2 180 0
 936 009e BF13     		asrs	r7, r7, #14
 937              	.LVL74:
 198:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 0) = cphi_stheta_cpsi + sphi_spsi;
 938              		.loc 2 198 0
 939 00a0 A161     		str	r1, [r4, #24]
 940              		.loc 2 199 0
 941 00a2 E261     		str	r2, [r4, #28]
 200:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 2) = cphi_ctheta;
 942              		.loc 2 200 0
 943 00a4 2762     		str	r7, [r4, #32]
 944 00a6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 945              		.cfi_endproc
 946              	.LFE17:
 948              		.section	.text.int32_rmat_of_eulers_312,"ax",%progbits
 949              		.align	1
 950              		.global	int32_rmat_of_eulers_312
 951              		.thumb
 952              		.thumb_func
 954              	int32_rmat_of_eulers_312:
 955              	.LFB18:
 201:math/pprz_algebra_int.c **** }
 202:math/pprz_algebra_int.c **** 
 203:math/pprz_algebra_int.c **** 
 204:math/pprz_algebra_int.c **** void int32_rmat_of_eulers_312(struct Int32RMat *rm, struct Int32Eulers *e)
 205:math/pprz_algebra_int.c **** {
 956              		.loc 2 205 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              	.LVL75:
 961 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 962              		.cfi_def_cfa_offset 32
 963              		.cfi_offset 4, -32
 964              		.cfi_offset 5, -28
 965              		.cfi_offset 6, -24
 966              		.cfi_offset 7, -20
 967              		.cfi_offset 8, -16
 968              		.cfi_offset 9, -12
 969              		.cfi_offset 10, -8
 970              		.cfi_offset 14, -4
 971              		.loc 2 205 0
 972 0004 0446     		mov	r4, r0
 206:math/pprz_algebra_int.c ****   int32_t sphi;
 207:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(sphi, e->phi);
 973              		.loc 2 207 0
 974 0006 0868     		ldr	r0, [r1]
 975              	.LVL76:
 205:math/pprz_algebra_int.c **** {
 976              		.loc 2 205 0
 977 0008 0D46     		mov	r5, r1
 978              		.loc 2 207 0
 979 000a FFF7FEFF 		bl	pprz_itrig_sin
 980              	.LVL77:
 981 000e 8246     		mov	r10, r0
 982              	.LVL78:
 208:math/pprz_algebra_int.c ****   int32_t cphi;
 209:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cphi, e->phi);
 983              		.loc 2 209 0
 984 0010 2868     		ldr	r0, [r5]
 985              	.LVL79:
 986 0012 FFF7FEFF 		bl	pprz_itrig_cos
 987              	.LVL80:
 988 0016 0746     		mov	r7, r0
 989              	.LVL81:
 210:math/pprz_algebra_int.c ****   int32_t stheta;
 211:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(stheta, e->theta);
 990              		.loc 2 211 0
 991 0018 6868     		ldr	r0, [r5, #4]
 992              	.LVL82:
 993 001a FFF7FEFF 		bl	pprz_itrig_sin
 994              	.LVL83:
 995 001e 8146     		mov	r9, r0
 996              	.LVL84:
 212:math/pprz_algebra_int.c ****   int32_t ctheta;
 213:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(ctheta, e->theta);
 997              		.loc 2 213 0
 998 0020 6868     		ldr	r0, [r5, #4]
 999              	.LVL85:
 1000 0022 FFF7FEFF 		bl	pprz_itrig_cos
 1001              	.LVL86:
 1002 0026 8046     		mov	r8, r0
 1003              	.LVL87:
 214:math/pprz_algebra_int.c ****   int32_t spsi;
 215:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(spsi, e->psi);
 1004              		.loc 2 215 0
 1005 0028 A868     		ldr	r0, [r5, #8]
 1006              	.LVL88:
 1007 002a FFF7FEFF 		bl	pprz_itrig_sin
 1008              	.LVL89:
 1009 002e 0646     		mov	r6, r0
 1010              	.LVL90:
 216:math/pprz_algebra_int.c ****   int32_t cpsi;
 217:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cpsi, e->psi);
 1011              		.loc 2 217 0
 1012 0030 A868     		ldr	r0, [r5, #8]
 1013              	.LVL91:
 1014 0032 FFF7FEFF 		bl	pprz_itrig_cos
 1015              	.LVL92:
 218:math/pprz_algebra_int.c **** 
 219:math/pprz_algebra_int.c ****   int32_t stheta_spsi = INT_MULT_RSHIFT(stheta, spsi,   INT32_TRIG_FRAC);
 220:math/pprz_algebra_int.c ****   int32_t stheta_cpsi = INT_MULT_RSHIFT(stheta, cpsi,   INT32_TRIG_FRAC);
 221:math/pprz_algebra_int.c ****   int32_t ctheta_spsi = INT_MULT_RSHIFT(ctheta, spsi,   INT32_TRIG_FRAC);
 222:math/pprz_algebra_int.c ****   int32_t ctheta_cpsi = INT_MULT_RSHIFT(ctheta, cpsi,   INT32_TRIG_FRAC);
 223:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 224:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 225:math/pprz_algebra_int.c ****   int32_t cphi_spsi   = INT_MULT_RSHIFT(cphi,   spsi,   INT32_TRIG_FRAC);
 226:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 227:math/pprz_algebra_int.c ****   int32_t sphi_stheta = INT_MULT_RSHIFT(sphi,   stheta, INT32_TRIG_FRAC);
 1016              		.loc 2 227 0
 1017 0036 09FB0AF1 		mul	r1, r9, r10
 1018 003a 8913     		asrs	r1, r1, #14
 217:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cpsi, e->psi);
 1019              		.loc 2 217 0
 1020 003c 0346     		mov	r3, r0
 1021              	.LVL93:
 222:math/pprz_algebra_int.c ****   int32_t ctheta_cpsi = INT_MULT_RSHIFT(ctheta, cpsi,   INT32_TRIG_FRAC);
 1022              		.loc 2 222 0
 1023 003e 00FB08F5 		mul	r5, r0, r8
 1024              	.LVL94:
 228:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 229:math/pprz_algebra_int.c **** 
 230:math/pprz_algebra_int.c ****   int32_t sphi_stheta_spsi = INT_MULT_RSHIFT(sphi_stheta, spsi, INT32_TRIG_FRAC);
 1025              		.loc 2 230 0
 1026 0042 06FB01F0 		mul	r0, r6, r1
 1027              	.LVL95:
 1028 0046 8013     		asrs	r0, r0, #14
 231:math/pprz_algebra_int.c ****   int32_t sphi_stheta_cpsi = INT_MULT_RSHIFT(sphi_stheta, cpsi, INT32_TRIG_FRAC);
 232:math/pprz_algebra_int.c ****   int32_t sphi_ctheta_spsi = INT_MULT_RSHIFT(sphi_ctheta, spsi, INT32_TRIG_FRAC);
 233:math/pprz_algebra_int.c ****   int32_t sphi_ctheta_cpsi = INT_MULT_RSHIFT(sphi_ctheta, cpsi, INT32_TRIG_FRAC);
 234:math/pprz_algebra_int.c **** 
 235:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 0) =  ctheta_cpsi - sphi_stheta_spsi;
 1029              		.loc 2 235 0
 1030 0048 C0EBA530 		rsb	r0, r0, r5, asr #14
 231:math/pprz_algebra_int.c ****   int32_t sphi_stheta_cpsi = INT_MULT_RSHIFT(sphi_stheta, cpsi, INT32_TRIG_FRAC);
 1031              		.loc 2 231 0
 1032 004c 5943     		muls	r1, r3, r1
 1033              	.LVL96:
 1034              		.loc 2 235 0
 1035 004e 2060     		str	r0, [r4]
 231:math/pprz_algebra_int.c ****   int32_t sphi_stheta_cpsi = INT_MULT_RSHIFT(sphi_stheta, cpsi, INT32_TRIG_FRAC);
 1036              		.loc 2 231 0
 1037 0050 8913     		asrs	r1, r1, #14
 221:math/pprz_algebra_int.c ****   int32_t ctheta_spsi = INT_MULT_RSHIFT(ctheta, spsi,   INT32_TRIG_FRAC);
 1038              		.loc 2 221 0
 1039 0052 06FB08F0 		mul	r0, r6, r8
 236:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta_spsi + sphi_stheta_cpsi;
 1040              		.loc 2 236 0
 1041 0056 01EBA031 		add	r1, r1, r0, asr #14
 1042 005a 6160     		str	r1, [r4, #4]
 223:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 1043              		.loc 2 223 0
 1044 005c 09FB07F1 		mul	r1, r9, r7
 1045 0060 8913     		asrs	r1, r1, #14
 1046              	.LVL97:
 237:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 2) = -cphi_stheta;
 1047              		.loc 2 237 0
 1048 0062 4942     		negs	r1, r1
 1049              	.LVL98:
 1050 0064 A160     		str	r1, [r4, #8]
 225:math/pprz_algebra_int.c ****   int32_t cphi_spsi   = INT_MULT_RSHIFT(cphi,   spsi,   INT32_TRIG_FRAC);
 1051              		.loc 2 225 0
 1052 0066 06FB07F1 		mul	r1, r6, r7
 1053              	.LVL99:
 1054 006a 8913     		asrs	r1, r1, #14
 1055              	.LVL100:
 238:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 0) = -cphi_spsi;
 1056              		.loc 2 238 0
 1057 006c 4942     		negs	r1, r1
 1058              	.LVL101:
 228:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 1059              		.loc 2 228 0
 1060 006e 08FB0AF2 		mul	r2, r8, r10
 1061              		.loc 2 238 0
 1062 0072 E160     		str	r1, [r4, #12]
 226:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 1063              		.loc 2 226 0
 1064 0074 03FB07F1 		mul	r1, r3, r7
 1065              	.LVL102:
 228:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 1066              		.loc 2 228 0
 1067 0078 9213     		asrs	r2, r2, #14
 1068              	.LVL103:
 226:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 1069              		.loc 2 226 0
 1070 007a 8913     		asrs	r1, r1, #14
 1071              	.LVL104:
 220:math/pprz_algebra_int.c ****   int32_t stheta_cpsi = INT_MULT_RSHIFT(stheta, cpsi,   INT32_TRIG_FRAC);
 1072              		.loc 2 220 0
 1073 007c 03FB09F0 		mul	r0, r3, r9
 239:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 1) =  cphi_cpsi;
 1074              		.loc 2 239 0
 1075 0080 2161     		str	r1, [r4, #16]
 233:math/pprz_algebra_int.c ****   int32_t sphi_ctheta_cpsi = INT_MULT_RSHIFT(sphi_ctheta, cpsi, INT32_TRIG_FRAC);
 1076              		.loc 2 233 0
 1077 0082 5343     		muls	r3, r2, r3
 1078              	.LVL105:
 232:math/pprz_algebra_int.c ****   int32_t sphi_ctheta_spsi = INT_MULT_RSHIFT(sphi_ctheta, spsi, INT32_TRIG_FRAC);
 1079              		.loc 2 232 0
 1080 0084 06FB02F1 		mul	r1, r6, r2
 1081              	.LVL106:
 1082 0088 8913     		asrs	r1, r1, #14
 1083              	.LVL107:
 219:math/pprz_algebra_int.c ****   int32_t stheta_spsi = INT_MULT_RSHIFT(stheta, spsi,   INT32_TRIG_FRAC);
 1084              		.loc 2 219 0
 1085 008a 06FB09F6 		mul	r6, r6, r9
 1086              	.LVL108:
 233:math/pprz_algebra_int.c ****   int32_t sphi_ctheta_cpsi = INT_MULT_RSHIFT(sphi_ctheta, cpsi, INT32_TRIG_FRAC);
 1087              		.loc 2 233 0
 1088 008e 9B13     		asrs	r3, r3, #14
 224:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 1089              		.loc 2 224 0
 1090 0090 08FB07F7 		mul	r7, r8, r7
 1091              	.LVL109:
 240:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 2) =  sphi;
 241:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta_cpsi + sphi_ctheta_spsi;
 1092              		.loc 2 241 0
 1093 0094 01EBA031 		add	r1, r1, r0, asr #14
 1094              	.LVL110:
 242:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta_spsi - sphi_ctheta_cpsi;
 1095              		.loc 2 242 0
 1096 0098 C3EBA636 		rsb	r6, r3, r6, asr #14
 224:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 1097              		.loc 2 224 0
 1098 009c BF13     		asrs	r7, r7, #14
 1099              	.LVL111:
 240:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 2) =  sphi;
 1100              		.loc 2 240 0
 1101 009e C4F814A0 		str	r10, [r4, #20]
 241:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta_cpsi + sphi_ctheta_spsi;
 1102              		.loc 2 241 0
 1103 00a2 A161     		str	r1, [r4, #24]
 1104              		.loc 2 242 0
 1105 00a4 E661     		str	r6, [r4, #28]
 243:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 2) =  cphi_ctheta;
 1106              		.loc 2 243 0
 1107 00a6 2762     		str	r7, [r4, #32]
 1108 00a8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1109              		.cfi_endproc
 1110              	.LFE18:
 1112              		.section	.text.int32_quat_comp,"ax",%progbits
 1113              		.align	1
 1114              		.global	int32_quat_comp
 1115              		.thumb
 1116              		.thumb_func
 1118              	int32_quat_comp:
 1119              	.LFB19:
 244:math/pprz_algebra_int.c **** }
 245:math/pprz_algebra_int.c **** 
 246:math/pprz_algebra_int.c **** 
 247:math/pprz_algebra_int.c **** /*
 248:math/pprz_algebra_int.c ****  *
 249:math/pprz_algebra_int.c ****  * Quaternions
 250:math/pprz_algebra_int.c ****  *
 251:math/pprz_algebra_int.c ****  */
 252:math/pprz_algebra_int.c **** 
 253:math/pprz_algebra_int.c **** void int32_quat_comp(struct Int32Quat *a2c, struct Int32Quat *a2b, struct Int32Quat *b2c)
 254:math/pprz_algebra_int.c **** {
 1120              		.loc 2 254 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124              	.LVL112:
 1125 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1126              		.cfi_def_cfa_offset 28
 1127              		.cfi_offset 4, -28
 1128              		.cfi_offset 5, -24
 1129              		.cfi_offset 6, -20
 1130              		.cfi_offset 7, -16
 1131              		.cfi_offset 8, -12
 1132              		.cfi_offset 9, -8
 1133              		.cfi_offset 14, -4
 255:math/pprz_algebra_int.c ****   a2c->qi = (a2b->qi * b2c->qi - a2b->qx * b2c->qx - a2b->qy * b2c->qy - a2b->qz * b2c->qz) >> INT3
 1134              		.loc 2 255 0
 1135 0004 1668     		ldr	r6, [r2]
 1136 0006 0D68     		ldr	r5, [r1]
 1137 0008 D2F80480 		ldr	r8, [r2, #4]
 1138 000c D1F80490 		ldr	r9, [r1, #4]
 1139 0010 D2F808C0 		ldr	ip, [r2, #8]
 1140 0014 8F68     		ldr	r7, [r1, #8]
 1141 0016 D468     		ldr	r4, [r2, #12]
 1142 0018 CB68     		ldr	r3, [r1, #12]
 1143 001a 7543     		muls	r5, r6, r5
 1144 001c 08FB1955 		mls	r5, r8, r9, r5
 1145 0020 0CFB1755 		mls	r5, ip, r7, r5
 1146 0024 04FB1355 		mls	r5, r4, r3, r5
 1147 0028 ED13     		asrs	r5, r5, #15
 1148 002a 0560     		str	r5, [r0]
 256:math/pprz_algebra_int.c ****   a2c->qx = (a2b->qi * b2c->qx + a2b->qx * b2c->qi + a2b->qy * b2c->qz - a2b->qz * b2c->qy) >> INT3
 1149              		.loc 2 256 0
 1150 002c 1568     		ldr	r5, [r2]
 1151 002e 0E68     		ldr	r6, [r1]
 1152 0030 05FB09F9 		mul	r9, r5, r9
 1153 0034 08FB0698 		mla	r8, r8, r6, r9
 1154 0038 04FB0788 		mla	r8, r4, r7, r8
 1155 003c 0CFB1388 		mls	r8, ip, r3, r8
 1156 0040 4FEAE838 		asr	r8, r8, #15
 1157 0044 C0F80480 		str	r8, [r0, #4]
 257:math/pprz_algebra_int.c ****   a2c->qy = (a2b->qi * b2c->qy - a2b->qx * b2c->qz + a2b->qy * b2c->qi + a2b->qz * b2c->qx) >> INT3
 1158              		.loc 2 257 0
 1159 0048 D1F80490 		ldr	r9, [r1, #4]
 1160 004c D2F80480 		ldr	r8, [r2, #4]
 1161 0050 0CFB06FC 		mul	ip, ip, r6
 1162 0054 04FB19CC 		mls	ip, r4, r9, ip
 1163 0058 05FB07C7 		mla	r7, r5, r7, ip
 1164 005c 08FB0377 		mla	r7, r8, r3, r7
 1165 0060 FF13     		asrs	r7, r7, #15
 1166 0062 8760     		str	r7, [r0, #8]
 258:math/pprz_algebra_int.c ****   a2c->qz = (a2b->qi * b2c->qz + a2b->qx * b2c->qy - a2b->qy * b2c->qx + a2b->qz * b2c->qi) >> INT3
 1167              		.loc 2 258 0
 1168 0064 9268     		ldr	r2, [r2, #8]
 1169              	.LVL113:
 1170 0066 02FB09F9 		mul	r9, r2, r9
 1171 006a 8A68     		ldr	r2, [r1, #8]
 1172 006c 04FB0694 		mla	r4, r4, r6, r9
 1173 0070 02FB1848 		mls	r8, r2, r8, r4
 1174 0074 05FB0383 		mla	r3, r5, r3, r8
 1175 0078 DB13     		asrs	r3, r3, #15
 1176 007a C360     		str	r3, [r0, #12]
 1177 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1178              		.cfi_endproc
 1179              	.LFE19:
 1181              		.section	.text.int32_quat_comp_inv,"ax",%progbits
 1182              		.align	1
 1183              		.global	int32_quat_comp_inv
 1184              		.thumb
 1185              		.thumb_func
 1187              	int32_quat_comp_inv:
 1188              	.LFB20:
 259:math/pprz_algebra_int.c **** }
 260:math/pprz_algebra_int.c **** 
 261:math/pprz_algebra_int.c **** void int32_quat_comp_inv(struct Int32Quat *a2b, struct Int32Quat *a2c, struct Int32Quat *b2c)
 262:math/pprz_algebra_int.c **** {
 1189              		.loc 2 262 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193              	.LVL114:
 1194 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1195              		.cfi_def_cfa_offset 32
 1196              		.cfi_offset 4, -32
 1197              		.cfi_offset 5, -28
 1198              		.cfi_offset 6, -24
 1199              		.cfi_offset 7, -20
 1200              		.cfi_offset 8, -16
 1201              		.cfi_offset 9, -12
 1202              		.cfi_offset 10, -8
 1203              		.cfi_offset 14, -4
 263:math/pprz_algebra_int.c ****   a2b->qi = (a2c->qi * b2c->qi + a2c->qx * b2c->qx + a2c->qy * b2c->qy + a2c->qz * b2c->qz) >> INT3
 1204              		.loc 2 263 0
 1205 0004 D2F80480 		ldr	r8, [r2, #4]
 1206 0008 D1F80490 		ldr	r9, [r1, #4]
 1207 000c 1768     		ldr	r7, [r2]
 1208 000e 0D68     		ldr	r5, [r1]
 1209 0010 D2F808C0 		ldr	ip, [r2, #8]
 1210 0014 8E68     		ldr	r6, [r1, #8]
 1211 0016 D468     		ldr	r4, [r2, #12]
 1212 0018 CB68     		ldr	r3, [r1, #12]
 1213 001a 08FB09FA 		mul	r10, r8, r9
 1214 001e 07FB05A5 		mla	r5, r7, r5, r10
 1215 0022 0CFB0655 		mla	r5, ip, r6, r5
 1216 0026 04FB0355 		mla	r5, r4, r3, r5
 1217 002a ED13     		asrs	r5, r5, #15
 1218 002c 0560     		str	r5, [r0]
 264:math/pprz_algebra_int.c ****   a2b->qx = (-a2c->qi * b2c->qx + a2c->qx * b2c->qi - a2c->qy * b2c->qz + a2c->qz * b2c->qy) >> INT
 1219              		.loc 2 264 0
 1220 002e 0D68     		ldr	r5, [r1]
 1221 0030 6F42     		negs	r7, r5
 1222 0032 1568     		ldr	r5, [r2]
 1223 0034 05FB09F9 		mul	r9, r5, r9
 1224 0038 08FB0798 		mla	r8, r8, r7, r9
 1225 003c 04FB1688 		mls	r8, r4, r6, r8
 1226 0040 0CFB0388 		mla	r8, ip, r3, r8
 1227 0044 4FEAE838 		asr	r8, r8, #15
 1228 0048 C0F80480 		str	r8, [r0, #4]
 265:math/pprz_algebra_int.c ****   a2b->qy = (-a2c->qi * b2c->qy + a2c->qx * b2c->qz + a2c->qy * b2c->qi - a2c->qz * b2c->qx) >> INT
 1229              		.loc 2 265 0
 1230 004c D1F80490 		ldr	r9, [r1, #4]
 1231 0050 D2F80480 		ldr	r8, [r2, #4]
 1232 0054 04FB09FA 		mul	r10, r4, r9
 1233 0058 0CFB07AC 		mla	ip, ip, r7, r10
 1234 005c 05FB06C6 		mla	r6, r5, r6, ip
 1235 0060 08FB1366 		mls	r6, r8, r3, r6
 1236 0064 F613     		asrs	r6, r6, #15
 1237 0066 8660     		str	r6, [r0, #8]
 266:math/pprz_algebra_int.c ****   a2b->qz = (-a2c->qi * b2c->qz - a2c->qx * b2c->qy + a2c->qy * b2c->qx + a2c->qz * b2c->qi) >> INT
 1238              		.loc 2 266 0
 1239 0068 9268     		ldr	r2, [r2, #8]
 1240              	.LVL115:
 1241 006a 7C43     		muls	r4, r7, r4
 1242 006c 02FB1949 		mls	r9, r2, r9, r4
 1243 0070 8C68     		ldr	r4, [r1, #8]
 1244 0072 04FB0898 		mla	r8, r4, r8, r9
 1245 0076 05FB0383 		mla	r3, r5, r3, r8
 1246 007a DB13     		asrs	r3, r3, #15
 1247 007c C360     		str	r3, [r0, #12]
 1248 007e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1249              		.cfi_endproc
 1250              	.LFE20:
 1252              		.section	.text.int32_quat_inv_comp,"ax",%progbits
 1253              		.align	1
 1254              		.global	int32_quat_inv_comp
 1255              		.thumb
 1256              		.thumb_func
 1258              	int32_quat_inv_comp:
 1259              	.LFB21:
 267:math/pprz_algebra_int.c **** }
 268:math/pprz_algebra_int.c **** 
 269:math/pprz_algebra_int.c **** void int32_quat_inv_comp(struct Int32Quat *b2c, struct Int32Quat *a2b, struct Int32Quat *a2c)
 270:math/pprz_algebra_int.c **** {
 1260              		.loc 2 270 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 0
 1263              		@ frame_needed = 0, uses_anonymous_args = 0
 1264              	.LVL116:
 1265 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1266              		.cfi_def_cfa_offset 32
 1267              		.cfi_offset 4, -32
 1268              		.cfi_offset 5, -28
 1269              		.cfi_offset 6, -24
 1270              		.cfi_offset 7, -20
 1271              		.cfi_offset 8, -16
 1272              		.cfi_offset 9, -12
 1273              		.cfi_offset 10, -8
 1274              		.cfi_offset 14, -4
 271:math/pprz_algebra_int.c ****   b2c->qi = (a2b->qi * a2c->qi + a2b->qx * a2c->qx + a2b->qy * a2c->qy + a2b->qz * a2c->qz) >> INT3
 1275              		.loc 2 271 0
 1276 0004 D2F80490 		ldr	r9, [r2, #4]
 1277 0008 D1F80480 		ldr	r8, [r1, #4]
 1278 000c 1668     		ldr	r6, [r2]
 1279 000e 0D68     		ldr	r5, [r1]
 1280 0010 D2F808C0 		ldr	ip, [r2, #8]
 1281 0014 8F68     		ldr	r7, [r1, #8]
 1282 0016 D468     		ldr	r4, [r2, #12]
 1283 0018 CB68     		ldr	r3, [r1, #12]
 1284 001a 09FB08FA 		mul	r10, r9, r8
 1285 001e 06FB05A5 		mla	r5, r6, r5, r10
 1286 0022 0CFB0755 		mla	r5, ip, r7, r5
 1287 0026 04FB0355 		mla	r5, r4, r3, r5
 1288 002a ED13     		asrs	r5, r5, #15
 1289 002c 0560     		str	r5, [r0]
 272:math/pprz_algebra_int.c ****   b2c->qx = (a2b->qi * a2c->qx - a2b->qx * a2c->qi - a2b->qy * a2c->qz + a2b->qz * a2c->qy) >> INT3
 1290              		.loc 2 272 0
 1291 002e 0E68     		ldr	r6, [r1]
 1292 0030 1568     		ldr	r5, [r2]
 1293 0032 09FB06F9 		mul	r9, r9, r6
 1294 0036 05FB1898 		mls	r8, r5, r8, r9
 1295 003a 04FB1788 		mls	r8, r4, r7, r8
 1296 003e 0CFB0388 		mla	r8, ip, r3, r8
 1297 0042 4FEAE838 		asr	r8, r8, #15
 1298 0046 C0F80480 		str	r8, [r0, #4]
 273:math/pprz_algebra_int.c ****   b2c->qy = (a2b->qi * a2c->qy + a2b->qx * a2c->qz - a2b->qy * a2c->qi - a2b->qz * a2c->qx) >> INT3
 1299              		.loc 2 273 0
 1300 004a D1F80490 		ldr	r9, [r1, #4]
 1301 004e D2F80480 		ldr	r8, [r2, #4]
 1302 0052 04FB09FA 		mul	r10, r4, r9
 1303 0056 0CFB06AC 		mla	ip, ip, r6, r10
 1304 005a 05FB17C7 		mls	r7, r5, r7, ip
 1305 005e 08FB1377 		mls	r7, r8, r3, r7
 1306 0062 FF13     		asrs	r7, r7, #15
 1307 0064 8760     		str	r7, [r0, #8]
 274:math/pprz_algebra_int.c ****   b2c->qz = (a2b->qi * a2c->qz - a2b->qx * a2c->qy + a2b->qy * a2c->qx - a2b->qz * a2c->qi) >> INT3
 1308              		.loc 2 274 0
 1309 0066 9268     		ldr	r2, [r2, #8]
 1310              	.LVL117:
 1311 0068 7443     		muls	r4, r6, r4
 1312 006a 02FB1949 		mls	r9, r2, r9, r4
 1313 006e 8C68     		ldr	r4, [r1, #8]
 1314 0070 04FB0898 		mla	r8, r4, r8, r9
 1315 0074 05FB1383 		mls	r3, r5, r3, r8
 1316 0078 DB13     		asrs	r3, r3, #15
 1317 007a C360     		str	r3, [r0, #12]
 1318 007c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1319              		.cfi_endproc
 1320              	.LFE21:
 1322              		.section	.text.int32_quat_comp_norm_shortest,"ax",%progbits
 1323              		.align	1
 1324              		.global	int32_quat_comp_norm_shortest
 1325              		.thumb
 1326              		.thumb_func
 1328              	int32_quat_comp_norm_shortest:
 1329              	.LFB22:
 275:math/pprz_algebra_int.c **** }
 276:math/pprz_algebra_int.c **** 
 277:math/pprz_algebra_int.c **** void int32_quat_comp_norm_shortest(struct Int32Quat *a2c, struct Int32Quat *a2b, struct Int32Quat *
 278:math/pprz_algebra_int.c **** {
 1330              		.loc 2 278 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 0
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334              	.LVL118:
 1335 0000 10B5     		push	{r4, lr}
 1336              		.cfi_def_cfa_offset 8
 1337              		.cfi_offset 4, -8
 1338              		.cfi_offset 14, -4
 1339              		.loc 2 278 0
 1340 0002 0446     		mov	r4, r0
 279:math/pprz_algebra_int.c ****   int32_quat_comp(a2c, a2b, b2c);
 1341              		.loc 2 279 0
 1342 0004 FFF7FEFF 		bl	int32_quat_comp
 1343              	.LVL119:
 280:math/pprz_algebra_int.c ****   int32_quat_wrap_shortest(a2c);
 1344              		.loc 2 280 0
 1345 0008 2046     		mov	r0, r4
 1346 000a FFF7FEFF 		bl	int32_quat_wrap_shortest
 1347              	.LVL120:
 281:math/pprz_algebra_int.c ****   int32_quat_normalize(a2c);
 1348              		.loc 2 281 0
 1349 000e 2046     		mov	r0, r4
 282:math/pprz_algebra_int.c **** }
 1350              		.loc 2 282 0
 1351 0010 BDE81040 		pop	{r4, lr}
 1352              	.LVL121:
 281:math/pprz_algebra_int.c ****   int32_quat_normalize(a2c);
 1353              		.loc 2 281 0
 1354 0014 FFF7FEBF 		b	int32_quat_normalize
 1355              	.LVL122:
 1356              		.cfi_endproc
 1357              	.LFE22:
 1359              		.section	.text.int32_quat_comp_inv_norm_shortest,"ax",%progbits
 1360              		.align	1
 1361              		.global	int32_quat_comp_inv_norm_shortest
 1362              		.thumb
 1363              		.thumb_func
 1365              	int32_quat_comp_inv_norm_shortest:
 1366              	.LFB23:
 283:math/pprz_algebra_int.c **** 
 284:math/pprz_algebra_int.c **** void int32_quat_comp_inv_norm_shortest(struct Int32Quat *a2b, struct Int32Quat *a2c, struct Int32Qu
 285:math/pprz_algebra_int.c **** {
 1367              		.loc 2 285 0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 0
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 1371              	.LVL123:
 1372 0000 10B5     		push	{r4, lr}
 1373              		.cfi_def_cfa_offset 8
 1374              		.cfi_offset 4, -8
 1375              		.cfi_offset 14, -4
 1376              		.loc 2 285 0
 1377 0002 0446     		mov	r4, r0
 286:math/pprz_algebra_int.c ****   int32_quat_comp_inv(a2b, a2c, b2c);
 1378              		.loc 2 286 0
 1379 0004 FFF7FEFF 		bl	int32_quat_comp_inv
 1380              	.LVL124:
 287:math/pprz_algebra_int.c ****   int32_quat_wrap_shortest(a2b);
 1381              		.loc 2 287 0
 1382 0008 2046     		mov	r0, r4
 1383 000a FFF7FEFF 		bl	int32_quat_wrap_shortest
 1384              	.LVL125:
 288:math/pprz_algebra_int.c ****   int32_quat_normalize(a2b);
 1385              		.loc 2 288 0
 1386 000e 2046     		mov	r0, r4
 289:math/pprz_algebra_int.c **** }
 1387              		.loc 2 289 0
 1388 0010 BDE81040 		pop	{r4, lr}
 1389              	.LVL126:
 288:math/pprz_algebra_int.c ****   int32_quat_normalize(a2b);
 1390              		.loc 2 288 0
 1391 0014 FFF7FEBF 		b	int32_quat_normalize
 1392              	.LVL127:
 1393              		.cfi_endproc
 1394              	.LFE23:
 1396              		.section	.text.int32_quat_inv_comp_norm_shortest,"ax",%progbits
 1397              		.align	1
 1398              		.global	int32_quat_inv_comp_norm_shortest
 1399              		.thumb
 1400              		.thumb_func
 1402              	int32_quat_inv_comp_norm_shortest:
 1403              	.LFB24:
 290:math/pprz_algebra_int.c **** 
 291:math/pprz_algebra_int.c **** void int32_quat_inv_comp_norm_shortest(struct Int32Quat *b2c, struct Int32Quat *a2b, struct Int32Qu
 292:math/pprz_algebra_int.c **** {
 1404              		.loc 2 292 0
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 0
 1407              		@ frame_needed = 0, uses_anonymous_args = 0
 1408              	.LVL128:
 1409 0000 10B5     		push	{r4, lr}
 1410              		.cfi_def_cfa_offset 8
 1411              		.cfi_offset 4, -8
 1412              		.cfi_offset 14, -4
 1413              		.loc 2 292 0
 1414 0002 0446     		mov	r4, r0
 293:math/pprz_algebra_int.c ****   int32_quat_inv_comp(b2c, a2b, a2c);
 1415              		.loc 2 293 0
 1416 0004 FFF7FEFF 		bl	int32_quat_inv_comp
 1417              	.LVL129:
 294:math/pprz_algebra_int.c ****   int32_quat_wrap_shortest(b2c);
 1418              		.loc 2 294 0
 1419 0008 2046     		mov	r0, r4
 1420 000a FFF7FEFF 		bl	int32_quat_wrap_shortest
 1421              	.LVL130:
 295:math/pprz_algebra_int.c ****   int32_quat_normalize(b2c);
 1422              		.loc 2 295 0
 1423 000e 2046     		mov	r0, r4
 296:math/pprz_algebra_int.c **** }
 1424              		.loc 2 296 0
 1425 0010 BDE81040 		pop	{r4, lr}
 1426              	.LVL131:
 295:math/pprz_algebra_int.c ****   int32_quat_normalize(b2c);
 1427              		.loc 2 295 0
 1428 0014 FFF7FEBF 		b	int32_quat_normalize
 1429              	.LVL132:
 1430              		.cfi_endproc
 1431              	.LFE24:
 1433              		.section	.text.int32_quat_derivative,"ax",%progbits
 1434              		.align	1
 1435              		.global	int32_quat_derivative
 1436              		.thumb
 1437              		.thumb_func
 1439              	int32_quat_derivative:
 1440              	.LFB25:
 297:math/pprz_algebra_int.c **** 
 298:math/pprz_algebra_int.c **** /** Quaternion derivative from rotational velocity.
 299:math/pprz_algebra_int.c ****  * qd = -0.5*omega(r) * q
 300:math/pprz_algebra_int.c ****  * or equally:
 301:math/pprz_algebra_int.c ****  * qd = 0.5 * q * omega(r)
 302:math/pprz_algebra_int.c ****  * Multiplication with 0.5 is done by shifting one more bit to the right.
 303:math/pprz_algebra_int.c ****  */
 304:math/pprz_algebra_int.c **** void int32_quat_derivative(struct Int32Quat *qd, const struct Int32Rates *r, struct Int32Quat *q)
 305:math/pprz_algebra_int.c **** {
 1441              		.loc 2 305 0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 1445              	.LVL133:
 1446 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1447              		.cfi_def_cfa_offset 20
 1448              		.cfi_offset 4, -20
 1449              		.cfi_offset 5, -16
 1450              		.cfi_offset 6, -12
 1451              		.cfi_offset 7, -8
 1452              		.cfi_offset 14, -4
 306:math/pprz_algebra_int.c ****   qd->qi = (-(r->p * q->qx + r->q * q->qy + r->r * q->qz)) >> (INT32_RATE_FRAC + 1);
 1453              		.loc 2 306 0
 1454 0002 91E81800 		ldmia	r1, {r3, r4}
 1455 0006 9768     		ldr	r7, [r2, #8]
 1456 0008 5568     		ldr	r5, [r2, #4]
 1457 000a 8968     		ldr	r1, [r1, #8]
 1458              	.LVL134:
 1459 000c D668     		ldr	r6, [r2, #12]
 1460 000e 07FB04FC 		mul	ip, r7, r4
 1461 0012 05FB03C5 		mla	r5, r5, r3, ip
 1462 0016 06FB0155 		mla	r5, r6, r1, r5
 1463 001a 6D42     		negs	r5, r5
 1464 001c 6D13     		asrs	r5, r5, #13
 1465 001e 0560     		str	r5, [r0]
 307:math/pprz_algebra_int.c ****   qd->qx = (-(-r->p * q->qi - r->r * q->qy + r->q * q->qz)) >> (INT32_RATE_FRAC + 1);
 1466              		.loc 2 307 0
 1467 0020 1568     		ldr	r5, [r2]
 1468 0022 05FB03FC 		mul	ip, r5, r3
 1469 0026 07FB01C7 		mla	r7, r7, r1, ip
 1470 002a 06FB1477 		mls	r7, r6, r4, r7
 1471 002e 7F13     		asrs	r7, r7, #13
 1472 0030 4760     		str	r7, [r0, #4]
 308:math/pprz_algebra_int.c ****   qd->qy = (-(-r->q * q->qi + r->r * q->qx - r->p * q->qz)) >> (INT32_RATE_FRAC + 1);
 1473              		.loc 2 308 0
 1474 0032 5768     		ldr	r7, [r2, #4]
 1475 0034 05FB04FC 		mul	ip, r5, r4
 1476 0038 07FB11CC 		mls	ip, r7, r1, ip
 1477 003c 06FB03C6 		mla	r6, r6, r3, ip
 1478 0040 7613     		asrs	r6, r6, #13
 1479 0042 8660     		str	r6, [r0, #8]
 309:math/pprz_algebra_int.c ****   qd->qz = (-(-r->r * q->qi - r->q * q->qx + r->p * q->qy)) >> (INT32_RATE_FRAC + 1);
 1480              		.loc 2 309 0
 1481 0044 9268     		ldr	r2, [r2, #8]
 1482              	.LVL135:
 1483 0046 6943     		muls	r1, r5, r1
 1484 0048 07FB0414 		mla	r4, r7, r4, r1
 1485 004c 02FB1343 		mls	r3, r2, r3, r4
 1486 0050 5B13     		asrs	r3, r3, #13
 1487 0052 C360     		str	r3, [r0, #12]
 1488 0054 F0BD     		pop	{r4, r5, r6, r7, pc}
 1489              		.cfi_endproc
 1490              	.LFE25:
 1492              		.section	.text.int32_quat_integrate_fi,"ax",%progbits
 1493              		.align	1
 1494              		.global	int32_quat_integrate_fi
 1495              		.thumb
 1496              		.thumb_func
 1498              	int32_quat_integrate_fi:
 1499              	.LFB26:
 310:math/pprz_algebra_int.c **** }
 311:math/pprz_algebra_int.c **** 
 312:math/pprz_algebra_int.c **** /** in place quaternion first order integration with constant rotational velocity. */
 313:math/pprz_algebra_int.c **** void int32_quat_integrate_fi(struct Int32Quat *q, struct Int64Quat *hr, struct Int32Rates *omega, i
 314:math/pprz_algebra_int.c **** {
 1500              		.loc 2 314 0
 1501              		.cfi_startproc
 1502              		@ args = 0, pretend = 0, frame = 32
 1503              		@ frame_needed = 0, uses_anonymous_args = 0
 1504              	.LVL136:
 315:math/pprz_algebra_int.c ****   hr->qi += - ((int64_t) omega->p) * q->qx - ((int64_t) omega->q) * q->qy - ((int64_t) omega->r) * 
 1505              		.loc 2 315 0
 1506 0000 D2F800C0 		ldr	ip, [r2]
 314:math/pprz_algebra_int.c **** {
 1507              		.loc 2 314 0
 1508 0004 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1509              		.cfi_def_cfa_offset 36
 1510              		.cfi_offset 4, -36
 1511              		.cfi_offset 5, -32
 1512              		.cfi_offset 6, -28
 1513              		.cfi_offset 7, -24
 1514              		.cfi_offset 8, -20
 1515              		.cfi_offset 9, -16
 1516              		.cfi_offset 10, -12
 1517              		.cfi_offset 11, -8
 1518              		.cfi_offset 14, -4
 1519 0008 8946     		mov	r9, r1
 1520              		.loc 2 315 0
 1521 000a 4168     		ldr	r1, [r0, #4]
 1522              	.LVL137:
 1523 000c D2F808E0 		ldr	lr, [r2, #8]
 314:math/pprz_algebra_int.c **** {
 1524              		.loc 2 314 0
 1525 0010 8046     		mov	r8, r0
 1526              		.loc 2 315 0
 1527 0012 6446     		mov	r4, ip
 1528 0014 4FEAEC75 		asr	r5, ip, #31
 1529 0018 6442     		negs	r4, r4
 1530 001a 65EB4505 		sbc	r5, r5, r5, lsl #1
 1531 001e CF17     		asrs	r7, r1, #31
 1532 0020 5068     		ldr	r0, [r2, #4]
 1533              	.LVL138:
 1534 0022 D8F808A0 		ldr	r10, [r8, #8]
 1535 0026 D8F80C20 		ldr	r2, [r8, #12]
 1536              	.LVL139:
 316:math/pprz_algebra_int.c ****   hr->qx += ((int64_t) omega->p) * q->qi + ((int64_t) omega->r) * q->qy - ((int64_t) omega->q) * q-
 1537              		.loc 2 316 0
 1538 002a D8F800B0 		ldr	fp, [r8]
 315:math/pprz_algebra_int.c ****   hr->qi += - ((int64_t) omega->p) * q->qx - ((int64_t) omega->q) * q->qy - ((int64_t) omega->r) * 
 1539              		.loc 2 315 0
 1540 002e 04FB07F6 		mul	r6, r4, r7
 1541 0032 01FB0566 		mla	r6, r1, r5, r6
 1542 0036 A4FB0145 		umull	r4, r5, r4, r1
 1543 003a 3544     		add	r5, r5, r6
 1544 003c 80FB0A67 		smull	r6, r7, r0, r10
 1545 0040 A41B     		subs	r4, r4, r6
 1546 0042 65EB0705 		sbc	r5, r5, r7
 1547 0046 8EFB0267 		smull	r6, r7, lr, r2
 1548 004a A41B     		subs	r4, r4, r6
 1549 004c 65EB0705 		sbc	r5, r5, r7
 1550 0050 D9E90067 		ldrd	r6, [r9]
 1551 0054 3619     		adds	r6, r6, r4
 314:math/pprz_algebra_int.c **** {
 1552              		.loc 2 314 0
 1553 0056 8BB0     		sub	sp, sp, #44
 1554              		.cfi_def_cfa_offset 80
 315:math/pprz_algebra_int.c ****   hr->qi += - ((int64_t) omega->p) * q->qx - ((int64_t) omega->q) * q->qy - ((int64_t) omega->r) * 
 1555              		.loc 2 315 0
 1556 0058 47EB0507 		adc	r7, r7, r5
 1557              		.loc 2 316 0
 1558 005c 8EFB0A45 		smull	r4, r5, lr, r10
 1559 0060 CBFB0C45 		smlal	r4, r5, fp, ip
 315:math/pprz_algebra_int.c ****   hr->qi += - ((int64_t) omega->p) * q->qx - ((int64_t) omega->q) * q->qy - ((int64_t) omega->r) * 
 1560              		.loc 2 315 0
 1561 0064 CDE90467 		strd	r6, [sp, #16]
 1562 0068 C9E90067 		strd	r6, [r9]
 1563              		.loc 2 316 0
 1564 006c 80FB0267 		smull	r6, r7, r0, r2
 1565 0070 A41B     		subs	r4, r4, r6
 1566 0072 65EB0705 		sbc	r5, r5, r7
 1567 0076 D9E90267 		ldrd	r6, [r9, #8]
 1568 007a A419     		adds	r4, r4, r6
 1569 007c 45EB0705 		adc	r5, r5, r7
 1570 0080 C9E90245 		strd	r4, [r9, #8]
 317:math/pprz_algebra_int.c ****   hr->qy += ((int64_t) omega->q) * q->qi - ((int64_t) omega->r) * q->qx + ((int64_t) omega->p) * q-
 1571              		.loc 2 317 0
 1572 0084 8EFB0167 		smull	r6, r7, lr, r1
 1573 0088 80FB0B45 		smull	r4, r5, r0, fp
 1574 008c A41B     		subs	r4, r4, r6
 1575 008e 65EB0705 		sbc	r5, r5, r7
 1576 0092 D9E90467 		ldrd	r6, [r9, #16]
 1577 0096 C2FB0C45 		smlal	r4, r5, r2, ip
 1578 009a A419     		adds	r4, r4, r6
 1579 009c 45EB0705 		adc	r5, r5, r7
 1580 00a0 C9E90445 		strd	r4, [r9, #16]
 318:math/pprz_algebra_int.c ****   hr->qz += ((int64_t) omega->r) * q->qi + ((int64_t) omega->q) * q->qx - ((int64_t) omega->p) * q-
 1581              		.loc 2 318 0
 1582 00a4 80FB0101 		smull	r0, r1, r0, r1
 1583 00a8 D9E90645 		ldrd	r4, [r9, #24]
 1584 00ac CBFB0E01 		smlal	r0, r1, fp, lr
 1585 00b0 8CFB0AAB 		smull	r10, fp, ip, r10
 1586 00b4 B0EB0A00 		subs	r0, r0, r10
 1587 00b8 61EB0B01 		sbc	r1, r1, fp
 1588 00bc 0019     		adds	r0, r0, r4
 319:math/pprz_algebra_int.c **** 
 320:math/pprz_algebra_int.c ****   lldiv_t _div = lldiv(hr->qi, ((1 << INT32_RATE_FRAC) * freq * 2));
 1589              		.loc 2 320 0
 1590 00be 4FEA4333 		lsl	r3, r3, #13
 1591              	.LVL140:
 318:math/pprz_algebra_int.c ****   hr->qz += ((int64_t) omega->r) * q->qi + ((int64_t) omega->q) * q->qx - ((int64_t) omega->p) * q-
 1592              		.loc 2 318 0
 1593 00c2 41EB0501 		adc	r1, r1, r5
 1594              		.loc 2 320 0
 1595 00c6 1C46     		mov	r4, r3
 1596 00c8 DD17     		asrs	r5, r3, #31
 318:math/pprz_algebra_int.c ****   hr->qz += ((int64_t) omega->r) * q->qi + ((int64_t) omega->q) * q->qx - ((int64_t) omega->p) * q-
 1597              		.loc 2 318 0
 1598 00ca C9E90601 		strd	r0, [r9, #24]
 1599              		.loc 2 320 0
 1600 00ce DDE90423 		ldrd	r2, [sp, #16]
 1601 00d2 06A8     		add	r0, sp, #24
 1602 00d4 CDE90045 		strd	r4, [sp]
 1603 00d8 FFF7FEFF 		bl	lldiv
 1604              	.LVL141:
 321:math/pprz_algebra_int.c ****   q->qi += (int32_t) _div.quot;
 1605              		.loc 2 321 0
 1606 00dc D8F80020 		ldr	r2, [r8]
 1607 00e0 069B     		ldr	r3, [sp, #24]
 1608 00e2 1344     		add	r3, r3, r2
 1609 00e4 C8F80030 		str	r3, [r8]
 322:math/pprz_algebra_int.c ****   hr->qi = _div.rem;
 1610              		.loc 2 322 0
 1611 00e8 DDE90823 		ldrd	r2, [sp, #32]
 323:math/pprz_algebra_int.c **** 
 324:math/pprz_algebra_int.c ****   _div = lldiv(hr->qx, ((1 << INT32_RATE_FRAC) * freq * 2));
 1612              		.loc 2 324 0
 1613 00ec 06A8     		add	r0, sp, #24
 1614              	.LVL142:
 322:math/pprz_algebra_int.c ****   hr->qi = _div.rem;
 1615              		.loc 2 322 0
 1616 00ee C9E90023 		strd	r2, [r9]
 1617              		.loc 2 324 0
 1618 00f2 CDE90045 		strd	r4, [sp]
 1619 00f6 D9E90223 		ldrd	r2, [r9, #8]
 1620 00fa FFF7FEFF 		bl	lldiv
 1621              	.LVL143:
 325:math/pprz_algebra_int.c ****   q->qx += (int32_t) _div.quot;
 1622              		.loc 2 325 0
 1623 00fe D8F80420 		ldr	r2, [r8, #4]
 1624 0102 069B     		ldr	r3, [sp, #24]
 1625 0104 1344     		add	r3, r3, r2
 1626 0106 C8F80430 		str	r3, [r8, #4]
 326:math/pprz_algebra_int.c ****   hr->qx = _div.rem;
 1627              		.loc 2 326 0
 1628 010a DDE90823 		ldrd	r2, [sp, #32]
 327:math/pprz_algebra_int.c **** 
 328:math/pprz_algebra_int.c ****   _div = lldiv(hr->qy, ((1 << INT32_RATE_FRAC) * freq * 2));
 1629              		.loc 2 328 0
 1630 010e 06A8     		add	r0, sp, #24
 1631              	.LVL144:
 326:math/pprz_algebra_int.c ****   hr->qx = _div.rem;
 1632              		.loc 2 326 0
 1633 0110 C9E90223 		strd	r2, [r9, #8]
 1634              		.loc 2 328 0
 1635 0114 CDE90045 		strd	r4, [sp]
 1636 0118 D9E90423 		ldrd	r2, [r9, #16]
 1637 011c FFF7FEFF 		bl	lldiv
 1638              	.LVL145:
 329:math/pprz_algebra_int.c ****   q->qy += (int32_t) _div.quot;
 1639              		.loc 2 329 0
 1640 0120 D8F80820 		ldr	r2, [r8, #8]
 1641 0124 069B     		ldr	r3, [sp, #24]
 1642 0126 1344     		add	r3, r3, r2
 1643 0128 C8F80830 		str	r3, [r8, #8]
 330:math/pprz_algebra_int.c ****   hr->qy = _div.rem;
 1644              		.loc 2 330 0
 1645 012c DDE90823 		ldrd	r2, [sp, #32]
 331:math/pprz_algebra_int.c **** 
 332:math/pprz_algebra_int.c ****   _div = lldiv(hr->qz, ((1 << INT32_RATE_FRAC) * freq * 2));
 1646              		.loc 2 332 0
 1647 0130 CDE90045 		strd	r4, [sp]
 330:math/pprz_algebra_int.c ****   hr->qy = _div.rem;
 1648              		.loc 2 330 0
 1649 0134 C9E90423 		strd	r2, [r9, #16]
 1650              		.loc 2 332 0
 1651 0138 06A8     		add	r0, sp, #24
 1652              	.LVL146:
 1653 013a D9E90623 		ldrd	r2, [r9, #24]
 1654 013e FFF7FEFF 		bl	lldiv
 1655              	.LVL147:
 333:math/pprz_algebra_int.c ****   q->qz += (int32_t) _div.quot;
 1656              		.loc 2 333 0
 1657 0142 D8F80C20 		ldr	r2, [r8, #12]
 1658 0146 069B     		ldr	r3, [sp, #24]
 1659 0148 1344     		add	r3, r3, r2
 1660 014a C8F80C30 		str	r3, [r8, #12]
 334:math/pprz_algebra_int.c ****   hr->qz = _div.rem;
 1661              		.loc 2 334 0
 1662 014e DDE90823 		ldrd	r2, [sp, #32]
 1663 0152 C9E90623 		strd	r2, [r9, #24]
 335:math/pprz_algebra_int.c **** }
 1664              		.loc 2 335 0
 1665 0156 0BB0     		add	sp, sp, #44
 1666              		@ sp needed
 1667 0158 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1668              		.cfi_endproc
 1669              	.LFE26:
 1671              		.section	.text.int32_quat_vmult,"ax",%progbits
 1672              		.align	1
 1673              		.global	int32_quat_vmult
 1674              		.thumb
 1675              		.thumb_func
 1677              	int32_quat_vmult:
 1678              	.LFB27:
 336:math/pprz_algebra_int.c **** 
 337:math/pprz_algebra_int.c **** void int32_quat_vmult(struct Int32Vect3 *v_out, struct Int32Quat *q, struct Int32Vect3 *v_in)
 338:math/pprz_algebra_int.c **** {
 1679              		.loc 2 338 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 24
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 1683              	.LVL148:
 1684 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1685              		.cfi_def_cfa_offset 36
 1686              		.cfi_offset 4, -36
 1687              		.cfi_offset 5, -32
 1688              		.cfi_offset 6, -28
 1689              		.cfi_offset 7, -24
 1690              		.cfi_offset 8, -20
 1691              		.cfi_offset 9, -16
 1692              		.cfi_offset 10, -12
 1693              		.cfi_offset 11, -8
 1694              		.cfi_offset 14, -4
 339:math/pprz_algebra_int.c ****   const int32_t _2qi2_m1 = ((q->qi * q->qi) >> (INT32_QUAT_FRAC - 1)) - QUAT1_BFP_OF_REAL(1);
 1695              		.loc 2 339 0
 1696 0004 0E68     		ldr	r6, [r1]
 340:math/pprz_algebra_int.c ****   const int32_t _2qx2    = (q->qx * q->qx) >> (INT32_QUAT_FRAC - 1);
 341:math/pprz_algebra_int.c ****   const int32_t _2qy2    = (q->qy * q->qy) >> (INT32_QUAT_FRAC - 1);
 342:math/pprz_algebra_int.c ****   const int32_t _2qz2    = (q->qz * q->qz) >> (INT32_QUAT_FRAC - 1);
 1697              		.loc 2 342 0
 1698 0006 CB68     		ldr	r3, [r1, #12]
 340:math/pprz_algebra_int.c ****   const int32_t _2qx2    = (q->qx * q->qx) >> (INT32_QUAT_FRAC - 1);
 1699              		.loc 2 340 0
 1700 0008 4F68     		ldr	r7, [r1, #4]
 341:math/pprz_algebra_int.c ****   const int32_t _2qy2    = (q->qy * q->qy) >> (INT32_QUAT_FRAC - 1);
 1701              		.loc 2 341 0
 1702 000a 8C68     		ldr	r4, [r1, #8]
 339:math/pprz_algebra_int.c ****   const int32_t _2qi2_m1 = ((q->qi * q->qi) >> (INT32_QUAT_FRAC - 1)) - QUAT1_BFP_OF_REAL(1);
 1703              		.loc 2 339 0
 1704 000c 06FB06F5 		mul	r5, r6, r6
 343:math/pprz_algebra_int.c ****   const int32_t _2qiqx   = (q->qi * q->qx) >> (INT32_QUAT_FRAC - 1);
 344:math/pprz_algebra_int.c ****   const int32_t _2qiqy   = (q->qi * q->qy) >> (INT32_QUAT_FRAC - 1);
 345:math/pprz_algebra_int.c ****   const int32_t _2qiqz   = (q->qi * q->qz) >> (INT32_QUAT_FRAC - 1);
 1705              		.loc 2 345 0
 1706 0010 03FB06F8 		mul	r8, r3, r6
 339:math/pprz_algebra_int.c ****   const int32_t _2qi2_m1 = ((q->qi * q->qi) >> (INT32_QUAT_FRAC - 1)) - QUAT1_BFP_OF_REAL(1);
 1707              		.loc 2 339 0
 1708 0014 AD13     		asrs	r5, r5, #14
 338:math/pprz_algebra_int.c **** {
 1709              		.loc 2 338 0
 1710 0016 87B0     		sub	sp, sp, #28
 1711              		.cfi_def_cfa_offset 64
 343:math/pprz_algebra_int.c ****   const int32_t _2qiqx   = (q->qi * q->qx) >> (INT32_QUAT_FRAC - 1);
 1712              		.loc 2 343 0
 1713 0018 07FB06FA 		mul	r10, r7, r6
 339:math/pprz_algebra_int.c ****   const int32_t _2qi2_m1 = ((q->qi * q->qi) >> (INT32_QUAT_FRAC - 1)) - QUAT1_BFP_OF_REAL(1);
 1714              		.loc 2 339 0
 1715 001c A5F50045 		sub	r5, r5, #32768
 1716              	.LVL149:
 344:math/pprz_algebra_int.c ****   const int32_t _2qiqy   = (q->qi * q->qy) >> (INT32_QUAT_FRAC - 1);
 1717              		.loc 2 344 0
 1718 0020 04FB06F1 		mul	r1, r4, r6
 1719              	.LVL150:
 346:math/pprz_algebra_int.c ****   const int32_t m01 = ((q->qx * q->qy) >> (INT32_QUAT_FRAC - 1)) + _2qiqz;
 1720              		.loc 2 346 0
 1721 0024 04FB07F9 		mul	r9, r4, r7
 347:math/pprz_algebra_int.c ****   const int32_t m02 = ((q->qx * q->qz) >> (INT32_QUAT_FRAC - 1)) - _2qiqy;
 348:math/pprz_algebra_int.c ****   const int32_t m12 = ((q->qy * q->qz) >> (INT32_QUAT_FRAC - 1)) + _2qiqx;
 349:math/pprz_algebra_int.c ****   v_out->x = (_2qi2_m1 * v_in->x + _2qx2 * v_in->x + m01 * v_in->y +  m02 * v_in->z) >> INT32_QUAT_
 1722              		.loc 2 349 0
 1723 0028 5668     		ldr	r6, [r2, #4]
 347:math/pprz_algebra_int.c ****   const int32_t m02 = ((q->qx * q->qz) >> (INT32_QUAT_FRAC - 1)) - _2qiqy;
 1724              		.loc 2 347 0
 1725 002a 03FB07FC 		mul	ip, r3, r7
 345:math/pprz_algebra_int.c ****   const int32_t _2qiqz   = (q->qi * q->qz) >> (INT32_QUAT_FRAC - 1);
 1726              		.loc 2 345 0
 1727 002e 4FEAA838 		asr	r8, r8, #14
 340:math/pprz_algebra_int.c ****   const int32_t _2qx2    = (q->qx * q->qx) >> (INT32_QUAT_FRAC - 1);
 1728              		.loc 2 340 0
 1729 0032 7F43     		muls	r7, r7, r7
 1730              	.LVL151:
 344:math/pprz_algebra_int.c ****   const int32_t _2qiqy   = (q->qi * q->qy) >> (INT32_QUAT_FRAC - 1);
 1731              		.loc 2 344 0
 1732 0034 8913     		asrs	r1, r1, #14
 346:math/pprz_algebra_int.c ****   const int32_t m01 = ((q->qx * q->qy) >> (INT32_QUAT_FRAC - 1)) + _2qiqz;
 1733              		.loc 2 346 0
 1734 0036 08EBA939 		add	r9, r8, r9, asr #14
 1735              		.loc 2 349 0
 1736 003a 05EBA737 		add	r7, r5, r7, asr #14
 1737 003e 0397     		str	r7, [sp, #12]
 347:math/pprz_algebra_int.c ****   const int32_t m02 = ((q->qx * q->qz) >> (INT32_QUAT_FRAC - 1)) - _2qiqy;
 1738              		.loc 2 347 0
 1739 0040 C1EBAC3C 		rsb	ip, r1, ip, asr #14
 1740              		.loc 2 349 0
 1741 0044 06FB09F7 		mul	r7, r6, r9
 343:math/pprz_algebra_int.c ****   const int32_t _2qiqx   = (q->qi * q->qx) >> (INT32_QUAT_FRAC - 1);
 1742              		.loc 2 343 0
 1743 0048 4FEAAA3B 		asr	fp, r10, #14
 1744              	.LVL152:
 347:math/pprz_algebra_int.c ****   const int32_t m02 = ((q->qx * q->qz) >> (INT32_QUAT_FRAC - 1)) - _2qiqy;
 1745              		.loc 2 347 0
 1746 004c CDF804C0 		str	ip, [sp, #4]
 1747              		.loc 2 349 0
 1748 0050 DDF80CA0 		ldr	r10, [sp, #12]
 344:math/pprz_algebra_int.c ****   const int32_t _2qiqy   = (q->qi * q->qy) >> (INT32_QUAT_FRAC - 1);
 1749              		.loc 2 344 0
 1750 0054 0491     		str	r1, [sp, #16]
 1751              	.LVL153:
 1752              		.loc 2 349 0
 1753 0056 BC46     		mov	ip, r7
 1754              	.LVL154:
 348:math/pprz_algebra_int.c ****   const int32_t m12 = ((q->qy * q->qz) >> (INT32_QUAT_FRAC - 1)) + _2qiqx;
 1755              		.loc 2 348 0
 1756 0058 03FB04F1 		mul	r1, r3, r4
 1757              	.LVL155:
 1758              		.loc 2 349 0
 1759 005c 1768     		ldr	r7, [r2]
 348:math/pprz_algebra_int.c ****   const int32_t m12 = ((q->qy * q->qz) >> (INT32_QUAT_FRAC - 1)) + _2qiqx;
 1760              		.loc 2 348 0
 1761 005e 0BEBA131 		add	r1, fp, r1, asr #14
 1762 0062 0591     		str	r1, [sp, #20]
 1763              	.LVL156:
 1764              		.loc 2 349 0
 1765 0064 07FB0AC7 		mla	r7, r7, r10, ip
 1766 0068 9168     		ldr	r1, [r2, #8]
 1767              	.LVL157:
 1768 006a DDF804A0 		ldr	r10, [sp, #4]
 1769 006e 0397     		str	r7, [sp, #12]
 1770 0070 01FB0A77 		mla	r7, r1, r10, r7
 1771 0074 FF13     		asrs	r7, r7, #15
 1772 0076 0760     		str	r7, [r0]
 350:math/pprz_algebra_int.c ****   v_out->y = (_2qi2_m1 * v_in->y + m01 * v_in->x - 2 * _2qiqz * v_in->x + _2qy2 * v_in->y + m12 * v
 1773              		.loc 2 350 0
 1774 0078 1768     		ldr	r7, [r2]
 1775 007a DDF814C0 		ldr	ip, [sp, #20]
 1776 007e 07FB09F9 		mul	r9, r7, r9
 1777              	.LVL158:
 1778 0082 6FF0010A 		mvn	r10, #1
 1779 0086 06FB0599 		mla	r9, r6, r5, r9
 1780 008a 0AFB08F8 		mul	r8, r10, r8
 1781              	.LVL159:
 341:math/pprz_algebra_int.c ****   const int32_t _2qy2    = (q->qy * q->qy) >> (INT32_QUAT_FRAC - 1);
 1782              		.loc 2 341 0
 1783 008e 6443     		muls	r4, r4, r4
 1784              	.LVL160:
 1785              		.loc 2 350 0
 1786 0090 07FB0898 		mla	r8, r7, r8, r9
 341:math/pprz_algebra_int.c ****   const int32_t _2qy2    = (q->qy * q->qy) >> (INT32_QUAT_FRAC - 1);
 1787              		.loc 2 341 0
 1788 0094 A413     		asrs	r4, r4, #14
 1789              	.LVL161:
 1790              		.loc 2 350 0
 1791 0096 06FB0484 		mla	r4, r6, r4, r8
 1792              	.LVL162:
 1793 009a 01FB0C44 		mla	r4, r1, ip, r4
 1794 009e E413     		asrs	r4, r4, #15
 1795 00a0 4460     		str	r4, [r0, #4]
 351:math/pprz_algebra_int.c ****              INT32_QUAT_FRAC;
 352:math/pprz_algebra_int.c ****   v_out->z = (_2qi2_m1 * v_in->z + m02 * v_in->x + 2 * _2qiqy * v_in->x + m12 * v_in->y - 2 * _2qiq
 1796              		.loc 2 352 0
 1797 00a2 019C     		ldr	r4, [sp, #4]
 1798 00a4 049E     		ldr	r6, [sp, #16]
 1799 00a6 5268     		ldr	r2, [r2, #4]
 1800              	.LVL163:
 1801 00a8 07FB04FC 		mul	ip, r7, r4
 1802 00ac 01FB05C5 		mla	r5, r1, r5, ip
 1803              	.LVL164:
 1804 00b0 4FEA460C 		lsl	ip, r6, #1
 1805 00b4 07FB0C57 		mla	r7, r7, ip, r5
 1806 00b8 DDF814C0 		ldr	ip, [sp, #20]
 1807 00bc 0AFB0BFA 		mul	r10, r10, fp
 1808 00c0 02FB0C77 		mla	r7, r2, ip, r7
 342:math/pprz_algebra_int.c ****   const int32_t _2qz2    = (q->qz * q->qz) >> (INT32_QUAT_FRAC - 1);
 1809              		.loc 2 342 0
 1810 00c4 5B43     		muls	r3, r3, r3
 1811              	.LVL165:
 1812              		.loc 2 352 0
 1813 00c6 02FB0A72 		mla	r2, r2, r10, r7
 342:math/pprz_algebra_int.c ****   const int32_t _2qz2    = (q->qz * q->qz) >> (INT32_QUAT_FRAC - 1);
 1814              		.loc 2 342 0
 1815 00ca 9B13     		asrs	r3, r3, #14
 1816              	.LVL166:
 1817              		.loc 2 352 0
 1818 00cc 01FB0321 		mla	r1, r1, r3, r2
 353:math/pprz_algebra_int.c ****               v_in->z) >> INT32_QUAT_FRAC;
 1819              		.loc 2 353 0
 1820 00d0 C913     		asrs	r1, r1, #15
 352:math/pprz_algebra_int.c ****   v_out->z = (_2qi2_m1 * v_in->z + m02 * v_in->x + 2 * _2qiqy * v_in->x + m12 * v_in->y - 2 * _2qiq
 1821              		.loc 2 352 0
 1822 00d2 8160     		str	r1, [r0, #8]
 354:math/pprz_algebra_int.c **** }
 1823              		.loc 2 354 0
 1824 00d4 07B0     		add	sp, sp, #28
 1825              		@ sp needed
 1826 00d6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1827              		.cfi_endproc
 1828              	.LFE27:
 1830              		.section	.text.int32_quat_of_eulers,"ax",%progbits
 1831              		.align	1
 1832              		.global	int32_quat_of_eulers
 1833              		.thumb
 1834              		.thumb_func
 1836              	int32_quat_of_eulers:
 1837              	.LFB28:
 355:math/pprz_algebra_int.c **** 
 356:math/pprz_algebra_int.c **** /*
 357:math/pprz_algebra_int.c ****  * http://www.mathworks.com/access/helpdesk_r13/help/toolbox/aeroblks/euleranglestoquaternions.html
 358:math/pprz_algebra_int.c ****  */
 359:math/pprz_algebra_int.c **** void int32_quat_of_eulers(struct Int32Quat *q, struct Int32Eulers *e)
 360:math/pprz_algebra_int.c **** {
 1838              		.loc 2 360 0
 1839              		.cfi_startproc
 1840              		@ args = 0, pretend = 0, frame = 0
 1841              		@ frame_needed = 0, uses_anonymous_args = 0
 1842              	.LVL167:
 1843 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1844              		.cfi_def_cfa_offset 32
 1845              		.cfi_offset 4, -32
 1846              		.cfi_offset 5, -28
 1847              		.cfi_offset 6, -24
 1848              		.cfi_offset 7, -20
 1849              		.cfi_offset 8, -16
 1850              		.cfi_offset 9, -12
 1851              		.cfi_offset 10, -8
 1852              		.cfi_offset 14, -4
 361:math/pprz_algebra_int.c ****   const int32_t phi2   = e->phi   / 2;
 1853              		.loc 2 361 0
 1854 0004 0E68     		ldr	r6, [r1]
 362:math/pprz_algebra_int.c ****   const int32_t theta2 = e->theta / 2;
 1855              		.loc 2 362 0
 1856 0006 4A68     		ldr	r2, [r1, #4]
 363:math/pprz_algebra_int.c ****   const int32_t psi2   = e->psi   / 2;
 1857              		.loc 2 363 0
 1858 0008 8F68     		ldr	r7, [r1, #8]
 361:math/pprz_algebra_int.c ****   const int32_t phi2   = e->phi   / 2;
 1859              		.loc 2 361 0
 1860 000a 0223     		movs	r3, #2
 1861 000c 96FBF3F6 		sdiv	r6, r6, r3
 1862              	.LVL168:
 360:math/pprz_algebra_int.c **** {
 1863              		.loc 2 360 0
 1864 0010 0446     		mov	r4, r0
 364:math/pprz_algebra_int.c **** 
 365:math/pprz_algebra_int.c ****   int32_t s_phi2;
 366:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(s_phi2, phi2);
 1865              		.loc 2 366 0
 1866 0012 3046     		mov	r0, r6
 1867              	.LVL169:
 362:math/pprz_algebra_int.c ****   const int32_t theta2 = e->theta / 2;
 1868              		.loc 2 362 0
 1869 0014 92FBF3F8 		sdiv	r8, r2, r3
 1870              	.LVL170:
 363:math/pprz_algebra_int.c ****   const int32_t psi2   = e->psi   / 2;
 1871              		.loc 2 363 0
 1872 0018 97FBF3F7 		sdiv	r7, r7, r3
 1873              	.LVL171:
 1874              		.loc 2 366 0
 1875 001c FFF7FEFF 		bl	pprz_itrig_sin
 1876              	.LVL172:
 1877 0020 0546     		mov	r5, r0
 1878              	.LVL173:
 367:math/pprz_algebra_int.c ****   int32_t c_phi2;
 368:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(c_phi2, phi2);
 1879              		.loc 2 368 0
 1880 0022 3046     		mov	r0, r6
 1881              	.LVL174:
 1882 0024 FFF7FEFF 		bl	pprz_itrig_cos
 1883              	.LVL175:
 1884 0028 0646     		mov	r6, r0
 1885              	.LVL176:
 369:math/pprz_algebra_int.c ****   int32_t s_theta2;
 370:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(s_theta2, theta2);
 1886              		.loc 2 370 0
 1887 002a 4046     		mov	r0, r8
 1888              	.LVL177:
 1889 002c FFF7FEFF 		bl	pprz_itrig_sin
 1890              	.LVL178:
 1891 0030 8146     		mov	r9, r0
 1892              	.LVL179:
 371:math/pprz_algebra_int.c ****   int32_t c_theta2;
 372:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(c_theta2, theta2);
 1893              		.loc 2 372 0
 1894 0032 4046     		mov	r0, r8
 1895              	.LVL180:
 1896 0034 FFF7FEFF 		bl	pprz_itrig_cos
 1897              	.LVL181:
 1898 0038 8246     		mov	r10, r0
 1899              	.LVL182:
 373:math/pprz_algebra_int.c ****   int32_t s_psi2;
 374:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(s_psi2, psi2);
 1900              		.loc 2 374 0
 1901 003a 3846     		mov	r0, r7
 1902              	.LVL183:
 1903 003c FFF7FEFF 		bl	pprz_itrig_sin
 1904              	.LVL184:
 1905 0040 8046     		mov	r8, r0
 1906              	.LVL185:
 375:math/pprz_algebra_int.c ****   int32_t c_psi2;
 376:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(c_psi2, psi2);
 1907              		.loc 2 376 0
 1908 0042 3846     		mov	r0, r7
 1909              	.LVL186:
 1910 0044 FFF7FEFF 		bl	pprz_itrig_cos
 1911              	.LVL187:
 377:math/pprz_algebra_int.c **** 
 378:math/pprz_algebra_int.c ****   int32_t c_th_c_ps = INT_MULT_RSHIFT(c_theta2, c_psi2, INT32_TRIG_FRAC);
 1912              		.loc 2 378 0
 1913 0048 00FB0AF3 		mul	r3, r0, r10
 379:math/pprz_algebra_int.c ****   int32_t c_th_s_ps = INT_MULT_RSHIFT(c_theta2, s_psi2, INT32_TRIG_FRAC);
 1914              		.loc 2 379 0
 1915 004c 08FB0AFA 		mul	r10, r8, r10
 1916              	.LVL188:
 380:math/pprz_algebra_int.c ****   int32_t s_th_s_ps = INT_MULT_RSHIFT(s_theta2, s_psi2, INT32_TRIG_FRAC);
 1917              		.loc 2 380 0
 1918 0050 08FB09F8 		mul	r8, r8, r9
 1919              	.LVL189:
 1920 0054 4FEAA838 		asr	r8, r8, #14
 381:math/pprz_algebra_int.c ****   int32_t s_th_c_ps = INT_MULT_RSHIFT(s_theta2, c_psi2, INT32_TRIG_FRAC);
 382:math/pprz_algebra_int.c **** 
 383:math/pprz_algebra_int.c ****   q->qi = INT_MULT_RSHIFT(c_phi2, c_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 384:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1921              		.loc 2 384 0
 1922 0058 08FB05F2 		mul	r2, r8, r5
 378:math/pprz_algebra_int.c ****   int32_t c_th_c_ps = INT_MULT_RSHIFT(c_theta2, c_psi2, INT32_TRIG_FRAC);
 1923              		.loc 2 378 0
 1924 005c 9B13     		asrs	r3, r3, #14
 1925              	.LVL190:
 383:math/pprz_algebra_int.c ****   q->qi = INT_MULT_RSHIFT(c_phi2, c_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1926              		.loc 2 383 0
 1927 005e 03FB06F1 		mul	r1, r3, r6
 1928              		.loc 2 384 0
 1929 0062 5213     		asrs	r2, r2, #13
 383:math/pprz_algebra_int.c ****   q->qi = INT_MULT_RSHIFT(c_phi2, c_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1930              		.loc 2 383 0
 1931 0064 02EB6132 		add	r2, r2, r1, asr #13
 385:math/pprz_algebra_int.c ****   q->qx = INT_MULT_RSHIFT(-c_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) 
 386:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, c_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1932              		.loc 2 386 0
 1933 0068 6B43     		muls	r3, r5, r3
 1934              	.LVL191:
 383:math/pprz_algebra_int.c ****   q->qi = INT_MULT_RSHIFT(c_phi2, c_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1935              		.loc 2 383 0
 1936 006a 2260     		str	r2, [r4]
 385:math/pprz_algebra_int.c ****   q->qx = INT_MULT_RSHIFT(-c_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) 
 1937              		.loc 2 385 0
 1938 006c 7242     		negs	r2, r6
 1939 006e 08FB02F8 		mul	r8, r8, r2
 1940              		.loc 2 386 0
 1941 0072 5B13     		asrs	r3, r3, #13
 379:math/pprz_algebra_int.c ****   int32_t c_th_s_ps = INT_MULT_RSHIFT(c_theta2, s_psi2, INT32_TRIG_FRAC);
 1942              		.loc 2 379 0
 1943 0074 4FEAAA3A 		asr	r10, r10, #14
 1944              	.LVL192:
 385:math/pprz_algebra_int.c ****   q->qx = INT_MULT_RSHIFT(-c_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) 
 1945              		.loc 2 385 0
 1946 0078 03EB6833 		add	r3, r3, r8, asr #13
 381:math/pprz_algebra_int.c ****   int32_t s_th_c_ps = INT_MULT_RSHIFT(s_theta2, c_psi2, INT32_TRIG_FRAC);
 1947              		.loc 2 381 0
 1948 007c 00FB09F9 		mul	r9, r0, r9
 1949              	.LVL193:
 1950 0080 4FEAA939 		asr	r9, r9, #14
 1951              	.LVL194:
 385:math/pprz_algebra_int.c ****   q->qx = INT_MULT_RSHIFT(-c_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) 
 1952              		.loc 2 385 0
 1953 0084 6360     		str	r3, [r4, #4]
 387:math/pprz_algebra_int.c ****   q->qy = INT_MULT_RSHIFT(c_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 388:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1954              		.loc 2 388 0
 1955 0086 0AFB05F3 		mul	r3, r10, r5
 389:math/pprz_algebra_int.c ****   q->qz = INT_MULT_RSHIFT(c_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 390:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(-s_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1956              		.loc 2 390 0
 1957 008a 6D42     		negs	r5, r5
 1958              	.LVL195:
 387:math/pprz_algebra_int.c ****   q->qy = INT_MULT_RSHIFT(c_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1959              		.loc 2 387 0
 1960 008c 09FB06F2 		mul	r2, r9, r6
 1961              		.loc 2 390 0
 1962 0090 09FB05F9 		mul	r9, r9, r5
 1963              	.LVL196:
 388:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1964              		.loc 2 388 0
 1965 0094 5B13     		asrs	r3, r3, #13
 389:math/pprz_algebra_int.c ****   q->qz = INT_MULT_RSHIFT(c_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1966              		.loc 2 389 0
 1967 0096 0AFB06F6 		mul	r6, r10, r6
 1968              	.LVL197:
 1969              		.loc 2 390 0
 1970 009a 4FEA6939 		asr	r9, r9, #13
 387:math/pprz_algebra_int.c ****   q->qy = INT_MULT_RSHIFT(c_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1971              		.loc 2 387 0
 1972 009e 03EB6233 		add	r3, r3, r2, asr #13
 389:math/pprz_algebra_int.c ****   q->qz = INT_MULT_RSHIFT(c_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1973              		.loc 2 389 0
 1974 00a2 09EB6636 		add	r6, r9, r6, asr #13
 387:math/pprz_algebra_int.c ****   q->qy = INT_MULT_RSHIFT(c_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1975              		.loc 2 387 0
 1976 00a6 A360     		str	r3, [r4, #8]
 389:math/pprz_algebra_int.c ****   q->qz = INT_MULT_RSHIFT(c_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1977              		.loc 2 389 0
 1978 00a8 E660     		str	r6, [r4, #12]
 1979 00aa BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1980              		.cfi_endproc
 1981              	.LFE28:
 1983              		.section	.text.int32_quat_of_axis_angle,"ax",%progbits
 1984              		.align	1
 1985              		.global	int32_quat_of_axis_angle
 1986              		.thumb
 1987              		.thumb_func
 1989              	int32_quat_of_axis_angle:
 1990              	.LFB29:
 391:math/pprz_algebra_int.c **** }
 392:math/pprz_algebra_int.c **** 
 393:math/pprz_algebra_int.c **** void int32_quat_of_axis_angle(struct Int32Quat *q, struct Int32Vect3 *uv, int32_t angle)
 394:math/pprz_algebra_int.c **** {
 1991              		.loc 2 394 0
 1992              		.cfi_startproc
 1993              		@ args = 0, pretend = 0, frame = 0
 1994              		@ frame_needed = 0, uses_anonymous_args = 0
 1995              	.LVL198:
 1996 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1997              		.cfi_def_cfa_offset 24
 1998              		.cfi_offset 3, -24
 1999              		.cfi_offset 4, -20
 2000              		.cfi_offset 5, -16
 2001              		.cfi_offset 6, -12
 2002              		.cfi_offset 7, -8
 2003              		.cfi_offset 14, -4
 395:math/pprz_algebra_int.c ****   int32_t san2;
 396:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(san2, (angle / 2));
 2004              		.loc 2 396 0
 2005 0002 0227     		movs	r7, #2
 2006 0004 92FBF7F7 		sdiv	r7, r2, r7
 394:math/pprz_algebra_int.c **** {
 2007              		.loc 2 394 0
 2008 0008 0446     		mov	r4, r0
 2009              		.loc 2 396 0
 2010 000a 3846     		mov	r0, r7
 2011              	.LVL199:
 394:math/pprz_algebra_int.c **** {
 2012              		.loc 2 394 0
 2013 000c 0D46     		mov	r5, r1
 2014              		.loc 2 396 0
 2015 000e FFF7FEFF 		bl	pprz_itrig_sin
 2016              	.LVL200:
 2017 0012 0646     		mov	r6, r0
 2018              	.LVL201:
 397:math/pprz_algebra_int.c ****   int32_t can2;
 398:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(can2, (angle / 2));
 2019              		.loc 2 398 0
 2020 0014 3846     		mov	r0, r7
 2021              	.LVL202:
 2022 0016 FFF7FEFF 		bl	pprz_itrig_cos
 2023              	.LVL203:
 399:math/pprz_algebra_int.c ****   q->qi = can2;
 400:math/pprz_algebra_int.c ****   q->qx = san2 * uv->x;
 2024              		.loc 2 400 0
 2025 001a 2B68     		ldr	r3, [r5]
 399:math/pprz_algebra_int.c ****   q->qi = can2;
 2026              		.loc 2 399 0
 2027 001c 2060     		str	r0, [r4]
 2028              		.loc 2 400 0
 2029 001e 7343     		muls	r3, r6, r3
 2030 0020 6360     		str	r3, [r4, #4]
 401:math/pprz_algebra_int.c ****   q->qy = san2 * uv->y;
 2031              		.loc 2 401 0
 2032 0022 6B68     		ldr	r3, [r5, #4]
 2033 0024 7343     		muls	r3, r6, r3
 2034 0026 A360     		str	r3, [r4, #8]
 402:math/pprz_algebra_int.c ****   q->qz = san2 * uv->z;
 2035              		.loc 2 402 0
 2036 0028 AB68     		ldr	r3, [r5, #8]
 2037 002a 5E43     		muls	r6, r3, r6
 2038              	.LVL204:
 2039 002c E660     		str	r6, [r4, #12]
 2040 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2041              		.cfi_endproc
 2042              	.LFE29:
 2044              		.global	__aeabi_i2d
 2045              		.global	__aeabi_dadd
 2046              		.global	__aeabi_d2iz
 2047              		.section	.text.int32_quat_of_rmat,"ax",%progbits
 2048              		.align	1
 2049              		.global	int32_quat_of_rmat
 2050              		.thumb
 2051              		.thumb_func
 2053              	int32_quat_of_rmat:
 2054              	.LFB30:
 403:math/pprz_algebra_int.c **** }
 404:math/pprz_algebra_int.c **** 
 405:math/pprz_algebra_int.c **** void int32_quat_of_rmat(struct Int32Quat *q, struct Int32RMat *r)
 406:math/pprz_algebra_int.c **** {
 2055              		.loc 2 406 0
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 0
 2058              		@ frame_needed = 0, uses_anonymous_args = 0
 2059              	.LVL205:
 407:math/pprz_algebra_int.c ****   const int32_t tr = RMAT_TRACE(*r);
 2060              		.loc 2 407 0
 2061 0000 0A68     		ldr	r2, [r1]
 2062 0002 0B69     		ldr	r3, [r1, #16]
 406:math/pprz_algebra_int.c **** {
 2063              		.loc 2 406 0
 2064 0004 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2065              		.cfi_def_cfa_offset 32
 2066              		.cfi_offset 4, -32
 2067              		.cfi_offset 5, -28
 2068              		.cfi_offset 6, -24
 2069              		.cfi_offset 7, -20
 2070              		.cfi_offset 8, -16
 2071              		.cfi_offset 9, -12
 2072              		.cfi_offset 10, -8
 2073              		.cfi_offset 14, -4
 2074              		.loc 2 407 0
 2075 0008 D1F820E0 		ldr	lr, [r1, #32]
 2076 000c 4E69     		ldr	r6, [r1, #20]
 2077 000e CD69     		ldr	r5, [r1, #28]
 2078 0010 D1F81880 		ldr	r8, [r1, #24]
 2079 0014 8F68     		ldr	r7, [r1, #8]
 2080 0016 D1F80490 		ldr	r9, [r1, #4]
 2081 001a D1F80CA0 		ldr	r10, [r1, #12]
 406:math/pprz_algebra_int.c **** {
 2082              		.loc 2 406 0
 2083 001e 0446     		mov	r4, r0
 2084              		.loc 2 407 0
 2085 0020 D018     		adds	r0, r2, r3
 2086              	.LVL206:
 2087 0022 7044     		add	r0, r0, lr
 2088              	.LVL207:
 408:math/pprz_algebra_int.c ****   if (tr > 0) {
 2089              		.loc 2 408 0
 2090 0024 0028     		cmp	r0, #0
 2091 0026 1FDD     		ble	.L34
 2092              	.LVL208:
 2093              	.LBB15:
 409:math/pprz_algebra_int.c ****     const int32_t two_qi_two = TRIG_BFP_OF_REAL(1.) + tr;
 2094              		.loc 2 409 0
 2095 0028 FFF7FEFF 		bl	__aeabi_i2d
 2096              	.LVL209:
 2097 002c 444B     		ldr	r3, .L39
 2098 002e 0022     		movs	r2, #0
 2099 0030 FFF7FEFF 		bl	__aeabi_dadd
 2100              	.LVL210:
 2101 0034 FFF7FEFF 		bl	__aeabi_d2iz
 2102              	.LVL211:
 410:math/pprz_algebra_int.c ****     uint32_t two_qi = int32_sqrt(two_qi_two << INT32_TRIG_FRAC);
 2103              		.loc 2 410 0
 2104 0038 8003     		lsls	r0, r0, #14
 2105 003a FFF7FEFF 		bl	int32_sqrt
 2106              	.LVL212:
 411:math/pprz_algebra_int.c ****     two_qi = two_qi << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 412:math/pprz_algebra_int.c ****     q->qi = two_qi / 2;
 413:math/pprz_algebra_int.c ****     q->qx = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 2107              		.loc 2 413 0
 2108 003e 751B     		subs	r5, r6, r5
 414:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 415:math/pprz_algebra_int.c ****             / two_qi;
 416:math/pprz_algebra_int.c ****     q->qy = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 2109              		.loc 2 416 0
 2110 0040 C7EB0807 		rsb	r7, r7, r8
 411:math/pprz_algebra_int.c ****     two_qi = two_qi << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2111              		.loc 2 411 0
 2112 0044 4000     		lsls	r0, r0, #1
 2113              	.LVL213:
 413:math/pprz_algebra_int.c ****     q->qx = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 2114              		.loc 2 413 0
 2115 0046 ED03     		lsls	r5, r5, #15
 2116              		.loc 2 416 0
 2117 0048 FF03     		lsls	r7, r7, #15
 417:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 418:math/pprz_algebra_int.c ****             / two_qi;
 419:math/pprz_algebra_int.c ****     q->qz = ((RMAT_ELMT(*r, 0, 1) - RMAT_ELMT(*r, 1, 0)) <<
 2118              		.loc 2 419 0
 2119 004a CAEB0909 		rsb	r9, r10, r9
 412:math/pprz_algebra_int.c ****     q->qi = two_qi / 2;
 2120              		.loc 2 412 0
 2121 004e 4308     		lsrs	r3, r0, #1
 415:math/pprz_algebra_int.c ****             / two_qi;
 2122              		.loc 2 415 0
 2123 0050 B5FBF0F5 		udiv	r5, r5, r0
 418:math/pprz_algebra_int.c ****             / two_qi;
 2124              		.loc 2 418 0
 2125 0054 B7FBF0F7 		udiv	r7, r7, r0
 2126              		.loc 2 419 0
 2127 0058 4FEAC939 		lsl	r9, r9, #15
 412:math/pprz_algebra_int.c ****     q->qi = two_qi / 2;
 2128              		.loc 2 412 0
 2129 005c 2360     		str	r3, [r4]
 413:math/pprz_algebra_int.c ****     q->qx = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 2130              		.loc 2 413 0
 2131 005e 6560     		str	r5, [r4, #4]
 416:math/pprz_algebra_int.c ****     q->qy = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 2132              		.loc 2 416 0
 2133 0060 A760     		str	r7, [r4, #8]
 420:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 421:math/pprz_algebra_int.c ****             / two_qi;
 2134              		.loc 2 421 0
 2135 0062 B9FBF0F0 		udiv	r0, r9, r0
 2136              	.LVL214:
 2137 0066 68E0     		b	.L38
 2138              	.LVL215:
 2139              	.L34:
 2140              	.LBE15:
 422:math/pprz_algebra_int.c ****   } else {
 423:math/pprz_algebra_int.c ****     if (RMAT_ELMT(*r, 0, 0) > RMAT_ELMT(*r, 1, 1) &&
 2141              		.loc 2 423 0
 2142 0068 9A42     		cmp	r2, r3
 2143 006a 22DD     		ble	.L36
 2144              		.loc 2 423 0 is_stmt 0 discriminator 1
 2145 006c 7245     		cmp	r2, lr
 2146 006e 20DD     		ble	.L36
 2147              	.LVL216:
 2148              	.LBB16:
 424:math/pprz_algebra_int.c ****         RMAT_ELMT(*r, 0, 0) > RMAT_ELMT(*r, 2, 2)) {
 425:math/pprz_algebra_int.c ****       const int32_t two_qx_two = RMAT_ELMT(*r, 0, 0) - RMAT_ELMT(*r, 1, 1)
 2149              		.loc 2 425 0 is_stmt 1
 2150 0070 D01A     		subs	r0, r2, r3
 2151              	.LVL217:
 426:math/pprz_algebra_int.c ****                                  - RMAT_ELMT(*r, 2, 2) + TRIG_BFP_OF_REAL(1.);
 2152              		.loc 2 426 0
 2153 0072 CEEB0000 		rsb	r0, lr, r0
 2154              	.LVL218:
 2155 0076 FFF7FEFF 		bl	__aeabi_i2d
 2156              	.LVL219:
 2157 007a 314B     		ldr	r3, .L39
 2158 007c 0022     		movs	r2, #0
 2159 007e FFF7FEFF 		bl	__aeabi_dadd
 2160              	.LVL220:
 425:math/pprz_algebra_int.c ****       const int32_t two_qx_two = RMAT_ELMT(*r, 0, 0) - RMAT_ELMT(*r, 1, 1)
 2161              		.loc 2 425 0
 2162 0082 FFF7FEFF 		bl	__aeabi_d2iz
 2163              	.LVL221:
 427:math/pprz_algebra_int.c ****       uint32_t two_qx = int32_sqrt(two_qx_two << INT32_TRIG_FRAC);
 2164              		.loc 2 427 0
 2165 0086 8003     		lsls	r0, r0, #14
 2166 0088 FFF7FEFF 		bl	int32_sqrt
 2167              	.LVL222:
 428:math/pprz_algebra_int.c ****       two_qx = two_qx << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2168              		.loc 2 428 0
 2169 008c 4000     		lsls	r0, r0, #1
 2170              	.LVL223:
 429:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 430:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 431:math/pprz_algebra_int.c ****               / two_qx;
 432:math/pprz_algebra_int.c ****       q->qx = two_qx / 2;
 2171              		.loc 2 432 0
 2172 008e 4308     		lsrs	r3, r0, #1
 429:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 2173              		.loc 2 429 0
 2174 0090 751B     		subs	r5, r6, r5
 2175              		.loc 2 432 0
 2176 0092 6360     		str	r3, [r4, #4]
 433:math/pprz_algebra_int.c ****       q->qy = ((RMAT_ELMT(*r, 0, 1) + RMAT_ELMT(*r, 1, 0)) <<
 2177              		.loc 2 433 0
 2178 0094 09EB0A03 		add	r3, r9, r10
 429:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 2179              		.loc 2 429 0
 2180 0098 ED03     		lsls	r5, r5, #15
 2181              		.loc 2 433 0
 2182 009a DB03     		lsls	r3, r3, #15
 434:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 435:math/pprz_algebra_int.c ****               / two_qx;
 436:math/pprz_algebra_int.c ****       q->qz = ((RMAT_ELMT(*r, 2, 0) + RMAT_ELMT(*r, 0, 2)) <<
 2183              		.loc 2 436 0
 2184 009c 4744     		add	r7, r7, r8
 431:math/pprz_algebra_int.c ****               / two_qx;
 2185              		.loc 2 431 0
 2186 009e B5FBF0F5 		udiv	r5, r5, r0
 435:math/pprz_algebra_int.c ****               / two_qx;
 2187              		.loc 2 435 0
 2188 00a2 B3FBF0F3 		udiv	r3, r3, r0
 2189              		.loc 2 436 0
 2190 00a6 FF03     		lsls	r7, r7, #15
 429:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 2191              		.loc 2 429 0
 2192 00a8 2560     		str	r5, [r4]
 433:math/pprz_algebra_int.c ****       q->qy = ((RMAT_ELMT(*r, 0, 1) + RMAT_ELMT(*r, 1, 0)) <<
 2193              		.loc 2 433 0
 2194 00aa A360     		str	r3, [r4, #8]
 437:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 438:math/pprz_algebra_int.c ****               / two_qx;
 2195              		.loc 2 438 0
 2196 00ac B7FBF0F0 		udiv	r0, r7, r0
 2197              	.LVL224:
 2198 00b0 43E0     		b	.L38
 2199              	.LVL225:
 2200              	.L36:
 2201              	.LBE16:
 439:math/pprz_algebra_int.c ****     } else if (RMAT_ELMT(*r, 1, 1) > RMAT_ELMT(*r, 2, 2)) {
 2202              		.loc 2 439 0
 2203 00b2 7345     		cmp	r3, lr
 2204 00b4 21DD     		ble	.L37
 2205              	.LVL226:
 2206              	.LBB17:
 440:math/pprz_algebra_int.c ****       const int32_t two_qy_two = RMAT_ELMT(*r, 1, 1) - RMAT_ELMT(*r, 0, 0)
 2207              		.loc 2 440 0
 2208 00b6 981A     		subs	r0, r3, r2
 2209              	.LVL227:
 441:math/pprz_algebra_int.c ****                                  - RMAT_ELMT(*r, 2, 2) + TRIG_BFP_OF_REAL(1.);
 2210              		.loc 2 441 0
 2211 00b8 CEEB0000 		rsb	r0, lr, r0
 2212              	.LVL228:
 2213 00bc FFF7FEFF 		bl	__aeabi_i2d
 2214              	.LVL229:
 2215 00c0 1F4B     		ldr	r3, .L39
 2216 00c2 0022     		movs	r2, #0
 2217 00c4 FFF7FEFF 		bl	__aeabi_dadd
 2218              	.LVL230:
 440:math/pprz_algebra_int.c ****       const int32_t two_qy_two = RMAT_ELMT(*r, 1, 1) - RMAT_ELMT(*r, 0, 0)
 2219              		.loc 2 440 0
 2220 00c8 FFF7FEFF 		bl	__aeabi_d2iz
 2221              	.LVL231:
 442:math/pprz_algebra_int.c ****       uint32_t two_qy = int32_sqrt(two_qy_two << INT32_TRIG_FRAC);
 2222              		.loc 2 442 0
 2223 00cc 8003     		lsls	r0, r0, #14
 2224 00ce FFF7FEFF 		bl	int32_sqrt
 2225              	.LVL232:
 443:math/pprz_algebra_int.c ****       two_qy = two_qy << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 444:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 445:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 446:math/pprz_algebra_int.c ****               / two_qy;
 447:math/pprz_algebra_int.c ****       q->qx = ((RMAT_ELMT(*r, 0, 1) + RMAT_ELMT(*r, 1, 0)) <<
 2226              		.loc 2 447 0
 2227 00d2 09EB0A03 		add	r3, r9, r10
 443:math/pprz_algebra_int.c ****       two_qy = two_qy << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2228              		.loc 2 443 0
 2229 00d6 4000     		lsls	r0, r0, #1
 2230              	.LVL233:
 444:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 2231              		.loc 2 444 0
 2232 00d8 C7EB0807 		rsb	r7, r7, r8
 2233              		.loc 2 447 0
 2234 00dc DB03     		lsls	r3, r3, #15
 448:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 449:math/pprz_algebra_int.c ****               / two_qy;
 2235              		.loc 2 449 0
 2236 00de B3FBF0F3 		udiv	r3, r3, r0
 444:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 2237              		.loc 2 444 0
 2238 00e2 FF03     		lsls	r7, r7, #15
 450:math/pprz_algebra_int.c ****       q->qy = two_qy / 2;
 451:math/pprz_algebra_int.c ****       q->qz = ((RMAT_ELMT(*r, 1, 2) + RMAT_ELMT(*r, 2, 1)) <<
 2239              		.loc 2 451 0
 2240 00e4 3544     		add	r5, r5, r6
 446:math/pprz_algebra_int.c ****               / two_qy;
 2241              		.loc 2 446 0
 2242 00e6 B7FBF0F7 		udiv	r7, r7, r0
 447:math/pprz_algebra_int.c ****       q->qx = ((RMAT_ELMT(*r, 0, 1) + RMAT_ELMT(*r, 1, 0)) <<
 2243              		.loc 2 447 0
 2244 00ea 6360     		str	r3, [r4, #4]
 2245              		.loc 2 451 0
 2246 00ec ED03     		lsls	r5, r5, #15
 450:math/pprz_algebra_int.c ****       q->qy = two_qy / 2;
 2247              		.loc 2 450 0
 2248 00ee 4308     		lsrs	r3, r0, #1
 444:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 2249              		.loc 2 444 0
 2250 00f0 2760     		str	r7, [r4]
 450:math/pprz_algebra_int.c ****       q->qy = two_qy / 2;
 2251              		.loc 2 450 0
 2252 00f2 A360     		str	r3, [r4, #8]
 452:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 453:math/pprz_algebra_int.c ****               / two_qy;
 2253              		.loc 2 453 0
 2254 00f4 B5FBF0F0 		udiv	r0, r5, r0
 2255              	.LVL234:
 2256 00f8 1FE0     		b	.L38
 2257              	.LVL235:
 2258              	.L37:
 2259              	.LBE17:
 2260              	.LBB18:
 454:math/pprz_algebra_int.c ****     } else {
 455:math/pprz_algebra_int.c ****       const int32_t two_qz_two = RMAT_ELMT(*r, 2, 2) - RMAT_ELMT(*r, 0, 0)
 2261              		.loc 2 455 0
 2262 00fa C2EB0E00 		rsb	r0, r2, lr
 2263              	.LVL236:
 456:math/pprz_algebra_int.c ****                                  - RMAT_ELMT(*r, 1, 1) + TRIG_BFP_OF_REAL(1.);
 2264              		.loc 2 456 0
 2265 00fe C01A     		subs	r0, r0, r3
 2266 0100 FFF7FEFF 		bl	__aeabi_i2d
 2267              	.LVL237:
 2268 0104 0E4B     		ldr	r3, .L39
 2269 0106 0022     		movs	r2, #0
 2270 0108 FFF7FEFF 		bl	__aeabi_dadd
 2271              	.LVL238:
 455:math/pprz_algebra_int.c ****       const int32_t two_qz_two = RMAT_ELMT(*r, 2, 2) - RMAT_ELMT(*r, 0, 0)
 2272              		.loc 2 455 0
 2273 010c FFF7FEFF 		bl	__aeabi_d2iz
 2274              	.LVL239:
 457:math/pprz_algebra_int.c ****       uint32_t two_qz = int32_sqrt(two_qz_two << INT32_TRIG_FRAC);
 2275              		.loc 2 457 0
 2276 0110 8003     		lsls	r0, r0, #14
 2277 0112 FFF7FEFF 		bl	int32_sqrt
 2278              	.LVL240:
 458:math/pprz_algebra_int.c ****       two_qz = two_qz << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 459:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 0, 1) - RMAT_ELMT(*r, 1, 0)) <<
 460:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 461:math/pprz_algebra_int.c ****               / two_qz;
 462:math/pprz_algebra_int.c ****       q->qx = ((RMAT_ELMT(*r, 2, 0) + RMAT_ELMT(*r, 0, 2)) <<
 2279              		.loc 2 462 0
 2280 0116 4744     		add	r7, r7, r8
 459:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 0, 1) - RMAT_ELMT(*r, 1, 0)) <<
 2281              		.loc 2 459 0
 2282 0118 CAEB0903 		rsb	r3, r10, r9
 463:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 464:math/pprz_algebra_int.c ****               / two_qz;
 465:math/pprz_algebra_int.c ****       q->qy = ((RMAT_ELMT(*r, 1, 2) + RMAT_ELMT(*r, 2, 1)) <<
 2283              		.loc 2 465 0
 2284 011c 3544     		add	r5, r5, r6
 458:math/pprz_algebra_int.c ****       two_qz = two_qz << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2285              		.loc 2 458 0
 2286 011e 4000     		lsls	r0, r0, #1
 2287              	.LVL241:
 459:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 0, 1) - RMAT_ELMT(*r, 1, 0)) <<
 2288              		.loc 2 459 0
 2289 0120 DB03     		lsls	r3, r3, #15
 462:math/pprz_algebra_int.c ****       q->qx = ((RMAT_ELMT(*r, 2, 0) + RMAT_ELMT(*r, 0, 2)) <<
 2290              		.loc 2 462 0
 2291 0122 FF03     		lsls	r7, r7, #15
 2292              		.loc 2 465 0
 2293 0124 ED03     		lsls	r5, r5, #15
 461:math/pprz_algebra_int.c ****               / two_qz;
 2294              		.loc 2 461 0
 2295 0126 B3FBF0F3 		udiv	r3, r3, r0
 464:math/pprz_algebra_int.c ****               / two_qz;
 2296              		.loc 2 464 0
 2297 012a B7FBF0F7 		udiv	r7, r7, r0
 466:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 467:math/pprz_algebra_int.c ****               / two_qz;
 2298              		.loc 2 467 0
 2299 012e B5FBF0F5 		udiv	r5, r5, r0
 459:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 0, 1) - RMAT_ELMT(*r, 1, 0)) <<
 2300              		.loc 2 459 0
 2301 0132 2360     		str	r3, [r4]
 462:math/pprz_algebra_int.c ****       q->qx = ((RMAT_ELMT(*r, 2, 0) + RMAT_ELMT(*r, 0, 2)) <<
 2302              		.loc 2 462 0
 2303 0134 6760     		str	r7, [r4, #4]
 465:math/pprz_algebra_int.c ****       q->qy = ((RMAT_ELMT(*r, 1, 2) + RMAT_ELMT(*r, 2, 1)) <<
 2304              		.loc 2 465 0
 2305 0136 A560     		str	r5, [r4, #8]
 468:math/pprz_algebra_int.c ****       q->qz = two_qz / 2;
 2306              		.loc 2 468 0
 2307 0138 4008     		lsrs	r0, r0, #1
 2308              	.LVL242:
 2309              	.L38:
 2310 013a E060     		str	r0, [r4, #12]
 2311 013c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2312              	.LVL243:
 2313              	.L40:
 2314              		.align	2
 2315              	.L39:
 2316 0140 0000D040 		.word	1087373312
 2317              	.LBE18:
 2318              		.cfi_endproc
 2319              	.LFE30:
 2321              		.section	.text.int32_eulers_of_rmat,"ax",%progbits
 2322              		.align	1
 2323              		.global	int32_eulers_of_rmat
 2324              		.thumb
 2325              		.thumb_func
 2327              	int32_eulers_of_rmat:
 2328              	.LFB31:
 469:math/pprz_algebra_int.c ****     }
 470:math/pprz_algebra_int.c ****   }
 471:math/pprz_algebra_int.c **** }
 472:math/pprz_algebra_int.c **** 
 473:math/pprz_algebra_int.c **** 
 474:math/pprz_algebra_int.c **** /*
 475:math/pprz_algebra_int.c ****  *
 476:math/pprz_algebra_int.c ****  * Euler angles
 477:math/pprz_algebra_int.c ****  *
 478:math/pprz_algebra_int.c ****  */
 479:math/pprz_algebra_int.c **** 
 480:math/pprz_algebra_int.c **** void int32_eulers_of_rmat(struct Int32Eulers *e, struct Int32RMat *rm)
 481:math/pprz_algebra_int.c **** {
 2329              		.loc 2 481 0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 0
 2332              		@ frame_needed = 0, uses_anonymous_args = 0
 2333              	.LVL244:
 2334 0000 10B5     		push	{r4, lr}
 2335              		.cfi_def_cfa_offset 8
 2336              		.cfi_offset 4, -8
 2337              		.cfi_offset 14, -4
 482:math/pprz_algebra_int.c ****   const float dcm00 = TRIG_FLOAT_OF_BFP(rm->m[0]);
 2338              		.loc 2 482 0
 2339 0002 91ED007A 		flds	s14, [r1]	@ int
 2340 0006 DFED277A 		flds	s15, .L42
 481:math/pprz_algebra_int.c **** {
 2341              		.loc 2 481 0
 2342 000a 2DED048B 		fstmfdd	sp!, {d8, d9}
 2343              		.cfi_def_cfa_offset 24
 2344              		.cfi_offset 80, -24
 2345              		.cfi_offset 82, -16
 2346              		.loc 2 482 0
 2347 000e B8EEC79A 		fsitos	s18, s14
 483:math/pprz_algebra_int.c ****   const float dcm01 = TRIG_FLOAT_OF_BFP(rm->m[1]);
 2348              		.loc 2 483 0
 2349 0012 91ED017A 		flds	s14, [r1, #4]	@ int
 2350 0016 F8EEC79A 		fsitos	s19, s14
 484:math/pprz_algebra_int.c ****   const float dcm02 = TRIG_FLOAT_OF_BFP(rm->m[2]);
 2351              		.loc 2 484 0
 2352 001a 91ED027A 		flds	s14, [r1, #8]	@ int
 2353 001e B8EEC78A 		fsitos	s16, s14
 485:math/pprz_algebra_int.c ****   const float dcm12 = TRIG_FLOAT_OF_BFP(rm->m[5]);
 2354              		.loc 2 485 0
 2355 0022 91ED057A 		flds	s14, [r1, #20]	@ int
 2356 0026 F8EEC76A 		fsitos	s13, s14
 486:math/pprz_algebra_int.c ****   const float dcm22 = TRIG_FLOAT_OF_BFP(rm->m[8]);
 2357              		.loc 2 486 0
 2358 002a 91ED087A 		flds	s14, [r1, #32]	@ int
 2359 002e B8EEC77A 		fsitos	s14, s14
 487:math/pprz_algebra_int.c ****   const float phi   = atan2f(dcm12, dcm22);
 2360              		.loc 2 487 0
 2361 0032 66EEA76A 		fmuls	s13, s13, s15
 2362 0036 27EE277A 		fmuls	s14, s14, s15
 481:math/pprz_algebra_int.c **** {
 2363              		.loc 2 481 0
 2364 003a 0446     		mov	r4, r0
 2365              		.loc 2 487 0
 2366 003c 17EE101A 		fmrs	r1, s14
 2367              	.LVL245:
 2368 0040 16EE900A 		fmrs	r0, s13
 2369              	.LVL246:
 482:math/pprz_algebra_int.c ****   const float dcm00 = TRIG_FLOAT_OF_BFP(rm->m[0]);
 2370              		.loc 2 482 0
 2371 0044 29EE279A 		fmuls	s18, s18, s15
 2372              	.LVL247:
 483:math/pprz_algebra_int.c ****   const float dcm01 = TRIG_FLOAT_OF_BFP(rm->m[1]);
 2373              		.loc 2 483 0
 2374 0048 69EEA79A 		fmuls	s19, s19, s15
 2375              	.LVL248:
 484:math/pprz_algebra_int.c ****   const float dcm02 = TRIG_FLOAT_OF_BFP(rm->m[2]);
 2376              		.loc 2 484 0
 2377 004c 28EE278A 		fmuls	s16, s16, s15
 2378              	.LVL249:
 2379              		.loc 2 487 0
 2380 0050 FFF7FEFF 		bl	atan2f
 2381              	.LVL250:
 2382 0054 08EE900A 		fmsr	s17, r0
 2383              	.LVL251:
 488:math/pprz_algebra_int.c ****   const float theta = -asinf(dcm02);
 2384              		.loc 2 488 0
 2385 0058 18EE100A 		fmrs	r0, s16
 2386              	.LVL252:
 2387 005c FFF7FEFF 		bl	asinf
 2388              	.LVL253:
 489:math/pprz_algebra_int.c ****   const float psi   = atan2f(dcm01, dcm00);
 2389              		.loc 2 489 0
 2390 0060 19EE101A 		fmrs	r1, s18
 488:math/pprz_algebra_int.c ****   const float theta = -asinf(dcm02);
 2391              		.loc 2 488 0
 2392 0064 08EE100A 		fmsr	s16, r0
 2393              	.LVL254:
 2394              		.loc 2 489 0
 2395 0068 19EE900A 		fmrs	r0, s19
 2396              	.LVL255:
 2397 006c FFF7FEFF 		bl	atan2f
 2398              	.LVL256:
 490:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2399              		.loc 2 490 0
 2400 0070 DFED0D7A 		flds	s15, .L42+4
 2401 0074 68EEA78A 		fmuls	s17, s17, s15
 2402              	.LVL257:
 491:math/pprz_algebra_int.c ****   e->theta = ANGLE_BFP_OF_REAL(theta);
 2403              		.loc 2 491 0
 2404 0078 28EE678A 		fnmuls	s16, s16, s15
 2405              	.LVL258:
 490:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2406              		.loc 2 490 0
 2407 007c FDEEE88A 		ftosizs	s17, s17
 2408              		.loc 2 491 0
 2409 0080 BDEEC88A 		ftosizs	s16, s16
 492:math/pprz_algebra_int.c ****   e->psi   = ANGLE_BFP_OF_REAL(psi);
 2410              		.loc 2 492 0
 2411 0084 07EE100A 		fmsr	s14, r0
 490:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2412              		.loc 2 490 0
 2413 0088 C4ED008A 		fsts	s17, [r4]	@ int
 491:math/pprz_algebra_int.c ****   e->theta = ANGLE_BFP_OF_REAL(theta);
 2414              		.loc 2 491 0
 2415 008c 84ED018A 		fsts	s16, [r4, #4]	@ int
 493:math/pprz_algebra_int.c **** }
 2416              		.loc 2 493 0
 2417 0090 BDEC048B 		fldmfdd	sp!, {d8-d9}
 2418              	.LVL259:
 492:math/pprz_algebra_int.c ****   e->psi   = ANGLE_BFP_OF_REAL(psi);
 2419              		.loc 2 492 0
 2420 0094 67EE277A 		fmuls	s15, s14, s15
 2421 0098 FDEEE77A 		ftosizs	s15, s15
 2422 009c C4ED027A 		fsts	s15, [r4, #8]	@ int
 2423              		.loc 2 493 0
 2424 00a0 10BD     		pop	{r4, pc}
 2425              	.LVL260:
 2426              	.L43:
 2427 00a2 00BF     		.align	2
 2428              	.L42:
 2429 00a4 00008038 		.word	947912704
 2430 00a8 00008045 		.word	1166016512
 2431              		.cfi_endproc
 2432              	.LFE31:
 2434              		.section	.text.int32_eulers_of_quat,"ax",%progbits
 2435              		.align	1
 2436              		.global	int32_eulers_of_quat
 2437              		.thumb
 2438              		.thumb_func
 2440              	int32_eulers_of_quat:
 2441              	.LFB32:
 494:math/pprz_algebra_int.c **** 
 495:math/pprz_algebra_int.c **** void int32_eulers_of_quat(struct Int32Eulers *e, struct Int32Quat *q)
 496:math/pprz_algebra_int.c **** {
 2442              		.loc 2 496 0
 2443              		.cfi_startproc
 2444              		@ args = 0, pretend = 0, frame = 0
 2445              		@ frame_needed = 0, uses_anonymous_args = 0
 2446              	.LVL261:
 2447 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2448              		.cfi_def_cfa_offset 32
 2449              		.cfi_offset 3, -32
 2450              		.cfi_offset 4, -28
 2451              		.cfi_offset 5, -24
 2452              		.cfi_offset 6, -20
 2453              		.cfi_offset 7, -16
 2454              		.cfi_offset 8, -12
 2455              		.cfi_offset 9, -8
 2456              		.cfi_offset 14, -4
 497:math/pprz_algebra_int.c ****   const int32_t qx2  = INT_MULT_RSHIFT(q->qx, q->qx, INT32_QUAT_FRAC);
 2457              		.loc 2 497 0
 2458 0004 4D68     		ldr	r5, [r1, #4]
 2459              	.LVL262:
 498:math/pprz_algebra_int.c ****   const int32_t qy2  = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC);
 499:math/pprz_algebra_int.c ****   const int32_t qz2  = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC);
 500:math/pprz_algebra_int.c ****   const int32_t qiqx = INT_MULT_RSHIFT(q->qi, q->qx, INT32_QUAT_FRAC);
 2460              		.loc 2 500 0
 2461 0006 0F68     		ldr	r7, [r1]
 498:math/pprz_algebra_int.c ****   const int32_t qy2  = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC);
 2462              		.loc 2 498 0
 2463 0008 8E68     		ldr	r6, [r1, #8]
 499:math/pprz_algebra_int.c ****   const int32_t qz2  = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC);
 2464              		.loc 2 499 0
 2465 000a CC68     		ldr	r4, [r1, #12]
 2466              		.loc 2 500 0
 2467 000c 05FB07F3 		mul	r3, r5, r7
 501:math/pprz_algebra_int.c ****   const int32_t qiqy = INT_MULT_RSHIFT(q->qi, q->qy, INT32_QUAT_FRAC);
 502:math/pprz_algebra_int.c ****   const int32_t qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC);
 503:math/pprz_algebra_int.c ****   const int32_t qxqy = INT_MULT_RSHIFT(q->qx, q->qy, INT32_QUAT_FRAC);
 504:math/pprz_algebra_int.c ****   const int32_t qxqz = INT_MULT_RSHIFT(q->qx, q->qz, INT32_QUAT_FRAC);
 505:math/pprz_algebra_int.c ****   const int32_t qyqz = INT_MULT_RSHIFT(q->qy, q->qz, INT32_QUAT_FRAC);
 2468              		.loc 2 505 0
 2469 0010 04FB06F2 		mul	r2, r4, r6
 500:math/pprz_algebra_int.c ****   const int32_t qiqx = INT_MULT_RSHIFT(q->qi, q->qx, INT32_QUAT_FRAC);
 2470              		.loc 2 500 0
 2471 0014 DB13     		asrs	r3, r3, #15
 506:math/pprz_algebra_int.c ****   const int32_t one = TRIG_BFP_OF_REAL(1);
 507:math/pprz_algebra_int.c ****   const int32_t two = TRIG_BFP_OF_REAL(2);
 508:math/pprz_algebra_int.c **** 
 509:math/pprz_algebra_int.c ****   /* dcm00 = 1.0 - 2.*(  qy2 +  qz2 ); */
 510:math/pprz_algebra_int.c ****   const int32_t idcm00 =  one - INT_MULT_RSHIFT(two, (qy2 + qz2),
 511:math/pprz_algebra_int.c ****                           INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 512:math/pprz_algebra_int.c ****   /* dcm01 =       2.*( qxqy + qiqz ); */
 513:math/pprz_algebra_int.c ****   const int32_t idcm01 = INT_MULT_RSHIFT(two, (qxqy + qiqz),
 514:math/pprz_algebra_int.c ****                                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 515:math/pprz_algebra_int.c ****   /* dcm02 =       2.*( qxqz - qiqy ); */
 516:math/pprz_algebra_int.c ****   const int32_t idcm02 = INT_MULT_RSHIFT(two, (qxqz - qiqy),
 517:math/pprz_algebra_int.c ****                                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 518:math/pprz_algebra_int.c ****   /* dcm12 =       2.*( qyqz + qiqx ); */
 519:math/pprz_algebra_int.c ****   const int32_t idcm12 = INT_MULT_RSHIFT(two, (qyqz + qiqx),
 2472              		.loc 2 519 0
 2473 0016 03EBE233 		add	r3, r3, r2, asr #15
 2474 001a 43F31003 		sbfx	r3, r3, #0, #17
 498:math/pprz_algebra_int.c ****   const int32_t qy2  = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC);
 2475              		.loc 2 498 0
 2476 001e 06FB06F9 		mul	r9, r6, r6
 520:math/pprz_algebra_int.c ****                                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 521:math/pprz_algebra_int.c ****   /* dcm22 = 1.0 - 2.*(  qx2 +  qy2 ); */
 522:math/pprz_algebra_int.c ****   const int32_t idcm22 = one - INT_MULT_RSHIFT(two, (qx2 + qy2),
 523:math/pprz_algebra_int.c ****                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 524:math/pprz_algebra_int.c ****   const float dcm00 = (float)idcm00 / (1 << INT32_TRIG_FRAC);
 525:math/pprz_algebra_int.c ****   const float dcm01 = (float)idcm01 / (1 << INT32_TRIG_FRAC);
 526:math/pprz_algebra_int.c ****   const float dcm02 = (float)idcm02 / (1 << INT32_TRIG_FRAC);
 527:math/pprz_algebra_int.c ****   const float dcm12 = (float)idcm12 / (1 << INT32_TRIG_FRAC);
 2477              		.loc 2 527 0
 2478 0022 06EE903A 		fmsr	s13, r3	@ int
 498:math/pprz_algebra_int.c ****   const int32_t qy2  = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC);
 2479              		.loc 2 498 0
 2480 0026 4FEAE939 		asr	r9, r9, #15
 2481              	.LVL263:
 497:math/pprz_algebra_int.c ****   const int32_t qx2  = INT_MULT_RSHIFT(q->qx, q->qx, INT32_QUAT_FRAC);
 2482              		.loc 2 497 0
 2483 002a 05FB05F3 		mul	r3, r5, r5
 522:math/pprz_algebra_int.c ****   const int32_t idcm22 = one - INT_MULT_RSHIFT(two, (qx2 + qy2),
 2484              		.loc 2 522 0
 2485 002e 09EBE333 		add	r3, r9, r3, asr #15
 2486 0032 43F31003 		sbfx	r3, r3, #0, #17
 2487 0036 C3F58043 		rsb	r3, r3, #16384
 2488              		.loc 2 527 0
 2489 003a B8EEE67A 		fsitos	s14, s13
 528:math/pprz_algebra_int.c ****   const float dcm22 = (float)idcm22 / (1 << INT32_TRIG_FRAC);
 2490              		.loc 2 528 0
 2491 003e 06EE903A 		fmsr	s13, r3	@ int
 496:math/pprz_algebra_int.c **** {
 2492              		.loc 2 496 0
 2493 0042 2DED048B 		fstmfdd	sp!, {d8, d9}
 2494              		.cfi_def_cfa_offset 48
 2495              		.cfi_offset 80, -48
 2496              		.cfi_offset 82, -40
 2497              		.loc 2 528 0
 2498 0046 F8EEE67A 		fsitos	s15, s13
 527:math/pprz_algebra_int.c ****   const float dcm12 = (float)idcm12 / (1 << INT32_TRIG_FRAC);
 2499              		.loc 2 527 0
 2500 004a 9FED2F8A 		flds	s16, .L45
 529:math/pprz_algebra_int.c **** 
 530:math/pprz_algebra_int.c ****   const float phi   = atan2f(dcm12, dcm22);
 2501              		.loc 2 530 0
 2502 004e 27EE087A 		fmuls	s14, s14, s16
 2503 0052 67EE887A 		fmuls	s15, s15, s16
 496:math/pprz_algebra_int.c **** {
 2504              		.loc 2 496 0
 2505 0056 8046     		mov	r8, r0
 2506              		.loc 2 530 0
 2507 0058 17EE901A 		fmrs	r1, s15
 2508              	.LVL264:
 2509 005c 17EE100A 		fmrs	r0, s14
 2510              	.LVL265:
 2511 0060 FFF7FEFF 		bl	atan2f
 2512              	.LVL266:
 501:math/pprz_algebra_int.c ****   const int32_t qiqy = INT_MULT_RSHIFT(q->qi, q->qy, INT32_QUAT_FRAC);
 2513              		.loc 2 501 0
 2514 0064 06FB07F3 		mul	r3, r6, r7
 2515              	.LVL267:
 504:math/pprz_algebra_int.c ****   const int32_t qxqz = INT_MULT_RSHIFT(q->qx, q->qz, INT32_QUAT_FRAC);
 2516              		.loc 2 504 0
 2517 0068 04FB05F2 		mul	r2, r4, r5
 2518              	.LVL268:
 501:math/pprz_algebra_int.c ****   const int32_t qiqy = INT_MULT_RSHIFT(q->qi, q->qy, INT32_QUAT_FRAC);
 2519              		.loc 2 501 0
 2520 006c DB13     		asrs	r3, r3, #15
 2521              	.LVL269:
 516:math/pprz_algebra_int.c ****   const int32_t idcm02 = INT_MULT_RSHIFT(two, (qxqz - qiqy),
 2522              		.loc 2 516 0
 2523 006e C3EBE233 		rsb	r3, r3, r2, asr #15
 2524              	.LVL270:
 2525 0072 43F31003 		sbfx	r3, r3, #0, #17
 2526              	.LVL271:
 526:math/pprz_algebra_int.c ****   const float dcm02 = (float)idcm02 / (1 << INT32_TRIG_FRAC);
 2527              		.loc 2 526 0
 2528 0076 07EE103A 		fmsr	s14, r3	@ int
 2529 007a F8EEC77A 		fsitos	s15, s14
 502:math/pprz_algebra_int.c ****   const int32_t qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC);
 2530              		.loc 2 502 0
 2531 007e 6743     		muls	r7, r4, r7
 2532              	.LVL272:
 499:math/pprz_algebra_int.c ****   const int32_t qz2  = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC);
 2533              		.loc 2 499 0
 2534 0080 6443     		muls	r4, r4, r4
 2535              	.LVL273:
 531:math/pprz_algebra_int.c ****   const float theta = -asinf(dcm02);
 2536              		.loc 2 531 0
 2537 0082 67EE887A 		fmuls	s15, s15, s16
 503:math/pprz_algebra_int.c ****   const int32_t qxqy = INT_MULT_RSHIFT(q->qx, q->qy, INT32_QUAT_FRAC);
 2538              		.loc 2 503 0
 2539 0086 7543     		muls	r5, r6, r5
 2540              	.LVL274:
 502:math/pprz_algebra_int.c ****   const int32_t qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC);
 2541              		.loc 2 502 0
 2542 0088 FF13     		asrs	r7, r7, #15
 2543              	.LVL275:
 510:math/pprz_algebra_int.c ****   const int32_t idcm00 =  one - INT_MULT_RSHIFT(two, (qy2 + qz2),
 2544              		.loc 2 510 0
 2545 008a 09EBE439 		add	r9, r9, r4, asr #15
 2546              	.LVL276:
 513:math/pprz_algebra_int.c ****   const int32_t idcm01 = INT_MULT_RSHIFT(two, (qxqy + qiqz),
 2547              		.loc 2 513 0
 2548 008e 07EBE535 		add	r5, r7, r5, asr #15
 2549              	.LVL277:
 510:math/pprz_algebra_int.c ****   const int32_t idcm00 =  one - INT_MULT_RSHIFT(two, (qy2 + qz2),
 2550              		.loc 2 510 0
 2551 0092 49F31009 		sbfx	r9, r9, #0, #17
 530:math/pprz_algebra_int.c ****   const float phi   = atan2f(dcm12, dcm22);
 2552              		.loc 2 530 0
 2553 0096 09EE100A 		fmsr	s18, r0
 2554              	.LVL278:
 513:math/pprz_algebra_int.c ****   const int32_t idcm01 = INT_MULT_RSHIFT(two, (qxqy + qiqz),
 2555              		.loc 2 513 0
 2556 009a 45F31005 		sbfx	r5, r5, #0, #17
 2557              	.LVL279:
 2558              		.loc 2 531 0
 2559 009e 17EE900A 		fmrs	r0, s15
 2560              	.LVL280:
 510:math/pprz_algebra_int.c ****   const int32_t idcm00 =  one - INT_MULT_RSHIFT(two, (qy2 + qz2),
 2561              		.loc 2 510 0
 2562 00a2 C9F58049 		rsb	r9, r9, #16384
 2563              		.loc 2 531 0
 2564 00a6 FFF7FEFF 		bl	asinf
 2565              	.LVL281:
 525:math/pprz_algebra_int.c ****   const float dcm01 = (float)idcm01 / (1 << INT32_TRIG_FRAC);
 2566              		.loc 2 525 0
 2567 00aa 07EE905A 		fmsr	s15, r5	@ int
 524:math/pprz_algebra_int.c ****   const float dcm00 = (float)idcm00 / (1 << INT32_TRIG_FRAC);
 2568              		.loc 2 524 0
 2569 00ae 06EE909A 		fmsr	s13, r9	@ int
 525:math/pprz_algebra_int.c ****   const float dcm01 = (float)idcm01 / (1 << INT32_TRIG_FRAC);
 2570              		.loc 2 525 0
 2571 00b2 B8EEE77A 		fsitos	s14, s15
 524:math/pprz_algebra_int.c ****   const float dcm00 = (float)idcm00 / (1 << INT32_TRIG_FRAC);
 2572              		.loc 2 524 0
 2573 00b6 F8EEE67A 		fsitos	s15, s13
 532:math/pprz_algebra_int.c ****   const float psi   = atan2f(dcm01, dcm00);
 2574              		.loc 2 532 0
 2575 00ba 27EE087A 		fmuls	s14, s14, s16
 2576 00be 67EE887A 		fmuls	s15, s15, s16
 531:math/pprz_algebra_int.c ****   const float theta = -asinf(dcm02);
 2577              		.loc 2 531 0
 2578 00c2 08EE900A 		fmsr	s17, r0
 2579              	.LVL282:
 2580              		.loc 2 532 0
 2581 00c6 17EE901A 		fmrs	r1, s15
 2582 00ca 17EE100A 		fmrs	r0, s14
 2583              	.LVL283:
 2584 00ce FFF7FEFF 		bl	atan2f
 2585              	.LVL284:
 533:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2586              		.loc 2 533 0
 2587 00d2 DFED0E7A 		flds	s15, .L45+4
 2588 00d6 29EE279A 		fmuls	s18, s18, s15
 2589              	.LVL285:
 534:math/pprz_algebra_int.c ****   e->theta = ANGLE_BFP_OF_REAL(theta);
 2590              		.loc 2 534 0
 2591 00da 68EEE78A 		fnmuls	s17, s17, s15
 2592              	.LVL286:
 533:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2593              		.loc 2 533 0
 2594 00de BDEEC99A 		ftosizs	s18, s18
 2595              		.loc 2 534 0
 2596 00e2 FDEEE88A 		ftosizs	s17, s17
 535:math/pprz_algebra_int.c ****   e->psi   = ANGLE_BFP_OF_REAL(psi);
 2597              		.loc 2 535 0
 2598 00e6 07EE100A 		fmsr	s14, r0
 533:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2599              		.loc 2 533 0
 2600 00ea 88ED009A 		fsts	s18, [r8]	@ int
 534:math/pprz_algebra_int.c ****   e->theta = ANGLE_BFP_OF_REAL(theta);
 2601              		.loc 2 534 0
 2602 00ee C8ED018A 		fsts	s17, [r8, #4]	@ int
 536:math/pprz_algebra_int.c **** }
 2603              		.loc 2 536 0
 2604 00f2 BDEC048B 		fldmfdd	sp!, {d8-d9}
 535:math/pprz_algebra_int.c ****   e->psi   = ANGLE_BFP_OF_REAL(psi);
 2605              		.loc 2 535 0
 2606 00f6 67EE277A 		fmuls	s15, s14, s15
 2607 00fa FDEEE77A 		ftosizs	s15, s15
 2608 00fe C8ED027A 		fsts	s15, [r8, #8]	@ int
 2609              		.loc 2 536 0
 2610 0102 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2611              	.LVL287:
 2612              	.L46:
 2613 0106 00BF     		.align	2
 2614              	.L45:
 2615 0108 00008038 		.word	947912704
 2616 010c 00008045 		.word	1166016512
 2617              		.cfi_endproc
 2618              	.LFE32:
 2620              		.section	.text.int32_rates_of_eulers_dot_321,"ax",%progbits
 2621              		.align	1
 2622              		.global	int32_rates_of_eulers_dot_321
 2623              		.thumb
 2624              		.thumb_func
 2626              	int32_rates_of_eulers_dot_321:
 2627              	.LFB33:
 537:math/pprz_algebra_int.c **** 
 538:math/pprz_algebra_int.c **** 
 539:math/pprz_algebra_int.c **** /*
 540:math/pprz_algebra_int.c ****  *
 541:math/pprz_algebra_int.c ****  * Rotational speeds
 542:math/pprz_algebra_int.c ****  *
 543:math/pprz_algebra_int.c ****  */
 544:math/pprz_algebra_int.c **** 
 545:math/pprz_algebra_int.c **** void int32_rates_of_eulers_dot_321(struct Int32Rates *r, struct Int32Eulers *e, struct Int32Eulers 
 546:math/pprz_algebra_int.c **** {
 2628              		.loc 2 546 0
 2629              		.cfi_startproc
 2630              		@ args = 0, pretend = 0, frame = 0
 2631              		@ frame_needed = 0, uses_anonymous_args = 0
 2632              	.LVL288:
 2633 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2634              		.cfi_def_cfa_offset 32
 2635              		.cfi_offset 3, -32
 2636              		.cfi_offset 4, -28
 2637              		.cfi_offset 5, -24
 2638              		.cfi_offset 6, -20
 2639              		.cfi_offset 7, -16
 2640              		.cfi_offset 8, -12
 2641              		.cfi_offset 9, -8
 2642              		.cfi_offset 14, -4
 2643              		.loc 2 546 0
 2644 0004 0546     		mov	r5, r0
 547:math/pprz_algebra_int.c ****   int32_t sphi;
 548:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(sphi, e->phi);
 2645              		.loc 2 548 0
 2646 0006 0868     		ldr	r0, [r1]
 2647              	.LVL289:
 546:math/pprz_algebra_int.c **** {
 2648              		.loc 2 546 0
 2649 0008 0C46     		mov	r4, r1
 2650 000a 1646     		mov	r6, r2
 2651              		.loc 2 548 0
 2652 000c FFF7FEFF 		bl	pprz_itrig_sin
 2653              	.LVL290:
 2654 0010 0746     		mov	r7, r0
 2655              	.LVL291:
 549:math/pprz_algebra_int.c ****   int32_t cphi;
 550:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cphi, e->phi);
 2656              		.loc 2 550 0
 2657 0012 2068     		ldr	r0, [r4]
 2658              	.LVL292:
 2659 0014 FFF7FEFF 		bl	pprz_itrig_cos
 2660              	.LVL293:
 2661 0018 8046     		mov	r8, r0
 2662              	.LVL294:
 551:math/pprz_algebra_int.c ****   int32_t stheta;
 552:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(stheta, e->theta);
 2663              		.loc 2 552 0
 2664 001a 6068     		ldr	r0, [r4, #4]
 2665              	.LVL295:
 2666 001c FFF7FEFF 		bl	pprz_itrig_sin
 2667              	.LVL296:
 2668 0020 8146     		mov	r9, r0
 2669              	.LVL297:
 553:math/pprz_algebra_int.c ****   int32_t ctheta;
 554:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(ctheta, e->theta);
 2670              		.loc 2 554 0
 2671 0022 6068     		ldr	r0, [r4, #4]
 2672              	.LVL298:
 2673 0024 FFF7FEFF 		bl	pprz_itrig_cos
 2674              	.LVL299:
 555:math/pprz_algebra_int.c **** 
 556:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 557:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 558:math/pprz_algebra_int.c **** 
 559:math/pprz_algebra_int.c ****   r->p = - INT_MULT_RSHIFT(stheta, ed->psi, INT32_TRIG_FRAC) + ed->phi;
 2675              		.loc 2 559 0
 2676 0028 B368     		ldr	r3, [r6, #8]
 2677 002a 3268     		ldr	r2, [r6]
 2678 002c 03FB09F9 		mul	r9, r3, r9
 2679              	.LVL300:
 2680 0030 A2EBA932 		sub	r2, r2, r9, asr #14
 554:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(ctheta, e->theta);
 2681              		.loc 2 554 0
 2682 0034 0146     		mov	r1, r0
 2683              	.LVL301:
 2684              		.loc 2 559 0
 2685 0036 2A60     		str	r2, [r5]
 560:math/pprz_algebra_int.c ****   r->q = INT_MULT_RSHIFT(sphi_ctheta, ed->psi, INT32_TRIG_FRAC) + INT_MULT_RSHIFT(cphi, ed->theta, 
 2686              		.loc 2 560 0
 2687 0038 7268     		ldr	r2, [r6, #4]
 557:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 2688              		.loc 2 557 0
 2689 003a 7843     		muls	r0, r7, r0
 2690              	.LVL302:
 556:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 2691              		.loc 2 556 0
 2692 003c 01FB08F1 		mul	r1, r1, r8
 2693              	.LVL303:
 2694              		.loc 2 560 0
 2695 0040 02FB08F4 		mul	r4, r2, r8
 2696              	.LVL304:
 557:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 2697              		.loc 2 557 0
 2698 0044 8013     		asrs	r0, r0, #14
 2699              	.LVL305:
 556:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 2700              		.loc 2 556 0
 2701 0046 8913     		asrs	r1, r1, #14
 2702              	.LVL306:
 561:math/pprz_algebra_int.c ****   r->r = INT_MULT_RSHIFT(cphi_ctheta, ed->psi, INT32_TRIG_FRAC) - INT_MULT_RSHIFT(sphi, ed->theta, 
 2703              		.loc 2 561 0
 2704 0048 7A43     		muls	r2, r7, r2
 560:math/pprz_algebra_int.c ****   r->q = INT_MULT_RSHIFT(sphi_ctheta, ed->psi, INT32_TRIG_FRAC) + INT_MULT_RSHIFT(cphi, ed->theta, 
 2705              		.loc 2 560 0
 2706 004a 5843     		muls	r0, r3, r0
 2707              	.LVL307:
 2708 004c A413     		asrs	r4, r4, #14
 2709              		.loc 2 561 0
 2710 004e 4B43     		muls	r3, r1, r3
 2711 0050 9213     		asrs	r2, r2, #14
 560:math/pprz_algebra_int.c ****   r->q = INT_MULT_RSHIFT(sphi_ctheta, ed->psi, INT32_TRIG_FRAC) + INT_MULT_RSHIFT(cphi, ed->theta, 
 2712              		.loc 2 560 0
 2713 0052 04EBA030 		add	r0, r4, r0, asr #14
 2714              		.loc 2 561 0
 2715 0056 C2EBA333 		rsb	r3, r2, r3, asr #14
 560:math/pprz_algebra_int.c ****   r->q = INT_MULT_RSHIFT(sphi_ctheta, ed->psi, INT32_TRIG_FRAC) + INT_MULT_RSHIFT(cphi, ed->theta, 
 2716              		.loc 2 560 0
 2717 005a 6860     		str	r0, [r5, #4]
 2718              		.loc 2 561 0
 2719 005c AB60     		str	r3, [r5, #8]
 2720 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2721              		.cfi_endproc
 2722              	.LFE33:
 2724              		.global	__aeabi_ldivmod
 2725              		.section	.text.int32_eulers_dot_321_of_rates,"ax",%progbits
 2726              		.align	1
 2727              		.global	int32_eulers_dot_321_of_rates
 2728              		.thumb
 2729              		.thumb_func
 2731              	int32_eulers_dot_321_of_rates:
 2732              	.LFB34:
 562:math/pprz_algebra_int.c **** }
 563:math/pprz_algebra_int.c **** 
 564:math/pprz_algebra_int.c **** void int32_eulers_dot_321_of_rates(struct Int32Eulers *ed, struct Int32Eulers *e, struct Int32Rates
 565:math/pprz_algebra_int.c **** {
 2733              		.loc 2 565 0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 8
 2736              		@ frame_needed = 0, uses_anonymous_args = 0
 2737              	.LVL308:
 2738 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2739              		.cfi_def_cfa_offset 48
 2740              		.cfi_offset 0, -48
 2741              		.cfi_offset 1, -44
 2742              		.cfi_offset 2, -40
 2743              		.cfi_offset 4, -36
 2744              		.cfi_offset 5, -32
 2745              		.cfi_offset 6, -28
 2746              		.cfi_offset 7, -24
 2747              		.cfi_offset 8, -20
 2748              		.cfi_offset 9, -16
 2749              		.cfi_offset 10, -12
 2750              		.cfi_offset 11, -8
 2751              		.cfi_offset 14, -4
 2752              		.loc 2 565 0
 2753 0004 8046     		mov	r8, r0
 566:math/pprz_algebra_int.c ****   int32_t sphi;
 567:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(sphi, e->phi);
 2754              		.loc 2 567 0
 2755 0006 0868     		ldr	r0, [r1]
 2756              	.LVL309:
 565:math/pprz_algebra_int.c **** {
 2757              		.loc 2 565 0
 2758 0008 0C46     		mov	r4, r1
 2759 000a 1646     		mov	r6, r2
 2760              		.loc 2 567 0
 2761 000c FFF7FEFF 		bl	pprz_itrig_sin
 2762              	.LVL310:
 2763 0010 8346     		mov	fp, r0
 2764              	.LVL311:
 568:math/pprz_algebra_int.c ****   int32_t cphi;
 569:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cphi, e->phi);
 2765              		.loc 2 569 0
 2766 0012 2068     		ldr	r0, [r4]
 2767              	.LVL312:
 2768 0014 FFF7FEFF 		bl	pprz_itrig_cos
 2769              	.LVL313:
 2770 0018 8246     		mov	r10, r0
 2771              	.LVL314:
 570:math/pprz_algebra_int.c ****   int32_t stheta;
 571:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(stheta, e->theta);
 2772              		.loc 2 571 0
 2773 001a 6068     		ldr	r0, [r4, #4]
 2774              	.LVL315:
 2775 001c FFF7FEFF 		bl	pprz_itrig_sin
 2776              	.LVL316:
 2777 0020 0746     		mov	r7, r0
 2778              	.LVL317:
 572:math/pprz_algebra_int.c ****   int64_t ctheta;
 573:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(ctheta, e->theta);
 2779              		.loc 2 573 0
 2780 0022 6068     		ldr	r0, [r4, #4]
 2781              	.LVL318:
 2782 0024 FFF7FEFF 		bl	pprz_itrig_cos
 2783              	.LVL319:
 574:math/pprz_algebra_int.c **** 
 575:math/pprz_algebra_int.c ****   if (ctheta != 0) {
 2784              		.loc 2 575 0
 2785 0028 0446     		mov	r4, r0
 2786              	.LVL320:
 2787 002a C517     		asrs	r5, r0, #31
 2788 002c 0028     		cmp	r0, #0
 2789 002e 38D0     		beq	.L49
 2790              	.LBB19:
 576:math/pprz_algebra_int.c ****     int64_t cphi_stheta = INT_MULT_RSHIFT(cphi, stheta, INT32_TRIG_FRAC);
 2791              		.loc 2 576 0
 2792 0030 07FB0AFC 		mul	ip, r7, r10
 577:math/pprz_algebra_int.c ****     int64_t sphi_stheta = INT_MULT_RSHIFT(sphi, stheta, INT32_TRIG_FRAC);
 2793              		.loc 2 577 0
 2794 0034 07FB0BF7 		mul	r7, r7, fp
 2795              	.LVL321:
 2796 0038 B813     		asrs	r0, r7, #14
 2797              	.LVL322:
 578:math/pprz_algebra_int.c **** 
 579:math/pprz_algebra_int.c ****     ed->phi = r->p + (int32_t)((sphi_stheta * (int64_t)r->q) / ctheta) + (int32_t)((cphi_stheta * (
 2798              		.loc 2 579 0
 2799 003a 7768     		ldr	r7, [r6, #4]
 2800 003c D6F80890 		ldr	r9, [r6, #8]
 576:math/pprz_algebra_int.c ****     int64_t cphi_stheta = INT_MULT_RSHIFT(cphi, stheta, INT32_TRIG_FRAC);
 2801              		.loc 2 576 0
 2802 0040 4FEAAC3C 		asr	ip, ip, #14
 2803              	.LVL323:
 2804              		.loc 2 579 0
 2805 0044 2246     		mov	r2, r4
 2806 0046 2B46     		mov	r3, r5
 2807 0048 80FB0701 		smull	r0, r1, r0, r7
 2808              	.LVL324:
 2809 004c CDF804C0 		str	ip, [sp, #4]
 2810 0050 FFF7FEFF 		bl	__aeabi_ldivmod
 2811              	.LVL325:
 2812 0054 3668     		ldr	r6, [r6]
 2813              	.LVL326:
 2814 0056 DDF804C0 		ldr	ip, [sp, #4]
 2815              	.LVL327:
 2816 005a 0644     		add	r6, r6, r0
 2817 005c 2246     		mov	r2, r4
 2818 005e 8CFB0901 		smull	r0, r1, ip, r9
 2819 0062 2B46     		mov	r3, r5
 2820 0064 FFF7FEFF 		bl	__aeabi_ldivmod
 2821              	.LVL328:
 580:math/pprz_algebra_int.c ****     ed->theta = INT_MULT_RSHIFT(cphi, r->q, INT32_TRIG_FRAC) - INT_MULT_RSHIFT(sphi, r->r, INT32_TR
 2822              		.loc 2 580 0
 2823 0068 09FB0BF3 		mul	r3, r9, fp
 2824 006c 07FB0AF2 		mul	r2, r7, r10
 2825 0070 9B13     		asrs	r3, r3, #14
 579:math/pprz_algebra_int.c ****     ed->phi = r->p + (int32_t)((sphi_stheta * (int64_t)r->q) / ctheta) + (int32_t)((cphi_stheta * (
 2826              		.loc 2 579 0
 2827 0072 3044     		add	r0, r0, r6
 2828              		.loc 2 580 0
 2829 0074 C3EBA233 		rsb	r3, r3, r2, asr #14
 579:math/pprz_algebra_int.c ****     ed->phi = r->p + (int32_t)((sphi_stheta * (int64_t)r->q) / ctheta) + (int32_t)((cphi_stheta * (
 2830              		.loc 2 579 0
 2831 0078 C8F80000 		str	r0, [r8]
 2832              		.loc 2 580 0
 2833 007c C8F80430 		str	r3, [r8, #4]
 581:math/pprz_algebra_int.c ****     ed->psi = (int32_t)(((int64_t)sphi * (int64_t)r->q) / ctheta) + (int32_t)(((int64_t)cphi * (int
 2834              		.loc 2 581 0
 2835 0080 2246     		mov	r2, r4
 2836 0082 2B46     		mov	r3, r5
 2837 0084 8BFB0701 		smull	r0, r1, fp, r7
 2838 0088 FFF7FEFF 		bl	__aeabi_ldivmod
 2839              	.LVL329:
 2840 008c 2246     		mov	r2, r4
 2841 008e 0646     		mov	r6, r0
 2842 0090 2B46     		mov	r3, r5
 2843 0092 8AFB0901 		smull	r0, r1, r10, r9
 2844 0096 FFF7FEFF 		bl	__aeabi_ldivmod
 2845              	.LVL330:
 2846 009a 3044     		add	r0, r0, r6
 2847 009c C8F80800 		str	r0, [r8, #8]
 2848              	.LBE19:
 2849 00a0 06E0     		b	.L48
 2850              	.LVL331:
 2851              	.L49:
 582:math/pprz_algebra_int.c ****   }
 583:math/pprz_algebra_int.c ****   /* FIXME: What do you wanna do when you hit the singularity ? */
 584:math/pprz_algebra_int.c ****   /* probably not return an uninitialized variable, or ?        */
 585:math/pprz_algebra_int.c ****   else {
 586:math/pprz_algebra_int.c ****     INT_EULERS_ZERO(*ed);
 2852              		.loc 2 586 0
 2853 00a2 0023     		movs	r3, #0
 2854 00a4 C8F80030 		str	r3, [r8]
 2855 00a8 C8F80430 		str	r3, [r8, #4]
 2856 00ac C8F80830 		str	r3, [r8, #8]
 2857              	.LVL332:
 2858              	.L48:
 587:math/pprz_algebra_int.c ****   }
 588:math/pprz_algebra_int.c **** }
 2859              		.loc 2 588 0
 2860 00b0 03B0     		add	sp, sp, #12
 2861              		@ sp needed
 2862 00b2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2863              		.cfi_endproc
 2864              	.LFE34:
 2866              		.text
 2867              	.Letext0:
 2868              		.file 3 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 2869              		.file 4 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 2870              		.file 5 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdlib.h"
 2871              		.file 6 "./math/pprz_trig_int.h"
 2872              		.file 7 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pprz_algebra_int.c
     /tmp/cc0kxbrj.s:20     .text.int32_quat_wrap_shortest:00000000 $t
     /tmp/cc0kxbrj.s:24     .text.int32_quat_wrap_shortest:00000000 int32_quat_wrap_shortest
     /tmp/cc0kxbrj.s:55     .text.int32_sqrt:00000000 $t
     /tmp/cc0kxbrj.s:60     .text.int32_sqrt:00000000 int32_sqrt
     /tmp/cc0kxbrj.s:111    .text.int32_quat_normalize:00000000 $t
     /tmp/cc0kxbrj.s:115    .text.int32_quat_normalize:00000000 int32_quat_normalize
     /tmp/cc0kxbrj.s:191    .text.int32_rmat_comp:00000000 $t
     /tmp/cc0kxbrj.s:196    .text.int32_rmat_comp:00000000 int32_rmat_comp
     /tmp/cc0kxbrj.s:313    .text.int32_rmat_comp_inv:00000000 $t
     /tmp/cc0kxbrj.s:318    .text.int32_rmat_comp_inv:00000000 int32_rmat_comp_inv
     /tmp/cc0kxbrj.s:424    .text.int32_rmat_vmult:00000000 $t
     /tmp/cc0kxbrj.s:429    .text.int32_rmat_vmult:00000000 int32_rmat_vmult
     /tmp/cc0kxbrj.s:487    .text.int32_rmat_transp_vmult:00000000 $t
     /tmp/cc0kxbrj.s:492    .text.int32_rmat_transp_vmult:00000000 int32_rmat_transp_vmult
     /tmp/cc0kxbrj.s:550    .text.int32_rmat_ratemult:00000000 $t
     /tmp/cc0kxbrj.s:555    .text.int32_rmat_ratemult:00000000 int32_rmat_ratemult
     /tmp/cc0kxbrj.s:613    .text.int32_rmat_transp_ratemult:00000000 $t
     /tmp/cc0kxbrj.s:618    .text.int32_rmat_transp_ratemult:00000000 int32_rmat_transp_ratemult
     /tmp/cc0kxbrj.s:676    .text.int32_rmat_of_quat:00000000 $t
     /tmp/cc0kxbrj.s:681    .text.int32_rmat_of_quat:00000000 int32_rmat_of_quat
     /tmp/cc0kxbrj.s:785    .text.int32_rmat_of_eulers_321:00000000 $t
     /tmp/cc0kxbrj.s:790    .text.int32_rmat_of_eulers_321:00000000 int32_rmat_of_eulers_321
     /tmp/cc0kxbrj.s:949    .text.int32_rmat_of_eulers_312:00000000 $t
     /tmp/cc0kxbrj.s:954    .text.int32_rmat_of_eulers_312:00000000 int32_rmat_of_eulers_312
     /tmp/cc0kxbrj.s:1113   .text.int32_quat_comp:00000000 $t
     /tmp/cc0kxbrj.s:1118   .text.int32_quat_comp:00000000 int32_quat_comp
     /tmp/cc0kxbrj.s:1182   .text.int32_quat_comp_inv:00000000 $t
     /tmp/cc0kxbrj.s:1187   .text.int32_quat_comp_inv:00000000 int32_quat_comp_inv
     /tmp/cc0kxbrj.s:1253   .text.int32_quat_inv_comp:00000000 $t
     /tmp/cc0kxbrj.s:1258   .text.int32_quat_inv_comp:00000000 int32_quat_inv_comp
     /tmp/cc0kxbrj.s:1323   .text.int32_quat_comp_norm_shortest:00000000 $t
     /tmp/cc0kxbrj.s:1328   .text.int32_quat_comp_norm_shortest:00000000 int32_quat_comp_norm_shortest
     /tmp/cc0kxbrj.s:1360   .text.int32_quat_comp_inv_norm_shortest:00000000 $t
     /tmp/cc0kxbrj.s:1365   .text.int32_quat_comp_inv_norm_shortest:00000000 int32_quat_comp_inv_norm_shortest
     /tmp/cc0kxbrj.s:1397   .text.int32_quat_inv_comp_norm_shortest:00000000 $t
     /tmp/cc0kxbrj.s:1402   .text.int32_quat_inv_comp_norm_shortest:00000000 int32_quat_inv_comp_norm_shortest
     /tmp/cc0kxbrj.s:1434   .text.int32_quat_derivative:00000000 $t
     /tmp/cc0kxbrj.s:1439   .text.int32_quat_derivative:00000000 int32_quat_derivative
     /tmp/cc0kxbrj.s:1493   .text.int32_quat_integrate_fi:00000000 $t
     /tmp/cc0kxbrj.s:1498   .text.int32_quat_integrate_fi:00000000 int32_quat_integrate_fi
     /tmp/cc0kxbrj.s:1672   .text.int32_quat_vmult:00000000 $t
     /tmp/cc0kxbrj.s:1677   .text.int32_quat_vmult:00000000 int32_quat_vmult
     /tmp/cc0kxbrj.s:1831   .text.int32_quat_of_eulers:00000000 $t
     /tmp/cc0kxbrj.s:1836   .text.int32_quat_of_eulers:00000000 int32_quat_of_eulers
     /tmp/cc0kxbrj.s:1984   .text.int32_quat_of_axis_angle:00000000 $t
     /tmp/cc0kxbrj.s:1989   .text.int32_quat_of_axis_angle:00000000 int32_quat_of_axis_angle
     /tmp/cc0kxbrj.s:2048   .text.int32_quat_of_rmat:00000000 $t
     /tmp/cc0kxbrj.s:2053   .text.int32_quat_of_rmat:00000000 int32_quat_of_rmat
     /tmp/cc0kxbrj.s:2316   .text.int32_quat_of_rmat:00000140 $d
     /tmp/cc0kxbrj.s:2322   .text.int32_eulers_of_rmat:00000000 $t
     /tmp/cc0kxbrj.s:2327   .text.int32_eulers_of_rmat:00000000 int32_eulers_of_rmat
     /tmp/cc0kxbrj.s:2429   .text.int32_eulers_of_rmat:000000a4 $d
     /tmp/cc0kxbrj.s:2435   .text.int32_eulers_of_quat:00000000 $t
     /tmp/cc0kxbrj.s:2440   .text.int32_eulers_of_quat:00000000 int32_eulers_of_quat
     /tmp/cc0kxbrj.s:2615   .text.int32_eulers_of_quat:00000108 $d
     /tmp/cc0kxbrj.s:2621   .text.int32_rates_of_eulers_dot_321:00000000 $t
     /tmp/cc0kxbrj.s:2626   .text.int32_rates_of_eulers_dot_321:00000000 int32_rates_of_eulers_dot_321
     /tmp/cc0kxbrj.s:2726   .text.int32_eulers_dot_321_of_rates:00000000 $t
     /tmp/cc0kxbrj.s:2731   .text.int32_eulers_dot_321_of_rates:00000000 int32_eulers_dot_321_of_rates
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.61e172dafa1e7adfbd840ee8b103061f
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.6.9e4229723f5523536bc8f574589d6a99
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.stddef.h.263.49e44f5ee9cdd8820580fc4aa239e32a
                           .group:00000000 wm4.inttypes.h.24.4db40689d622c4d3b547b5801303bdae
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stddef.h.39.2b75ea897b59bf67f50e970d678806e4
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.math.h.35.13c5bec129ef04ad1bb0a1152b29c624
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.cdefs.h.56.a2d04de9d47039852021e66fca39bb58
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_trig_int.h.28.b756be608c9d9f3092a41321446e5fa2
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.1a82a3cc35cb0a04319c41bcf41d2a02
                           .group:00000000 wm4.pprz_algebra_int.h.68.04ac162ae1e1d94f716d0bb402062624

UNDEFINED SYMBOLS
pprz_itrig_sin
pprz_itrig_cos
lldiv
__aeabi_i2d
__aeabi_dadd
__aeabi_d2iz
atan2f
asinf
__aeabi_ldivmod
