   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"pprz_algebra_float.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.float_quat_wrap_shortest,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	float_quat_wrap_shortest:
  25              	.LFB12:
  26              		.file 1 "math/pprz_algebra_float.h"
   1:math/pprz_algebra_float.h **** /*
   2:math/pprz_algebra_float.h ****  * Copyright (C) 2008-2014 The Paparazzi Team
   3:math/pprz_algebra_float.h ****  *
   4:math/pprz_algebra_float.h ****  * This file is part of paparazzi.
   5:math/pprz_algebra_float.h ****  *
   6:math/pprz_algebra_float.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:math/pprz_algebra_float.h ****  * it under the terms of the GNU General Public License as published by
   8:math/pprz_algebra_float.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:math/pprz_algebra_float.h ****  * any later version.
  10:math/pprz_algebra_float.h ****  *
  11:math/pprz_algebra_float.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:math/pprz_algebra_float.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:math/pprz_algebra_float.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:math/pprz_algebra_float.h ****  * GNU General Public License for more details.
  15:math/pprz_algebra_float.h ****  *
  16:math/pprz_algebra_float.h ****  * You should have received a copy of the GNU General Public License
  17:math/pprz_algebra_float.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:math/pprz_algebra_float.h ****  * <http://www.gnu.org/licenses/>.
  19:math/pprz_algebra_float.h ****  */
  20:math/pprz_algebra_float.h **** 
  21:math/pprz_algebra_float.h **** /**
  22:math/pprz_algebra_float.h ****  * @file pprz_algebra_float.h
  23:math/pprz_algebra_float.h ****  * @brief Paparazzi floating point algebra.
  24:math/pprz_algebra_float.h ****  *
  25:math/pprz_algebra_float.h ****  * @addtogroup math_algebra
  26:math/pprz_algebra_float.h ****  * @{
  27:math/pprz_algebra_float.h ****  * @defgroup math_algebra_float Float Algebra
  28:math/pprz_algebra_float.h ****  * @{
  29:math/pprz_algebra_float.h ****  */
  30:math/pprz_algebra_float.h **** 
  31:math/pprz_algebra_float.h **** #ifndef PPRZ_ALGEBRA_FLOAT_H
  32:math/pprz_algebra_float.h **** #define PPRZ_ALGEBRA_FLOAT_H
  33:math/pprz_algebra_float.h **** 
  34:math/pprz_algebra_float.h **** #ifdef __cplusplus
  35:math/pprz_algebra_float.h **** extern "C" {
  36:math/pprz_algebra_float.h **** #endif
  37:math/pprz_algebra_float.h **** 
  38:math/pprz_algebra_float.h **** #include "pprz_algebra.h"
  39:math/pprz_algebra_float.h **** 
  40:math/pprz_algebra_float.h **** #include <math.h>
  41:math/pprz_algebra_float.h **** #include <float.h> // for FLT_MIN
  42:math/pprz_algebra_float.h **** 
  43:math/pprz_algebra_float.h **** /* this seems to be missing for some arch */
  44:math/pprz_algebra_float.h **** #ifndef M_SQRT2
  45:math/pprz_algebra_float.h **** #define M_SQRT2         1.41421356237309504880
  46:math/pprz_algebra_float.h **** #endif
  47:math/pprz_algebra_float.h **** 
  48:math/pprz_algebra_float.h **** struct FloatVect2 {
  49:math/pprz_algebra_float.h ****   float x;
  50:math/pprz_algebra_float.h ****   float y;
  51:math/pprz_algebra_float.h **** };
  52:math/pprz_algebra_float.h **** 
  53:math/pprz_algebra_float.h **** struct FloatVect3 {
  54:math/pprz_algebra_float.h ****   float x;
  55:math/pprz_algebra_float.h ****   float y;
  56:math/pprz_algebra_float.h ****   float z;
  57:math/pprz_algebra_float.h **** };
  58:math/pprz_algebra_float.h **** 
  59:math/pprz_algebra_float.h **** /**
  60:math/pprz_algebra_float.h ****  * @brief Roation quaternion
  61:math/pprz_algebra_float.h ****  */
  62:math/pprz_algebra_float.h **** struct FloatQuat {
  63:math/pprz_algebra_float.h ****   float qi;
  64:math/pprz_algebra_float.h ****   float qx;
  65:math/pprz_algebra_float.h ****   float qy;
  66:math/pprz_algebra_float.h ****   float qz;
  67:math/pprz_algebra_float.h **** };
  68:math/pprz_algebra_float.h **** 
  69:math/pprz_algebra_float.h **** struct FloatMat33 {
  70:math/pprz_algebra_float.h ****   float m[3 * 3];
  71:math/pprz_algebra_float.h **** };
  72:math/pprz_algebra_float.h **** 
  73:math/pprz_algebra_float.h **** /**
  74:math/pprz_algebra_float.h ****  * @brief rotation matrix
  75:math/pprz_algebra_float.h ****  */
  76:math/pprz_algebra_float.h **** struct FloatRMat {
  77:math/pprz_algebra_float.h ****   float m[3 * 3];
  78:math/pprz_algebra_float.h **** };
  79:math/pprz_algebra_float.h **** 
  80:math/pprz_algebra_float.h **** /**
  81:math/pprz_algebra_float.h ****  * @brief euler angles
  82:math/pprz_algebra_float.h ****  * @details Units: radians */
  83:math/pprz_algebra_float.h **** struct FloatEulers {
  84:math/pprz_algebra_float.h ****   float phi; ///< in radians
  85:math/pprz_algebra_float.h ****   float theta; ///< in radians
  86:math/pprz_algebra_float.h ****   float psi; ///< in radians
  87:math/pprz_algebra_float.h **** };
  88:math/pprz_algebra_float.h **** 
  89:math/pprz_algebra_float.h **** /**
  90:math/pprz_algebra_float.h ****  * @brief angular rates
  91:math/pprz_algebra_float.h ****  * @details Units: rad/s */
  92:math/pprz_algebra_float.h **** struct FloatRates {
  93:math/pprz_algebra_float.h ****   float p; ///< in rad/s
  94:math/pprz_algebra_float.h ****   float q; ///< in rad/s
  95:math/pprz_algebra_float.h ****   float r; ///< in rad/s
  96:math/pprz_algebra_float.h **** };
  97:math/pprz_algebra_float.h **** 
  98:math/pprz_algebra_float.h **** #define FLOAT_ANGLE_NORMALIZE(_a) {             \
  99:math/pprz_algebra_float.h ****     while (_a >  M_PI) _a -= (2.*M_PI);             \
 100:math/pprz_algebra_float.h ****     while (_a < -M_PI) _a += (2.*M_PI);             \
 101:math/pprz_algebra_float.h ****   }
 102:math/pprz_algebra_float.h **** 
 103:math/pprz_algebra_float.h **** //
 104:math/pprz_algebra_float.h **** //
 105:math/pprz_algebra_float.h **** // Vector algebra
 106:math/pprz_algebra_float.h **** //
 107:math/pprz_algebra_float.h **** //
 108:math/pprz_algebra_float.h **** 
 109:math/pprz_algebra_float.h **** 
 110:math/pprz_algebra_float.h **** /*
 111:math/pprz_algebra_float.h ****  * Dimension 2 Vectors
 112:math/pprz_algebra_float.h ****  */
 113:math/pprz_algebra_float.h **** 
 114:math/pprz_algebra_float.h **** #define FLOAT_VECT2_ZERO(_v) VECT2_ASSIGN(_v, 0., 0.)
 115:math/pprz_algebra_float.h **** 
 116:math/pprz_algebra_float.h **** /* macros also usable if _v is not a FloatVect2, but a different struct with x,y members */
 117:math/pprz_algebra_float.h **** #define FLOAT_VECT2_NORM(_v) sqrtf(VECT2_NORM2(_v))
 118:math/pprz_algebra_float.h **** 
 119:math/pprz_algebra_float.h **** static inline float float_vect2_norm2(struct FloatVect2 *v)
 120:math/pprz_algebra_float.h **** {
 121:math/pprz_algebra_float.h ****   return v->x * v->x + v->y * v->y;
 122:math/pprz_algebra_float.h **** }
 123:math/pprz_algebra_float.h **** 
 124:math/pprz_algebra_float.h **** static inline float float_vect2_norm(struct FloatVect2 *v)
 125:math/pprz_algebra_float.h **** {
 126:math/pprz_algebra_float.h ****   return sqrtf(float_vect2_norm2(v));
 127:math/pprz_algebra_float.h **** }
 128:math/pprz_algebra_float.h **** 
 129:math/pprz_algebra_float.h **** /** normalize 2D vector in place */
 130:math/pprz_algebra_float.h **** static inline void float_vect2_normalize(struct FloatVect2 *v)
 131:math/pprz_algebra_float.h **** {
 132:math/pprz_algebra_float.h ****   const float n = float_vect2_norm(v);
 133:math/pprz_algebra_float.h ****   if (n > 0) {
 134:math/pprz_algebra_float.h ****     v->x /= n;
 135:math/pprz_algebra_float.h ****     v->y /= n;
 136:math/pprz_algebra_float.h ****   }
 137:math/pprz_algebra_float.h **** }
 138:math/pprz_algebra_float.h **** 
 139:math/pprz_algebra_float.h **** #define FLOAT_VECT2_NORMALIZE(_v) float_vect2_normalize(&(_v))
 140:math/pprz_algebra_float.h **** 
 141:math/pprz_algebra_float.h **** 
 142:math/pprz_algebra_float.h **** /*
 143:math/pprz_algebra_float.h ****  * Dimension 3 Vectors
 144:math/pprz_algebra_float.h ****  */
 145:math/pprz_algebra_float.h **** 
 146:math/pprz_algebra_float.h **** #define FLOAT_VECT3_ZERO(_v) VECT3_ASSIGN(_v, 0., 0., 0.)
 147:math/pprz_algebra_float.h **** 
 148:math/pprz_algebra_float.h **** /* macros also usable if _v is not a FloatVect3, but a different struct with x,y,z members */
 149:math/pprz_algebra_float.h **** #define FLOAT_VECT3_NORM(_v) sqrtf(VECT3_NORM2(_v))
 150:math/pprz_algebra_float.h **** 
 151:math/pprz_algebra_float.h **** static inline float float_vect3_norm2(struct FloatVect3 *v)
 152:math/pprz_algebra_float.h **** {
 153:math/pprz_algebra_float.h ****   return v->x * v->x + v->y * v->y + v->z * v->z;
 154:math/pprz_algebra_float.h **** }
 155:math/pprz_algebra_float.h **** 
 156:math/pprz_algebra_float.h **** static inline float float_vect3_norm(struct FloatVect3 *v)
 157:math/pprz_algebra_float.h **** {
 158:math/pprz_algebra_float.h ****   return sqrtf(float_vect3_norm2(v));
 159:math/pprz_algebra_float.h **** }
 160:math/pprz_algebra_float.h **** 
 161:math/pprz_algebra_float.h **** /** normalize 3D vector in place */
 162:math/pprz_algebra_float.h **** static inline void float_vect3_normalize(struct FloatVect3 *v)
 163:math/pprz_algebra_float.h **** {
 164:math/pprz_algebra_float.h ****   const float n = float_vect3_norm(v);
 165:math/pprz_algebra_float.h ****   if (n > 0) {
 166:math/pprz_algebra_float.h ****     v->x /= n;
 167:math/pprz_algebra_float.h ****     v->y /= n;
 168:math/pprz_algebra_float.h ****     v->z /= n;
 169:math/pprz_algebra_float.h ****   }
 170:math/pprz_algebra_float.h **** }
 171:math/pprz_algebra_float.h **** 
 172:math/pprz_algebra_float.h **** #define FLOAT_VECT3_NORMALIZE(_v) float_vect3_normalize(&(_v))
 173:math/pprz_algebra_float.h **** 
 174:math/pprz_algebra_float.h **** 
 175:math/pprz_algebra_float.h **** 
 176:math/pprz_algebra_float.h **** #define FLOAT_RATES_ZERO(_r) {          \
 177:math/pprz_algebra_float.h ****     RATES_ASSIGN(_r, 0., 0., 0.);       \
 178:math/pprz_algebra_float.h ****   }
 179:math/pprz_algebra_float.h **** 
 180:math/pprz_algebra_float.h **** #define FLOAT_RATES_NORM(_v) (sqrtf((_v).p*(_v).p + (_v).q*(_v).q + (_v).r*(_v).r))
 181:math/pprz_algebra_float.h **** 
 182:math/pprz_algebra_float.h **** #define FLOAT_RATES_LIN_CMB(_ro, _r1, _s1, _r2, _s2) {          \
 183:math/pprz_algebra_float.h ****     _ro.p = _s1 * _r1.p + _s2 * _r2.p;                  \
 184:math/pprz_algebra_float.h ****     _ro.q = _s1 * _r1.q + _s2 * _r2.q;                  \
 185:math/pprz_algebra_float.h ****     _ro.r = _s1 * _r1.r + _s2 * _r2.r;                  \
 186:math/pprz_algebra_float.h ****   }
 187:math/pprz_algebra_float.h **** 
 188:math/pprz_algebra_float.h **** 
 189:math/pprz_algebra_float.h **** extern void float_vect3_integrate_fi(struct FloatVect3 *vec, struct FloatVect3 *dv,
 190:math/pprz_algebra_float.h ****                                      float dt);
 191:math/pprz_algebra_float.h **** 
 192:math/pprz_algebra_float.h **** extern void float_rates_integrate_fi(struct FloatRates *r, struct FloatRates *dr,
 193:math/pprz_algebra_float.h ****                                      float dt);
 194:math/pprz_algebra_float.h **** 
 195:math/pprz_algebra_float.h **** extern void float_rates_of_euler_dot(struct FloatRates *r, struct FloatEulers *e,
 196:math/pprz_algebra_float.h ****                                      struct FloatEulers *edot);
 197:math/pprz_algebra_float.h **** 
 198:math/pprz_algebra_float.h **** /* defines for backwards compatibility */
 199:math/pprz_algebra_float.h **** #define FLOAT_VECT3_INTEGRATE_FI(_vo, _dv, _dt) float_vect3_integrate_fi(&(_vo), &(_dv), _dt)
 200:math/pprz_algebra_float.h **** #define FLOAT_RATES_INTEGRATE_FI(_ra, _racc, _dt) float_rates_integrate_fi(&(_ra), &(_racc), _dt)
 201:math/pprz_algebra_float.h **** #define FLOAT_RATES_OF_EULER_DOT(_ra, _e, _ed) float_rates_of_euler_dot(&(_ra), &(_e), &(_ed))
 202:math/pprz_algebra_float.h **** 
 203:math/pprz_algebra_float.h **** 
 204:math/pprz_algebra_float.h **** /*
 205:math/pprz_algebra_float.h ****  * 3x3 matrices
 206:math/pprz_algebra_float.h ****  */
 207:math/pprz_algebra_float.h **** #define FLOAT_MAT33_ZERO(_m) {                      \
 208:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 0) = 0.;                      \
 209:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 1) = 0.;                      \
 210:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 2) = 0.;                      \
 211:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 0) = 0.;                      \
 212:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 1) = 0.;                      \
 213:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 2) = 0.;                      \
 214:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 0) = 0.;                      \
 215:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 1) = 0.;                      \
 216:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 2) = 0.;                      \
 217:math/pprz_algebra_float.h ****   }
 218:math/pprz_algebra_float.h **** 
 219:math/pprz_algebra_float.h **** #define FLOAT_MAT33_DIAG(_m, _d00, _d11, _d22) {    \
 220:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 0) = _d00;                    \
 221:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 1) = 0.;                      \
 222:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 2) = 0.;                      \
 223:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 0) = 0.;                      \
 224:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 1) = _d11;                    \
 225:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 2) = 0.;                      \
 226:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 0) = 0.;                      \
 227:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 1) = 0.;                      \
 228:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 2) = _d22;                    \
 229:math/pprz_algebra_float.h ****   }
 230:math/pprz_algebra_float.h **** 
 231:math/pprz_algebra_float.h **** 
 232:math/pprz_algebra_float.h **** //
 233:math/pprz_algebra_float.h **** //
 234:math/pprz_algebra_float.h **** // Rotation Matrices
 235:math/pprz_algebra_float.h **** //
 236:math/pprz_algebra_float.h **** //
 237:math/pprz_algebra_float.h **** 
 238:math/pprz_algebra_float.h **** 
 239:math/pprz_algebra_float.h **** /** initialises a rotation matrix to identity */
 240:math/pprz_algebra_float.h **** static inline void float_rmat_identity(struct FloatRMat *rm)
 241:math/pprz_algebra_float.h **** {
 242:math/pprz_algebra_float.h ****   FLOAT_MAT33_DIAG(*rm, 1., 1., 1.);
 243:math/pprz_algebra_float.h **** }
 244:math/pprz_algebra_float.h **** 
 245:math/pprz_algebra_float.h **** /** Inverse/transpose of a rotation matrix.
 246:math/pprz_algebra_float.h ****  * m_b2a = inv(_m_a2b) = transp(_m_a2b)
 247:math/pprz_algebra_float.h ****  */
 248:math/pprz_algebra_float.h **** extern void float_rmat_inv(struct FloatRMat *m_b2a, struct FloatRMat *m_a2b);
 249:math/pprz_algebra_float.h **** 
 250:math/pprz_algebra_float.h **** /** Composition (multiplication) of two rotation matrices.
 251:math/pprz_algebra_float.h ****  * m_a2c = m_a2b comp m_b2c , aka  m_a2c = m_b2c * m_a2b
 252:math/pprz_algebra_float.h ****  */
 253:math/pprz_algebra_float.h **** extern void float_rmat_comp(struct FloatRMat *m_a2c, struct FloatRMat *m_a2b,
 254:math/pprz_algebra_float.h ****                             struct FloatRMat *m_b2c);
 255:math/pprz_algebra_float.h **** 
 256:math/pprz_algebra_float.h **** /** Composition (multiplication) of two rotation matrices.
 257:math/pprz_algebra_float.h ****  * m_a2b = m_a2c comp_inv m_b2c , aka  m_a2b = inv(_m_b2c) * m_a2c
 258:math/pprz_algebra_float.h ****  */
 259:math/pprz_algebra_float.h **** extern void float_rmat_comp_inv(struct FloatRMat *m_a2b, struct FloatRMat *m_a2c,
 260:math/pprz_algebra_float.h ****                                 struct FloatRMat *m_b2c);
 261:math/pprz_algebra_float.h **** 
 262:math/pprz_algebra_float.h **** /// Norm of a rotation matrix.
 263:math/pprz_algebra_float.h **** extern float float_rmat_norm(struct FloatRMat *rm);
 264:math/pprz_algebra_float.h **** 
 265:math/pprz_algebra_float.h **** /** rotate 3D vector by rotation matrix.
 266:math/pprz_algebra_float.h ****  * vb = m_a2b * va
 267:math/pprz_algebra_float.h ****  */
 268:math/pprz_algebra_float.h **** extern void float_rmat_vmult(struct FloatVect3 *vb, struct FloatRMat *m_a2b,
 269:math/pprz_algebra_float.h ****                              struct FloatVect3 *va);
 270:math/pprz_algebra_float.h **** 
 271:math/pprz_algebra_float.h **** /** rotate 3D vector by transposed rotation matrix.
 272:math/pprz_algebra_float.h ****  * vb = m_b2a^T * va
 273:math/pprz_algebra_float.h ****  */
 274:math/pprz_algebra_float.h **** extern void float_rmat_transp_vmult(struct FloatVect3 *vb, struct FloatRMat *m_b2a,
 275:math/pprz_algebra_float.h ****                                     struct FloatVect3 *va);
 276:math/pprz_algebra_float.h **** 
 277:math/pprz_algebra_float.h **** /** rotate anglular rates by rotation matrix.
 278:math/pprz_algebra_float.h ****  * rb = m_a2b * ra
 279:math/pprz_algebra_float.h ****  */
 280:math/pprz_algebra_float.h **** extern void float_rmat_ratemult(struct FloatRates *rb, struct FloatRMat *m_a2b,
 281:math/pprz_algebra_float.h ****                                 struct FloatRates *ra);
 282:math/pprz_algebra_float.h **** 
 283:math/pprz_algebra_float.h **** /** rotate anglular rates by transposed rotation matrix.
 284:math/pprz_algebra_float.h ****  * rb = m_b2a^T * ra
 285:math/pprz_algebra_float.h ****  */
 286:math/pprz_algebra_float.h **** extern void float_rmat_transp_ratemult(struct FloatRates *rb, struct FloatRMat *m_b2a,
 287:math/pprz_algebra_float.h ****                                        struct FloatRates *ra);
 288:math/pprz_algebra_float.h **** 
 289:math/pprz_algebra_float.h **** /** initialises a rotation matrix from unit vector axis and angle */
 290:math/pprz_algebra_float.h **** extern void float_rmat_of_axis_angle(struct FloatRMat *rm, struct FloatVect3 *uv, float angle);
 291:math/pprz_algebra_float.h **** 
 292:math/pprz_algebra_float.h **** /** Rotation matrix from 321 Euler angles (float).
 293:math/pprz_algebra_float.h ****  * The Euler angles are interpreted as zy'x'' (intrinsic) rotation.
 294:math/pprz_algebra_float.h ****  * First rotate around z with psi, then around the new y' with theta,
 295:math/pprz_algebra_float.h ****  * then around new x'' with phi.
 296:math/pprz_algebra_float.h ****  * This is the same as a xyz (extrinsic) rotation,
 297:math/pprz_algebra_float.h ****  * rotating around the fixed x, then y then z axis.
 298:math/pprz_algebra_float.h ****  * - psi range: -pi < psi <= pi
 299:math/pprz_algebra_float.h ****  * - theta range: -pi/2 <= theta <= pi/2
 300:math/pprz_algebra_float.h ****  * - phi range: -pi < phi <= pi
 301:math/pprz_algebra_float.h ****  * @param[out] rm pointer to rotation matrix
 302:math/pprz_algebra_float.h ****  * @param[in]  e pointer to Euler angles
 303:math/pprz_algebra_float.h ****  */
 304:math/pprz_algebra_float.h **** extern void float_rmat_of_eulers_321(struct FloatRMat *rm, struct FloatEulers *e);
 305:math/pprz_algebra_float.h **** extern void float_rmat_of_eulers_312(struct FloatRMat *rm, struct FloatEulers *e);
 306:math/pprz_algebra_float.h **** #define float_rmat_of_eulers float_rmat_of_eulers_321
 307:math/pprz_algebra_float.h **** 
 308:math/pprz_algebra_float.h **** extern void float_rmat_of_quat(struct FloatRMat *rm, struct FloatQuat *q);
 309:math/pprz_algebra_float.h **** /** in place first order integration of a rotation matrix */
 310:math/pprz_algebra_float.h **** extern void float_rmat_integrate_fi(struct FloatRMat *rm, struct FloatRates *omega, float dt);
 311:math/pprz_algebra_float.h **** extern float float_rmat_reorthogonalize(struct FloatRMat *rm);
 312:math/pprz_algebra_float.h **** 
 313:math/pprz_algebra_float.h **** /* defines for backwards compatibility */
 314:math/pprz_algebra_float.h **** #define FLOAT_RMAT_INV(_m_b2a, _m_a2b) float_rmat_inv(&(_m_b2a), &(_m_a2b))
 315:math/pprz_algebra_float.h **** #define FLOAT_RMAT_NORM(_m) float_rmat_norm(&(_m))
 316:math/pprz_algebra_float.h **** #define FLOAT_RMAT_COMP(_m_a2c, _m_a2b, _m_b2c) float_rmat_comp(&(_m_a2c), &(_m_a2b), &(_m_b2c))
 317:math/pprz_algebra_float.h **** #define FLOAT_RMAT_COMP_INV(_m_a2b, _m_a2c, _m_b2c) float_rmat_comp_inv(&(_m_a2b), &(_m_a2c), &(_m_
 318:math/pprz_algebra_float.h **** #define FLOAT_RMAT_VMULT(_vb, _m_a2b, _va) float_rmat_vmult(&(_vb), &(_m_a2b), &(_va))
 319:math/pprz_algebra_float.h **** #define FLOAT_RMAT_TRANSP_VMULT(_vb, _m_b2a, _va) float_rmat_transp_vmult(&(_vb), &(_m_b2a), &(_va)
 320:math/pprz_algebra_float.h **** #define FLOAT_RMAT_RATEMULT(_rb, _m_a2b, _ra) float_rmat_ratemult(&(_rb), &(_m_a2b), &(_ra))
 321:math/pprz_algebra_float.h **** #define FLOAT_RMAT_TRANSP_RATEMULT(_rb, _m_b2a, _ra) float_rmat_ratemult(&(_rb), &(_m_b2a), &(_ra))
 322:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_AXIS_ANGLE(_rm, _uv, _an) float_rmat_of_axis_angle(&(_rm), &(_uv), _an)
 323:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_EULERS(_rm, _e)     float_rmat_of_eulers_321(&(_rm), &(_e))
 324:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_EULERS_321(_rm, _e) float_rmat_of_eulers_321(&(_rm), &(_e))
 325:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_EULERS_312(_rm, _e) float_rmat_of_eulers_312(&(_rm), &(_e))
 326:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_QUAT(_rm, _q)       float_rmat_of_quat(&(_rm), &(_q))
 327:math/pprz_algebra_float.h **** #define FLOAT_RMAT_INTEGRATE_FI(_rm, _omega, _dt) float_rmat_integrate_fi(&(_rm), &(_omega), &(_dt)
 328:math/pprz_algebra_float.h **** 
 329:math/pprz_algebra_float.h **** 
 330:math/pprz_algebra_float.h **** 
 331:math/pprz_algebra_float.h **** //
 332:math/pprz_algebra_float.h **** //
 333:math/pprz_algebra_float.h **** // Quaternion algebras
 334:math/pprz_algebra_float.h **** //
 335:math/pprz_algebra_float.h **** //
 336:math/pprz_algebra_float.h **** 
 337:math/pprz_algebra_float.h **** /** initialises a quaternion to identity */
 338:math/pprz_algebra_float.h **** static inline void float_quat_identity(struct FloatQuat *q)
 339:math/pprz_algebra_float.h **** {
 340:math/pprz_algebra_float.h ****   q->qi = 1.0;
 341:math/pprz_algebra_float.h ****   q->qx = 0;
 342:math/pprz_algebra_float.h ****   q->qy = 0;
 343:math/pprz_algebra_float.h ****   q->qz = 0;
 344:math/pprz_algebra_float.h **** }
 345:math/pprz_algebra_float.h **** 
 346:math/pprz_algebra_float.h **** #define FLOAT_QUAT_NORM2(_q) (SQUARE((_q).qi) + SQUARE((_q).qx) + SQUARE((_q).qy) + SQUARE((_q).qz)
 347:math/pprz_algebra_float.h **** 
 348:math/pprz_algebra_float.h **** static inline float float_quat_norm(struct FloatQuat *q)
 349:math/pprz_algebra_float.h **** {
 350:math/pprz_algebra_float.h ****   return sqrtf(SQUARE(q->qi) + SQUARE(q->qx) +  SQUARE(q->qy) + SQUARE(q->qz));
 351:math/pprz_algebra_float.h **** }
 352:math/pprz_algebra_float.h **** 
 353:math/pprz_algebra_float.h **** static inline void float_quat_normalize(struct FloatQuat *q)
 354:math/pprz_algebra_float.h **** {
 355:math/pprz_algebra_float.h ****   float qnorm = float_quat_norm(q);
 356:math/pprz_algebra_float.h ****   if (qnorm > FLT_MIN) {
 357:math/pprz_algebra_float.h ****     q->qi = q->qi / qnorm;
 358:math/pprz_algebra_float.h ****     q->qx = q->qx / qnorm;
 359:math/pprz_algebra_float.h ****     q->qy = q->qy / qnorm;
 360:math/pprz_algebra_float.h ****     q->qz = q->qz / qnorm;
 361:math/pprz_algebra_float.h ****   }
 362:math/pprz_algebra_float.h **** }
 363:math/pprz_algebra_float.h **** 
 364:math/pprz_algebra_float.h **** static inline void float_quat_invert(struct FloatQuat *qo, struct FloatQuat *qi)
 365:math/pprz_algebra_float.h **** {
 366:math/pprz_algebra_float.h ****   QUAT_INVERT(*qo, *qi);
 367:math/pprz_algebra_float.h **** }
 368:math/pprz_algebra_float.h **** 
 369:math/pprz_algebra_float.h **** static inline void float_quat_wrap_shortest(struct FloatQuat *q)
 370:math/pprz_algebra_float.h **** {
  27              		.loc 1 370 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 371:math/pprz_algebra_float.h ****   if (q->qi < 0.) {
  33              		.loc 1 371 0
  34 0000 D0ED007A 		flds	s15, [r0]
  35 0004 F5EEC07A 		fcmpezs	s15
  36 0008 F1EE10FA 		fmstat
  37 000c 15D5     		bpl	.L1
 372:math/pprz_algebra_float.h ****     QUAT_EXPLEMENTARY(*q, *q);
  38              		.loc 1 372 0
  39 000e F1EE677A 		fnegs	s15, s15
  40 0012 C0ED007A 		fsts	s15, [r0]
  41 0016 D0ED017A 		flds	s15, [r0, #4]
  42 001a F1EE677A 		fnegs	s15, s15
  43 001e C0ED017A 		fsts	s15, [r0, #4]
  44 0022 D0ED027A 		flds	s15, [r0, #8]
  45 0026 F1EE677A 		fnegs	s15, s15
  46 002a C0ED027A 		fsts	s15, [r0, #8]
  47 002e D0ED037A 		flds	s15, [r0, #12]
  48 0032 F1EE677A 		fnegs	s15, s15
  49 0036 C0ED037A 		fsts	s15, [r0, #12]
  50              	.L1:
  51 003a 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE12:
  55              		.section	.text.float_quat_norm,"ax",%progbits
  56              		.align	1
  57              		.thumb
  58              		.thumb_func
  60              	float_quat_norm:
  61              	.LFB9:
 349:math/pprz_algebra_float.h **** {
  62              		.loc 1 349 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL1:
 350:math/pprz_algebra_float.h ****   return sqrtf(SQUARE(q->qi) + SQUARE(q->qx) +  SQUARE(q->qy) + SQUARE(q->qz));
  67              		.loc 1 350 0
  68 0000 D0ED017A 		flds	s15, [r0, #4]
  69 0004 90ED006A 		flds	s12, [r0]
  70 0008 D0ED026A 		flds	s13, [r0, #8]
  71 000c 90ED037A 		flds	s14, [r0, #12]
  72 0010 67EEA77A 		fmuls	s15, s15, s15
 349:math/pprz_algebra_float.h **** {
  73              		.loc 1 349 0
  74 0014 08B5     		push	{r3, lr}
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 3, -8
  77              		.cfi_offset 14, -4
 350:math/pprz_algebra_float.h ****   return sqrtf(SQUARE(q->qi) + SQUARE(q->qx) +  SQUARE(q->qy) + SQUARE(q->qz));
  78              		.loc 1 350 0
  79 0016 E6EE067A 		vfma.f32	s15, s12, s12
  80 001a E6EEA67A 		vfma.f32	s15, s13, s13
  81 001e E7EE077A 		vfma.f32	s15, s14, s14
  82 0022 17EE900A 		fmrs	r0, s15
  83              	.LVL2:
  84 0026 FFF7FEFF 		bl	sqrtf
  85              	.LVL3:
 351:math/pprz_algebra_float.h **** }
  86              		.loc 1 351 0
  87 002a 00EE100A 		fmsr	s0, r0
  88 002e 08BD     		pop	{r3, pc}
  89              		.cfi_endproc
  90              	.LFE9:
  92              		.section	.text.float_quat_normalize,"ax",%progbits
  93              		.align	1
  94              		.thumb
  95              		.thumb_func
  97              	float_quat_normalize:
  98              	.LFB10:
 354:math/pprz_algebra_float.h **** {
  99              		.loc 1 354 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              	.LVL4:
 104 0000 10B5     		push	{r4, lr}
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 4, -8
 107              		.cfi_offset 14, -4
 354:math/pprz_algebra_float.h **** {
 108              		.loc 1 354 0
 109 0002 0446     		mov	r4, r0
 355:math/pprz_algebra_float.h ****   float qnorm = float_quat_norm(q);
 110              		.loc 1 355 0
 111 0004 FFF7FEFF 		bl	float_quat_norm
 112              	.LVL5:
 356:math/pprz_algebra_float.h ****   if (qnorm > FLT_MIN) {
 113              		.loc 1 356 0
 114 0008 DFED0F7A 		flds	s15, .L11
 115 000c B4EEE70A 		fcmpes	s0, s15
 116 0010 F1EE10FA 		fmstat
 117 0014 17DD     		ble	.L7
 357:math/pprz_algebra_float.h ****     q->qi = q->qi / qnorm;
 118              		.loc 1 357 0
 119 0016 D4ED007A 		flds	s15, [r4]
 120 001a C7EE807A 		fdivs	s15, s15, s0
 121 001e C4ED007A 		fsts	s15, [r4]
 358:math/pprz_algebra_float.h ****     q->qx = q->qx / qnorm;
 122              		.loc 1 358 0
 123 0022 D4ED017A 		flds	s15, [r4, #4]
 124 0026 C7EE807A 		fdivs	s15, s15, s0
 125 002a C4ED017A 		fsts	s15, [r4, #4]
 359:math/pprz_algebra_float.h ****     q->qy = q->qy / qnorm;
 126              		.loc 1 359 0
 127 002e D4ED027A 		flds	s15, [r4, #8]
 128 0032 C7EE807A 		fdivs	s15, s15, s0
 129 0036 C4ED027A 		fsts	s15, [r4, #8]
 360:math/pprz_algebra_float.h ****     q->qz = q->qz / qnorm;
 130              		.loc 1 360 0
 131 003a D4ED037A 		flds	s15, [r4, #12]
 132 003e 87EE800A 		fdivs	s0, s15, s0
 133              	.LVL6:
 134 0042 84ED030A 		fsts	s0, [r4, #12]
 135              	.L7:
 136 0046 10BD     		pop	{r4, pc}
 137              	.LVL7:
 138              	.L12:
 139              		.align	2
 140              	.L11:
 141 0048 00008000 		.word	8388608
 142              		.cfi_endproc
 143              	.LFE10:
 145              		.section	.text.renorm_factor,"ax",%progbits
 146              		.align	1
 147              		.thumb
 148              		.thumb_func
 150              	renorm_factor:
 151              	.LFB49:
 152              		.file 2 "math/pprz_algebra_float.c"
   1:math/pprz_algebra_float.c **** /*
   2:math/pprz_algebra_float.c ****  * Copyright (C) 2008-2014 The Paparazzi Team
   3:math/pprz_algebra_float.c ****  *
   4:math/pprz_algebra_float.c ****  * This file is part of paparazzi.
   5:math/pprz_algebra_float.c ****  *
   6:math/pprz_algebra_float.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:math/pprz_algebra_float.c ****  * it under the terms of the GNU General Public License as published by
   8:math/pprz_algebra_float.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:math/pprz_algebra_float.c ****  * any later version.
  10:math/pprz_algebra_float.c ****  *
  11:math/pprz_algebra_float.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:math/pprz_algebra_float.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:math/pprz_algebra_float.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:math/pprz_algebra_float.c ****  * GNU General Public License for more details.
  15:math/pprz_algebra_float.c ****  *
  16:math/pprz_algebra_float.c ****  * You should have received a copy of the GNU General Public License
  17:math/pprz_algebra_float.c ****  * along with paparazzi; see the file COPYING.  If not, see
  18:math/pprz_algebra_float.c ****  * <http://www.gnu.org/licenses/>.
  19:math/pprz_algebra_float.c ****  */
  20:math/pprz_algebra_float.c **** 
  21:math/pprz_algebra_float.c **** /**
  22:math/pprz_algebra_float.c ****  * @file pprz_algebra_float.c
  23:math/pprz_algebra_float.c ****  * @brief Paparazzi floating point algebra.
  24:math/pprz_algebra_float.c ****  *
  25:math/pprz_algebra_float.c ****  */
  26:math/pprz_algebra_float.c **** 
  27:math/pprz_algebra_float.c **** #include "pprz_algebra_float.h"
  28:math/pprz_algebra_float.c **** 
  29:math/pprz_algebra_float.c **** /** in place first order integration of a 3D-vector */
  30:math/pprz_algebra_float.c **** void float_vect3_integrate_fi(struct FloatVect3 *vec, struct FloatVect3 *dv, float dt)
  31:math/pprz_algebra_float.c **** {
  32:math/pprz_algebra_float.c ****   vec->x += dv->x * dt;
  33:math/pprz_algebra_float.c ****   vec->y += dv->y * dt;
  34:math/pprz_algebra_float.c ****   vec->z += dv->z * dt;
  35:math/pprz_algebra_float.c **** }
  36:math/pprz_algebra_float.c **** 
  37:math/pprz_algebra_float.c **** /** in place first order integration of angular rates */
  38:math/pprz_algebra_float.c **** void float_rates_integrate_fi(struct FloatRates *r, struct FloatRates *dr, float dt)
  39:math/pprz_algebra_float.c **** {
  40:math/pprz_algebra_float.c ****   r->p += dr->p * dt;
  41:math/pprz_algebra_float.c ****   r->q += dr->q * dt;
  42:math/pprz_algebra_float.c ****   r->r += dr->r * dt;
  43:math/pprz_algebra_float.c **** }
  44:math/pprz_algebra_float.c **** 
  45:math/pprz_algebra_float.c **** void float_rates_of_euler_dot(struct FloatRates *r, struct FloatEulers *e, struct FloatEulers *edot
  46:math/pprz_algebra_float.c **** {
  47:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
  48:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
  49:math/pprz_algebra_float.c ****   r->r =           -sinf(e->phi) * edot->theta + cosf(e->phi) * cosf(e->theta) * edot->psi;
  50:math/pprz_algebra_float.c **** }
  51:math/pprz_algebra_float.c **** 
  52:math/pprz_algebra_float.c **** 
  53:math/pprz_algebra_float.c **** 
  54:math/pprz_algebra_float.c **** 
  55:math/pprz_algebra_float.c **** void float_rmat_inv(struct FloatRMat *m_b2a, struct FloatRMat *m_a2b)
  56:math/pprz_algebra_float.c **** {
  57:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 0) = RMAT_ELMT(*m_a2b, 0, 0);
  58:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 1) = RMAT_ELMT(*m_a2b, 1, 0);
  59:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 2) = RMAT_ELMT(*m_a2b, 2, 0);
  60:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 0) = RMAT_ELMT(*m_a2b, 0, 1);
  61:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 1) = RMAT_ELMT(*m_a2b, 1, 1);
  62:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 2) = RMAT_ELMT(*m_a2b, 2, 1);
  63:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 0) = RMAT_ELMT(*m_a2b, 0, 2);
  64:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 1) = RMAT_ELMT(*m_a2b, 1, 2);
  65:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 2) = RMAT_ELMT(*m_a2b, 2, 2);
  66:math/pprz_algebra_float.c **** }
  67:math/pprz_algebra_float.c **** 
  68:math/pprz_algebra_float.c **** float float_rmat_norm(struct FloatRMat *rm)
  69:math/pprz_algebra_float.c **** {
  70:math/pprz_algebra_float.c ****   return sqrtf(SQUARE(rm->m[0]) + SQUARE(rm->m[1]) + SQUARE(rm->m[2]) +
  71:math/pprz_algebra_float.c ****                SQUARE(rm->m[3]) + SQUARE(rm->m[4]) + SQUARE(rm->m[5]) +
  72:math/pprz_algebra_float.c ****                SQUARE(rm->m[6]) + SQUARE(rm->m[7]) + SQUARE(rm->m[8]));
  73:math/pprz_algebra_float.c **** }
  74:math/pprz_algebra_float.c **** 
  75:math/pprz_algebra_float.c **** /** Composition (multiplication) of two rotation matrices.
  76:math/pprz_algebra_float.c ****  * m_a2c = m_a2b comp m_b2c , aka  m_a2c = m_b2c * m_a2b
  77:math/pprz_algebra_float.c ****  */
  78:math/pprz_algebra_float.c **** void float_rmat_comp(struct FloatRMat *m_a2c, struct FloatRMat *m_a2b, struct FloatRMat *m_b2c)
  79:math/pprz_algebra_float.c **** {
  80:math/pprz_algebra_float.c ****   m_a2c->m[0] = m_b2c->m[0] * m_a2b->m[0] + m_b2c->m[1] * m_a2b->m[3] + m_b2c->m[2] * m_a2b->m[6];
  81:math/pprz_algebra_float.c ****   m_a2c->m[1] = m_b2c->m[0] * m_a2b->m[1] + m_b2c->m[1] * m_a2b->m[4] + m_b2c->m[2] * m_a2b->m[7];
  82:math/pprz_algebra_float.c ****   m_a2c->m[2] = m_b2c->m[0] * m_a2b->m[2] + m_b2c->m[1] * m_a2b->m[5] + m_b2c->m[2] * m_a2b->m[8];
  83:math/pprz_algebra_float.c ****   m_a2c->m[3] = m_b2c->m[3] * m_a2b->m[0] + m_b2c->m[4] * m_a2b->m[3] + m_b2c->m[5] * m_a2b->m[6];
  84:math/pprz_algebra_float.c ****   m_a2c->m[4] = m_b2c->m[3] * m_a2b->m[1] + m_b2c->m[4] * m_a2b->m[4] + m_b2c->m[5] * m_a2b->m[7];
  85:math/pprz_algebra_float.c ****   m_a2c->m[5] = m_b2c->m[3] * m_a2b->m[2] + m_b2c->m[4] * m_a2b->m[5] + m_b2c->m[5] * m_a2b->m[8];
  86:math/pprz_algebra_float.c ****   m_a2c->m[6] = m_b2c->m[6] * m_a2b->m[0] + m_b2c->m[7] * m_a2b->m[3] + m_b2c->m[8] * m_a2b->m[6];
  87:math/pprz_algebra_float.c ****   m_a2c->m[7] = m_b2c->m[6] * m_a2b->m[1] + m_b2c->m[7] * m_a2b->m[4] + m_b2c->m[8] * m_a2b->m[7];
  88:math/pprz_algebra_float.c ****   m_a2c->m[8] = m_b2c->m[6] * m_a2b->m[2] + m_b2c->m[7] * m_a2b->m[5] + m_b2c->m[8] * m_a2b->m[8];
  89:math/pprz_algebra_float.c **** }
  90:math/pprz_algebra_float.c **** 
  91:math/pprz_algebra_float.c **** /** Composition (multiplication) of two rotation matrices.
  92:math/pprz_algebra_float.c ****  * m_a2b = m_a2c comp_inv m_b2c , aka  m_a2b = inv(_m_b2c) * m_a2c
  93:math/pprz_algebra_float.c ****  */
  94:math/pprz_algebra_float.c **** void float_rmat_comp_inv(struct FloatRMat *m_a2b, struct FloatRMat *m_a2c, struct FloatRMat *m_b2c)
  95:math/pprz_algebra_float.c **** {
  96:math/pprz_algebra_float.c ****   m_a2b->m[0] = m_b2c->m[0] * m_a2c->m[0] + m_b2c->m[3] * m_a2c->m[3] + m_b2c->m[6] * m_a2c->m[6];
  97:math/pprz_algebra_float.c ****   m_a2b->m[1] = m_b2c->m[0] * m_a2c->m[1] + m_b2c->m[3] * m_a2c->m[4] + m_b2c->m[6] * m_a2c->m[7];
  98:math/pprz_algebra_float.c ****   m_a2b->m[2] = m_b2c->m[0] * m_a2c->m[2] + m_b2c->m[3] * m_a2c->m[5] + m_b2c->m[6] * m_a2c->m[8];
  99:math/pprz_algebra_float.c ****   m_a2b->m[3] = m_b2c->m[1] * m_a2c->m[0] + m_b2c->m[4] * m_a2c->m[3] + m_b2c->m[7] * m_a2c->m[6];
 100:math/pprz_algebra_float.c ****   m_a2b->m[4] = m_b2c->m[1] * m_a2c->m[1] + m_b2c->m[4] * m_a2c->m[4] + m_b2c->m[7] * m_a2c->m[7];
 101:math/pprz_algebra_float.c ****   m_a2b->m[5] = m_b2c->m[1] * m_a2c->m[2] + m_b2c->m[4] * m_a2c->m[5] + m_b2c->m[7] * m_a2c->m[8];
 102:math/pprz_algebra_float.c ****   m_a2b->m[6] = m_b2c->m[2] * m_a2c->m[0] + m_b2c->m[5] * m_a2c->m[3] + m_b2c->m[8] * m_a2c->m[6];
 103:math/pprz_algebra_float.c ****   m_a2b->m[7] = m_b2c->m[2] * m_a2c->m[1] + m_b2c->m[5] * m_a2c->m[4] + m_b2c->m[8] * m_a2c->m[7];
 104:math/pprz_algebra_float.c ****   m_a2b->m[8] = m_b2c->m[2] * m_a2c->m[2] + m_b2c->m[5] * m_a2c->m[5] + m_b2c->m[8] * m_a2c->m[8];
 105:math/pprz_algebra_float.c **** }
 106:math/pprz_algebra_float.c **** 
 107:math/pprz_algebra_float.c **** /** rotate 3D vector by rotation matrix.
 108:math/pprz_algebra_float.c ****  * vb = m_a2b * va
 109:math/pprz_algebra_float.c ****  */
 110:math/pprz_algebra_float.c **** void float_rmat_vmult(struct FloatVect3 *vb, struct FloatRMat *m_a2b, struct FloatVect3 *va)
 111:math/pprz_algebra_float.c **** {
 112:math/pprz_algebra_float.c ****   vb->x = m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z;
 113:math/pprz_algebra_float.c ****   vb->y = m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z;
 114:math/pprz_algebra_float.c ****   vb->z = m_a2b->m[6] * va->x + m_a2b->m[7] * va->y + m_a2b->m[8] * va->z;
 115:math/pprz_algebra_float.c **** }
 116:math/pprz_algebra_float.c **** 
 117:math/pprz_algebra_float.c **** /** rotate 3D vector by transposed rotation matrix.
 118:math/pprz_algebra_float.c ****  * vb = m_b2a^T * va
 119:math/pprz_algebra_float.c ****  */
 120:math/pprz_algebra_float.c **** void float_rmat_transp_vmult(struct FloatVect3 *vb, struct FloatRMat *m_b2a, struct FloatVect3 *va)
 121:math/pprz_algebra_float.c **** {
 122:math/pprz_algebra_float.c ****   vb->x = m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z;
 123:math/pprz_algebra_float.c ****   vb->y = m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z;
 124:math/pprz_algebra_float.c ****   vb->z = m_b2a->m[2] * va->x + m_b2a->m[5] * va->y + m_b2a->m[8] * va->z;
 125:math/pprz_algebra_float.c **** }
 126:math/pprz_algebra_float.c **** 
 127:math/pprz_algebra_float.c **** /** rotate anglular rates by rotation matrix.
 128:math/pprz_algebra_float.c ****  * rb = m_a2b * ra
 129:math/pprz_algebra_float.c ****  */
 130:math/pprz_algebra_float.c **** void float_rmat_ratemult(struct FloatRates *rb, struct FloatRMat *m_a2b, struct FloatRates *ra)
 131:math/pprz_algebra_float.c **** {
 132:math/pprz_algebra_float.c ****   rb->p = m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r;
 133:math/pprz_algebra_float.c ****   rb->q = m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r;
 134:math/pprz_algebra_float.c ****   rb->r = m_a2b->m[6] * ra->p + m_a2b->m[7] * ra->q + m_a2b->m[8] * ra->r;
 135:math/pprz_algebra_float.c **** }
 136:math/pprz_algebra_float.c **** 
 137:math/pprz_algebra_float.c **** /** rotate anglular rates by transposed rotation matrix.
 138:math/pprz_algebra_float.c ****  * rb = m_b2a^T * ra
 139:math/pprz_algebra_float.c ****  */
 140:math/pprz_algebra_float.c **** void float_rmat_transp_ratemult(struct FloatRates *rb, struct FloatRMat *m_b2a, struct FloatRates *
 141:math/pprz_algebra_float.c **** {
 142:math/pprz_algebra_float.c ****   rb->p = m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r;
 143:math/pprz_algebra_float.c ****   rb->q = m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r;
 144:math/pprz_algebra_float.c ****   rb->r = m_b2a->m[2] * ra->p + m_b2a->m[5] * ra->q + m_b2a->m[8] * ra->r;
 145:math/pprz_algebra_float.c **** }
 146:math/pprz_algebra_float.c **** 
 147:math/pprz_algebra_float.c **** 
 148:math/pprz_algebra_float.c **** /** initialises a rotation matrix from unit vector axis and angle */
 149:math/pprz_algebra_float.c **** void float_rmat_of_axis_angle(struct FloatRMat *rm, struct FloatVect3 *uv, float angle)
 150:math/pprz_algebra_float.c **** {
 151:math/pprz_algebra_float.c ****   const float ux2  = uv->x * uv->x;
 152:math/pprz_algebra_float.c ****   const float uy2  = uv->y * uv->y;
 153:math/pprz_algebra_float.c ****   const float uz2  = uv->z * uv->z;
 154:math/pprz_algebra_float.c ****   const float uxuy = uv->x * uv->y;
 155:math/pprz_algebra_float.c ****   const float uyuz = uv->y * uv->z;
 156:math/pprz_algebra_float.c ****   const float uxuz = uv->x * uv->z;
 157:math/pprz_algebra_float.c ****   const float can  = cosf(angle);
 158:math/pprz_algebra_float.c ****   const float san  = sinf(angle);
 159:math/pprz_algebra_float.c ****   const float one_m_can = (1. - can);
 160:math/pprz_algebra_float.c **** 
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ux2 + (1. - ux2) * can;
 162:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = uxuy * one_m_can + uv->z * san;
 163:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = uxuz * one_m_can - uv->y * san;
 164:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = RMAT_ELMT(*rm, 0, 1);
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = uy2 + (1. - uy2) * can;
 166:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 167:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = RMAT_ELMT(*rm, 0, 2);
 168:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = RMAT_ELMT(*rm, 1, 2);
 169:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = uz2 + (1. - uz2) * can;
 170:math/pprz_algebra_float.c **** }
 171:math/pprz_algebra_float.c **** 
 172:math/pprz_algebra_float.c **** 
 173:math/pprz_algebra_float.c **** /* C n->b rotation matrix */
 174:math/pprz_algebra_float.c **** void float_rmat_of_eulers_321(struct FloatRMat *rm, struct FloatEulers *e)
 175:math/pprz_algebra_float.c **** {
 176:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 177:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 178:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 179:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 180:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 181:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 182:math/pprz_algebra_float.c **** 
 183:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ctheta * cpsi;
 184:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = ctheta * spsi;
 185:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -stheta;
 186:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = sphi * stheta * cpsi - cphi * spsi;
 187:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = sphi * stheta * spsi + cphi * cpsi;
 188:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = sphi * ctheta;
 189:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = cphi * stheta * cpsi + sphi * spsi;
 190:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cphi * stheta * spsi - sphi * cpsi;
 191:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = cphi * ctheta;
 192:math/pprz_algebra_float.c **** }
 193:math/pprz_algebra_float.c **** 
 194:math/pprz_algebra_float.c **** void float_rmat_of_eulers_312(struct FloatRMat *rm, struct FloatEulers *e)
 195:math/pprz_algebra_float.c **** {
 196:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 197:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 198:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 199:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 200:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 201:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 202:math/pprz_algebra_float.c **** 
 203:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) =  ctheta * cpsi - sphi * stheta * spsi;
 204:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta * spsi + sphi * stheta * cpsi;
 205:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -cphi * stheta;
 206:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = -cphi * spsi;
 207:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) =  cphi * cpsi;
 208:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) =  sphi;
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta * cpsi + sphi * ctheta * spsi;
 210:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta * spsi - sphi * ctheta * cpsi;
 211:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) =  cphi * ctheta;
 212:math/pprz_algebra_float.c **** }
 213:math/pprz_algebra_float.c **** 
 214:math/pprz_algebra_float.c **** 
 215:math/pprz_algebra_float.c **** /* C n->b rotation matrix */
 216:math/pprz_algebra_float.c **** void float_rmat_of_quat(struct FloatRMat *rm, struct FloatQuat *q)
 217:math/pprz_algebra_float.c **** {
 218:math/pprz_algebra_float.c ****   const float _a = M_SQRT2 * q->qi;
 219:math/pprz_algebra_float.c ****   const float _b = M_SQRT2 * q->qx;
 220:math/pprz_algebra_float.c ****   const float _c = M_SQRT2 * q->qy;
 221:math/pprz_algebra_float.c ****   const float _d = M_SQRT2 * q->qz;
 222:math/pprz_algebra_float.c ****   const float a2_1 = _a * _a - 1;
 223:math/pprz_algebra_float.c ****   const float ab = _a * _b;
 224:math/pprz_algebra_float.c ****   const float ac = _a * _c;
 225:math/pprz_algebra_float.c ****   const float ad = _a * _d;
 226:math/pprz_algebra_float.c ****   const float bc = _b * _c;
 227:math/pprz_algebra_float.c ****   const float bd = _b * _d;
 228:math/pprz_algebra_float.c ****   const float cd = _c * _d;
 229:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = a2_1 + _b * _b;
 230:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = bc + ad;
 231:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = bd - ac;
 232:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = bc - ad;
 233:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = a2_1 + _c * _c;
 234:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = cd + ab;
 235:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = bd + ac;
 236:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cd - ab;
 237:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = a2_1 + _d * _d;
 238:math/pprz_algebra_float.c **** }
 239:math/pprz_algebra_float.c **** 
 240:math/pprz_algebra_float.c **** /** in place first order integration of a rotation matrix */
 241:math/pprz_algebra_float.c **** void float_rmat_integrate_fi(struct FloatRMat *rm, struct FloatRates *omega, float dt)
 242:math/pprz_algebra_float.c **** {
 243:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 244:math/pprz_algebra_float.c ****     {
 245:math/pprz_algebra_float.c ****       1.        ,  dt *omega->r, -dt *omega->q,
 246:math/pprz_algebra_float.c ****       -dt *omega->r,  1.        ,  dt *omega->p,
 247:math/pprz_algebra_float.c ****       dt *omega->q, -dt *omega->p,  1.
 248:math/pprz_algebra_float.c ****     }
 249:math/pprz_algebra_float.c ****   };
 250:math/pprz_algebra_float.c ****   struct FloatRMat R_tdt;
 251:math/pprz_algebra_float.c ****   FLOAT_RMAT_COMP(R_tdt, *rm, exp_omega_dt);
 252:math/pprz_algebra_float.c ****   memcpy(rm, &R_tdt, sizeof(R_tdt));
 253:math/pprz_algebra_float.c **** }
 254:math/pprz_algebra_float.c **** 
 255:math/pprz_algebra_float.c **** static inline float renorm_factor(float n)
 256:math/pprz_algebra_float.c **** {
 153              		.loc 2 256 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              	.LVL8:
 257:math/pprz_algebra_float.c ****   if (n < 1.5625f && n > 0.64f) {
 158              		.loc 2 257 0
 159 0000 F7EE097A 		fconsts	s15, #121
 160 0004 B4EEE70A 		fcmpes	s0, s15
 161 0008 F1EE10FA 		fmstat
 256:math/pprz_algebra_float.c **** {
 162              		.loc 2 256 0
 163 000c 08B5     		push	{r3, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 3, -8
 166              		.cfi_offset 14, -4
 167              		.loc 2 257 0
 168 000e 0FD5     		bpl	.L14
 169              		.loc 2 257 0 is_stmt 0 discriminator 1
 170 0010 DFED157A 		flds	s15, .L28
 171 0014 B4EEE70A 		fcmpes	s0, s15
 172 0018 F1EE10FA 		fmstat
 173 001c 08DD     		ble	.L14
 258:math/pprz_algebra_float.c ****     return .5 * (3 - n);
 174              		.loc 2 258 0 is_stmt 1
 175 001e F0EE087A 		fconsts	s15, #8
 176 0022 37EEC00A 		fsubs	s0, s15, s0
 177              	.LVL9:
 178 0026 F6EE007A 		fconsts	s15, #96
 179 002a 20EE270A 		fmuls	s0, s0, s15
 180 002e 08BD     		pop	{r3, pc}
 181              	.LVL10:
 182              	.L14:
 259:math/pprz_algebra_float.c ****   } else if (n < 100.0f && n > 0.01f) {
 183              		.loc 2 259 0
 184 0030 DFED0E7A 		flds	s15, .L28+4
 185 0034 B4EEE70A 		fcmpes	s0, s15
 186 0038 F1EE10FA 		fmstat
 187 003c 11D5     		bpl	.L27
 188              		.loc 2 259 0 is_stmt 0 discriminator 1
 189 003e DFED0C7A 		flds	s15, .L28+8
 190 0042 B4EEE70A 		fcmpes	s0, s15
 191 0046 F1EE10FA 		fmstat
 192 004a 0ADD     		ble	.L27
 193              	.LVL11:
 194              	.LBB4:
 195              	.LBB5:
 260:math/pprz_algebra_float.c ****     return  1. / sqrtf(n);
 196              		.loc 2 260 0 is_stmt 1
 197 004c 10EE100A 		fmrs	r0, s0
 198 0050 FFF7FEFF 		bl	sqrtf
 199              	.LVL12:
 200 0054 07EE900A 		fmsr	s15, r0
 201 0058 B7EE000A 		fconsts	s0, #112
 202 005c 80EE270A 		fdivs	s0, s0, s15
 203 0060 08BD     		pop	{r3, pc}
 204              	.LVL13:
 205              	.L27:
 206              	.LBE5:
 207              	.LBE4:
 261:math/pprz_algebra_float.c ****   } else {
 262:math/pprz_algebra_float.c ****     return 0.;
 208              		.loc 2 262 0
 209 0062 9FED040A 		flds	s0, .L28+12
 210              	.LVL14:
 263:math/pprz_algebra_float.c ****   }
 264:math/pprz_algebra_float.c **** }
 211              		.loc 2 264 0
 212 0066 08BD     		pop	{r3, pc}
 213              	.L29:
 214              		.align	2
 215              	.L28:
 216 0068 0AD7233F 		.word	1059313418
 217 006c 0000C842 		.word	1120403456
 218 0070 0AD7233C 		.word	1008981770
 219 0074 00000000 		.word	0
 220              		.cfi_endproc
 221              	.LFE49:
 223              		.section	.text.float_vect3_integrate_fi,"ax",%progbits
 224              		.align	1
 225              		.global	float_vect3_integrate_fi
 226              		.thumb
 227              		.thumb_func
 229              	float_vect3_integrate_fi:
 230              	.LFB33:
  31:math/pprz_algebra_float.c **** {
 231              		.loc 2 31 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 236              	.LVL15:
  32:math/pprz_algebra_float.c ****   vec->x += dv->x * dt;
 237              		.loc 2 32 0
 238 0000 D1ED006A 		flds	s13, [r1]
 239 0004 D0ED007A 		flds	s15, [r0]
  31:math/pprz_algebra_float.c **** {
 240              		.loc 2 31 0
 241 0008 07EE102A 		fmsr	s14, r2
  32:math/pprz_algebra_float.c ****   vec->x += dv->x * dt;
 242              		.loc 2 32 0
 243 000c E6EE877A 		vfma.f32	s15, s13, s14
  33:math/pprz_algebra_float.c ****   vec->y += dv->y * dt;
 244              		.loc 2 33 0
 245 0010 D1ED016A 		flds	s13, [r1, #4]
  32:math/pprz_algebra_float.c ****   vec->x += dv->x * dt;
 246              		.loc 2 32 0
 247 0014 C0ED007A 		fsts	s15, [r0]
  33:math/pprz_algebra_float.c ****   vec->y += dv->y * dt;
 248              		.loc 2 33 0
 249 0018 D0ED017A 		flds	s15, [r0, #4]
 250 001c E6EE877A 		vfma.f32	s15, s13, s14
  34:math/pprz_algebra_float.c ****   vec->z += dv->z * dt;
 251              		.loc 2 34 0
 252 0020 D1ED026A 		flds	s13, [r1, #8]
  33:math/pprz_algebra_float.c ****   vec->y += dv->y * dt;
 253              		.loc 2 33 0
 254 0024 C0ED017A 		fsts	s15, [r0, #4]
  34:math/pprz_algebra_float.c ****   vec->z += dv->z * dt;
 255              		.loc 2 34 0
 256 0028 D0ED027A 		flds	s15, [r0, #8]
 257 002c E6EE877A 		vfma.f32	s15, s13, s14
 258 0030 C0ED027A 		fsts	s15, [r0, #8]
 259 0034 7047     		bx	lr
 260              		.cfi_endproc
 261              	.LFE33:
 263              		.section	.text.float_rates_integrate_fi,"ax",%progbits
 264              		.align	1
 265              		.global	float_rates_integrate_fi
 266              		.thumb
 267              		.thumb_func
 269              	float_rates_integrate_fi:
 270              	.LFB34:
  39:math/pprz_algebra_float.c **** {
 271              		.loc 2 39 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 0
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              		@ link register save eliminated.
 276              	.LVL16:
  40:math/pprz_algebra_float.c ****   r->p += dr->p * dt;
 277              		.loc 2 40 0
 278 0000 D1ED006A 		flds	s13, [r1]
 279 0004 D0ED007A 		flds	s15, [r0]
  39:math/pprz_algebra_float.c **** {
 280              		.loc 2 39 0
 281 0008 07EE102A 		fmsr	s14, r2
  40:math/pprz_algebra_float.c ****   r->p += dr->p * dt;
 282              		.loc 2 40 0
 283 000c E6EE877A 		vfma.f32	s15, s13, s14
  41:math/pprz_algebra_float.c ****   r->q += dr->q * dt;
 284              		.loc 2 41 0
 285 0010 D1ED016A 		flds	s13, [r1, #4]
  40:math/pprz_algebra_float.c ****   r->p += dr->p * dt;
 286              		.loc 2 40 0
 287 0014 C0ED007A 		fsts	s15, [r0]
  41:math/pprz_algebra_float.c ****   r->q += dr->q * dt;
 288              		.loc 2 41 0
 289 0018 D0ED017A 		flds	s15, [r0, #4]
 290 001c E6EE877A 		vfma.f32	s15, s13, s14
  42:math/pprz_algebra_float.c ****   r->r += dr->r * dt;
 291              		.loc 2 42 0
 292 0020 D1ED026A 		flds	s13, [r1, #8]
  41:math/pprz_algebra_float.c ****   r->q += dr->q * dt;
 293              		.loc 2 41 0
 294 0024 C0ED017A 		fsts	s15, [r0, #4]
  42:math/pprz_algebra_float.c ****   r->r += dr->r * dt;
 295              		.loc 2 42 0
 296 0028 D0ED027A 		flds	s15, [r0, #8]
 297 002c E6EE877A 		vfma.f32	s15, s13, s14
 298 0030 C0ED027A 		fsts	s15, [r0, #8]
 299 0034 7047     		bx	lr
 300              		.cfi_endproc
 301              	.LFE34:
 303              		.section	.text.float_rates_of_euler_dot,"ax",%progbits
 304              		.align	1
 305              		.global	float_rates_of_euler_dot
 306              		.thumb
 307              		.thumb_func
 309              	float_rates_of_euler_dot:
 310              	.LFB35:
  46:math/pprz_algebra_float.c **** {
 311              		.loc 2 46 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              	.LVL17:
 316 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 317              		.cfi_def_cfa_offset 24
 318              		.cfi_offset 3, -24
 319              		.cfi_offset 4, -20
 320              		.cfi_offset 5, -16
 321              		.cfi_offset 6, -12
 322              		.cfi_offset 7, -8
 323              		.cfi_offset 14, -4
  47:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
 324              		.loc 2 47 0
 325 0002 4F68     		ldr	r7, [r1, #4]	@ float
  46:math/pprz_algebra_float.c **** {
 326              		.loc 2 46 0
 327 0004 2DED048B 		fstmfdd	sp!, {d8, d9}
 328              		.cfi_def_cfa_offset 40
 329              		.cfi_offset 80, -40
 330              		.cfi_offset 82, -32
  46:math/pprz_algebra_float.c **** {
 331              		.loc 2 46 0
 332 0008 0446     		mov	r4, r0
  47:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
 333              		.loc 2 47 0
 334 000a 3846     		mov	r0, r7	@ float
 335              	.LVL18:
  46:math/pprz_algebra_float.c **** {
 336              		.loc 2 46 0
 337 000c 1546     		mov	r5, r2
 338 000e 0E46     		mov	r6, r1
  47:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
 339              		.loc 2 47 0
 340 0010 FFF7FEFF 		bl	sinf
 341              	.LVL19:
 342 0014 95ED028A 		flds	s16, [r5, #8]
 343 0018 D5ED007A 		flds	s15, [r5]
  48:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
 344              		.loc 2 48 0
 345 001c 3668     		ldr	r6, [r6]	@ float
 346              	.LVL20:
  47:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
 347              		.loc 2 47 0
 348 001e 07EE100A 		fmsr	s14, r0
 349 0022 E7EE487A 		vfms.f32	s15, s14, s16
  48:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
 350              		.loc 2 48 0
 351 0026 3046     		mov	r0, r6	@ float
  47:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
 352              		.loc 2 47 0
 353 0028 C4ED007A 		fsts	s15, [r4]
  48:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
 354              		.loc 2 48 0
 355 002c FFF7FEFF 		bl	cosf
 356              	.LVL21:
 357 0030 09EE900A 		fmsr	s19, r0
 358 0034 3046     		mov	r0, r6	@ float
 359 0036 FFF7FEFF 		bl	sinf
 360              	.LVL22:
 361 003a 09EE100A 		fmsr	s18, r0
 362 003e 3846     		mov	r0, r7	@ float
 363 0040 FFF7FEFF 		bl	cosf
 364              	.LVL23:
 365 0044 07EE100A 		fmsr	s14, r0
 366 0048 69EE077A 		fmuls	s15, s18, s14
 367 004c D5ED018A 		flds	s17, [r5, #4]
 368 0050 67EE887A 		fmuls	s15, s15, s16
 369 0054 E9EEA87A 		vfma.f32	s15, s19, s17
  49:math/pprz_algebra_float.c ****   r->r =           -sinf(e->phi) * edot->theta + cosf(e->phi) * cosf(e->theta) * edot->psi;
 370              		.loc 2 49 0
 371 0058 69EE879A 		fmuls	s19, s19, s14
  48:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
 372              		.loc 2 48 0
 373 005c C4ED017A 		fsts	s15, [r4, #4]
  49:math/pprz_algebra_float.c ****   r->r =           -sinf(e->phi) * edot->theta + cosf(e->phi) * cosf(e->theta) * edot->psi;
 374              		.loc 2 49 0
 375 0060 29EE888A 		fmuls	s16, s19, s16
 376 0064 A9EE688A 		vfms.f32	s16, s18, s17
 377 0068 84ED028A 		fsts	s16, [r4, #8]
  50:math/pprz_algebra_float.c **** }
 378              		.loc 2 50 0
 379 006c BDEC048B 		fldmfdd	sp!, {d8-d9}
 380 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 381              		.cfi_endproc
 382              	.LFE35:
 384              		.section	.text.float_rmat_inv,"ax",%progbits
 385              		.align	1
 386              		.global	float_rmat_inv
 387              		.thumb
 388              		.thumb_func
 390              	float_rmat_inv:
 391              	.LFB36:
  56:math/pprz_algebra_float.c **** {
 392              		.loc 2 56 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397              	.LVL24:
  57:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 0) = RMAT_ELMT(*m_a2b, 0, 0);
 398              		.loc 2 57 0
 399 0000 0B68     		ldr	r3, [r1]	@ float
 400 0002 0360     		str	r3, [r0]	@ float
  58:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 1) = RMAT_ELMT(*m_a2b, 1, 0);
 401              		.loc 2 58 0
 402 0004 CB68     		ldr	r3, [r1, #12]	@ float
 403 0006 4360     		str	r3, [r0, #4]	@ float
  59:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 2) = RMAT_ELMT(*m_a2b, 2, 0);
 404              		.loc 2 59 0
 405 0008 8B69     		ldr	r3, [r1, #24]	@ float
 406 000a 8360     		str	r3, [r0, #8]	@ float
  60:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 0) = RMAT_ELMT(*m_a2b, 0, 1);
 407              		.loc 2 60 0
 408 000c 4B68     		ldr	r3, [r1, #4]	@ float
 409 000e C360     		str	r3, [r0, #12]	@ float
  61:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 1) = RMAT_ELMT(*m_a2b, 1, 1);
 410              		.loc 2 61 0
 411 0010 0B69     		ldr	r3, [r1, #16]	@ float
 412 0012 0361     		str	r3, [r0, #16]	@ float
  62:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 2) = RMAT_ELMT(*m_a2b, 2, 1);
 413              		.loc 2 62 0
 414 0014 CB69     		ldr	r3, [r1, #28]	@ float
 415 0016 4361     		str	r3, [r0, #20]	@ float
  63:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 0) = RMAT_ELMT(*m_a2b, 0, 2);
 416              		.loc 2 63 0
 417 0018 8B68     		ldr	r3, [r1, #8]	@ float
 418 001a 8361     		str	r3, [r0, #24]	@ float
  64:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 1) = RMAT_ELMT(*m_a2b, 1, 2);
 419              		.loc 2 64 0
 420 001c 4B69     		ldr	r3, [r1, #20]	@ float
 421 001e C361     		str	r3, [r0, #28]	@ float
  65:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 2) = RMAT_ELMT(*m_a2b, 2, 2);
 422              		.loc 2 65 0
 423 0020 0B6A     		ldr	r3, [r1, #32]	@ float
 424 0022 0362     		str	r3, [r0, #32]	@ float
 425 0024 7047     		bx	lr
 426              		.cfi_endproc
 427              	.LFE36:
 429              		.section	.text.float_rmat_norm,"ax",%progbits
 430              		.align	1
 431              		.global	float_rmat_norm
 432              		.thumb
 433              		.thumb_func
 435              	float_rmat_norm:
 436              	.LFB37:
  69:math/pprz_algebra_float.c **** {
 437              		.loc 2 69 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442              	.LVL25:
  70:math/pprz_algebra_float.c ****   return sqrtf(SQUARE(rm->m[0]) + SQUARE(rm->m[1]) + SQUARE(rm->m[2]) +
 443              		.loc 2 70 0
 444 0000 D0ED017A 		flds	s15, [r0, #4]
 445 0004 D0ED003A 		flds	s7, [r0]
 446 0008 90ED024A 		flds	s8, [r0, #8]
  71:math/pprz_algebra_float.c ****                SQUARE(rm->m[3]) + SQUARE(rm->m[4]) + SQUARE(rm->m[5]) +
 447              		.loc 2 71 0
 448 000c D0ED034A 		flds	s9, [r0, #12]
 449 0010 90ED045A 		flds	s10, [r0, #16]
 450 0014 D0ED055A 		flds	s11, [r0, #20]
  72:math/pprz_algebra_float.c ****                SQUARE(rm->m[6]) + SQUARE(rm->m[7]) + SQUARE(rm->m[8]));
 451              		.loc 2 72 0
 452 0018 90ED066A 		flds	s12, [r0, #24]
 453 001c D0ED076A 		flds	s13, [r0, #28]
 454 0020 90ED087A 		flds	s14, [r0, #32]
  70:math/pprz_algebra_float.c ****   return sqrtf(SQUARE(rm->m[0]) + SQUARE(rm->m[1]) + SQUARE(rm->m[2]) +
 455              		.loc 2 70 0
 456 0024 67EEA77A 		fmuls	s15, s15, s15
 457 0028 E3EEA37A 		vfma.f32	s15, s7, s7
 458 002c E4EE047A 		vfma.f32	s15, s8, s8
 459 0030 E4EEA47A 		vfma.f32	s15, s9, s9
  71:math/pprz_algebra_float.c ****                SQUARE(rm->m[3]) + SQUARE(rm->m[4]) + SQUARE(rm->m[5]) +
 460              		.loc 2 71 0
 461 0034 E5EE057A 		vfma.f32	s15, s10, s10
 462 0038 E5EEA57A 		vfma.f32	s15, s11, s11
 463 003c E6EE067A 		vfma.f32	s15, s12, s12
  72:math/pprz_algebra_float.c ****                SQUARE(rm->m[6]) + SQUARE(rm->m[7]) + SQUARE(rm->m[8]));
 464              		.loc 2 72 0
 465 0040 E6EEA67A 		vfma.f32	s15, s13, s13
  70:math/pprz_algebra_float.c ****   return sqrtf(SQUARE(rm->m[0]) + SQUARE(rm->m[1]) + SQUARE(rm->m[2]) +
 466              		.loc 2 70 0
 467 0044 E7EE077A 		vfma.f32	s15, s14, s14
 468 0048 17EE900A 		fmrs	r0, s15
 469              	.LVL26:
 470 004c FFF7FEBF 		b	sqrtf
 471              	.LVL27:
 472              		.cfi_endproc
 473              	.LFE37:
 475              		.section	.text.float_rmat_comp,"ax",%progbits
 476              		.align	1
 477              		.global	float_rmat_comp
 478              		.thumb
 479              		.thumb_func
 481              	float_rmat_comp:
 482              	.LFB38:
  79:math/pprz_algebra_float.c **** {
 483              		.loc 2 79 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 488              	.LVL28:
  80:math/pprz_algebra_float.c ****   m_a2c->m[0] = m_b2c->m[0] * m_a2b->m[0] + m_b2c->m[1] * m_a2b->m[3] + m_b2c->m[2] * m_a2b->m[6];
 489              		.loc 2 80 0
 490 0000 D2ED017A 		flds	s15, [r2, #4]
 491 0004 D1ED036A 		flds	s13, [r1, #12]
 492 0008 D2ED005A 		flds	s11, [r2]
 493 000c 91ED006A 		flds	s12, [r1]
 494 0010 92ED024A 		flds	s8, [r2, #8]
 495 0014 D1ED064A 		flds	s9, [r1, #24]
 496 0018 27EEA67A 		fmuls	s14, s15, s13
 497 001c A5EE867A 		vfma.f32	s14, s11, s12
 498 0020 A4EE247A 		vfma.f32	s14, s8, s9
 499 0024 80ED007A 		fsts	s14, [r0]
  81:math/pprz_algebra_float.c ****   m_a2c->m[1] = m_b2c->m[0] * m_a2b->m[1] + m_b2c->m[1] * m_a2b->m[4] + m_b2c->m[2] * m_a2b->m[7];
 500              		.loc 2 81 0
 501 0028 91ED047A 		flds	s14, [r1, #16]
 502 002c D2ED003A 		flds	s7, [r2]
 503 0030 91ED016A 		flds	s12, [r1, #4]
 504 0034 91ED075A 		flds	s10, [r1, #28]
 505 0038 67EE877A 		fmuls	s15, s15, s14
 506 003c E3EE867A 		vfma.f32	s15, s7, s12
 507 0040 E4EE057A 		vfma.f32	s15, s8, s10
 508 0044 C0ED017A 		fsts	s15, [r0, #4]
  82:math/pprz_algebra_float.c ****   m_a2c->m[2] = m_b2c->m[0] * m_a2b->m[2] + m_b2c->m[1] * m_a2b->m[5] + m_b2c->m[2] * m_a2b->m[8];
 509              		.loc 2 82 0
 510 0048 D1ED057A 		flds	s15, [r1, #20]
 511 004c 92ED016A 		flds	s12, [r2, #4]
 512 0050 91ED023A 		flds	s6, [r1, #8]
 513 0054 D1ED085A 		flds	s11, [r1, #32]
 514 0058 27EE866A 		fmuls	s12, s15, s12
 515 005c A3EE836A 		vfma.f32	s12, s7, s6
 516 0060 A4EE256A 		vfma.f32	s12, s8, s11
 517 0064 80ED026A 		fsts	s12, [r0, #8]
  83:math/pprz_algebra_float.c ****   m_a2c->m[3] = m_b2c->m[3] * m_a2b->m[0] + m_b2c->m[4] * m_a2b->m[3] + m_b2c->m[5] * m_a2b->m[6];
 518              		.loc 2 83 0
 519 0068 92ED044A 		flds	s8, [r2, #16]
 520 006c 91ED003A 		flds	s6, [r1]
 521 0070 D2ED033A 		flds	s7, [r2, #12]
 522 0074 92ED056A 		flds	s12, [r2, #20]
 523 0078 64EE266A 		fmuls	s13, s8, s13
  84:math/pprz_algebra_float.c ****   m_a2c->m[4] = m_b2c->m[3] * m_a2b->m[1] + m_b2c->m[4] * m_a2b->m[4] + m_b2c->m[5] * m_a2b->m[7];
 524              		.loc 2 84 0
 525 007c 24EE077A 		fmuls	s14, s8, s14
  83:math/pprz_algebra_float.c ****   m_a2c->m[3] = m_b2c->m[3] * m_a2b->m[0] + m_b2c->m[4] * m_a2b->m[3] + m_b2c->m[5] * m_a2b->m[6];
 526              		.loc 2 83 0
 527 0080 E3EE836A 		vfma.f32	s13, s7, s6
 528 0084 E6EE246A 		vfma.f32	s13, s12, s9
 529 0088 C0ED036A 		fsts	s13, [r0, #12]
  84:math/pprz_algebra_float.c ****   m_a2c->m[4] = m_b2c->m[3] * m_a2b->m[1] + m_b2c->m[4] * m_a2b->m[4] + m_b2c->m[5] * m_a2b->m[7];
 530              		.loc 2 84 0
 531 008c D2ED036A 		flds	s13, [r2, #12]
 532 0090 D1ED013A 		flds	s7, [r1, #4]
 533 0094 A6EEA37A 		vfma.f32	s14, s13, s7
 534 0098 A6EE057A 		vfma.f32	s14, s12, s10
 535 009c 80ED047A 		fsts	s14, [r0, #16]
  85:math/pprz_algebra_float.c ****   m_a2c->m[5] = m_b2c->m[3] * m_a2b->m[2] + m_b2c->m[4] * m_a2b->m[5] + m_b2c->m[5] * m_a2b->m[8];
 536              		.loc 2 85 0
 537 00a0 92ED047A 		flds	s14, [r2, #16]
 538 00a4 91ED024A 		flds	s8, [r1, #8]
 539 00a8 67EE877A 		fmuls	s15, s15, s14
 540 00ac E6EE847A 		vfma.f32	s15, s13, s8
 541 00b0 E6EE257A 		vfma.f32	s15, s12, s11
 542 00b4 C0ED057A 		fsts	s15, [r0, #20]
  86:math/pprz_algebra_float.c ****   m_a2c->m[6] = m_b2c->m[6] * m_a2b->m[0] + m_b2c->m[7] * m_a2b->m[3] + m_b2c->m[8] * m_a2b->m[6];
 543              		.loc 2 86 0
 544 00b8 D2ED077A 		flds	s15, [r2, #28]
 545 00bc 91ED037A 		flds	s14, [r1, #12]
 546 00c0 92ED066A 		flds	s12, [r2, #24]
 547 00c4 D2ED086A 		flds	s13, [r2, #32]
 548 00c8 27EE877A 		fmuls	s14, s15, s14
 549 00cc A6EE037A 		vfma.f32	s14, s12, s6
 550 00d0 A6EEA47A 		vfma.f32	s14, s13, s9
 551 00d4 80ED067A 		fsts	s14, [r0, #24]
  87:math/pprz_algebra_float.c ****   m_a2c->m[7] = m_b2c->m[6] * m_a2b->m[1] + m_b2c->m[7] * m_a2b->m[4] + m_b2c->m[8] * m_a2b->m[7];
 552              		.loc 2 87 0
 553 00d8 91ED046A 		flds	s12, [r1, #16]
 554 00dc 92ED067A 		flds	s14, [r2, #24]
 555 00e0 67EE867A 		fmuls	s15, s15, s12
 556 00e4 E7EE237A 		vfma.f32	s15, s14, s7
 557 00e8 E6EE857A 		vfma.f32	s15, s13, s10
 558 00ec C0ED077A 		fsts	s15, [r0, #28]
  88:math/pprz_algebra_float.c ****   m_a2c->m[8] = m_b2c->m[6] * m_a2b->m[2] + m_b2c->m[7] * m_a2b->m[5] + m_b2c->m[8] * m_a2b->m[8];
 559              		.loc 2 88 0
 560 00f0 92ED076A 		flds	s12, [r2, #28]
 561 00f4 D1ED057A 		flds	s15, [r1, #20]
 562 00f8 66EE277A 		fmuls	s15, s12, s15
 563 00fc E7EE047A 		vfma.f32	s15, s14, s8
 564 0100 E6EEA57A 		vfma.f32	s15, s13, s11
 565 0104 C0ED087A 		fsts	s15, [r0, #32]
 566 0108 7047     		bx	lr
 567              		.cfi_endproc
 568              	.LFE38:
 570              		.section	.text.float_rmat_comp_inv,"ax",%progbits
 571              		.align	1
 572              		.global	float_rmat_comp_inv
 573              		.thumb
 574              		.thumb_func
 576              	float_rmat_comp_inv:
 577              	.LFB39:
  95:math/pprz_algebra_float.c **** {
 578              		.loc 2 95 0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		@ link register save eliminated.
 583              	.LVL29:
  96:math/pprz_algebra_float.c ****   m_a2b->m[0] = m_b2c->m[0] * m_a2c->m[0] + m_b2c->m[3] * m_a2c->m[3] + m_b2c->m[6] * m_a2c->m[6];
 584              		.loc 2 96 0
 585 0000 92ED036A 		flds	s12, [r2, #12]
 586 0004 D1ED036A 		flds	s13, [r1, #12]
 587 0008 D2ED005A 		flds	s11, [r2]
 588 000c 91ED007A 		flds	s14, [r1]
 589 0010 92ED064A 		flds	s8, [r2, #24]
 590 0014 D1ED064A 		flds	s9, [r1, #24]
 591 0018 66EE267A 		fmuls	s15, s12, s13
 592 001c E5EE877A 		vfma.f32	s15, s11, s14
 593 0020 E4EE247A 		vfma.f32	s15, s8, s9
 594 0024 C0ED007A 		fsts	s15, [r0]
  97:math/pprz_algebra_float.c ****   m_a2b->m[1] = m_b2c->m[0] * m_a2c->m[1] + m_b2c->m[3] * m_a2c->m[4] + m_b2c->m[6] * m_a2c->m[7];
 595              		.loc 2 97 0
 596 0028 91ED047A 		flds	s14, [r1, #16]
 597 002c D2ED003A 		flds	s7, [r2]
 598 0030 D1ED015A 		flds	s11, [r1, #4]
 599 0034 91ED075A 		flds	s10, [r1, #28]
 600 0038 66EE077A 		fmuls	s15, s12, s14
 601 003c E3EEA57A 		vfma.f32	s15, s7, s11
 602 0040 E4EE057A 		vfma.f32	s15, s8, s10
 603 0044 C0ED017A 		fsts	s15, [r0, #4]
  98:math/pprz_algebra_float.c ****   m_a2b->m[2] = m_b2c->m[0] * m_a2c->m[2] + m_b2c->m[3] * m_a2c->m[5] + m_b2c->m[6] * m_a2c->m[8];
 604              		.loc 2 98 0
 605 0048 D1ED057A 		flds	s15, [r1, #20]
 606 004c 91ED023A 		flds	s6, [r1, #8]
 607 0050 D1ED085A 		flds	s11, [r1, #32]
 608 0054 26EE276A 		fmuls	s12, s12, s15
 609 0058 A3EE836A 		vfma.f32	s12, s7, s6
 610 005c A4EE256A 		vfma.f32	s12, s8, s11
 611 0060 80ED026A 		fsts	s12, [r0, #8]
  99:math/pprz_algebra_float.c ****   m_a2b->m[3] = m_b2c->m[1] * m_a2c->m[0] + m_b2c->m[4] * m_a2c->m[3] + m_b2c->m[7] * m_a2c->m[6];
 612              		.loc 2 99 0
 613 0064 D2ED043A 		flds	s7, [r2, #16]
 614 0068 92ED014A 		flds	s8, [r2, #4]
 615 006c D1ED002A 		flds	s5, [r1]
 616 0070 92ED076A 		flds	s12, [r2, #28]
 617 0074 63EEA66A 		fmuls	s13, s7, s13
 100:math/pprz_algebra_float.c ****   m_a2b->m[4] = m_b2c->m[1] * m_a2c->m[1] + m_b2c->m[4] * m_a2c->m[4] + m_b2c->m[7] * m_a2c->m[7];
 618              		.loc 2 100 0
 619 0078 23EE877A 		fmuls	s14, s7, s14
  99:math/pprz_algebra_float.c ****   m_a2b->m[3] = m_b2c->m[1] * m_a2c->m[0] + m_b2c->m[4] * m_a2c->m[3] + m_b2c->m[7] * m_a2c->m[6];
 620              		.loc 2 99 0
 621 007c E4EE226A 		vfma.f32	s13, s8, s5
 622 0080 E6EE246A 		vfma.f32	s13, s12, s9
 623 0084 C0ED036A 		fsts	s13, [r0, #12]
 100:math/pprz_algebra_float.c ****   m_a2b->m[4] = m_b2c->m[1] * m_a2c->m[1] + m_b2c->m[4] * m_a2c->m[4] + m_b2c->m[7] * m_a2c->m[7];
 624              		.loc 2 100 0
 625 0088 91ED013A 		flds	s6, [r1, #4]
 626 008c A4EE037A 		vfma.f32	s14, s8, s6
 627 0090 A6EE057A 		vfma.f32	s14, s12, s10
 628 0094 80ED047A 		fsts	s14, [r0, #16]
 101:math/pprz_algebra_float.c ****   m_a2b->m[5] = m_b2c->m[1] * m_a2c->m[2] + m_b2c->m[4] * m_a2c->m[5] + m_b2c->m[7] * m_a2c->m[8];
 629              		.loc 2 101 0
 630 0098 92ED047A 		flds	s14, [r2, #16]
 631 009c D1ED023A 		flds	s7, [r1, #8]
 632 00a0 67EE877A 		fmuls	s15, s15, s14
 633 00a4 E4EE237A 		vfma.f32	s15, s8, s7
 634 00a8 E6EE257A 		vfma.f32	s15, s12, s11
 635 00ac C0ED057A 		fsts	s15, [r0, #20]
 102:math/pprz_algebra_float.c ****   m_a2b->m[6] = m_b2c->m[2] * m_a2c->m[0] + m_b2c->m[5] * m_a2c->m[3] + m_b2c->m[8] * m_a2c->m[6];
 636              		.loc 2 102 0
 637 00b0 D2ED057A 		flds	s15, [r2, #20]
 638 00b4 91ED037A 		flds	s14, [r1, #12]
 639 00b8 92ED026A 		flds	s12, [r2, #8]
 640 00bc D2ED086A 		flds	s13, [r2, #32]
 641 00c0 27EE877A 		fmuls	s14, s15, s14
 642 00c4 A6EE227A 		vfma.f32	s14, s12, s5
 643 00c8 A6EEA47A 		vfma.f32	s14, s13, s9
 644 00cc 80ED067A 		fsts	s14, [r0, #24]
 103:math/pprz_algebra_float.c ****   m_a2b->m[7] = m_b2c->m[2] * m_a2c->m[1] + m_b2c->m[5] * m_a2c->m[4] + m_b2c->m[8] * m_a2c->m[7];
 645              		.loc 2 103 0
 646 00d0 91ED047A 		flds	s14, [r1, #16]
 647 00d4 27EE877A 		fmuls	s14, s15, s14
 648 00d8 A6EE037A 		vfma.f32	s14, s12, s6
 649 00dc A6EE857A 		vfma.f32	s14, s13, s10
 650 00e0 80ED077A 		fsts	s14, [r0, #28]
 104:math/pprz_algebra_float.c ****   m_a2b->m[8] = m_b2c->m[2] * m_a2c->m[2] + m_b2c->m[5] * m_a2c->m[5] + m_b2c->m[8] * m_a2c->m[8];
 651              		.loc 2 104 0
 652 00e4 91ED057A 		flds	s14, [r1, #20]
 653 00e8 67EE877A 		fmuls	s15, s15, s14
 654 00ec E6EE237A 		vfma.f32	s15, s12, s7
 655 00f0 E6EEA57A 		vfma.f32	s15, s13, s11
 656 00f4 C0ED087A 		fsts	s15, [r0, #32]
 657 00f8 7047     		bx	lr
 658              		.cfi_endproc
 659              	.LFE39:
 661              		.section	.text.float_rmat_vmult,"ax",%progbits
 662              		.align	1
 663              		.global	float_rmat_vmult
 664              		.thumb
 665              		.thumb_func
 667              	float_rmat_vmult:
 668              	.LFB40:
 111:math/pprz_algebra_float.c **** {
 669              		.loc 2 111 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674              	.LVL30:
 112:math/pprz_algebra_float.c ****   vb->x = m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z;
 675              		.loc 2 112 0
 676 0000 D2ED017A 		flds	s15, [r2, #4]
 677 0004 91ED017A 		flds	s14, [r1, #4]
 678 0008 92ED006A 		flds	s12, [r2]
 679 000c D1ED005A 		flds	s11, [r1]
 680 0010 D2ED026A 		flds	s13, [r2, #8]
 681 0014 27EE877A 		fmuls	s14, s15, s14
 682 0018 A5EE867A 		vfma.f32	s14, s11, s12
 683 001c 91ED026A 		flds	s12, [r1, #8]
 684 0020 A6EE267A 		vfma.f32	s14, s12, s13
 113:math/pprz_algebra_float.c ****   vb->y = m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z;
 685              		.loc 2 113 0
 686 0024 91ED046A 		flds	s12, [r1, #16]
 112:math/pprz_algebra_float.c ****   vb->x = m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z;
 687              		.loc 2 112 0
 688 0028 80ED007A 		fsts	s14, [r0]
 113:math/pprz_algebra_float.c ****   vb->y = m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z;
 689              		.loc 2 113 0
 690 002c 92ED007A 		flds	s14, [r2]
 691 0030 67EE867A 		fmuls	s15, s15, s12
 692 0034 91ED036A 		flds	s12, [r1, #12]
 693 0038 E6EE077A 		vfma.f32	s15, s12, s14
 694 003c 91ED056A 		flds	s12, [r1, #20]
 695 0040 E6EE267A 		vfma.f32	s15, s12, s13
 114:math/pprz_algebra_float.c ****   vb->z = m_a2b->m[6] * va->x + m_a2b->m[7] * va->y + m_a2b->m[8] * va->z;
 696              		.loc 2 114 0
 697 0044 91ED076A 		flds	s12, [r1, #28]
 113:math/pprz_algebra_float.c ****   vb->y = m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z;
 698              		.loc 2 113 0
 699 0048 C0ED017A 		fsts	s15, [r0, #4]
 114:math/pprz_algebra_float.c ****   vb->z = m_a2b->m[6] * va->x + m_a2b->m[7] * va->y + m_a2b->m[8] * va->z;
 700              		.loc 2 114 0
 701 004c D2ED017A 		flds	s15, [r2, #4]
 702 0050 66EE277A 		fmuls	s15, s12, s15
 703 0054 91ED066A 		flds	s12, [r1, #24]
 704 0058 E6EE077A 		vfma.f32	s15, s12, s14
 705 005c 91ED087A 		flds	s14, [r1, #32]
 706 0060 E7EE267A 		vfma.f32	s15, s14, s13
 707 0064 C0ED027A 		fsts	s15, [r0, #8]
 708 0068 7047     		bx	lr
 709              		.cfi_endproc
 710              	.LFE40:
 712              		.section	.text.float_rmat_transp_vmult,"ax",%progbits
 713              		.align	1
 714              		.global	float_rmat_transp_vmult
 715              		.thumb
 716              		.thumb_func
 718              	float_rmat_transp_vmult:
 719              	.LFB41:
 121:math/pprz_algebra_float.c **** {
 720              		.loc 2 121 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 724              		@ link register save eliminated.
 725              	.LVL31:
 122:math/pprz_algebra_float.c ****   vb->x = m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z;
 726              		.loc 2 122 0
 727 0000 D2ED017A 		flds	s15, [r2, #4]
 728 0004 91ED037A 		flds	s14, [r1, #12]
 729 0008 92ED006A 		flds	s12, [r2]
 730 000c D1ED005A 		flds	s11, [r1]
 731 0010 D2ED026A 		flds	s13, [r2, #8]
 732 0014 27EE877A 		fmuls	s14, s15, s14
 733 0018 A5EE867A 		vfma.f32	s14, s11, s12
 734 001c 91ED066A 		flds	s12, [r1, #24]
 735 0020 A6EE267A 		vfma.f32	s14, s12, s13
 123:math/pprz_algebra_float.c ****   vb->y = m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z;
 736              		.loc 2 123 0
 737 0024 91ED046A 		flds	s12, [r1, #16]
 122:math/pprz_algebra_float.c ****   vb->x = m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z;
 738              		.loc 2 122 0
 739 0028 80ED007A 		fsts	s14, [r0]
 123:math/pprz_algebra_float.c ****   vb->y = m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z;
 740              		.loc 2 123 0
 741 002c 92ED007A 		flds	s14, [r2]
 742 0030 67EE867A 		fmuls	s15, s15, s12
 743 0034 91ED016A 		flds	s12, [r1, #4]
 744 0038 E6EE077A 		vfma.f32	s15, s12, s14
 745 003c 91ED076A 		flds	s12, [r1, #28]
 746 0040 E6EE267A 		vfma.f32	s15, s12, s13
 124:math/pprz_algebra_float.c ****   vb->z = m_b2a->m[2] * va->x + m_b2a->m[5] * va->y + m_b2a->m[8] * va->z;
 747              		.loc 2 124 0
 748 0044 91ED056A 		flds	s12, [r1, #20]
 123:math/pprz_algebra_float.c ****   vb->y = m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z;
 749              		.loc 2 123 0
 750 0048 C0ED017A 		fsts	s15, [r0, #4]
 124:math/pprz_algebra_float.c ****   vb->z = m_b2a->m[2] * va->x + m_b2a->m[5] * va->y + m_b2a->m[8] * va->z;
 751              		.loc 2 124 0
 752 004c D2ED017A 		flds	s15, [r2, #4]
 753 0050 66EE277A 		fmuls	s15, s12, s15
 754 0054 91ED026A 		flds	s12, [r1, #8]
 755 0058 E6EE077A 		vfma.f32	s15, s12, s14
 756 005c 91ED087A 		flds	s14, [r1, #32]
 757 0060 E7EE267A 		vfma.f32	s15, s14, s13
 758 0064 C0ED027A 		fsts	s15, [r0, #8]
 759 0068 7047     		bx	lr
 760              		.cfi_endproc
 761              	.LFE41:
 763              		.section	.text.float_rmat_ratemult,"ax",%progbits
 764              		.align	1
 765              		.global	float_rmat_ratemult
 766              		.thumb
 767              		.thumb_func
 769              	float_rmat_ratemult:
 770              	.LFB42:
 131:math/pprz_algebra_float.c **** {
 771              		.loc 2 131 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 0, uses_anonymous_args = 0
 775              		@ link register save eliminated.
 776              	.LVL32:
 132:math/pprz_algebra_float.c ****   rb->p = m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r;
 777              		.loc 2 132 0
 778 0000 D2ED017A 		flds	s15, [r2, #4]
 779 0004 91ED017A 		flds	s14, [r1, #4]
 780 0008 92ED006A 		flds	s12, [r2]
 781 000c D1ED005A 		flds	s11, [r1]
 782 0010 D2ED026A 		flds	s13, [r2, #8]
 783 0014 27EE877A 		fmuls	s14, s15, s14
 784 0018 A5EE867A 		vfma.f32	s14, s11, s12
 785 001c 91ED026A 		flds	s12, [r1, #8]
 786 0020 A6EE267A 		vfma.f32	s14, s12, s13
 133:math/pprz_algebra_float.c ****   rb->q = m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r;
 787              		.loc 2 133 0
 788 0024 91ED046A 		flds	s12, [r1, #16]
 132:math/pprz_algebra_float.c ****   rb->p = m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r;
 789              		.loc 2 132 0
 790 0028 80ED007A 		fsts	s14, [r0]
 133:math/pprz_algebra_float.c ****   rb->q = m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r;
 791              		.loc 2 133 0
 792 002c 92ED007A 		flds	s14, [r2]
 793 0030 67EE867A 		fmuls	s15, s15, s12
 794 0034 91ED036A 		flds	s12, [r1, #12]
 795 0038 E6EE077A 		vfma.f32	s15, s12, s14
 796 003c 91ED056A 		flds	s12, [r1, #20]
 797 0040 E6EE267A 		vfma.f32	s15, s12, s13
 134:math/pprz_algebra_float.c ****   rb->r = m_a2b->m[6] * ra->p + m_a2b->m[7] * ra->q + m_a2b->m[8] * ra->r;
 798              		.loc 2 134 0
 799 0044 91ED076A 		flds	s12, [r1, #28]
 133:math/pprz_algebra_float.c ****   rb->q = m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r;
 800              		.loc 2 133 0
 801 0048 C0ED017A 		fsts	s15, [r0, #4]
 134:math/pprz_algebra_float.c ****   rb->r = m_a2b->m[6] * ra->p + m_a2b->m[7] * ra->q + m_a2b->m[8] * ra->r;
 802              		.loc 2 134 0
 803 004c D2ED017A 		flds	s15, [r2, #4]
 804 0050 66EE277A 		fmuls	s15, s12, s15
 805 0054 91ED066A 		flds	s12, [r1, #24]
 806 0058 E6EE077A 		vfma.f32	s15, s12, s14
 807 005c 91ED087A 		flds	s14, [r1, #32]
 808 0060 E7EE267A 		vfma.f32	s15, s14, s13
 809 0064 C0ED027A 		fsts	s15, [r0, #8]
 810 0068 7047     		bx	lr
 811              		.cfi_endproc
 812              	.LFE42:
 814              		.section	.text.float_rmat_transp_ratemult,"ax",%progbits
 815              		.align	1
 816              		.global	float_rmat_transp_ratemult
 817              		.thumb
 818              		.thumb_func
 820              	float_rmat_transp_ratemult:
 821              	.LFB43:
 141:math/pprz_algebra_float.c **** {
 822              		.loc 2 141 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              		@ link register save eliminated.
 827              	.LVL33:
 142:math/pprz_algebra_float.c ****   rb->p = m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r;
 828              		.loc 2 142 0
 829 0000 D2ED017A 		flds	s15, [r2, #4]
 830 0004 91ED037A 		flds	s14, [r1, #12]
 831 0008 92ED006A 		flds	s12, [r2]
 832 000c D1ED005A 		flds	s11, [r1]
 833 0010 D2ED026A 		flds	s13, [r2, #8]
 834 0014 27EE877A 		fmuls	s14, s15, s14
 835 0018 A5EE867A 		vfma.f32	s14, s11, s12
 836 001c 91ED066A 		flds	s12, [r1, #24]
 837 0020 A6EE267A 		vfma.f32	s14, s12, s13
 143:math/pprz_algebra_float.c ****   rb->q = m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r;
 838              		.loc 2 143 0
 839 0024 91ED046A 		flds	s12, [r1, #16]
 142:math/pprz_algebra_float.c ****   rb->p = m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r;
 840              		.loc 2 142 0
 841 0028 80ED007A 		fsts	s14, [r0]
 143:math/pprz_algebra_float.c ****   rb->q = m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r;
 842              		.loc 2 143 0
 843 002c 92ED007A 		flds	s14, [r2]
 844 0030 67EE867A 		fmuls	s15, s15, s12
 845 0034 91ED016A 		flds	s12, [r1, #4]
 846 0038 E6EE077A 		vfma.f32	s15, s12, s14
 847 003c 91ED076A 		flds	s12, [r1, #28]
 848 0040 E6EE267A 		vfma.f32	s15, s12, s13
 144:math/pprz_algebra_float.c ****   rb->r = m_b2a->m[2] * ra->p + m_b2a->m[5] * ra->q + m_b2a->m[8] * ra->r;
 849              		.loc 2 144 0
 850 0044 91ED056A 		flds	s12, [r1, #20]
 143:math/pprz_algebra_float.c ****   rb->q = m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r;
 851              		.loc 2 143 0
 852 0048 C0ED017A 		fsts	s15, [r0, #4]
 144:math/pprz_algebra_float.c ****   rb->r = m_b2a->m[2] * ra->p + m_b2a->m[5] * ra->q + m_b2a->m[8] * ra->r;
 853              		.loc 2 144 0
 854 004c D2ED017A 		flds	s15, [r2, #4]
 855 0050 66EE277A 		fmuls	s15, s12, s15
 856 0054 91ED026A 		flds	s12, [r1, #8]
 857 0058 E6EE077A 		vfma.f32	s15, s12, s14
 858 005c 91ED087A 		flds	s14, [r1, #32]
 859 0060 E7EE267A 		vfma.f32	s15, s14, s13
 860 0064 C0ED027A 		fsts	s15, [r0, #8]
 861 0068 7047     		bx	lr
 862              		.cfi_endproc
 863              	.LFE43:
 865              		.global	__aeabi_f2d
 866              		.global	__aeabi_dsub
 867              		.global	__aeabi_dmul
 868              		.global	__aeabi_dadd
 869              		.global	__aeabi_d2f
 870              		.section	.text.float_rmat_of_axis_angle,"ax",%progbits
 871              		.align	1
 872              		.global	float_rmat_of_axis_angle
 873              		.thumb
 874              		.thumb_func
 876              	float_rmat_of_axis_angle:
 877              	.LFB44:
 150:math/pprz_algebra_float.c **** {
 878              		.loc 2 150 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882              	.LVL34:
 883 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 884              		.cfi_def_cfa_offset 24
 885              		.cfi_offset 4, -24
 886              		.cfi_offset 5, -20
 887              		.cfi_offset 6, -16
 888              		.cfi_offset 7, -12
 889              		.cfi_offset 8, -8
 890              		.cfi_offset 14, -4
 891 0004 8046     		mov	r8, r0
 892 0006 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 893              		.cfi_def_cfa_offset 48
 894              		.cfi_offset 80, -48
 895              		.cfi_offset 82, -40
 896              		.cfi_offset 84, -32
 157:math/pprz_algebra_float.c ****   const float can  = cosf(angle);
 897              		.loc 2 157 0
 898 000a 1046     		mov	r0, r2	@ float
 899              	.LVL35:
 151:math/pprz_algebra_float.c ****   const float ux2  = uv->x * uv->x;
 900              		.loc 2 151 0
 901 000c D1ED008A 		flds	s17, [r1]
 902              	.LVL36:
 152:math/pprz_algebra_float.c ****   const float uy2  = uv->y * uv->y;
 903              		.loc 2 152 0
 904 0010 91ED019A 		flds	s18, [r1, #4]
 905              	.LVL37:
 153:math/pprz_algebra_float.c ****   const float uz2  = uv->z * uv->z;
 906              		.loc 2 153 0
 907 0014 91ED028A 		flds	s16, [r1, #8]
 908              	.LVL38:
 150:math/pprz_algebra_float.c **** {
 909              		.loc 2 150 0
 910 0018 1446     		mov	r4, r2	@ float
 157:math/pprz_algebra_float.c ****   const float can  = cosf(angle);
 911              		.loc 2 157 0
 912 001a FFF7FEFF 		bl	cosf
 913              	.LVL39:
 914 001e 09EE900A 		fmsr	s19, r0
 915              	.LVL40:
 158:math/pprz_algebra_float.c ****   const float san  = sinf(angle);
 916              		.loc 2 158 0
 917 0022 2046     		mov	r0, r4	@ float
 918              	.LVL41:
 919 0024 FFF7FEFF 		bl	sinf
 920              	.LVL42:
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ux2 + (1. - ux2) * can;
 921              		.loc 2 161 0
 922 0028 68EEA87A 		fmuls	s15, s17, s17
 923              	.LVL43:
 158:math/pprz_algebra_float.c ****   const float san  = sinf(angle);
 924              		.loc 2 158 0
 925 002c 0AEE900A 		fmsr	s21, r0
 926              	.LVL44:
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ux2 + (1. - ux2) * can;
 927              		.loc 2 161 0
 928 0030 17EE900A 		fmrs	r0, s15
 929              	.LVL45:
 930 0034 FFF7FEFF 		bl	__aeabi_f2d
 931              	.LVL46:
 932 0038 0646     		mov	r6, r0
 933 003a 19EE900A 		fmrs	r0, s19
 934 003e 0F46     		mov	r7, r1
 935 0040 FFF7FEFF 		bl	__aeabi_f2d
 936              	.LVL47:
 937 0044 3246     		mov	r2, r6
 938 0046 0446     		mov	r4, r0
 939              	.LVL48:
 940 0048 0D46     		mov	r5, r1
 941 004a 3B46     		mov	r3, r7
 942 004c 0020     		movs	r0, #0
 943 004e 3749     		ldr	r1, .L42
 944 0050 FFF7FEFF 		bl	__aeabi_dsub
 945              	.LVL49:
 946 0054 2246     		mov	r2, r4
 947 0056 2B46     		mov	r3, r5
 948 0058 FFF7FEFF 		bl	__aeabi_dmul
 949              	.LVL50:
 950 005c 0246     		mov	r2, r0
 951 005e 0B46     		mov	r3, r1
 952 0060 3046     		mov	r0, r6
 953 0062 3946     		mov	r1, r7
 954 0064 FFF7FEFF 		bl	__aeabi_dadd
 955              	.LVL51:
 159:math/pprz_algebra_float.c ****   const float one_m_can = (1. - can);
 956              		.loc 2 159 0
 957 0068 B7EE00AA 		fconsts	s20, #112
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ux2 + (1. - ux2) * can;
 958              		.loc 2 161 0
 959 006c FFF7FEFF 		bl	__aeabi_d2f
 960              	.LVL52:
 159:math/pprz_algebra_float.c ****   const float one_m_can = (1. - can);
 961              		.loc 2 159 0
 962 0070 3AEE69AA 		fsubs	s20, s20, s19
 963              	.LVL53:
 154:math/pprz_algebra_float.c ****   const float uxuy = uv->x * uv->y;
 964              		.loc 2 154 0
 965 0074 28EE897A 		fmuls	s14, s17, s18
 966              	.LVL54:
 162:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = uxuy * one_m_can + uv->z * san;
 967              		.loc 2 162 0
 968 0078 68EE2A7A 		fmuls	s15, s16, s21
 969 007c 6AEEC99A 		fnmuls	s19, s21, s18
 970              	.LVL55:
 971 0080 E7EE0A7A 		vfma.f32	s15, s14, s20
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ux2 + (1. - ux2) * can;
 972              		.loc 2 161 0
 973 0084 C8F80000 		str	r0, [r8]	@ float
 156:math/pprz_algebra_float.c ****   const float uxuz = uv->x * uv->z;
 974              		.loc 2 156 0
 975 0088 28EE887A 		fmuls	s14, s17, s16
 976              	.LVL56:
 162:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = uxuy * one_m_can + uv->z * san;
 977              		.loc 2 162 0
 978 008c C8ED017A 		fsts	s15, [r8, #4]
 163:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = uxuz * one_m_can - uv->y * san;
 979              		.loc 2 163 0
 980 0090 E7EE0A9A 		vfma.f32	s19, s14, s20
 164:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = RMAT_ELMT(*rm, 0, 1);
 981              		.loc 2 164 0
 982 0094 C8ED037A 		fsts	s15, [r8, #12]
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = uy2 + (1. - uy2) * can;
 983              		.loc 2 165 0
 984 0098 69EE097A 		fmuls	s15, s18, s18
 985              	.LVL57:
 163:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = uxuz * one_m_can - uv->y * san;
 986              		.loc 2 163 0
 987 009c C8ED029A 		fsts	s19, [r8, #8]
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = uy2 + (1. - uy2) * can;
 988              		.loc 2 165 0
 989 00a0 17EE900A 		fmrs	r0, s15
 990 00a4 FFF7FEFF 		bl	__aeabi_f2d
 991              	.LVL58:
 992 00a8 0646     		mov	r6, r0
 993 00aa 0F46     		mov	r7, r1
 994 00ac 3246     		mov	r2, r6
 995 00ae 3B46     		mov	r3, r7
 996 00b0 0020     		movs	r0, #0
 997 00b2 1E49     		ldr	r1, .L42
 998 00b4 FFF7FEFF 		bl	__aeabi_dsub
 999              	.LVL59:
 1000 00b8 2246     		mov	r2, r4
 1001 00ba 2B46     		mov	r3, r5
 1002 00bc FFF7FEFF 		bl	__aeabi_dmul
 1003              	.LVL60:
 155:math/pprz_algebra_float.c ****   const float uyuz = uv->y * uv->z;
 1004              		.loc 2 155 0
 1005 00c0 29EE089A 		fmuls	s18, s18, s16
 1006              	.LVL61:
 166:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 1007              		.loc 2 166 0
 1008 00c4 68EEAA8A 		fmuls	s17, s17, s21
 1009              	.LVL62:
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = uy2 + (1. - uy2) * can;
 1010              		.loc 2 165 0
 1011 00c8 0246     		mov	r2, r0
 1012 00ca 0B46     		mov	r3, r1
 1013 00cc 3046     		mov	r0, r6
 1014 00ce 3946     		mov	r1, r7
 1015 00d0 FFF7FEFF 		bl	__aeabi_dadd
 1016              	.LVL63:
 166:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 1017              		.loc 2 166 0
 1018 00d4 E9EE0A8A 		vfma.f32	s17, s18, s20
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = uy2 + (1. - uy2) * can;
 1019              		.loc 2 165 0
 1020 00d8 FFF7FEFF 		bl	__aeabi_d2f
 1021              	.LVL64:
 169:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = uz2 + (1. - uz2) * can;
 1022              		.loc 2 169 0
 1023 00dc 28EE088A 		fmuls	s16, s16, s16
 1024              	.LVL65:
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = uy2 + (1. - uy2) * can;
 1025              		.loc 2 165 0
 1026 00e0 C8F81000 		str	r0, [r8, #16]	@ float
 166:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 1027              		.loc 2 166 0
 1028 00e4 C8ED058A 		fsts	s17, [r8, #20]
 167:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = RMAT_ELMT(*rm, 0, 2);
 1029              		.loc 2 167 0
 1030 00e8 C8ED069A 		fsts	s19, [r8, #24]
 168:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = RMAT_ELMT(*rm, 1, 2);
 1031              		.loc 2 168 0
 1032 00ec C8ED078A 		fsts	s17, [r8, #28]
 169:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = uz2 + (1. - uz2) * can;
 1033              		.loc 2 169 0
 1034 00f0 18EE100A 		fmrs	r0, s16
 1035 00f4 FFF7FEFF 		bl	__aeabi_f2d
 1036              	.LVL66:
 1037 00f8 0646     		mov	r6, r0
 1038 00fa 0F46     		mov	r7, r1
 1039 00fc 3246     		mov	r2, r6
 1040 00fe 3B46     		mov	r3, r7
 1041 0100 0020     		movs	r0, #0
 1042 0102 0A49     		ldr	r1, .L42
 1043 0104 FFF7FEFF 		bl	__aeabi_dsub
 1044              	.LVL67:
 1045 0108 2246     		mov	r2, r4
 1046 010a 2B46     		mov	r3, r5
 1047 010c FFF7FEFF 		bl	__aeabi_dmul
 1048              	.LVL68:
 1049 0110 0246     		mov	r2, r0
 1050 0112 0B46     		mov	r3, r1
 1051 0114 3046     		mov	r0, r6
 1052 0116 3946     		mov	r1, r7
 1053 0118 FFF7FEFF 		bl	__aeabi_dadd
 1054              	.LVL69:
 1055 011c FFF7FEFF 		bl	__aeabi_d2f
 1056              	.LVL70:
 170:math/pprz_algebra_float.c **** }
 1057              		.loc 2 170 0
 1058 0120 BDEC068B 		fldmfdd	sp!, {d8-d10}
 1059              	.LVL71:
 169:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = uz2 + (1. - uz2) * can;
 1060              		.loc 2 169 0
 1061 0124 C8F82000 		str	r0, [r8, #32]	@ float
 170:math/pprz_algebra_float.c **** }
 1062              		.loc 2 170 0
 1063 0128 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1064              	.LVL72:
 1065              	.L43:
 1066              		.align	2
 1067              	.L42:
 1068 012c 0000F03F 		.word	1072693248
 1069              		.cfi_endproc
 1070              	.LFE44:
 1072              		.section	.text.float_rmat_of_eulers_321,"ax",%progbits
 1073              		.align	1
 1074              		.global	float_rmat_of_eulers_321
 1075              		.thumb
 1076              		.thumb_func
 1078              	float_rmat_of_eulers_321:
 1079              	.LFB45:
 175:math/pprz_algebra_float.c **** {
 1080              		.loc 2 175 0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 0
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084              	.LVL73:
 1085 0000 70B5     		push	{r4, r5, r6, lr}
 1086              		.cfi_def_cfa_offset 16
 1087              		.cfi_offset 4, -16
 1088              		.cfi_offset 5, -12
 1089              		.cfi_offset 6, -8
 1090              		.cfi_offset 14, -4
 176:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1091              		.loc 2 176 0
 1092 0002 0E68     		ldr	r6, [r1]	@ float
 175:math/pprz_algebra_float.c **** {
 1093              		.loc 2 175 0
 1094 0004 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 1095              		.cfi_def_cfa_offset 40
 1096              		.cfi_offset 80, -40
 1097              		.cfi_offset 82, -32
 1098              		.cfi_offset 84, -24
 175:math/pprz_algebra_float.c **** {
 1099              		.loc 2 175 0
 1100 0008 0446     		mov	r4, r0
 176:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1101              		.loc 2 176 0
 1102 000a 3046     		mov	r0, r6	@ float
 1103              	.LVL74:
 175:math/pprz_algebra_float.c **** {
 1104              		.loc 2 175 0
 1105 000c 0D46     		mov	r5, r1
 176:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1106              		.loc 2 176 0
 1107 000e FFF7FEFF 		bl	sinf
 1108              	.LVL75:
 1109 0012 09EE900A 		fmsr	s19, r0
 1110              	.LVL76:
 177:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1111              		.loc 2 177 0
 1112 0016 3046     		mov	r0, r6	@ float
 1113              	.LVL77:
 1114 0018 FFF7FEFF 		bl	cosf
 1115              	.LVL78:
 178:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 1116              		.loc 2 178 0
 1117 001c 6E68     		ldr	r6, [r5, #4]	@ float
 177:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1118              		.loc 2 177 0
 1119 001e 09EE100A 		fmsr	s18, r0
 1120              	.LVL79:
 178:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 1121              		.loc 2 178 0
 1122 0022 3046     		mov	r0, r6	@ float
 1123              	.LVL80:
 1124 0024 FFF7FEFF 		bl	sinf
 1125              	.LVL81:
 1126 0028 0AEE100A 		fmsr	s20, r0
 1127              	.LVL82:
 179:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 1128              		.loc 2 179 0
 1129 002c 3046     		mov	r0, r6	@ float
 1130              	.LVL83:
 1131 002e FFF7FEFF 		bl	cosf
 1132              	.LVL84:
 180:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 1133              		.loc 2 180 0
 1134 0032 AD68     		ldr	r5, [r5, #8]	@ float
 1135              	.LVL85:
 179:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 1136              		.loc 2 179 0
 1137 0034 08EE900A 		fmsr	s17, r0
 1138              	.LVL86:
 180:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 1139              		.loc 2 180 0
 1140 0038 2846     		mov	r0, r5	@ float
 1141              	.LVL87:
 1142 003a FFF7FEFF 		bl	sinf
 1143              	.LVL88:
 1144 003e 08EE100A 		fmsr	s16, r0
 1145              	.LVL89:
 181:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 1146              		.loc 2 181 0
 1147 0042 2846     		mov	r0, r5	@ float
 1148              	.LVL90:
 1149 0044 FFF7FEFF 		bl	cosf
 1150              	.LVL91:
 1151 0048 07EE900A 		fmsr	s15, r0
 1152              	.LVL92:
 183:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ctheta * cpsi;
 1153              		.loc 2 183 0
 1154 004c 28EEA77A 		fmuls	s14, s17, s15
 186:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = sphi * stheta * cpsi - cphi * spsi;
 1155              		.loc 2 186 0
 1156 0050 69EE8A6A 		fmuls	s13, s19, s20
 183:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ctheta * cpsi;
 1157              		.loc 2 183 0
 1158 0054 84ED007A 		fsts	s14, [r4]
 184:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = ctheta * spsi;
 1159              		.loc 2 184 0
 1160 0058 28EE887A 		fmuls	s14, s17, s16
 1161 005c 84ED017A 		fsts	s14, [r4, #4]
 185:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -stheta;
 1162              		.loc 2 185 0
 1163 0060 B1EE4A7A 		fnegs	s14, s20
 1164 0064 84ED027A 		fsts	s14, [r4, #8]
 1165 0068 28EE497A 		fnmuls	s14, s16, s18
 189:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = cphi * stheta * cpsi + sphi * spsi;
 1166              		.loc 2 189 0
 1167 006c 29EE0AAA 		fmuls	s20, s18, s20
 1168              	.LVL93:
 186:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = sphi * stheta * cpsi - cphi * spsi;
 1169              		.loc 2 186 0
 1170 0070 A6EEA77A 		vfma.f32	s14, s13, s15
 1171 0074 84ED037A 		fsts	s14, [r4, #12]
 187:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = sphi * stheta * spsi + cphi * cpsi;
 1172              		.loc 2 187 0
 1173 0078 29EE277A 		fmuls	s14, s18, s15
 1174 007c A6EE887A 		vfma.f32	s14, s13, s16
 1175 0080 84ED047A 		fsts	s14, [r4, #16]
 188:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = sphi * ctheta;
 1176              		.loc 2 188 0
 1177 0084 29EEA87A 		fmuls	s14, s19, s17
 191:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = cphi * ctheta;
 1178              		.loc 2 191 0
 1179 0088 69EE288A 		fmuls	s17, s18, s17
 1180              	.LVL94:
 188:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = sphi * ctheta;
 1181              		.loc 2 188 0
 1182 008c 84ED057A 		fsts	s14, [r4, #20]
 189:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = cphi * stheta * cpsi + sphi * spsi;
 1183              		.loc 2 189 0
 1184 0090 29EE887A 		fmuls	s14, s19, s16
 191:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = cphi * ctheta;
 1185              		.loc 2 191 0
 1186 0094 C4ED088A 		fsts	s17, [r4, #32]
 189:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = cphi * stheta * cpsi + sphi * spsi;
 1187              		.loc 2 189 0
 1188 0098 AAEE277A 		vfma.f32	s14, s20, s15
 1189 009c 67EEE97A 		fnmuls	s15, s15, s19
 1190 00a0 84ED067A 		fsts	s14, [r4, #24]
 190:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cphi * stheta * spsi - sphi * cpsi;
 1191              		.loc 2 190 0
 1192 00a4 EAEE087A 		vfma.f32	s15, s20, s16
 192:math/pprz_algebra_float.c **** }
 1193              		.loc 2 192 0
 1194 00a8 BDEC068B 		fldmfdd	sp!, {d8-d10}
 1195              	.LVL95:
 190:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cphi * stheta * spsi - sphi * cpsi;
 1196              		.loc 2 190 0
 1197 00ac C4ED077A 		fsts	s15, [r4, #28]
 192:math/pprz_algebra_float.c **** }
 1198              		.loc 2 192 0
 1199 00b0 70BD     		pop	{r4, r5, r6, pc}
 1200              		.cfi_endproc
 1201              	.LFE45:
 1203              		.section	.text.float_rmat_of_eulers_312,"ax",%progbits
 1204              		.align	1
 1205              		.global	float_rmat_of_eulers_312
 1206              		.thumb
 1207              		.thumb_func
 1209              	float_rmat_of_eulers_312:
 1210              	.LFB46:
 195:math/pprz_algebra_float.c **** {
 1211              		.loc 2 195 0
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 0
 1214              		@ frame_needed = 0, uses_anonymous_args = 0
 1215              	.LVL96:
 1216 0000 70B5     		push	{r4, r5, r6, lr}
 1217              		.cfi_def_cfa_offset 16
 1218              		.cfi_offset 4, -16
 1219              		.cfi_offset 5, -12
 1220              		.cfi_offset 6, -8
 1221              		.cfi_offset 14, -4
 196:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1222              		.loc 2 196 0
 1223 0002 0E68     		ldr	r6, [r1]	@ float
 195:math/pprz_algebra_float.c **** {
 1224              		.loc 2 195 0
 1225 0004 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 1226              		.cfi_def_cfa_offset 40
 1227              		.cfi_offset 80, -40
 1228              		.cfi_offset 82, -32
 1229              		.cfi_offset 84, -24
 195:math/pprz_algebra_float.c **** {
 1230              		.loc 2 195 0
 1231 0008 0446     		mov	r4, r0
 196:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1232              		.loc 2 196 0
 1233 000a 3046     		mov	r0, r6	@ float
 1234              	.LVL97:
 195:math/pprz_algebra_float.c **** {
 1235              		.loc 2 195 0
 1236 000c 0D46     		mov	r5, r1
 196:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1237              		.loc 2 196 0
 1238 000e FFF7FEFF 		bl	sinf
 1239              	.LVL98:
 1240 0012 0AEE100A 		fmsr	s20, r0
 1241              	.LVL99:
 197:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1242              		.loc 2 197 0
 1243 0016 3046     		mov	r0, r6	@ float
 1244              	.LVL100:
 1245 0018 FFF7FEFF 		bl	cosf
 1246              	.LVL101:
 198:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 1247              		.loc 2 198 0
 1248 001c 6E68     		ldr	r6, [r5, #4]	@ float
 197:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1249              		.loc 2 197 0
 1250 001e 09EE900A 		fmsr	s19, r0
 1251              	.LVL102:
 198:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 1252              		.loc 2 198 0
 1253 0022 3046     		mov	r0, r6	@ float
 1254              	.LVL103:
 1255 0024 FFF7FEFF 		bl	sinf
 1256              	.LVL104:
 1257 0028 09EE100A 		fmsr	s18, r0
 1258              	.LVL105:
 199:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 1259              		.loc 2 199 0
 1260 002c 3046     		mov	r0, r6	@ float
 1261              	.LVL106:
 1262 002e FFF7FEFF 		bl	cosf
 1263              	.LVL107:
 200:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 1264              		.loc 2 200 0
 1265 0032 AD68     		ldr	r5, [r5, #8]	@ float
 1266              	.LVL108:
 199:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 1267              		.loc 2 199 0
 1268 0034 08EE900A 		fmsr	s17, r0
 1269              	.LVL109:
 200:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 1270              		.loc 2 200 0
 1271 0038 2846     		mov	r0, r5	@ float
 1272              	.LVL110:
 1273 003a FFF7FEFF 		bl	sinf
 1274              	.LVL111:
 1275 003e 08EE100A 		fmsr	s16, r0
 1276              	.LVL112:
 201:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 1277              		.loc 2 201 0
 1278 0042 2846     		mov	r0, r5	@ float
 1279              	.LVL113:
 1280 0044 FFF7FEFF 		bl	cosf
 1281              	.LVL114:
 203:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) =  ctheta * cpsi - sphi * stheta * spsi;
 1282              		.loc 2 203 0
 1283 0048 2AEE097A 		fmuls	s14, s20, s18
 201:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 1284              		.loc 2 201 0
 1285 004c 07EE900A 		fmsr	s15, r0
 1286              	.LVL115:
 1287 0050 68EE476A 		fnmuls	s13, s16, s14
 204:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta * spsi + sphi * stheta * cpsi;
 1288              		.loc 2 204 0
 1289 0054 27EE277A 		fmuls	s14, s14, s15
 203:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) =  ctheta * cpsi - sphi * stheta * spsi;
 1290              		.loc 2 203 0
 1291 0058 E8EEA76A 		vfma.f32	s13, s17, s15
 204:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta * spsi + sphi * stheta * cpsi;
 1292              		.loc 2 204 0
 1293 005c A8EE887A 		vfma.f32	s14, s17, s16
 203:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) =  ctheta * cpsi - sphi * stheta * spsi;
 1294              		.loc 2 203 0
 1295 0060 C4ED006A 		fsts	s13, [r4]
 204:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta * spsi + sphi * stheta * cpsi;
 1296              		.loc 2 204 0
 1297 0064 84ED017A 		fsts	s14, [r4, #4]
 205:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -cphi * stheta;
 1298              		.loc 2 205 0
 1299 0068 B1EE697A 		fnegs	s14, s19
 1300 006c 67EE096A 		fmuls	s13, s14, s18
 206:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = -cphi * spsi;
 1301              		.loc 2 206 0
 1302 0070 27EE087A 		fmuls	s14, s14, s16
 208:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) =  sphi;
 1303              		.loc 2 208 0
 1304 0074 84ED05AA 		fsts	s20, [r4, #20]
 206:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = -cphi * spsi;
 1305              		.loc 2 206 0
 1306 0078 84ED037A 		fsts	s14, [r4, #12]
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta * cpsi + sphi * ctheta * spsi;
 1307              		.loc 2 209 0
 1308 007c 2AEE28AA 		fmuls	s20, s20, s17
 1309              	.LVL116:
 207:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) =  cphi * cpsi;
 1310              		.loc 2 207 0
 1311 0080 29EEA77A 		fmuls	s14, s19, s15
 211:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) =  cphi * ctheta;
 1312              		.loc 2 211 0
 1313 0084 69EEA88A 		fmuls	s17, s19, s17
 1314              	.LVL117:
 207:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) =  cphi * cpsi;
 1315              		.loc 2 207 0
 1316 0088 84ED047A 		fsts	s14, [r4, #16]
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta * cpsi + sphi * ctheta * spsi;
 1317              		.loc 2 209 0
 1318 008c 2AEE087A 		fmuls	s14, s20, s16
 211:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) =  cphi * ctheta;
 1319              		.loc 2 211 0
 1320 0090 C4ED088A 		fsts	s17, [r4, #32]
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta * cpsi + sphi * ctheta * spsi;
 1321              		.loc 2 209 0
 1322 0094 A9EE277A 		vfma.f32	s14, s18, s15
 1323 0098 67EECA7A 		fnmuls	s15, s15, s20
 205:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -cphi * stheta;
 1324              		.loc 2 205 0
 1325 009c C4ED026A 		fsts	s13, [r4, #8]
 210:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta * spsi - sphi * ctheta * cpsi;
 1326              		.loc 2 210 0
 1327 00a0 E9EE087A 		vfma.f32	s15, s18, s16
 212:math/pprz_algebra_float.c **** }
 1328              		.loc 2 212 0
 1329 00a4 BDEC068B 		fldmfdd	sp!, {d8-d10}
 1330              	.LVL118:
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta * cpsi + sphi * ctheta * spsi;
 1331              		.loc 2 209 0
 1332 00a8 84ED067A 		fsts	s14, [r4, #24]
 210:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta * spsi - sphi * ctheta * cpsi;
 1333              		.loc 2 210 0
 1334 00ac C4ED077A 		fsts	s15, [r4, #28]
 212:math/pprz_algebra_float.c **** }
 1335              		.loc 2 212 0
 1336 00b0 70BD     		pop	{r4, r5, r6, pc}
 1337              		.cfi_endproc
 1338              	.LFE46:
 1340              		.section	.text.float_rmat_of_quat,"ax",%progbits
 1341              		.align	1
 1342              		.global	float_rmat_of_quat
 1343              		.thumb
 1344              		.thumb_func
 1346              	float_rmat_of_quat:
 1347              	.LFB47:
 217:math/pprz_algebra_float.c **** {
 1348              		.loc 2 217 0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 0
 1351              		@ frame_needed = 0, uses_anonymous_args = 0
 1352              	.LVL119:
 1353 0000 38B5     		push	{r3, r4, r5, lr}
 1354              		.cfi_def_cfa_offset 16
 1355              		.cfi_offset 3, -16
 1356              		.cfi_offset 4, -12
 1357              		.cfi_offset 5, -8
 1358              		.cfi_offset 14, -4
 1359 0002 0446     		mov	r4, r0
 1360 0004 2DED048B 		fstmfdd	sp!, {d8, d9}
 1361              		.cfi_def_cfa_offset 32
 1362              		.cfi_offset 80, -32
 1363              		.cfi_offset 82, -24
 218:math/pprz_algebra_float.c ****   const float _a = M_SQRT2 * q->qi;
 1364              		.loc 2 218 0
 1365 0008 0868     		ldr	r0, [r1]	@ float
 1366              	.LVL120:
 217:math/pprz_algebra_float.c **** {
 1367              		.loc 2 217 0
 1368 000a 0D46     		mov	r5, r1
 218:math/pprz_algebra_float.c ****   const float _a = M_SQRT2 * q->qi;
 1369              		.loc 2 218 0
 1370 000c FFF7FEFF 		bl	__aeabi_f2d
 1371              	.LVL121:
 1372 0010 35A3     		adr	r3, .L47
 1373 0012 D3E90023 		ldrd	r2, [r3]
 1374 0016 FFF7FEFF 		bl	__aeabi_dmul
 1375              	.LVL122:
 1376 001a FFF7FEFF 		bl	__aeabi_d2f
 1377              	.LVL123:
 1378 001e 09EE100A 		fmsr	s18, r0
 1379              	.LVL124:
 219:math/pprz_algebra_float.c ****   const float _b = M_SQRT2 * q->qx;
 1380              		.loc 2 219 0
 1381 0022 6868     		ldr	r0, [r5, #4]	@ float
 1382              	.LVL125:
 1383 0024 FFF7FEFF 		bl	__aeabi_f2d
 1384              	.LVL126:
 1385 0028 2FA3     		adr	r3, .L47
 1386 002a D3E90023 		ldrd	r2, [r3]
 1387 002e FFF7FEFF 		bl	__aeabi_dmul
 1388              	.LVL127:
 1389 0032 FFF7FEFF 		bl	__aeabi_d2f
 1390              	.LVL128:
 1391 0036 08EE100A 		fmsr	s16, r0
 1392              	.LVL129:
 220:math/pprz_algebra_float.c ****   const float _c = M_SQRT2 * q->qy;
 1393              		.loc 2 220 0
 1394 003a A868     		ldr	r0, [r5, #8]	@ float
 1395              	.LVL130:
 1396 003c FFF7FEFF 		bl	__aeabi_f2d
 1397              	.LVL131:
 1398 0040 29A3     		adr	r3, .L47
 1399 0042 D3E90023 		ldrd	r2, [r3]
 1400 0046 FFF7FEFF 		bl	__aeabi_dmul
 1401              	.LVL132:
 1402 004a FFF7FEFF 		bl	__aeabi_d2f
 1403              	.LVL133:
 1404 004e 08EE900A 		fmsr	s17, r0
 1405              	.LVL134:
 221:math/pprz_algebra_float.c ****   const float _d = M_SQRT2 * q->qz;
 1406              		.loc 2 221 0
 1407 0052 E868     		ldr	r0, [r5, #12]	@ float
 1408              	.LVL135:
 1409 0054 FFF7FEFF 		bl	__aeabi_f2d
 1410              	.LVL136:
 1411 0058 23A3     		adr	r3, .L47
 1412 005a D3E90023 		ldrd	r2, [r3]
 1413 005e FFF7FEFF 		bl	__aeabi_dmul
 1414              	.LVL137:
 1415 0062 FFF7FEFF 		bl	__aeabi_d2f
 1416              	.LVL138:
 222:math/pprz_algebra_float.c ****   const float a2_1 = _a * _a - 1;
 1417              		.loc 2 222 0
 1418 0066 BFEE007A 		fconsts	s14, #240
 1419 006a A9EE097A 		vfma.f32	s14, s18, s18
 226:math/pprz_algebra_float.c ****   const float bc = _b * _c;
 1420              		.loc 2 226 0
 1421 006e 28EE285A 		fmuls	s10, s16, s17
 229:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = a2_1 + _b * _b;
 1422              		.loc 2 229 0
 1423 0072 F0EE476A 		fcpys	s13, s14
 1424 0076 E8EE086A 		vfma.f32	s13, s16, s16
 221:math/pprz_algebra_float.c ****   const float _d = M_SQRT2 * q->qz;
 1425              		.loc 2 221 0
 1426 007a 07EE900A 		fmsr	s15, r0
 1427              	.LVL139:
 229:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = a2_1 + _b * _b;
 1428              		.loc 2 229 0
 1429 007e C4ED006A 		fsts	s13, [r4]
 230:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = bc + ad;
 1430              		.loc 2 230 0
 1431 0082 F0EE456A 		fcpys	s13, s10
 1432 0086 E9EE276A 		vfma.f32	s13, s18, s15
 227:math/pprz_algebra_float.c ****   const float bd = _b * _d;
 1433              		.loc 2 227 0
 1434 008a 68EE275A 		fmuls	s11, s16, s15
 1435              	.LVL140:
 230:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = bc + ad;
 1436              		.loc 2 230 0
 1437 008e C4ED016A 		fsts	s13, [r4, #4]
 1438 0092 F1EE496A 		fnegs	s13, s18
 232:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = bc - ad;
 1439              		.loc 2 232 0
 1440 0096 A6EEA75A 		vfma.f32	s10, s13, s15
 1441              	.LVL141:
 228:math/pprz_algebra_float.c ****   const float cd = _c * _d;
 1442              		.loc 2 228 0
 1443 009a 28EEA76A 		fmuls	s12, s17, s15
 1444              	.LVL142:
 232:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = bc - ad;
 1445              		.loc 2 232 0
 1446 009e 84ED035A 		fsts	s10, [r4, #12]
 233:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = a2_1 + _c * _c;
 1447              		.loc 2 233 0
 1448 00a2 B0EE475A 		fcpys	s10, s14
 1449 00a6 A8EEA85A 		vfma.f32	s10, s17, s17
 231:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = bd - ac;
 1450              		.loc 2 231 0
 1451 00aa F0EE654A 		fcpys	s9, s11
 233:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = a2_1 + _c * _c;
 1452              		.loc 2 233 0
 1453 00ae 84ED045A 		fsts	s10, [r4, #16]
 234:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = cd + ab;
 1454              		.loc 2 234 0
 1455 00b2 B0EE465A 		fcpys	s10, s12
 231:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = bd - ac;
 1456              		.loc 2 231 0
 1457 00b6 E6EEA84A 		vfma.f32	s9, s13, s17
 234:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = cd + ab;
 1458              		.loc 2 234 0
 1459 00ba A9EE085A 		vfma.f32	s10, s18, s16
 235:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = bd + ac;
 1460              		.loc 2 235 0
 1461 00be E9EE285A 		vfma.f32	s11, s18, s17
 1462              	.LVL143:
 236:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cd - ab;
 1463              		.loc 2 236 0
 1464 00c2 A6EE886A 		vfma.f32	s12, s13, s16
 1465              	.LVL144:
 238:math/pprz_algebra_float.c **** }
 1466              		.loc 2 238 0
 1467 00c6 BDEC048B 		fldmfdd	sp!, {d8-d9}
 1468              	.LVL145:
 237:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = a2_1 + _d * _d;
 1469              		.loc 2 237 0
 1470 00ca A7EEA77A 		vfma.f32	s14, s15, s15
 1471              	.LVL146:
 231:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = bd - ac;
 1472              		.loc 2 231 0
 1473 00ce C4ED024A 		fsts	s9, [r4, #8]
 234:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = cd + ab;
 1474              		.loc 2 234 0
 1475 00d2 84ED055A 		fsts	s10, [r4, #20]
 235:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = bd + ac;
 1476              		.loc 2 235 0
 1477 00d6 C4ED065A 		fsts	s11, [r4, #24]
 236:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cd - ab;
 1478              		.loc 2 236 0
 1479 00da 84ED076A 		fsts	s12, [r4, #28]
 237:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = a2_1 + _d * _d;
 1480              		.loc 2 237 0
 1481 00de 84ED087A 		fsts	s14, [r4, #32]
 238:math/pprz_algebra_float.c **** }
 1482              		.loc 2 238 0
 1483 00e2 38BD     		pop	{r3, r4, r5, pc}
 1484              	.LVL147:
 1485              	.L48:
 1486 00e4 AFF30080 		.align	3
 1487              	.L47:
 1488 00e8 CD3B7F66 		.word	1719614413
 1489 00ec 9EA0F63F 		.word	1073127582
 1490              		.cfi_endproc
 1491              	.LFE47:
 1493              		.section	.text.float_rmat_integrate_fi,"ax",%progbits
 1494              		.align	1
 1495              		.global	float_rmat_integrate_fi
 1496              		.thumb
 1497              		.thumb_func
 1499              	float_rmat_integrate_fi:
 1500              	.LFB48:
 242:math/pprz_algebra_float.c **** {
 1501              		.loc 2 242 0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 72
 1504              		@ frame_needed = 0, uses_anonymous_args = 0
 1505              	.LVL148:
 1506 0000 30B5     		push	{r4, r5, lr}
 1507              		.cfi_def_cfa_offset 12
 1508              		.cfi_offset 4, -12
 1509              		.cfi_offset 5, -8
 1510              		.cfi_offset 14, -4
 1511 0002 07EE902A 		fmsr	s15, r2
 245:math/pprz_algebra_float.c ****       1.        ,  dt *omega->r, -dt *omega->q,
 1512              		.loc 2 245 0
 1513 0006 D1ED026A 		flds	s13, [r1, #8]
 1514 000a 91ED016A 		flds	s12, [r1, #4]
 1515 000e 27EEA67A 		fmuls	s14, s15, s13
 242:math/pprz_algebra_float.c **** {
 1516              		.loc 2 242 0
 1517 0012 93B0     		sub	sp, sp, #76
 1518              		.cfi_def_cfa_offset 88
 243:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 1519              		.loc 2 243 0
 1520 0014 8DED017A 		fsts	s14, [sp, #4]
 245:math/pprz_algebra_float.c ****       1.        ,  dt *omega->r, -dt *omega->q,
 1521              		.loc 2 245 0
 1522 0018 B1EE677A 		fnegs	s14, s15
 246:math/pprz_algebra_float.c ****       -dt *omega->r,  1.        ,  dt *omega->p,
 1523              		.loc 2 246 0
 1524 001c 67EE266A 		fmuls	s13, s14, s13
 245:math/pprz_algebra_float.c ****       1.        ,  dt *omega->r, -dt *omega->q,
 1525              		.loc 2 245 0
 1526 0020 67EE065A 		fmuls	s11, s14, s12
 243:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 1527              		.loc 2 243 0
 1528 0024 CDED036A 		fsts	s13, [sp, #12]
 246:math/pprz_algebra_float.c ****       -dt *omega->r,  1.        ,  dt *omega->p,
 1529              		.loc 2 246 0
 1530 0028 D1ED006A 		flds	s13, [r1]
 243:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 1531              		.loc 2 243 0
 1532 002c CDED025A 		fsts	s11, [sp, #8]
 242:math/pprz_algebra_float.c **** {
 1533              		.loc 2 242 0
 1534 0030 0546     		mov	r5, r0
 243:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 1535              		.loc 2 243 0
 1536 0032 4FF07E52 		mov	r2, #1065353216
 1537              	.LVL149:
 246:math/pprz_algebra_float.c ****       -dt *omega->r,  1.        ,  dt *omega->p,
 1538              		.loc 2 246 0
 1539 0036 67EEA65A 		fmuls	s11, s15, s13
 247:math/pprz_algebra_float.c ****       dt *omega->q, -dt *omega->p,  1.
 1540              		.loc 2 247 0
 1541 003a 27EE267A 		fmuls	s14, s14, s13
 1542 003e 67EE867A 		fmuls	s15, s15, s12
 1543              	.LVL150:
 243:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 1544              		.loc 2 243 0
 1545 0042 0092     		str	r2, [sp]	@ float
 1546 0044 0492     		str	r2, [sp, #16]	@ float
 1547 0046 0892     		str	r2, [sp, #32]	@ float
 251:math/pprz_algebra_float.c ****   FLOAT_RMAT_COMP(R_tdt, *rm, exp_omega_dt);
 1548              		.loc 2 251 0
 1549 0048 2946     		mov	r1, r5
 1550              	.LVL151:
 1551 004a 09A8     		add	r0, sp, #36
 1552              	.LVL152:
 1553 004c 6A46     		mov	r2, sp
 243:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 1554              		.loc 2 243 0
 1555 004e CDED055A 		fsts	s11, [sp, #20]
 1556 0052 CDED067A 		fsts	s15, [sp, #24]
 1557 0056 8DED077A 		fsts	s14, [sp, #28]
 252:math/pprz_algebra_float.c ****   memcpy(rm, &R_tdt, sizeof(R_tdt));
 1558              		.loc 2 252 0
 1559 005a 09AC     		add	r4, sp, #36
 251:math/pprz_algebra_float.c ****   FLOAT_RMAT_COMP(R_tdt, *rm, exp_omega_dt);
 1560              		.loc 2 251 0
 1561 005c FFF7FEFF 		bl	float_rmat_comp
 1562              	.LVL153:
 252:math/pprz_algebra_float.c ****   memcpy(rm, &R_tdt, sizeof(R_tdt));
 1563              		.loc 2 252 0
 1564 0060 2B46     		mov	r3, r5
 1565 0062 11AD     		add	r5, sp, #68
 1566              	.LVL154:
 1567              	.L50:
 1568 0064 2246     		mov	r2, r4
 1569 0066 03CA     		ldmia	r2!, {r0, r1}
 1570 0068 AA42     		cmp	r2, r5
 1571 006a 1860     		str	r0, [r3]	@ unaligned
 1572 006c 5960     		str	r1, [r3, #4]	@ unaligned
 1573 006e 1446     		mov	r4, r2
 1574 0070 03F10803 		add	r3, r3, #8
 1575 0074 F6D1     		bne	.L50
 1576 0076 1068     		ldr	r0, [r2]	@ unaligned
 1577 0078 1860     		str	r0, [r3]	@ unaligned
 253:math/pprz_algebra_float.c **** }
 1578              		.loc 2 253 0
 1579 007a 13B0     		add	sp, sp, #76
 1580              		@ sp needed
 1581 007c 30BD     		pop	{r4, r5, pc}
 1582              		.cfi_endproc
 1583              	.LFE48:
 1585              		.section	.text.float_rmat_reorthogonalize,"ax",%progbits
 1586              		.align	1
 1587              		.global	float_rmat_reorthogonalize
 1588              		.thumb
 1589              		.thumb_func
 1591              	float_rmat_reorthogonalize:
 1592              	.LFB50:
 265:math/pprz_algebra_float.c **** 
 266:math/pprz_algebra_float.c **** float float_rmat_reorthogonalize(struct FloatRMat *rm)
 267:math/pprz_algebra_float.c **** {
 1593              		.loc 2 267 0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 0
 1596              		@ frame_needed = 0, uses_anonymous_args = 0
 1597              	.LVL155:
 1598 0000 10B5     		push	{r4, lr}
 1599              		.cfi_def_cfa_offset 8
 1600              		.cfi_offset 4, -8
 1601              		.cfi_offset 14, -4
 268:math/pprz_algebra_float.c ****   const struct FloatVect3 r0 = {RMAT_ELMT(*rm, 0, 0),
 269:math/pprz_algebra_float.c ****           RMAT_ELMT(*rm, 0, 1),
 1602              		.loc 2 269 0
 1603 0002 D0ED016A 		flds	s13, [r0, #4]
 268:math/pprz_algebra_float.c ****   const struct FloatVect3 r0 = {RMAT_ELMT(*rm, 0, 0),
 1604              		.loc 2 268 0
 1605 0006 90ED006A 		flds	s12, [r0]
 1606              	.LVL156:
 270:math/pprz_algebra_float.c ****           RMAT_ELMT(*rm, 0, 2)
 1607              		.loc 2 270 0
 1608 000a 90ED027A 		flds	s14, [r0, #8]
 1609              	.LVL157:
 267:math/pprz_algebra_float.c **** {
 1610              		.loc 2 267 0
 1611 000e 2DED0A8B 		fstmfdd	sp!, {d8, d9, d10, d11, d12}
 1612              		.cfi_def_cfa_offset 48
 1613              		.cfi_offset 80, -48
 1614              		.cfi_offset 82, -40
 1615              		.cfi_offset 84, -32
 1616              		.cfi_offset 86, -24
 1617              		.cfi_offset 88, -16
 271:math/pprz_algebra_float.c ****   };
 272:math/pprz_algebra_float.c ****   const struct FloatVect3 r1 = {RMAT_ELMT(*rm, 1, 0),
 273:math/pprz_algebra_float.c ****           RMAT_ELMT(*rm, 1, 1),
 1618              		.loc 2 273 0
 1619 0012 D0ED04AA 		flds	s21, [r0, #16]
 272:math/pprz_algebra_float.c ****   const struct FloatVect3 r1 = {RMAT_ELMT(*rm, 1, 0),
 1620              		.loc 2 272 0
 1621 0016 90ED03BA 		flds	s22, [r0, #12]
 1622              	.LVL158:
 274:math/pprz_algebra_float.c ****           RMAT_ELMT(*rm, 1, 2)
 1623              		.loc 2 274 0
 1624 001a 90ED05AA 		flds	s20, [r0, #20]
 1625              	.LVL159:
 275:math/pprz_algebra_float.c ****   };
 276:math/pprz_algebra_float.c ****   float _err = -0.5 * VECT3_DOT_PRODUCT(r0, r1);
 1626              		.loc 2 276 0
 1627 001e 66EEAA7A 		fmuls	s15, s13, s21
 1628 0022 BEEE008A 		fconsts	s16, #224
 1629 0026 E6EE0B7A 		vfma.f32	s15, s12, s22
 267:math/pprz_algebra_float.c **** {
 1630              		.loc 2 267 0
 1631 002a 0446     		mov	r4, r0
 277:math/pprz_algebra_float.c ****   struct FloatVect3 r0_t;
 278:math/pprz_algebra_float.c ****   VECT3_SUM_SCALED(r0_t, r0, r1, _err);
 1632              		.loc 2 278 0
 1633 002c B0EE66CA 		fcpys	s24, s13
 276:math/pprz_algebra_float.c ****   float _err = -0.5 * VECT3_DOT_PRODUCT(r0, r1);
 1634              		.loc 2 276 0
 1635 0030 E7EE0A7A 		vfma.f32	s15, s14, s20
 1636              		.loc 2 278 0
 1637 0034 F0EE46CA 		fcpys	s25, s12
 276:math/pprz_algebra_float.c ****   float _err = -0.5 * VECT3_DOT_PRODUCT(r0, r1);
 1638              		.loc 2 276 0
 1639 0038 27EE888A 		fmuls	s16, s15, s16
 1640              	.LVL160:
 1641              		.loc 2 278 0
 1642 003c F0EE47BA 		fcpys	s23, s14
 1643 0040 A8EE2ACA 		vfma.f32	s24, s16, s21
 1644 0044 E8EE0BCA 		vfma.f32	s25, s16, s22
 1645              	.LVL161:
 279:math/pprz_algebra_float.c ****   struct FloatVect3 r1_t;
 280:math/pprz_algebra_float.c ****   VECT3_SUM_SCALED(r1_t,  r1, r0, _err);
 281:math/pprz_algebra_float.c ****   struct FloatVect3 r2_t;
 282:math/pprz_algebra_float.c ****   VECT3_CROSS_PRODUCT(r2_t, r0_t, r1_t);
 283:math/pprz_algebra_float.c ****   float s = renorm_factor(VECT3_NORM2(r0_t));
 1646              		.loc 2 283 0
 1647 0048 2CEE0C0A 		fmuls	s0, s24, s24
 278:math/pprz_algebra_float.c ****   VECT3_SUM_SCALED(r0_t, r0, r1, _err);
 1648              		.loc 2 278 0
 1649 004c E8EE0ABA 		vfma.f32	s23, s16, s20
 1650              	.LVL162:
 1651              		.loc 2 283 0
 1652 0050 ACEEAC0A 		vfma.f32	s0, s25, s25
 280:math/pprz_algebra_float.c ****   VECT3_SUM_SCALED(r1_t,  r1, r0, _err);
 1653              		.loc 2 280 0
 1654 0054 A8EE06BA 		vfma.f32	s22, s16, s12
 1655              	.LVL163:
 1656 0058 E8EE26AA 		vfma.f32	s21, s16, s13
 1657              	.LVL164:
 1658 005c A8EE07AA 		vfma.f32	s20, s16, s14
 1659              	.LVL165:
 1660              		.loc 2 283 0
 1661 0060 ABEEAB0A 		vfma.f32	s0, s23, s23
 1662 0064 FFF7FEFF 		bl	renorm_factor
 1663              	.LVL166:
 1664 0068 6AEEEB9A 		fnmuls	s19, s21, s23
 1665 006c 2AEE6C9A 		fnmuls	s18, s20, s25
 1666 0070 6BEE4C8A 		fnmuls	s17, s22, s24
 282:math/pprz_algebra_float.c ****   VECT3_CROSS_PRODUCT(r2_t, r0_t, r1_t);
 1667              		.loc 2 282 0
 1668 0074 ECEE0A9A 		vfma.f32	s19, s24, s20
 1669              	.LVL167:
 1670 0078 ABEE8B9A 		vfma.f32	s18, s23, s22
 1671              	.LVL168:
 1672 007c ECEEAA8A 		vfma.f32	s17, s25, s21
 1673              	.LVL169:
 284:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 0, r0_t, s);
 1674              		.loc 2 284 0
 1675 0080 2CEE00CA 		fmuls	s24, s24, s0
 1676              	.LVL170:
 1677 0084 6CEE80CA 		fmuls	s25, s25, s0
 1678              	.LVL171:
 1679 0088 6BEE80BA 		fmuls	s23, s23, s0
 1680              	.LVL172:
 285:math/pprz_algebra_float.c ****   s = renorm_factor(VECT3_NORM2(r1_t));
 1681              		.loc 2 285 0
 1682 008c 2AEEAA0A 		fmuls	s0, s21, s21
 1683              	.LVL173:
 284:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 0, r0_t, s);
 1684              		.loc 2 284 0
 1685 0090 C4ED00CA 		fsts	s25, [r4]
 1686              		.loc 2 285 0
 1687 0094 ABEE0B0A 		vfma.f32	s0, s22, s22
 284:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 0, r0_t, s);
 1688              		.loc 2 284 0
 1689 0098 84ED01CA 		fsts	s24, [r4, #4]
 1690 009c C4ED02BA 		fsts	s23, [r4, #8]
 1691              		.loc 2 285 0
 1692 00a0 AAEE0A0A 		vfma.f32	s0, s20, s20
 1693 00a4 FFF7FEFF 		bl	renorm_factor
 1694              	.LVL174:
 286:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 1, r1_t, s);
 1695              		.loc 2 286 0
 1696 00a8 2BEE00BA 		fmuls	s22, s22, s0
 1697              	.LVL175:
 1698 00ac 6AEE80AA 		fmuls	s21, s21, s0
 1699              	.LVL176:
 1700 00b0 2AEE00AA 		fmuls	s20, s20, s0
 1701              	.LVL177:
 287:math/pprz_algebra_float.c ****   s = renorm_factor(VECT3_NORM2(r2_t));
 1702              		.loc 2 287 0
 1703 00b4 29EE090A 		fmuls	s0, s18, s18
 1704              	.LVL178:
 286:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 1, r1_t, s);
 1705              		.loc 2 286 0
 1706 00b8 84ED03BA 		fsts	s22, [r4, #12]
 1707              		.loc 2 287 0
 1708 00bc A9EEA90A 		vfma.f32	s0, s19, s19
 286:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 1, r1_t, s);
 1709              		.loc 2 286 0
 1710 00c0 C4ED04AA 		fsts	s21, [r4, #16]
 1711 00c4 84ED05AA 		fsts	s20, [r4, #20]
 1712              		.loc 2 287 0
 1713 00c8 A8EEA80A 		vfma.f32	s0, s17, s17
 1714 00cc FFF7FEFF 		bl	renorm_factor
 1715              	.LVL179:
 288:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 2, r2_t, s);
 1716              		.loc 2 288 0
 1717 00d0 69EE809A 		fmuls	s19, s19, s0
 1718              	.LVL180:
 1719 00d4 29EE009A 		fmuls	s18, s18, s0
 1720              	.LVL181:
 1721 00d8 68EE808A 		fmuls	s17, s17, s0
 1722              	.LVL182:
 289:math/pprz_algebra_float.c **** 
 290:math/pprz_algebra_float.c ****   return _err;
 291:math/pprz_algebra_float.c **** }
 1723              		.loc 2 291 0
 1724 00dc 18EE100A 		fmrs	r0, s16
 288:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 2, r2_t, s);
 1725              		.loc 2 288 0
 1726 00e0 C4ED069A 		fsts	s19, [r4, #24]
 1727 00e4 84ED079A 		fsts	s18, [r4, #28]
 1728 00e8 C4ED088A 		fsts	s17, [r4, #32]
 1729              		.loc 2 291 0
 1730 00ec BDEC0A8B 		fldmfdd	sp!, {d8-d12}
 1731              	.LVL183:
 1732 00f0 10BD     		pop	{r4, pc}
 1733              		.cfi_endproc
 1734              	.LFE50:
 1736              		.section	.text.float_quat_comp,"ax",%progbits
 1737              		.align	1
 1738              		.global	float_quat_comp
 1739              		.thumb
 1740              		.thumb_func
 1742              	float_quat_comp:
 1743              	.LFB51:
 292:math/pprz_algebra_float.c **** 
 293:math/pprz_algebra_float.c **** 
 294:math/pprz_algebra_float.c **** /*
 295:math/pprz_algebra_float.c ****  *
 296:math/pprz_algebra_float.c ****  * Quaternion functions.
 297:math/pprz_algebra_float.c ****  *
 298:math/pprz_algebra_float.c ****  */
 299:math/pprz_algebra_float.c **** 
 300:math/pprz_algebra_float.c **** void float_quat_comp(struct FloatQuat *a2c, struct FloatQuat *a2b, struct FloatQuat *b2c)
 301:math/pprz_algebra_float.c **** {
 1744              		.loc 2 301 0
 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 0
 1747              		@ frame_needed = 0, uses_anonymous_args = 0
 1748              		@ link register save eliminated.
 1749              	.LVL184:
 302:math/pprz_algebra_float.c ****   a2c->qi = a2b->qi * b2c->qi - a2b->qx * b2c->qx - a2b->qy * b2c->qy - a2b->qz * b2c->qz;
 1750              		.loc 2 302 0
 1751 0000 D1ED017A 		flds	s15, [r1, #4]
 1752 0004 92ED013A 		flds	s6, [r2, #4]
 1753 0008 91ED005A 		flds	s10, [r1]
 1754 000c 92ED006A 		flds	s12, [r2]
 1755 0010 D1ED024A 		flds	s9, [r1, #8]
 1756 0014 92ED024A 		flds	s8, [r2, #8]
 1757 0018 D1ED035A 		flds	s11, [r1, #12]
 1758 001c D2ED036A 		flds	s13, [r2, #12]
 1759 0020 23EE677A 		fnmuls	s14, s6, s15
 1760 0024 F1EE653A 		fnegs	s7, s11
 1761 0028 A5EE067A 		vfma.f32	s14, s10, s12
 1762 002c A4EEC47A 		vfms.f32	s14, s9, s8
 1763 0030 A3EEA67A 		vfma.f32	s14, s7, s13
 1764 0034 80ED007A 		fsts	s14, [r0]
 303:math/pprz_algebra_float.c ****   a2c->qx = a2b->qi * b2c->qx + a2b->qx * b2c->qi + a2b->qy * b2c->qz - a2b->qz * b2c->qy;
 1765              		.loc 2 303 0
 1766 0038 92ED006A 		flds	s12, [r2]
 1767 003c 91ED005A 		flds	s10, [r1]
 1768 0040 67EE867A 		fmuls	s15, s15, s12
 1769 0044 E5EE037A 		vfma.f32	s15, s10, s6
 1770 0048 E4EEA67A 		vfma.f32	s15, s9, s13
 1771 004c E3EE847A 		vfma.f32	s15, s7, s8
 1772 0050 C0ED017A 		fsts	s15, [r0, #4]
 304:math/pprz_algebra_float.c ****   a2c->qy = a2b->qi * b2c->qy - a2b->qx * b2c->qz + a2b->qy * b2c->qi + a2b->qz * b2c->qx;
 1773              		.loc 2 304 0
 1774 0054 D1ED017A 		flds	s15, [r1, #4]
 1775 0058 D2ED013A 		flds	s7, [r2, #4]
 1776 005c 26EEE77A 		fnmuls	s14, s13, s15
 1777 0060 A5EE047A 		vfma.f32	s14, s10, s8
 1778 0064 A4EE867A 		vfma.f32	s14, s9, s12
 1779 0068 A5EEA37A 		vfma.f32	s14, s11, s7
 1780 006c 80ED027A 		fsts	s14, [r0, #8]
 305:math/pprz_algebra_float.c ****   a2c->qz = a2b->qi * b2c->qz + a2b->qx * b2c->qy - a2b->qy * b2c->qx + a2b->qz * b2c->qi;
 1781              		.loc 2 305 0
 1782 0070 D2ED024A 		flds	s9, [r2, #8]
 1783 0074 91ED027A 		flds	s14, [r1, #8]
 1784 0078 67EEA47A 		fmuls	s15, s15, s9
 1785 007c E5EE267A 		vfma.f32	s15, s10, s13
 1786 0080 E7EE637A 		vfms.f32	s15, s14, s7
 1787 0084 E5EE867A 		vfma.f32	s15, s11, s12
 1788 0088 C0ED037A 		fsts	s15, [r0, #12]
 1789 008c 7047     		bx	lr
 1790              		.cfi_endproc
 1791              	.LFE51:
 1793              		.section	.text.float_quat_comp_inv,"ax",%progbits
 1794              		.align	1
 1795              		.global	float_quat_comp_inv
 1796              		.thumb
 1797              		.thumb_func
 1799              	float_quat_comp_inv:
 1800              	.LFB52:
 306:math/pprz_algebra_float.c **** }
 307:math/pprz_algebra_float.c **** 
 308:math/pprz_algebra_float.c **** void float_quat_comp_inv(struct FloatQuat *a2b, struct FloatQuat *a2c, struct FloatQuat *b2c)
 309:math/pprz_algebra_float.c **** {
 1801              		.loc 2 309 0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805              		@ link register save eliminated.
 1806              	.LVL185:
 310:math/pprz_algebra_float.c ****   a2b->qi =  a2c->qi * b2c->qi + a2c->qx * b2c->qx + a2c->qy * b2c->qy + a2c->qz * b2c->qz;
 1807              		.loc 2 310 0
 1808 0000 D2ED013A 		flds	s7, [r2, #4]
 1809 0004 D1ED017A 		flds	s15, [r1, #4]
 1810 0008 91ED005A 		flds	s10, [r1]
 1811 000c D2ED005A 		flds	s11, [r2]
 1812 0010 D1ED024A 		flds	s9, [r1, #8]
 1813 0014 92ED024A 		flds	s8, [r2, #8]
 1814 0018 D1ED036A 		flds	s13, [r1, #12]
 1815 001c 92ED036A 		flds	s12, [r2, #12]
 1816 0020 27EEA37A 		fmuls	s14, s15, s7
 1817 0024 A5EE257A 		vfma.f32	s14, s10, s11
 1818 0028 A4EE847A 		vfma.f32	s14, s9, s8
 1819 002c A6EE867A 		vfma.f32	s14, s13, s12
 1820 0030 80ED007A 		fsts	s14, [r0]
 311:math/pprz_algebra_float.c ****   a2b->qx = -a2c->qi * b2c->qx + a2c->qx * b2c->qi - a2c->qy * b2c->qz + a2c->qz * b2c->qy;
 1821              		.loc 2 311 0
 1822 0034 D2ED005A 		flds	s11, [r2]
 1823 0038 91ED005A 		flds	s10, [r1]
 1824 003c 67EEA57A 		fmuls	s15, s15, s11
 1825 0040 B1EE455A 		fnegs	s10, s10
 1826 0044 E5EE237A 		vfma.f32	s15, s10, s7
 1827 0048 E4EEC67A 		vfms.f32	s15, s9, s12
 1828 004c E6EE847A 		vfma.f32	s15, s13, s8
 1829 0050 C0ED017A 		fsts	s15, [r0, #4]
 312:math/pprz_algebra_float.c ****   a2b->qy = -a2c->qi * b2c->qy + a2c->qx * b2c->qz + a2c->qy * b2c->qi - a2c->qz * b2c->qx;
 1830              		.loc 2 312 0
 1831 0054 D1ED017A 		flds	s15, [r1, #4]
 1832 0058 D2ED013A 		flds	s7, [r2, #4]
 1833 005c 27EE867A 		fmuls	s14, s15, s12
 1834 0060 A5EE047A 		vfma.f32	s14, s10, s8
 1835 0064 A4EEA57A 		vfma.f32	s14, s9, s11
 1836 0068 A6EEE37A 		vfms.f32	s14, s13, s7
 1837 006c 80ED027A 		fsts	s14, [r0, #8]
 313:math/pprz_algebra_float.c ****   a2b->qz = -a2c->qi * b2c->qz - a2c->qx * b2c->qy + a2c->qy * b2c->qx + a2c->qz * b2c->qi;
 1838              		.loc 2 313 0
 1839 0070 92ED027A 		flds	s14, [r2, #8]
 1840 0074 67EE677A 		fnmuls	s15, s14, s15
 1841 0078 91ED027A 		flds	s14, [r1, #8]
 1842 007c E5EE067A 		vfma.f32	s15, s10, s12
 1843 0080 E7EE237A 		vfma.f32	s15, s14, s7
 1844 0084 E6EEA57A 		vfma.f32	s15, s13, s11
 1845 0088 C0ED037A 		fsts	s15, [r0, #12]
 1846 008c 7047     		bx	lr
 1847              		.cfi_endproc
 1848              	.LFE52:
 1850              		.section	.text.float_quat_inv_comp,"ax",%progbits
 1851              		.align	1
 1852              		.global	float_quat_inv_comp
 1853              		.thumb
 1854              		.thumb_func
 1856              	float_quat_inv_comp:
 1857              	.LFB53:
 314:math/pprz_algebra_float.c **** }
 315:math/pprz_algebra_float.c **** 
 316:math/pprz_algebra_float.c **** void float_quat_inv_comp(struct FloatQuat *b2c, struct FloatQuat *a2b, struct FloatQuat *a2c)
 317:math/pprz_algebra_float.c **** {
 1858              		.loc 2 317 0
 1859              		.cfi_startproc
 1860              		@ args = 0, pretend = 0, frame = 0
 1861              		@ frame_needed = 0, uses_anonymous_args = 0
 1862              		@ link register save eliminated.
 1863              	.LVL186:
 318:math/pprz_algebra_float.c ****   b2c->qi = a2b->qi * a2c->qi + a2b->qx * a2c->qx + a2b->qy * a2c->qy + a2b->qz * a2c->qz;
 1864              		.loc 2 318 0
 1865 0000 92ED014A 		flds	s8, [r2, #4]
 1866 0004 D1ED017A 		flds	s15, [r1, #4]
 1867 0008 D1ED005A 		flds	s11, [r1]
 1868 000c 92ED006A 		flds	s12, [r2]
 1869 0010 92ED025A 		flds	s10, [r2, #8]
 1870 0014 D1ED023A 		flds	s7, [r1, #8]
 1871 0018 D2ED036A 		flds	s13, [r2, #12]
 1872 001c D1ED034A 		flds	s9, [r1, #12]
 1873 0020 27EE847A 		fmuls	s14, s15, s8
 1874 0024 A5EE867A 		vfma.f32	s14, s11, s12
 1875 0028 A3EE857A 		vfma.f32	s14, s7, s10
 1876 002c F1EE633A 		fnegs	s7, s7
 1877 0030 A4EEA67A 		vfma.f32	s14, s9, s13
 1878 0034 80ED007A 		fsts	s14, [r0]
 319:math/pprz_algebra_float.c ****   b2c->qx = a2b->qi * a2c->qx - a2b->qx * a2c->qi - a2b->qy * a2c->qz + a2b->qz * a2c->qy;
 1879              		.loc 2 319 0
 1880 0038 92ED006A 		flds	s12, [r2]
 1881 003c D1ED005A 		flds	s11, [r1]
 1882 0040 66EE677A 		fnmuls	s15, s12, s15
 1883 0044 E5EE847A 		vfma.f32	s15, s11, s8
 1884 0048 E3EEA67A 		vfma.f32	s15, s7, s13
 1885 004c E4EE857A 		vfma.f32	s15, s9, s10
 1886 0050 F1EE644A 		fnegs	s9, s9
 1887 0054 C0ED017A 		fsts	s15, [r0, #4]
 320:math/pprz_algebra_float.c ****   b2c->qy = a2b->qi * a2c->qy + a2b->qx * a2c->qz - a2b->qy * a2c->qi - a2b->qz * a2c->qx;
 1888              		.loc 2 320 0
 1889 0058 D1ED017A 		flds	s15, [r1, #4]
 1890 005c 92ED014A 		flds	s8, [r2, #4]
 1891 0060 27EEA67A 		fmuls	s14, s15, s13
 1892 0064 A5EE857A 		vfma.f32	s14, s11, s10
 1893 0068 A3EE867A 		vfma.f32	s14, s7, s12
 1894 006c A4EE847A 		vfma.f32	s14, s9, s8
 1895 0070 80ED027A 		fsts	s14, [r0, #8]
 321:math/pprz_algebra_float.c ****   b2c->qz = a2b->qi * a2c->qz - a2b->qx * a2c->qy + a2b->qy * a2c->qx - a2b->qz * a2c->qi;
 1896              		.loc 2 321 0
 1897 0074 92ED027A 		flds	s14, [r2, #8]
 1898 0078 67EE677A 		fnmuls	s15, s14, s15
 1899 007c 91ED027A 		flds	s14, [r1, #8]
 1900 0080 E5EEA67A 		vfma.f32	s15, s11, s13
 1901 0084 E7EE047A 		vfma.f32	s15, s14, s8
 1902 0088 E4EE867A 		vfma.f32	s15, s9, s12
 1903 008c C0ED037A 		fsts	s15, [r0, #12]
 1904 0090 7047     		bx	lr
 1905              		.cfi_endproc
 1906              	.LFE53:
 1908              		.section	.text.float_quat_comp_norm_shortest,"ax",%progbits
 1909              		.align	1
 1910              		.global	float_quat_comp_norm_shortest
 1911              		.thumb
 1912              		.thumb_func
 1914              	float_quat_comp_norm_shortest:
 1915              	.LFB54:
 322:math/pprz_algebra_float.c **** }
 323:math/pprz_algebra_float.c **** 
 324:math/pprz_algebra_float.c **** void float_quat_comp_norm_shortest(struct FloatQuat *a2c, struct FloatQuat *a2b, struct FloatQuat *
 325:math/pprz_algebra_float.c **** {
 1916              		.loc 2 325 0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 0
 1919              		@ frame_needed = 0, uses_anonymous_args = 0
 1920              	.LVL187:
 1921 0000 10B5     		push	{r4, lr}
 1922              		.cfi_def_cfa_offset 8
 1923              		.cfi_offset 4, -8
 1924              		.cfi_offset 14, -4
 1925              		.loc 2 325 0
 1926 0002 0446     		mov	r4, r0
 326:math/pprz_algebra_float.c ****   float_quat_comp(a2c, a2b, b2c);
 1927              		.loc 2 326 0
 1928 0004 FFF7FEFF 		bl	float_quat_comp
 1929              	.LVL188:
 327:math/pprz_algebra_float.c ****   float_quat_wrap_shortest(a2c);
 1930              		.loc 2 327 0
 1931 0008 2046     		mov	r0, r4
 1932 000a FFF7FEFF 		bl	float_quat_wrap_shortest
 1933              	.LVL189:
 328:math/pprz_algebra_float.c ****   float_quat_normalize(a2c);
 1934              		.loc 2 328 0
 1935 000e 2046     		mov	r0, r4
 329:math/pprz_algebra_float.c **** }
 1936              		.loc 2 329 0
 1937 0010 BDE81040 		pop	{r4, lr}
 1938              	.LVL190:
 328:math/pprz_algebra_float.c ****   float_quat_normalize(a2c);
 1939              		.loc 2 328 0
 1940 0014 FFF7FEBF 		b	float_quat_normalize
 1941              	.LVL191:
 1942              		.cfi_endproc
 1943              	.LFE54:
 1945              		.section	.text.float_quat_comp_inv_norm_shortest,"ax",%progbits
 1946              		.align	1
 1947              		.global	float_quat_comp_inv_norm_shortest
 1948              		.thumb
 1949              		.thumb_func
 1951              	float_quat_comp_inv_norm_shortest:
 1952              	.LFB55:
 330:math/pprz_algebra_float.c **** 
 331:math/pprz_algebra_float.c **** void float_quat_comp_inv_norm_shortest(struct FloatQuat *a2b, struct FloatQuat *a2c, struct FloatQu
 332:math/pprz_algebra_float.c **** {
 1953              		.loc 2 332 0
 1954              		.cfi_startproc
 1955              		@ args = 0, pretend = 0, frame = 0
 1956              		@ frame_needed = 0, uses_anonymous_args = 0
 1957              	.LVL192:
 1958 0000 10B5     		push	{r4, lr}
 1959              		.cfi_def_cfa_offset 8
 1960              		.cfi_offset 4, -8
 1961              		.cfi_offset 14, -4
 1962              		.loc 2 332 0
 1963 0002 0446     		mov	r4, r0
 333:math/pprz_algebra_float.c ****   float_quat_comp_inv(a2b, a2c, b2c);
 1964              		.loc 2 333 0
 1965 0004 FFF7FEFF 		bl	float_quat_comp_inv
 1966              	.LVL193:
 334:math/pprz_algebra_float.c ****   float_quat_wrap_shortest(a2b);
 1967              		.loc 2 334 0
 1968 0008 2046     		mov	r0, r4
 1969 000a FFF7FEFF 		bl	float_quat_wrap_shortest
 1970              	.LVL194:
 335:math/pprz_algebra_float.c ****   float_quat_normalize(a2b);
 1971              		.loc 2 335 0
 1972 000e 2046     		mov	r0, r4
 336:math/pprz_algebra_float.c **** }
 1973              		.loc 2 336 0
 1974 0010 BDE81040 		pop	{r4, lr}
 1975              	.LVL195:
 335:math/pprz_algebra_float.c ****   float_quat_normalize(a2b);
 1976              		.loc 2 335 0
 1977 0014 FFF7FEBF 		b	float_quat_normalize
 1978              	.LVL196:
 1979              		.cfi_endproc
 1980              	.LFE55:
 1982              		.section	.text.float_quat_inv_comp_norm_shortest,"ax",%progbits
 1983              		.align	1
 1984              		.global	float_quat_inv_comp_norm_shortest
 1985              		.thumb
 1986              		.thumb_func
 1988              	float_quat_inv_comp_norm_shortest:
 1989              	.LFB56:
 337:math/pprz_algebra_float.c **** 
 338:math/pprz_algebra_float.c **** void float_quat_inv_comp_norm_shortest(struct FloatQuat *b2c, struct FloatQuat *a2b, struct FloatQu
 339:math/pprz_algebra_float.c **** {
 1990              		.loc 2 339 0
 1991              		.cfi_startproc
 1992              		@ args = 0, pretend = 0, frame = 0
 1993              		@ frame_needed = 0, uses_anonymous_args = 0
 1994              	.LVL197:
 1995 0000 10B5     		push	{r4, lr}
 1996              		.cfi_def_cfa_offset 8
 1997              		.cfi_offset 4, -8
 1998              		.cfi_offset 14, -4
 1999              		.loc 2 339 0
 2000 0002 0446     		mov	r4, r0
 340:math/pprz_algebra_float.c ****   float_quat_inv_comp(b2c, a2b, a2c);
 2001              		.loc 2 340 0
 2002 0004 FFF7FEFF 		bl	float_quat_inv_comp
 2003              	.LVL198:
 341:math/pprz_algebra_float.c ****   float_quat_wrap_shortest(b2c);
 2004              		.loc 2 341 0
 2005 0008 2046     		mov	r0, r4
 2006 000a FFF7FEFF 		bl	float_quat_wrap_shortest
 2007              	.LVL199:
 342:math/pprz_algebra_float.c ****   float_quat_normalize(b2c);
 2008              		.loc 2 342 0
 2009 000e 2046     		mov	r0, r4
 343:math/pprz_algebra_float.c **** }
 2010              		.loc 2 343 0
 2011 0010 BDE81040 		pop	{r4, lr}
 2012              	.LVL200:
 342:math/pprz_algebra_float.c ****   float_quat_normalize(b2c);
 2013              		.loc 2 342 0
 2014 0014 FFF7FEBF 		b	float_quat_normalize
 2015              	.LVL201:
 2016              		.cfi_endproc
 2017              	.LFE56:
 2019              		.global	__aeabi_dcmplt
 2020              		.section	.text.float_quat_differential,"ax",%progbits
 2021              		.align	1
 2022              		.global	float_quat_differential
 2023              		.thumb
 2024              		.thumb_func
 2026              	float_quat_differential:
 2027              	.LFB57:
 344:math/pprz_algebra_float.c **** 
 345:math/pprz_algebra_float.c **** void float_quat_differential(struct FloatQuat *q_out, struct FloatRates *w, float dt)
 346:math/pprz_algebra_float.c **** {
 2028              		.loc 2 346 0
 2029              		.cfi_startproc
 2030              		@ args = 0, pretend = 0, frame = 0
 2031              		@ frame_needed = 0, uses_anonymous_args = 0
 2032              	.LVL202:
 347:math/pprz_algebra_float.c ****   const float v_norm = sqrtf(w->p * w->p + w->q * w->q + w->r * w->r);
 2033              		.loc 2 347 0
 2034 0000 D1ED017A 		flds	s15, [r1, #4]
 2035 0004 D1ED006A 		flds	s13, [r1]
 2036 0008 91ED027A 		flds	s14, [r1, #8]
 2037 000c 67EEA77A 		fmuls	s15, s15, s15
 346:math/pprz_algebra_float.c **** {
 2038              		.loc 2 346 0
 2039 0010 2DE9D84D 		push	{r3, r4, r6, r7, r8, r10, fp, lr}
 2040              		.cfi_def_cfa_offset 32
 2041              		.cfi_offset 3, -32
 2042              		.cfi_offset 4, -28
 2043              		.cfi_offset 6, -24
 2044              		.cfi_offset 7, -20
 2045              		.cfi_offset 8, -16
 2046              		.cfi_offset 10, -12
 2047              		.cfi_offset 11, -8
 2048              		.cfi_offset 14, -4
 2049              		.loc 2 347 0
 2050 0014 E6EEA67A 		vfma.f32	s15, s13, s13
 346:math/pprz_algebra_float.c **** {
 2051              		.loc 2 346 0
 2052 0018 8046     		mov	r8, r0
 2053 001a 0C46     		mov	r4, r1
 2054 001c 2DED028B 		fstmfdd	sp!, {d8}
 2055              		.cfi_def_cfa_offset 40
 2056              		.cfi_offset 80, -40
 2057              		.loc 2 347 0
 2058 0020 E7EE077A 		vfma.f32	s15, s14, s14
 346:math/pprz_algebra_float.c **** {
 2059              		.loc 2 346 0
 2060 0024 08EE902A 		fmsr	s17, r2
 2061              		.loc 2 347 0
 2062 0028 17EE900A 		fmrs	r0, s15
 2063              	.LVL203:
 2064 002c FFF7FEFF 		bl	sqrtf
 2065              	.LVL204:
 2066 0030 08EE100A 		fmsr	s16, r0
 2067              	.LVL205:
 348:math/pprz_algebra_float.c ****   const float c2 = cos(dt * v_norm / 2.0);
 2068              		.loc 2 348 0
 2069 0034 68EE888A 		fmuls	s17, s17, s16
 2070              	.LVL206:
 2071 0038 18EE900A 		fmrs	r0, s17
 2072              	.LVL207:
 2073 003c FFF7FEFF 		bl	__aeabi_f2d
 2074              	.LVL208:
 2075 0040 0022     		movs	r2, #0
 2076 0042 294B     		ldr	r3, .L65+8
 2077 0044 FFF7FEFF 		bl	__aeabi_dmul
 2078              	.LVL209:
 2079 0048 0646     		mov	r6, r0
 2080 004a 0F46     		mov	r7, r1
 2081 004c FFF7FEFF 		bl	cos
 2082              	.LVL210:
 2083 0050 8246     		mov	r10, r0
 2084 0052 8B46     		mov	fp, r1
 2085              	.LVL211:
 349:math/pprz_algebra_float.c ****   const float s2 = sin(dt * v_norm / 2.0);
 2086              		.loc 2 349 0
 2087 0054 3046     		mov	r0, r6
 2088 0056 3946     		mov	r1, r7
 2089 0058 FFF7FEFF 		bl	sin
 2090              	.LVL212:
 2091 005c 0646     		mov	r6, r0
 350:math/pprz_algebra_float.c ****   if (v_norm < 1e-8) {
 2092              		.loc 2 350 0
 2093 005e 18EE100A 		fmrs	r0, s16
 349:math/pprz_algebra_float.c ****   const float s2 = sin(dt * v_norm / 2.0);
 2094              		.loc 2 349 0
 2095 0062 0F46     		mov	r7, r1
 2096              	.LVL213:
 2097              		.loc 2 350 0
 2098 0064 FFF7FEFF 		bl	__aeabi_f2d
 2099              	.LVL214:
 2100 0068 1DA3     		adr	r3, .L65
 2101 006a D3E90023 		ldrd	r2, [r3]
 2102 006e FFF7FEFF 		bl	__aeabi_dcmplt
 2103              	.LVL215:
 2104 0072 58B1     		cbz	r0, .L64
 351:math/pprz_algebra_float.c ****     q_out->qi = 1;
 2105              		.loc 2 351 0
 2106 0074 4FF07E53 		mov	r3, #1065353216
 2107 0078 C8F80030 		str	r3, [r8]	@ float
 352:math/pprz_algebra_float.c ****     q_out->qx = 0;
 2108              		.loc 2 352 0
 2109 007c 0023     		movs	r3, #0
 2110 007e C8F80430 		str	r3, [r8, #4]	@ float
 353:math/pprz_algebra_float.c ****     q_out->qy = 0;
 2111              		.loc 2 353 0
 2112 0082 C8F80830 		str	r3, [r8, #8]	@ float
 354:math/pprz_algebra_float.c ****     q_out->qz = 0;
 2113              		.loc 2 354 0
 2114 0086 C8F80C30 		str	r3, [r8, #12]	@ float
 2115 008a 23E0     		b	.L59
 2116              	.L64:
 349:math/pprz_algebra_float.c ****   const float s2 = sin(dt * v_norm / 2.0);
 2117              		.loc 2 349 0
 2118 008c 3946     		mov	r1, r7
 2119 008e 3046     		mov	r0, r6
 2120 0090 FFF7FEFF 		bl	__aeabi_d2f
 2121              	.LVL216:
 348:math/pprz_algebra_float.c ****   const float c2 = cos(dt * v_norm / 2.0);
 2122              		.loc 2 348 0
 2123 0094 5946     		mov	r1, fp
 349:math/pprz_algebra_float.c ****   const float s2 = sin(dt * v_norm / 2.0);
 2124              		.loc 2 349 0
 2125 0096 08EE900A 		fmsr	s17, r0
 348:math/pprz_algebra_float.c ****   const float c2 = cos(dt * v_norm / 2.0);
 2126              		.loc 2 348 0
 2127 009a 5046     		mov	r0, r10
 2128 009c FFF7FEFF 		bl	__aeabi_d2f
 2129              	.LVL217:
 355:math/pprz_algebra_float.c ****   } else {
 356:math/pprz_algebra_float.c ****     q_out->qi = c2;
 357:math/pprz_algebra_float.c ****     q_out->qx = w->p / v_norm * s2;
 2130              		.loc 2 357 0
 2131 00a0 D4ED007A 		flds	s15, [r4]
 348:math/pprz_algebra_float.c ****   const float c2 = cos(dt * v_norm / 2.0);
 2132              		.loc 2 348 0
 2133 00a4 C8F80000 		str	r0, [r8]	@ float
 2134              		.loc 2 357 0
 2135 00a8 C7EE887A 		fdivs	s15, s15, s16
 2136 00ac 67EEA87A 		fmuls	s15, s15, s17
 2137 00b0 C8ED017A 		fsts	s15, [r8, #4]
 358:math/pprz_algebra_float.c ****     q_out->qy = w->q / v_norm * s2;
 2138              		.loc 2 358 0
 2139 00b4 D4ED017A 		flds	s15, [r4, #4]
 2140 00b8 C7EE887A 		fdivs	s15, s15, s16
 2141 00bc 67EEA87A 		fmuls	s15, s15, s17
 2142 00c0 C8ED027A 		fsts	s15, [r8, #8]
 359:math/pprz_algebra_float.c ****     q_out->qz = w->r / v_norm * s2;
 2143              		.loc 2 359 0
 2144 00c4 D4ED027A 		flds	s15, [r4, #8]
 2145 00c8 87EE888A 		fdivs	s16, s15, s16
 2146              	.LVL218:
 2147 00cc 68EE288A 		fmuls	s17, s16, s17
 2148 00d0 C8ED038A 		fsts	s17, [r8, #12]
 2149              	.L59:
 360:math/pprz_algebra_float.c ****   }
 361:math/pprz_algebra_float.c **** }
 2150              		.loc 2 361 0
 2151 00d4 BDEC028B 		fldmfdd	sp!, {d8}
 2152 00d8 BDE8D88D 		pop	{r3, r4, r6, r7, r8, r10, fp, pc}
 2153              	.LVL219:
 2154              	.L66:
 2155 00dc AFF30080 		.align	3
 2156              	.L65:
 2157 00e0 3A8C30E2 		.word	-500134854
 2158 00e4 8E79453E 		.word	1044740494
 2159 00e8 0000E03F 		.word	1071644672
 2160              		.cfi_endproc
 2161              	.LFE57:
 2163 00ec AFF30080 		.section	.text.float_quat_integrate_fi,"ax",%progbits
 2164              		.align	1
 2165              		.global	float_quat_integrate_fi
 2166              		.thumb
 2167              		.thumb_func
 2169              	float_quat_integrate_fi:
 2170              	.LFB58:
 362:math/pprz_algebra_float.c **** 
 363:math/pprz_algebra_float.c **** /** in place first order quaternion integration with constant rotational velocity */
 364:math/pprz_algebra_float.c **** void float_quat_integrate_fi(struct FloatQuat *q, struct FloatRates *omega, float dt)
 365:math/pprz_algebra_float.c **** {
 2171              		.loc 2 365 0
 2172              		.cfi_startproc
 2173              		@ args = 0, pretend = 0, frame = 0
 2174              		@ frame_needed = 0, uses_anonymous_args = 0
 2175              	.LVL220:
 2176 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2177              		.cfi_def_cfa_offset 24
 2178              		.cfi_offset 3, -24
 2179              		.cfi_offset 4, -20
 2180              		.cfi_offset 5, -16
 2181              		.cfi_offset 6, -12
 2182              		.cfi_offset 7, -8
 2183              		.cfi_offset 14, -4
 2184 0002 0646     		mov	r6, r0
 2185 0004 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 2186              		.cfi_def_cfa_offset 48
 2187              		.cfi_offset 80, -48
 2188              		.cfi_offset 82, -40
 2189              		.cfi_offset 84, -32
 366:math/pprz_algebra_float.c ****   const float qi = q->qi;
 2190              		.loc 2 366 0
 2191 0008 90ED009A 		flds	s18, [r0]
 2192              	.LVL221:
 367:math/pprz_algebra_float.c ****   const float qx = q->qx;
 2193              		.loc 2 367 0
 2194 000c D0ED019A 		flds	s19, [r0, #4]
 2195              	.LVL222:
 368:math/pprz_algebra_float.c ****   const float qy = q->qy;
 2196              		.loc 2 368 0
 2197 0010 D0ED028A 		flds	s17, [r0, #8]
 2198              	.LVL223:
 369:math/pprz_algebra_float.c ****   const float qz = q->qz;
 2199              		.loc 2 369 0
 2200 0014 90ED038A 		flds	s16, [r0, #12]
 2201              	.LVL224:
 370:math/pprz_algebra_float.c ****   const float dp = 0.5 * dt * omega->p;
 2202              		.loc 2 370 0
 2203 0018 1046     		mov	r0, r2	@ float
 2204              	.LVL225:
 365:math/pprz_algebra_float.c **** {
 2205              		.loc 2 365 0
 2206 001a 0F46     		mov	r7, r1
 2207              		.loc 2 370 0
 2208 001c FFF7FEFF 		bl	__aeabi_f2d
 2209              	.LVL226:
 2210 0020 0022     		movs	r2, #0
 2211 0022 2D4B     		ldr	r3, .L68
 2212 0024 FFF7FEFF 		bl	__aeabi_dmul
 2213              	.LVL227:
 2214 0028 0446     		mov	r4, r0
 2215 002a 3868     		ldr	r0, [r7]	@ float
 2216 002c 0D46     		mov	r5, r1
 2217 002e FFF7FEFF 		bl	__aeabi_f2d
 2218              	.LVL228:
 2219 0032 0246     		mov	r2, r0
 2220 0034 0B46     		mov	r3, r1
 2221 0036 2046     		mov	r0, r4
 2222 0038 2946     		mov	r1, r5
 2223 003a FFF7FEFF 		bl	__aeabi_dmul
 2224              	.LVL229:
 2225 003e FFF7FEFF 		bl	__aeabi_d2f
 2226              	.LVL230:
 2227 0042 0AEE900A 		fmsr	s21, r0
 2228              	.LVL231:
 371:math/pprz_algebra_float.c ****   const float dq = 0.5 * dt * omega->q;
 2229              		.loc 2 371 0
 2230 0046 7868     		ldr	r0, [r7, #4]	@ float
 2231              	.LVL232:
 2232 0048 FFF7FEFF 		bl	__aeabi_f2d
 2233              	.LVL233:
 2234 004c 0246     		mov	r2, r0
 2235 004e 0B46     		mov	r3, r1
 2236 0050 2046     		mov	r0, r4
 2237 0052 2946     		mov	r1, r5
 2238 0054 FFF7FEFF 		bl	__aeabi_dmul
 2239              	.LVL234:
 2240 0058 FFF7FEFF 		bl	__aeabi_d2f
 2241              	.LVL235:
 2242 005c 0AEE100A 		fmsr	s20, r0
 2243              	.LVL236:
 372:math/pprz_algebra_float.c ****   const float dr = 0.5 * dt * omega->r;
 2244              		.loc 2 372 0
 2245 0060 B868     		ldr	r0, [r7, #8]	@ float
 2246              	.LVL237:
 2247 0062 FFF7FEFF 		bl	__aeabi_f2d
 2248              	.LVL238:
 2249 0066 0246     		mov	r2, r0
 2250 0068 0B46     		mov	r3, r1
 2251 006a 2046     		mov	r0, r4
 2252 006c 2946     		mov	r1, r5
 2253 006e FFF7FEFF 		bl	__aeabi_dmul
 2254              	.LVL239:
 2255 0072 FFF7FEFF 		bl	__aeabi_d2f
 2256              	.LVL240:
 2257 0076 B1EE6A6A 		fnegs	s12, s21
 373:math/pprz_algebra_float.c ****   q->qi = qi    - dp * qx - dq * qy - dr * qz;
 2258              		.loc 2 373 0
 2259 007a B0EE497A 		fcpys	s14, s18
 2260 007e A6EE297A 		vfma.f32	s14, s12, s19
 2261 0082 F1EE4A7A 		fnegs	s15, s20
 2262 0086 A7EEA87A 		vfma.f32	s14, s15, s17
 372:math/pprz_algebra_float.c ****   const float dr = 0.5 * dt * omega->r;
 2263              		.loc 2 372 0
 2264 008a 06EE900A 		fmsr	s13, r0
 2265              	.LVL241:
 2266              		.loc 2 373 0
 2267 008e A6EEC87A 		vfms.f32	s14, s13, s16
 2268 0092 86ED007A 		fsts	s14, [r6]
 374:math/pprz_algebra_float.c ****   q->qx = dp * qi +    qx + dr * qy - dq * qz;
 2269              		.loc 2 374 0
 2270 0096 B0EE697A 		fcpys	s14, s19
 2271 009a AAEE897A 		vfma.f32	s14, s21, s18
 2272 009e A6EEA87A 		vfma.f32	s14, s13, s17
 2273 00a2 A7EE887A 		vfma.f32	s14, s15, s16
 2274 00a6 69EEE67A 		fnmuls	s15, s19, s13
 2275 00aa 86ED017A 		fsts	s14, [r6, #4]
 375:math/pprz_algebra_float.c ****   q->qy = dq * qi - dr * qx +    qy + dp * qz;
 2276              		.loc 2 375 0
 2277 00ae EAEE097A 		vfma.f32	s15, s20, s18
 2278 00b2 77EEA87A 		fadds	s15, s15, s17
 2279 00b6 EAEE887A 		vfma.f32	s15, s21, s16
 2280 00ba C6ED027A 		fsts	s15, [r6, #8]
 376:math/pprz_algebra_float.c ****   q->qz = dr * qi + dq * qx - dp * qy +    qz;
 2281              		.loc 2 376 0
 2282 00be 6AEE297A 		fmuls	s15, s20, s19
 2283 00c2 E6EE897A 		vfma.f32	s15, s13, s18
 2284 00c6 E6EE287A 		vfma.f32	s15, s12, s17
 2285 00ca 77EE887A 		fadds	s15, s15, s16
 377:math/pprz_algebra_float.c **** }
 2286              		.loc 2 377 0
 2287 00ce BDEC068B 		fldmfdd	sp!, {d8-d10}
 2288              	.LVL242:
 376:math/pprz_algebra_float.c ****   q->qz = dr * qi + dq * qx - dp * qy +    qz;
 2289              		.loc 2 376 0
 2290 00d2 C6ED037A 		fsts	s15, [r6, #12]
 2291              		.loc 2 377 0
 2292 00d6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2293              	.LVL243:
 2294              	.L69:
 2295              		.align	2
 2296              	.L68:
 2297 00d8 0000E03F 		.word	1071644672
 2298              		.cfi_endproc
 2299              	.LFE58:
 2301              		.section	.text.float_quat_integrate,"ax",%progbits
 2302              		.align	1
 2303              		.global	float_quat_integrate
 2304              		.thumb
 2305              		.thumb_func
 2307              	float_quat_integrate:
 2308              	.LFB59:
 378:math/pprz_algebra_float.c **** 
 379:math/pprz_algebra_float.c **** /** in place quaternion integration with constant rotational velocity */
 380:math/pprz_algebra_float.c **** void float_quat_integrate(struct FloatQuat *q, struct FloatRates *omega, float dt)
 381:math/pprz_algebra_float.c **** {
 2309              		.loc 2 381 0
 2310              		.cfi_startproc
 2311              		@ args = 0, pretend = 0, frame = 0
 2312              		@ frame_needed = 0, uses_anonymous_args = 0
 2313              	.LVL244:
 382:math/pprz_algebra_float.c ****   const float no = FLOAT_RATES_NORM(*omega);
 2314              		.loc 2 382 0
 2315 0000 D1ED017A 		flds	s15, [r1, #4]
 2316 0004 D1ED006A 		flds	s13, [r1]
 2317 0008 91ED027A 		flds	s14, [r1, #8]
 2318 000c 67EEA77A 		fmuls	s15, s15, s15
 381:math/pprz_algebra_float.c **** {
 2319              		.loc 2 381 0
 2320 0010 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2321              		.cfi_def_cfa_offset 24
 2322              		.cfi_offset 4, -24
 2323              		.cfi_offset 5, -20
 2324              		.cfi_offset 6, -16
 2325              		.cfi_offset 7, -12
 2326              		.cfi_offset 8, -8
 2327              		.cfi_offset 14, -4
 2328              		.loc 2 382 0
 2329 0014 E6EEA67A 		vfma.f32	s15, s13, s13
 381:math/pprz_algebra_float.c **** {
 2330              		.loc 2 381 0
 2331 0018 0646     		mov	r6, r0
 2332 001a 0F46     		mov	r7, r1
 2333 001c 2DED028B 		fstmfdd	sp!, {d8}
 2334              		.cfi_def_cfa_offset 32
 2335              		.cfi_offset 80, -32
 2336              		.loc 2 382 0
 2337 0020 E7EE077A 		vfma.f32	s15, s14, s14
 381:math/pprz_algebra_float.c **** {
 2338              		.loc 2 381 0
 2339 0024 9046     		mov	r8, r2	@ float
 2340              		.loc 2 382 0
 2341 0026 17EE900A 		fmrs	r0, s15
 2342              	.LVL245:
 2343 002a FFF7FEFF 		bl	sqrtf
 2344              	.LVL246:
 383:math/pprz_algebra_float.c ****   if (no > FLT_MIN) {
 2345              		.loc 2 383 0
 2346 002e DFED357A 		flds	s15, .L74
 382:math/pprz_algebra_float.c ****   const float no = FLOAT_RATES_NORM(*omega);
 2347              		.loc 2 382 0
 2348 0032 08EE900A 		fmsr	s17, r0
 2349              	.LVL247:
 2350              		.loc 2 383 0
 2351 0036 F4EEE78A 		fcmpes	s17, s15
 2352 003a F1EE10FA 		fmstat
 2353 003e 5CDD     		ble	.L70
 2354              	.LBB6:
 384:math/pprz_algebra_float.c ****     const float a  = 0.5 * no * dt;
 2355              		.loc 2 384 0
 2356 0040 FFF7FEFF 		bl	__aeabi_f2d
 2357              	.LVL248:
 2358 0044 0022     		movs	r2, #0
 2359 0046 304B     		ldr	r3, .L74+4
 2360 0048 FFF7FEFF 		bl	__aeabi_dmul
 2361              	.LVL249:
 2362 004c 0446     		mov	r4, r0
 2363 004e 4046     		mov	r0, r8	@ float
 2364 0050 0D46     		mov	r5, r1
 2365 0052 FFF7FEFF 		bl	__aeabi_f2d
 2366              	.LVL250:
 2367 0056 0246     		mov	r2, r0
 2368 0058 0B46     		mov	r3, r1
 2369 005a 2046     		mov	r0, r4
 2370 005c 2946     		mov	r1, r5
 2371 005e FFF7FEFF 		bl	__aeabi_dmul
 2372              	.LVL251:
 2373 0062 FFF7FEFF 		bl	__aeabi_d2f
 2374              	.LVL252:
 2375 0066 0446     		mov	r4, r0	@ float
 2376              	.LVL253:
 385:math/pprz_algebra_float.c ****     const float ca = cosf(a);
 2377              		.loc 2 385 0
 2378 0068 FFF7FEFF 		bl	cosf
 2379              	.LVL254:
 2380 006c 08EE100A 		fmsr	s16, r0
 2381              	.LVL255:
 386:math/pprz_algebra_float.c ****     const float sa_ov_no = sinf(a) / no;
 2382              		.loc 2 386 0
 2383 0070 2046     		mov	r0, r4	@ float
 2384              	.LVL256:
 2385 0072 FFF7FEFF 		bl	sinf
 2386              	.LVL257:
 2387 0076 07EE900A 		fmsr	s15, r0
 2388 007a C7EEA84A 		fdivs	s9, s15, s17
 2389              	.LVL258:
 387:math/pprz_algebra_float.c ****     const float dp = sa_ov_no * omega->p;
 2390              		.loc 2 387 0
 2391 007e D7ED005A 		flds	s11, [r7]
 388:math/pprz_algebra_float.c ****     const float dq = sa_ov_no * omega->q;
 389:math/pprz_algebra_float.c ****     const float dr = sa_ov_no * omega->r;
 2392              		.loc 2 389 0
 2393 0082 97ED027A 		flds	s14, [r7, #8]
 388:math/pprz_algebra_float.c ****     const float dq = sa_ov_no * omega->q;
 2394              		.loc 2 388 0
 2395 0086 D7ED017A 		flds	s15, [r7, #4]
 390:math/pprz_algebra_float.c ****     const float qi = q->qi;
 391:math/pprz_algebra_float.c ****     const float qx = q->qx;
 2396              		.loc 2 391 0
 2397 008a 96ED014A 		flds	s8, [r6, #4]
 390:math/pprz_algebra_float.c ****     const float qi = q->qi;
 2398              		.loc 2 390 0
 2399 008e 96ED005A 		flds	s10, [r6]
 392:math/pprz_algebra_float.c ****     const float qy = q->qy;
 2400              		.loc 2 392 0
 2401 0092 96ED026A 		flds	s12, [r6, #8]
 393:math/pprz_algebra_float.c ****     const float qz = q->qz;
 2402              		.loc 2 393 0
 2403 0096 D6ED036A 		flds	s13, [r6, #12]
 387:math/pprz_algebra_float.c ****     const float dp = sa_ov_no * omega->p;
 2404              		.loc 2 387 0
 2405 009a 64EEA55A 		fmuls	s11, s9, s11
 2406              	.LVL259:
 388:math/pprz_algebra_float.c ****     const float dq = sa_ov_no * omega->q;
 2407              		.loc 2 388 0
 2408 009e 64EEA77A 		fmuls	s15, s9, s15
 2409              	.LVL260:
 389:math/pprz_algebra_float.c ****     const float dr = sa_ov_no * omega->r;
 2410              		.loc 2 389 0
 2411 00a2 64EE874A 		fmuls	s9, s9, s14
 2412              	.LVL261:
 2413 00a6 24EE657A 		fnmuls	s14, s8, s11
 2414 00aa F1EE673A 		fnegs	s7, s15
 394:math/pprz_algebra_float.c ****     q->qi = ca * qi - dp * qx - dq * qy - dr * qz;
 2415              		.loc 2 394 0
 2416 00ae A8EE057A 		vfma.f32	s14, s16, s10
 2417 00b2 A3EE867A 		vfma.f32	s14, s7, s12
 2418 00b6 A4EEE67A 		vfms.f32	s14, s9, s13
 2419 00ba 86ED007A 		fsts	s14, [r6]
 395:math/pprz_algebra_float.c ****     q->qx = dp * qi + ca * qx + dr * qy - dq * qz;
 2420              		.loc 2 395 0
 2421 00be 28EE047A 		fmuls	s14, s16, s8
 2422 00c2 A5EE857A 		vfma.f32	s14, s11, s10
 2423 00c6 A4EE867A 		vfma.f32	s14, s9, s12
 2424 00ca A3EEA67A 		vfma.f32	s14, s7, s13
 2425 00ce 86ED017A 		fsts	s14, [r6, #4]
 2426 00d2 24EE647A 		fnmuls	s14, s8, s9
 396:math/pprz_algebra_float.c ****     q->qy = dq * qi - dr * qx + ca * qy + dp * qz;
 2427              		.loc 2 396 0
 2428 00d6 A7EE857A 		vfma.f32	s14, s15, s10
 397:math/pprz_algebra_float.c ****     q->qz = dr * qi + dq * qx - dp * qy + ca * qz;
 2429              		.loc 2 397 0
 2430 00da 67EE847A 		fmuls	s15, s15, s8
 2431              	.LVL262:
 396:math/pprz_algebra_float.c ****     q->qy = dq * qi - dr * qx + ca * qy + dp * qz;
 2432              		.loc 2 396 0
 2433 00de A8EE067A 		vfma.f32	s14, s16, s12
 2434              		.loc 2 397 0
 2435 00e2 E4EE857A 		vfma.f32	s15, s9, s10
 396:math/pprz_algebra_float.c ****     q->qy = dq * qi - dr * qx + ca * qy + dp * qz;
 2436              		.loc 2 396 0
 2437 00e6 A5EEA67A 		vfma.f32	s14, s11, s13
 2438              		.loc 2 397 0
 2439 00ea E5EEC67A 		vfms.f32	s15, s11, s12
 396:math/pprz_algebra_float.c ****     q->qy = dq * qi - dr * qx + ca * qy + dp * qz;
 2440              		.loc 2 396 0
 2441 00ee 86ED027A 		fsts	s14, [r6, #8]
 2442              		.loc 2 397 0
 2443 00f2 E8EE267A 		vfma.f32	s15, s16, s13
 2444 00f6 C6ED037A 		fsts	s15, [r6, #12]
 2445              	.LVL263:
 2446              	.L70:
 2447              	.LBE6:
 398:math/pprz_algebra_float.c ****   }
 399:math/pprz_algebra_float.c **** }
 2448              		.loc 2 399 0
 2449 00fa BDEC028B 		fldmfdd	sp!, {d8}
 2450 00fe BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2451              	.LVL264:
 2452              	.L75:
 2453 0102 00BF     		.align	2
 2454              	.L74:
 2455 0104 00008000 		.word	8388608
 2456 0108 0000E03F 		.word	1071644672
 2457              		.cfi_endproc
 2458              	.LFE59:
 2460              		.section	.text.float_quat_vmult,"ax",%progbits
 2461              		.align	1
 2462              		.global	float_quat_vmult
 2463              		.thumb
 2464              		.thumb_func
 2466              	float_quat_vmult:
 2467              	.LFB60:
 400:math/pprz_algebra_float.c **** 
 401:math/pprz_algebra_float.c **** void float_quat_vmult(struct FloatVect3 *v_out, struct FloatQuat *q, const struct FloatVect3 *v_in)
 402:math/pprz_algebra_float.c **** {
 2468              		.loc 2 402 0
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 0
 2471              		@ frame_needed = 0, uses_anonymous_args = 0
 2472              		@ link register save eliminated.
 2473              	.LVL265:
 403:math/pprz_algebra_float.c ****   const float qi2_M1_2  = q->qi * q->qi - 0.5;
 404:math/pprz_algebra_float.c ****   const float qiqx = q->qi * q->qx;
 2474              		.loc 2 404 0
 2475 0000 91ED017A 		flds	s14, [r1, #4]
 403:math/pprz_algebra_float.c ****   const float qi2_M1_2  = q->qi * q->qi - 0.5;
 2476              		.loc 2 403 0
 2477 0004 91ED006A 		flds	s12, [r1]
 405:math/pprz_algebra_float.c ****   const float qiqy = q->qi * q->qy;
 2478              		.loc 2 405 0
 2479 0008 D1ED026A 		flds	s13, [r1, #8]
 406:math/pprz_algebra_float.c ****   const float qiqz = q->qi * q->qz;
 2480              		.loc 2 406 0
 2481 000c D1ED035A 		flds	s11, [r1, #12]
 407:math/pprz_algebra_float.c ****   float m01  = q->qx * q->qy; /* aka qxqy */
 408:math/pprz_algebra_float.c ****   float m02  = q->qx * q->qz; /* aka qxqz */
 409:math/pprz_algebra_float.c ****   float m12  = q->qy * q->qz; /* aka qyqz */
 410:math/pprz_algebra_float.c **** 
 411:math/pprz_algebra_float.c ****   const float m00  = qi2_M1_2 + q->qx * q->qx;
 412:math/pprz_algebra_float.c ****   const float m10  = m01 - qiqz;
 413:math/pprz_algebra_float.c ****   const float m20  = m02 + qiqy;
 414:math/pprz_algebra_float.c ****   const float m21  = m12 - qiqx;
 415:math/pprz_algebra_float.c ****   m01 += qiqz;
 416:math/pprz_algebra_float.c ****   m02 -= qiqy;
 417:math/pprz_algebra_float.c ****   m12 += qiqx;
 418:math/pprz_algebra_float.c ****   const float m11  = qi2_M1_2 + q->qy * q->qy;
 419:math/pprz_algebra_float.c ****   const float m22  = qi2_M1_2 + q->qz * q->qz;
 420:math/pprz_algebra_float.c ****   v_out->x = 2 * (m00 * v_in->x + m01 * v_in->y + m02 * v_in->z);
 2482              		.loc 2 420 0
 2483 0010 92ED015A 		flds	s10, [r2, #4]
 2484 0014 92ED001A 		flds	s2, [r2]
 2485 0018 D2ED023A 		flds	s7, [r2, #8]
 403:math/pprz_algebra_float.c ****   const float qi2_M1_2  = q->qi * q->qi - 0.5;
 2486              		.loc 2 403 0
 2487 001c BEEE004A 		fconsts	s8, #224
 2488 0020 A6EE064A 		vfma.f32	s8, s12, s12
 2489              	.LVL266:
 407:math/pprz_algebra_float.c ****   float m01  = q->qx * q->qy; /* aka qxqy */
 2490              		.loc 2 407 0
 2491 0024 27EE262A 		fmuls	s4, s14, s13
 2492              	.LVL267:
 411:math/pprz_algebra_float.c ****   const float m00  = qi2_M1_2 + q->qx * q->qx;
 2493              		.loc 2 411 0
 2494 0028 F0EE440A 		fcpys	s1, s8
 415:math/pprz_algebra_float.c ****   m01 += qiqz;
 2495              		.loc 2 415 0
 2496 002c F0EE424A 		fcpys	s9, s4
 2497 0030 E6EE254A 		vfma.f32	s9, s12, s11
 411:math/pprz_algebra_float.c ****   const float m00  = qi2_M1_2 + q->qx * q->qx;
 2498              		.loc 2 411 0
 2499 0034 E7EE070A 		vfma.f32	s1, s14, s14
 408:math/pprz_algebra_float.c ****   float m02  = q->qx * q->qz; /* aka qxqz */
 2500              		.loc 2 408 0
 2501 0038 67EE252A 		fmuls	s5, s14, s11
 2502              	.LVL268:
 2503              		.loc 2 420 0
 2504 003c 64EE854A 		fmuls	s9, s9, s10
 2505 0040 B1EE463A 		fnegs	s6, s12
 416:math/pprz_algebra_float.c ****   m02 -= qiqy;
 2506              		.loc 2 416 0
 2507 0044 F0EE621A 		fcpys	s3, s5
 2508 0048 E3EE261A 		vfma.f32	s3, s6, s13
 2509              		.loc 2 420 0
 2510 004c E0EE814A 		vfma.f32	s9, s1, s2
 418:math/pprz_algebra_float.c ****   const float m11  = qi2_M1_2 + q->qy * q->qy;
 2511              		.loc 2 418 0
 2512 0050 B0EE441A 		fcpys	s2, s8
 2513              		.loc 2 420 0
 2514 0054 E1EEA34A 		vfma.f32	s9, s3, s7
 418:math/pprz_algebra_float.c ****   const float m11  = qi2_M1_2 + q->qy * q->qy;
 2515              		.loc 2 418 0
 2516 0058 A6EEA61A 		vfma.f32	s2, s13, s13
 2517              		.loc 2 420 0
 2518 005c 74EEA44A 		fadds	s9, s9, s9
 412:math/pprz_algebra_float.c ****   const float m10  = m01 - qiqz;
 2519              		.loc 2 412 0
 2520 0060 A3EE252A 		vfma.f32	s4, s6, s11
 2521              	.LVL269:
 409:math/pprz_algebra_float.c ****   float m12  = q->qy * q->qz; /* aka qyqz */
 2522              		.loc 2 409 0
 2523 0064 66EEA57A 		fmuls	s15, s13, s11
 2524              	.LVL270:
 2525              		.loc 2 420 0
 2526 0068 C0ED004A 		fsts	s9, [r0]
 421:math/pprz_algebra_float.c ****   v_out->y = 2 * (m10 * v_in->x + m11 * v_in->y + m12 * v_in->z);
 2527              		.loc 2 421 0
 2528 006c D2ED004A 		flds	s9, [r2]
 2529 0070 21EE055A 		fmuls	s10, s2, s10
 417:math/pprz_algebra_float.c ****   m12 += qiqx;
 2530              		.loc 2 417 0
 2531 0074 F0EE671A 		fcpys	s3, s15
 2532              	.LVL271:
 2533 0078 E6EE071A 		vfma.f32	s3, s12, s14
 2534              	.LVL272:
 2535              		.loc 2 421 0
 2536 007c A2EE245A 		vfma.f32	s10, s4, s9
 414:math/pprz_algebra_float.c ****   const float m21  = m12 - qiqx;
 2537              		.loc 2 414 0
 2538 0080 E3EE077A 		vfma.f32	s15, s6, s14
 2539              	.LVL273:
 2540              		.loc 2 421 0
 2541 0084 A1EEA35A 		vfma.f32	s10, s3, s7
 413:math/pprz_algebra_float.c ****   const float m20  = m02 + qiqy;
 2542              		.loc 2 413 0
 2543 0088 E6EE262A 		vfma.f32	s5, s12, s13
 2544              	.LVL274:
 2545              		.loc 2 421 0
 2546 008c 35EE055A 		fadds	s10, s10, s10
 419:math/pprz_algebra_float.c ****   const float m22  = qi2_M1_2 + q->qz * q->qz;
 2547              		.loc 2 419 0
 2548 0090 A5EEA54A 		vfma.f32	s8, s11, s11
 2549              	.LVL275:
 2550              		.loc 2 421 0
 2551 0094 80ED015A 		fsts	s10, [r0, #4]
 422:math/pprz_algebra_float.c ****   v_out->z = 2 * (m20 * v_in->x + m21 * v_in->y + m22 * v_in->z);
 2552              		.loc 2 422 0
 2553 0098 92ED017A 		flds	s14, [r2, #4]
 2554              	.LVL276:
 2555 009c 67EE877A 		fmuls	s15, s15, s14
 2556              	.LVL277:
 2557 00a0 E2EEA47A 		vfma.f32	s15, s5, s9
 2558 00a4 E4EE237A 		vfma.f32	s15, s8, s7
 2559 00a8 77EEA77A 		fadds	s15, s15, s15
 2560 00ac C0ED027A 		fsts	s15, [r0, #8]
 2561 00b0 7047     		bx	lr
 2562              		.cfi_endproc
 2563              	.LFE60:
 2565              		.section	.text.float_quat_derivative,"ax",%progbits
 2566              		.align	1
 2567              		.global	float_quat_derivative
 2568              		.thumb
 2569              		.thumb_func
 2571              	float_quat_derivative:
 2572              	.LFB61:
 423:math/pprz_algebra_float.c **** }
 424:math/pprz_algebra_float.c **** 
 425:math/pprz_algebra_float.c **** /** Quaternion derivative from rotational velocity.
 426:math/pprz_algebra_float.c ****  * qd = -0.5*omega(r) * q
 427:math/pprz_algebra_float.c ****  * or equally:
 428:math/pprz_algebra_float.c ****  * qd = 0.5 * q * omega(r)
 429:math/pprz_algebra_float.c ****  */
 430:math/pprz_algebra_float.c **** void float_quat_derivative(struct FloatQuat *qd, struct FloatRates *r, struct FloatQuat *q)
 431:math/pprz_algebra_float.c **** {
 2573              		.loc 2 431 0
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 0
 2576              		@ frame_needed = 0, uses_anonymous_args = 0
 2577              		@ link register save eliminated.
 2578              	.LVL278:
 432:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2579              		.loc 2 432 0
 2580 0000 D1ED017A 		flds	s15, [r1, #4]
 2581 0004 92ED027A 		flds	s14, [r2, #8]
 2582 0008 91ED005A 		flds	s10, [r1]
 2583 000c 92ED016A 		flds	s12, [r2, #4]
 2584 0010 D1ED025A 		flds	s11, [r1, #8]
 2585 0014 D2ED034A 		flds	s9, [r2, #12]
 2586 0018 67EE876A 		fmuls	s13, s15, s14
 2587 001c 27EE657A 		fnmuls	s14, s14, s11
 2588 0020 E5EE066A 		vfma.f32	s13, s10, s12
 2589 0024 BEEE006A 		fconsts	s12, #224
 2590 0028 E5EEA46A 		vfma.f32	s13, s11, s9
 433:math/pprz_algebra_float.c ****   qd->qx = -0.5 * (-r->p * q->qi - r->r * q->qy + r->q * q->qz);
 2591              		.loc 2 433 0
 2592 002c F1EE453A 		fnegs	s7, s10
 432:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2593              		.loc 2 432 0
 2594 0030 66EE866A 		fmuls	s13, s13, s12
 2595 0034 C0ED006A 		fsts	s13, [r0]
 2596              		.loc 2 433 0
 2597 0038 D2ED006A 		flds	s13, [r2]
 2598 003c A3EEA67A 		vfma.f32	s14, s7, s13
 2599 0040 A7EEA47A 		vfma.f32	s14, s15, s9
 2600 0044 27EE067A 		fmuls	s14, s14, s12
 2601 0048 80ED017A 		fsts	s14, [r0, #4]
 434:math/pprz_algebra_float.c ****   qd->qy = -0.5 * (-r->q * q->qi + r->r * q->qx - r->p * q->qz);
 2602              		.loc 2 434 0
 2603 004c 92ED014A 		flds	s8, [r2, #4]
 2604 0050 25EE847A 		fmuls	s14, s11, s8
 2605 0054 A7EEE67A 		vfms.f32	s14, s15, s13
 2606 0058 64EE677A 		fnmuls	s15, s8, s15
 2607 005c A3EEA47A 		vfma.f32	s14, s7, s9
 435:math/pprz_algebra_float.c ****   qd->qz = -0.5 * (-r->r * q->qi - r->q * q->qx + r->p * q->qy);
 2608              		.loc 2 435 0
 2609 0060 E5EEE67A 		vfms.f32	s15, s11, s13
 434:math/pprz_algebra_float.c ****   qd->qy = -0.5 * (-r->q * q->qi + r->r * q->qx - r->p * q->qz);
 2610              		.loc 2 434 0
 2611 0064 27EE067A 		fmuls	s14, s14, s12
 2612 0068 80ED027A 		fsts	s14, [r0, #8]
 2613              		.loc 2 435 0
 2614 006c 92ED027A 		flds	s14, [r2, #8]
 2615 0070 E5EE077A 		vfma.f32	s15, s10, s14
 2616 0074 67EE867A 		fmuls	s15, s15, s12
 2617 0078 C0ED037A 		fsts	s15, [r0, #12]
 2618 007c 7047     		bx	lr
 2619              		.cfi_endproc
 2620              	.LFE61:
 2622              		.section	.text.float_quat_derivative_lagrange,"ax",%progbits
 2623              		.align	1
 2624              		.global	float_quat_derivative_lagrange
 2625              		.thumb
 2626              		.thumb_func
 2628              	float_quat_derivative_lagrange:
 2629              	.LFB62:
 436:math/pprz_algebra_float.c **** }
 437:math/pprz_algebra_float.c **** 
 438:math/pprz_algebra_float.c **** /** Quaternion derivative from rotational velocity.
 439:math/pprz_algebra_float.c ****  * qd = -0.5*omega(r) * q
 440:math/pprz_algebra_float.c ****  */
 441:math/pprz_algebra_float.c **** void float_quat_derivative_lagrange(struct FloatQuat *qd, struct FloatRates *r, struct FloatQuat *q
 442:math/pprz_algebra_float.c **** {
 2630              		.loc 2 442 0
 2631              		.cfi_startproc
 2632              		@ args = 0, pretend = 0, frame = 0
 2633              		@ frame_needed = 0, uses_anonymous_args = 0
 2634              	.LVL279:
 2635 0000 70B5     		push	{r4, r5, r6, lr}
 2636              		.cfi_def_cfa_offset 16
 2637              		.cfi_offset 4, -16
 2638              		.cfi_offset 5, -12
 2639              		.cfi_offset 6, -8
 2640              		.cfi_offset 14, -4
 2641              		.loc 2 442 0
 2642 0002 0546     		mov	r5, r0
 443:math/pprz_algebra_float.c ****   const float K_LAGRANGE = 1.;
 444:math/pprz_algebra_float.c ****   const float c = K_LAGRANGE * (1 - float_quat_norm(q)) / -0.5;
 2643              		.loc 2 444 0
 2644 0004 1046     		mov	r0, r2
 2645              	.LVL280:
 442:math/pprz_algebra_float.c **** {
 2646              		.loc 2 442 0
 2647 0006 1446     		mov	r4, r2
 2648 0008 0E46     		mov	r6, r1
 2649              		.loc 2 444 0
 2650 000a FFF7FEFF 		bl	float_quat_norm
 2651              	.LVL281:
 2652 000e F7EE007A 		fconsts	s15, #112
 445:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (c * q->qi + r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2653              		.loc 2 445 0
 2654 0012 D6ED004A 		flds	s9, [r6]
 2655 0016 D4ED016A 		flds	s13, [r4, #4]
 2656 001a D4ED005A 		flds	s11, [r4]
 2657 001e 94ED024A 		flds	s8, [r4, #8]
 2658 0022 94ED035A 		flds	s10, [r4, #12]
 444:math/pprz_algebra_float.c ****   const float c = K_LAGRANGE * (1 - float_quat_norm(q)) / -0.5;
 2659              		.loc 2 444 0
 2660 0026 37EEC00A 		fsubs	s0, s15, s0
 2661 002a B8EE007A 		fconsts	s14, #128
 2662 002e 20EE070A 		fmuls	s0, s0, s14
 2663              	.LVL282:
 2664              		.loc 2 445 0
 2665 0032 24EEA66A 		fmuls	s12, s9, s13
 2666 0036 D6ED017A 		flds	s15, [r6, #4]
 2667 003a 96ED027A 		flds	s14, [r6, #8]
 2668 003e A0EE256A 		vfma.f32	s12, s0, s11
 2669 0042 FEEE005A 		fconsts	s11, #224
 2670 0046 A7EE846A 		vfma.f32	s12, s15, s8
 446:math/pprz_algebra_float.c ****   qd->qx = -0.5 * (-r->p * q->qi +      c * q->qx - r->r * q->qy + r->q * q->qz);
 2671              		.loc 2 446 0
 2672 004a 60EE266A 		fmuls	s13, s0, s13
 445:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (c * q->qi + r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2673              		.loc 2 445 0
 2674 004e A7EE056A 		vfma.f32	s12, s14, s10
 2675              		.loc 2 446 0
 2676 0052 B1EE643A 		fnegs	s6, s9
 445:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (c * q->qi + r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2677              		.loc 2 445 0
 2678 0056 26EE256A 		fmuls	s12, s12, s11
 2679 005a F1EE473A 		fnegs	s7, s14
 2680 005e 85ED006A 		fsts	s12, [r5]
 2681              		.loc 2 446 0
 2682 0062 94ED006A 		flds	s12, [r4]
 2683 0066 E3EE066A 		vfma.f32	s13, s6, s12
 2684 006a E3EE846A 		vfma.f32	s13, s7, s8
 2685 006e E7EE856A 		vfma.f32	s13, s15, s10
 2686 0072 66EEA56A 		fmuls	s13, s13, s11
 2687 0076 C5ED016A 		fsts	s13, [r5, #4]
 447:math/pprz_algebra_float.c ****   qd->qy = -0.5 * (-r->q * q->qi + r->r * q->qx +      c * q->qy - r->p * q->qz);
 2688              		.loc 2 447 0
 2689 007a D4ED016A 		flds	s13, [r4, #4]
 2690 007e 27EE267A 		fmuls	s14, s14, s13
 2691 0082 A7EEC67A 		vfms.f32	s14, s15, s12
 2692 0086 66EEE77A 		fnmuls	s15, s13, s15
 2693 008a A0EE047A 		vfma.f32	s14, s0, s8
 448:math/pprz_algebra_float.c ****   qd->qz = -0.5 * (-r->r * q->qi - r->q * q->qx + r->p * q->qy +      c * q->qz);
 2694              		.loc 2 448 0
 2695 008e E3EE867A 		vfma.f32	s15, s7, s12
 447:math/pprz_algebra_float.c ****   qd->qy = -0.5 * (-r->q * q->qi + r->r * q->qx +      c * q->qy - r->p * q->qz);
 2696              		.loc 2 447 0
 2697 0092 A3EE057A 		vfma.f32	s14, s6, s10
 2698 0096 27EE257A 		fmuls	s14, s14, s11
 2699 009a 85ED027A 		fsts	s14, [r5, #8]
 2700              		.loc 2 448 0
 2701 009e 94ED027A 		flds	s14, [r4, #8]
 2702 00a2 E4EE877A 		vfma.f32	s15, s9, s14
 2703 00a6 E0EE057A 		vfma.f32	s15, s0, s10
 2704 00aa 67EEA57A 		fmuls	s15, s15, s11
 2705 00ae C5ED037A 		fsts	s15, [r5, #12]
 2706 00b2 70BD     		pop	{r4, r5, r6, pc}
 2707              		.cfi_endproc
 2708              	.LFE62:
 2710              		.section	.text.float_quat_of_eulers,"ax",%progbits
 2711              		.align	1
 2712              		.global	float_quat_of_eulers
 2713              		.thumb
 2714              		.thumb_func
 2716              	float_quat_of_eulers:
 2717              	.LFB63:
 449:math/pprz_algebra_float.c **** }
 450:math/pprz_algebra_float.c **** 
 451:math/pprz_algebra_float.c **** void float_quat_of_eulers(struct FloatQuat *q, struct FloatEulers *e)
 452:math/pprz_algebra_float.c **** {
 2718              		.loc 2 452 0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 0
 2721              		@ frame_needed = 0, uses_anonymous_args = 0
 2722              	.LVL283:
 2723 0000 10B5     		push	{r4, lr}
 2724              		.cfi_def_cfa_offset 8
 2725              		.cfi_offset 4, -8
 2726              		.cfi_offset 14, -4
 2727 0002 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 2728              		.cfi_def_cfa_offset 32
 2729              		.cfi_offset 80, -32
 2730              		.cfi_offset 82, -24
 2731              		.cfi_offset 84, -16
 453:math/pprz_algebra_float.c **** 
 454:math/pprz_algebra_float.c ****   const float phi2   = e->phi / 2.0;
 2732              		.loc 2 454 0
 2733 0006 D1ED008A 		flds	s17, [r1]
 455:math/pprz_algebra_float.c ****   const float theta2 = e->theta / 2.0;
 2734              		.loc 2 455 0
 2735 000a 91ED018A 		flds	s16, [r1, #4]
 456:math/pprz_algebra_float.c ****   const float psi2   = e->psi / 2.0;
 2736              		.loc 2 456 0
 2737 000e D1ED02AA 		flds	s21, [r1, #8]
 454:math/pprz_algebra_float.c ****   const float phi2   = e->phi / 2.0;
 2738              		.loc 2 454 0
 2739 0012 F6EE007A 		fconsts	s15, #96
 2740 0016 68EEA78A 		fmuls	s17, s17, s15
 2741              	.LVL284:
 452:math/pprz_algebra_float.c **** {
 2742              		.loc 2 452 0
 2743 001a 0446     		mov	r4, r0
 457:math/pprz_algebra_float.c **** 
 458:math/pprz_algebra_float.c ****   const float s_phi2   = sinf(phi2);
 2744              		.loc 2 458 0
 2745 001c 18EE900A 		fmrs	r0, s17
 2746              	.LVL285:
 455:math/pprz_algebra_float.c ****   const float theta2 = e->theta / 2.0;
 2747              		.loc 2 455 0
 2748 0020 28EE278A 		fmuls	s16, s16, s15
 2749              	.LVL286:
 456:math/pprz_algebra_float.c ****   const float psi2   = e->psi / 2.0;
 2750              		.loc 2 456 0
 2751 0024 6AEEA7AA 		fmuls	s21, s21, s15
 2752              	.LVL287:
 2753              		.loc 2 458 0
 2754 0028 FFF7FEFF 		bl	sinf
 2755              	.LVL288:
 2756 002c 0AEE100A 		fmsr	s20, r0
 2757              	.LVL289:
 459:math/pprz_algebra_float.c ****   const float c_phi2   = cosf(phi2);
 2758              		.loc 2 459 0
 2759 0030 18EE900A 		fmrs	r0, s17
 2760              	.LVL290:
 2761 0034 FFF7FEFF 		bl	cosf
 2762              	.LVL291:
 2763 0038 09EE100A 		fmsr	s18, r0
 2764              	.LVL292:
 460:math/pprz_algebra_float.c ****   const float s_theta2 = sinf(theta2);
 2765              		.loc 2 460 0
 2766 003c 18EE100A 		fmrs	r0, s16
 2767              	.LVL293:
 2768 0040 FFF7FEFF 		bl	sinf
 2769              	.LVL294:
 2770 0044 08EE900A 		fmsr	s17, r0
 2771              	.LVL295:
 461:math/pprz_algebra_float.c ****   const float c_theta2 = cosf(theta2);
 2772              		.loc 2 461 0
 2773 0048 18EE100A 		fmrs	r0, s16
 2774              	.LVL296:
 2775 004c FFF7FEFF 		bl	cosf
 2776              	.LVL297:
 2777 0050 09EE900A 		fmsr	s19, r0
 2778              	.LVL298:
 462:math/pprz_algebra_float.c ****   const float s_psi2   = sinf(psi2);
 2779              		.loc 2 462 0
 2780 0054 1AEE900A 		fmrs	r0, s21
 2781              	.LVL299:
 2782 0058 FFF7FEFF 		bl	sinf
 2783              	.LVL300:
 2784 005c 08EE100A 		fmsr	s16, r0
 2785              	.LVL301:
 463:math/pprz_algebra_float.c ****   const float c_psi2   = cosf(psi2);
 2786              		.loc 2 463 0
 2787 0060 1AEE900A 		fmrs	r0, s21
 2788              	.LVL302:
 2789 0064 FFF7FEFF 		bl	cosf
 2790              	.LVL303:
 464:math/pprz_algebra_float.c **** 
 465:math/pprz_algebra_float.c ****   q->qi =  c_phi2 * c_theta2 * c_psi2 + s_phi2 * s_theta2 * s_psi2;
 2791              		.loc 2 465 0
 2792 0068 6AEE285A 		fmuls	s11, s20, s17
 463:math/pprz_algebra_float.c ****   const float c_psi2   = cosf(psi2);
 2793              		.loc 2 463 0
 2794 006c 07EE900A 		fmsr	s15, r0
 2795              	.LVL304:
 2796              		.loc 2 465 0
 2797 0070 29EE296A 		fmuls	s12, s18, s19
 2798 0074 65EE886A 		fmuls	s13, s11, s16
 466:math/pprz_algebra_float.c ****   q->qx = -c_phi2 * s_theta2 * s_psi2 + s_phi2 * c_theta2 * c_psi2;
 2799              		.loc 2 466 0
 2800 0078 2AEE297A 		fmuls	s14, s20, s19
 465:math/pprz_algebra_float.c ****   q->qi =  c_phi2 * c_theta2 * c_psi2 + s_phi2 * s_theta2 * s_psi2;
 2801              		.loc 2 465 0
 2802 007c E6EE276A 		vfma.f32	s13, s12, s15
 2803              		.loc 2 466 0
 2804 0080 29EE685A 		fnmuls	s10, s18, s17
 465:math/pprz_algebra_float.c ****   q->qi =  c_phi2 * c_theta2 * c_psi2 + s_phi2 * s_theta2 * s_psi2;
 2805              		.loc 2 465 0
 2806 0084 C4ED006A 		fsts	s13, [r4]
 467:math/pprz_algebra_float.c ****   q->qy =  c_phi2 * s_theta2 * c_psi2 + s_phi2 * c_theta2 * s_psi2;
 2807              		.loc 2 467 0
 2808 0088 69EE288A 		fmuls	s17, s18, s17
 2809              	.LVL305:
 466:math/pprz_algebra_float.c ****   q->qx = -c_phi2 * s_theta2 * s_psi2 + s_phi2 * c_theta2 * c_psi2;
 2810              		.loc 2 466 0
 2811 008c 67EE276A 		fmuls	s13, s14, s15
 2812              		.loc 2 467 0
 2813 0090 27EE087A 		fmuls	s14, s14, s16
 466:math/pprz_algebra_float.c ****   q->qx = -c_phi2 * s_theta2 * s_psi2 + s_phi2 * c_theta2 * c_psi2;
 2814              		.loc 2 466 0
 2815 0094 E5EE086A 		vfma.f32	s13, s10, s16
 2816              		.loc 2 467 0
 2817 0098 A8EEA77A 		vfma.f32	s14, s17, s15
 2818 009c 67EEE57A 		fnmuls	s15, s15, s11
 466:math/pprz_algebra_float.c ****   q->qx = -c_phi2 * s_theta2 * s_psi2 + s_phi2 * c_theta2 * c_psi2;
 2819              		.loc 2 466 0
 2820 00a0 C4ED016A 		fsts	s13, [r4, #4]
 468:math/pprz_algebra_float.c ****   q->qz =  c_phi2 * c_theta2 * s_psi2 - s_phi2 * s_theta2 * c_psi2;
 2821              		.loc 2 468 0
 2822 00a4 E6EE087A 		vfma.f32	s15, s12, s16
 469:math/pprz_algebra_float.c **** }
 2823              		.loc 2 469 0
 2824 00a8 BDEC068B 		fldmfdd	sp!, {d8-d10}
 2825              	.LVL306:
 467:math/pprz_algebra_float.c ****   q->qy =  c_phi2 * s_theta2 * c_psi2 + s_phi2 * c_theta2 * s_psi2;
 2826              		.loc 2 467 0
 2827 00ac 84ED027A 		fsts	s14, [r4, #8]
 468:math/pprz_algebra_float.c ****   q->qz =  c_phi2 * c_theta2 * s_psi2 - s_phi2 * s_theta2 * c_psi2;
 2828              		.loc 2 468 0
 2829 00b0 C4ED037A 		fsts	s15, [r4, #12]
 2830              		.loc 2 469 0
 2831 00b4 10BD     		pop	{r4, pc}
 2832              		.cfi_endproc
 2833              	.LFE63:
 2835              		.section	.text.float_quat_of_axis_angle,"ax",%progbits
 2836              		.align	1
 2837              		.global	float_quat_of_axis_angle
 2838              		.thumb
 2839              		.thumb_func
 2841              	float_quat_of_axis_angle:
 2842              	.LFB64:
 470:math/pprz_algebra_float.c **** 
 471:math/pprz_algebra_float.c **** void float_quat_of_axis_angle(struct FloatQuat *q, const struct FloatVect3 *uv, float angle)
 472:math/pprz_algebra_float.c **** {
 2843              		.loc 2 472 0
 2844              		.cfi_startproc
 2845              		@ args = 0, pretend = 0, frame = 0
 2846              		@ frame_needed = 0, uses_anonymous_args = 0
 2847              	.LVL307:
 2848 0000 38B5     		push	{r3, r4, r5, lr}
 2849              		.cfi_def_cfa_offset 16
 2850              		.cfi_offset 3, -16
 2851              		.cfi_offset 4, -12
 2852              		.cfi_offset 5, -8
 2853              		.cfi_offset 14, -4
 473:math/pprz_algebra_float.c ****   const float san = sinf(angle / 2.);
 2854              		.loc 2 473 0
 2855 0002 07EE902A 		fmsr	s15, r2
 472:math/pprz_algebra_float.c **** {
 2856              		.loc 2 472 0
 2857 0006 2DED028B 		fstmfdd	sp!, {d8}
 2858              		.cfi_def_cfa_offset 24
 2859              		.cfi_offset 80, -24
 2860              		.loc 2 473 0
 2861 000a F6EE008A 		fconsts	s17, #96
 2862 000e 67EEA88A 		fmuls	s17, s15, s17
 472:math/pprz_algebra_float.c **** {
 2863              		.loc 2 472 0
 2864 0012 0446     		mov	r4, r0
 2865              		.loc 2 473 0
 2866 0014 18EE900A 		fmrs	r0, s17
 2867              	.LVL308:
 472:math/pprz_algebra_float.c **** {
 2868              		.loc 2 472 0
 2869 0018 0D46     		mov	r5, r1
 2870              		.loc 2 473 0
 2871 001a FFF7FEFF 		bl	sinf
 2872              	.LVL309:
 2873 001e 08EE100A 		fmsr	s16, r0
 2874              	.LVL310:
 474:math/pprz_algebra_float.c ****   q->qi = cosf(angle / 2.);
 2875              		.loc 2 474 0
 2876 0022 18EE900A 		fmrs	r0, s17
 2877              	.LVL311:
 2878 0026 FFF7FEFF 		bl	cosf
 2879              	.LVL312:
 475:math/pprz_algebra_float.c ****   q->qx = san * uv->x;
 2880              		.loc 2 475 0
 2881 002a D5ED007A 		flds	s15, [r5]
 474:math/pprz_algebra_float.c ****   q->qi = cosf(angle / 2.);
 2882              		.loc 2 474 0
 2883 002e 2060     		str	r0, [r4]	@ float
 2884              		.loc 2 475 0
 2885 0030 68EE277A 		fmuls	s15, s16, s15
 2886 0034 C4ED017A 		fsts	s15, [r4, #4]
 476:math/pprz_algebra_float.c ****   q->qy = san * uv->y;
 2887              		.loc 2 476 0
 2888 0038 D5ED017A 		flds	s15, [r5, #4]
 2889 003c 68EE277A 		fmuls	s15, s16, s15
 2890 0040 C4ED027A 		fsts	s15, [r4, #8]
 477:math/pprz_algebra_float.c ****   q->qz = san * uv->z;
 2891              		.loc 2 477 0
 2892 0044 D5ED027A 		flds	s15, [r5, #8]
 2893 0048 28EE278A 		fmuls	s16, s16, s15
 2894              	.LVL313:
 2895 004c 84ED038A 		fsts	s16, [r4, #12]
 478:math/pprz_algebra_float.c **** }
 2896              		.loc 2 478 0
 2897 0050 BDEC028B 		fldmfdd	sp!, {d8}
 2898 0054 38BD     		pop	{r3, r4, r5, pc}
 2899              		.cfi_endproc
 2900              	.LFE64:
 2902              		.section	.text.float_quat_of_orientation_vect,"ax",%progbits
 2903              		.align	1
 2904              		.global	float_quat_of_orientation_vect
 2905              		.thumb
 2906              		.thumb_func
 2908              	float_quat_of_orientation_vect:
 2909              	.LFB65:
 479:math/pprz_algebra_float.c **** 
 480:math/pprz_algebra_float.c **** void float_quat_of_orientation_vect(struct FloatQuat *q, const struct FloatVect3 *ov)
 481:math/pprz_algebra_float.c **** {
 2910              		.loc 2 481 0
 2911              		.cfi_startproc
 2912              		@ args = 0, pretend = 0, frame = 0
 2913              		@ frame_needed = 0, uses_anonymous_args = 0
 2914              	.LVL314:
 482:math/pprz_algebra_float.c ****   const float ov_norm = sqrtf(ov->x * ov->x + ov->y * ov->y + ov->z * ov->z);
 2915              		.loc 2 482 0
 2916 0000 D1ED017A 		flds	s15, [r1, #4]
 2917 0004 D1ED006A 		flds	s13, [r1]
 2918 0008 91ED027A 		flds	s14, [r1, #8]
 2919 000c 67EEA77A 		fmuls	s15, s15, s15
 481:math/pprz_algebra_float.c **** {
 2920              		.loc 2 481 0
 2921 0010 38B5     		push	{r3, r4, r5, lr}
 2922              		.cfi_def_cfa_offset 16
 2923              		.cfi_offset 3, -16
 2924              		.cfi_offset 4, -12
 2925              		.cfi_offset 5, -8
 2926              		.cfi_offset 14, -4
 2927              		.loc 2 482 0
 2928 0012 E6EEA67A 		vfma.f32	s15, s13, s13
 481:math/pprz_algebra_float.c **** {
 2929              		.loc 2 481 0
 2930 0016 0446     		mov	r4, r0
 2931 0018 0D46     		mov	r5, r1
 2932 001a 2DED028B 		fstmfdd	sp!, {d8}
 2933              		.cfi_def_cfa_offset 24
 2934              		.cfi_offset 80, -24
 2935              		.loc 2 482 0
 2936 001e E7EE077A 		vfma.f32	s15, s14, s14
 2937 0022 17EE900A 		fmrs	r0, s15
 2938              	.LVL315:
 2939 0026 FFF7FEFF 		bl	sqrtf
 2940              	.LVL316:
 2941 002a 08EE100A 		fmsr	s16, r0
 2942              	.LVL317:
 483:math/pprz_algebra_float.c ****   if (ov_norm < 1e-8) {
 2943              		.loc 2 483 0
 2944 002e FFF7FEFF 		bl	__aeabi_f2d
 2945              	.LVL318:
 2946 0032 1BA3     		adr	r3, .L87
 2947 0034 D3E90023 		ldrd	r2, [r3]
 2948 0038 FFF7FEFF 		bl	__aeabi_dcmplt
 2949              	.LVL319:
 2950 003c 38B1     		cbz	r0, .L86
 484:math/pprz_algebra_float.c ****     q->qi = 1;
 2951              		.loc 2 484 0
 2952 003e 4FF07E53 		mov	r3, #1065353216
 2953 0042 2360     		str	r3, [r4]	@ float
 485:math/pprz_algebra_float.c ****     q->qx = 0;
 2954              		.loc 2 485 0
 2955 0044 0023     		movs	r3, #0
 2956 0046 6360     		str	r3, [r4, #4]	@ float
 486:math/pprz_algebra_float.c ****     q->qy = 0;
 2957              		.loc 2 486 0
 2958 0048 A360     		str	r3, [r4, #8]	@ float
 487:math/pprz_algebra_float.c ****     q->qz = 0;
 2959              		.loc 2 487 0
 2960 004a E360     		str	r3, [r4, #12]	@ float
 2961 004c 22E0     		b	.L81
 2962              	.L86:
 2963              	.LBB7:
 488:math/pprz_algebra_float.c ****   } else {
 489:math/pprz_algebra_float.c ****     const float s2_normalized = sinf(ov_norm / 2.0) / ov_norm;
 2964              		.loc 2 489 0
 2965 004e F6EE008A 		fconsts	s17, #96
 2966 0052 68EE288A 		fmuls	s17, s16, s17
 2967 0056 18EE900A 		fmrs	r0, s17
 2968 005a FFF7FEFF 		bl	sinf
 2969              	.LVL320:
 2970 005e 07EE900A 		fmsr	s15, r0
 2971 0062 87EE888A 		fdivs	s16, s15, s16
 2972              	.LVL321:
 490:math/pprz_algebra_float.c ****     q->qi = cosf(ov_norm / 2.0);
 2973              		.loc 2 490 0
 2974 0066 18EE900A 		fmrs	r0, s17
 2975 006a FFF7FEFF 		bl	cosf
 2976              	.LVL322:
 491:math/pprz_algebra_float.c ****     q->qx = ov->x * s2_normalized;
 2977              		.loc 2 491 0
 2978 006e D5ED007A 		flds	s15, [r5]
 490:math/pprz_algebra_float.c ****     q->qi = cosf(ov_norm / 2.0);
 2979              		.loc 2 490 0
 2980 0072 2060     		str	r0, [r4]	@ float
 2981              		.loc 2 491 0
 2982 0074 67EE887A 		fmuls	s15, s15, s16
 2983 0078 C4ED017A 		fsts	s15, [r4, #4]
 492:math/pprz_algebra_float.c ****     q->qy = ov->y * s2_normalized;
 2984              		.loc 2 492 0
 2985 007c D5ED017A 		flds	s15, [r5, #4]
 2986 0080 67EE887A 		fmuls	s15, s15, s16
 2987 0084 C4ED027A 		fsts	s15, [r4, #8]
 493:math/pprz_algebra_float.c ****     q->qz = ov->z * s2_normalized;
 2988              		.loc 2 493 0
 2989 0088 D5ED027A 		flds	s15, [r5, #8]
 2990 008c 27EE888A 		fmuls	s16, s15, s16
 2991              	.LVL323:
 2992 0090 84ED038A 		fsts	s16, [r4, #12]
 2993              	.L81:
 2994              	.LBE7:
 494:math/pprz_algebra_float.c ****   }
 495:math/pprz_algebra_float.c **** }
 2995              		.loc 2 495 0
 2996 0094 BDEC028B 		fldmfdd	sp!, {d8}
 2997 0098 38BD     		pop	{r3, r4, r5, pc}
 2998              	.LVL324:
 2999              	.L88:
 3000 009a 00BFAFF3 		.align	3
 3000      0080
 3001              	.L87:
 3002 00a0 3A8C30E2 		.word	-500134854
 3003 00a4 8E79453E 		.word	1044740494
 3004              		.cfi_endproc
 3005              	.LFE65:
 3007              		.section	.text.float_quat_of_rmat,"ax",%progbits
 3008              		.align	1
 3009              		.global	float_quat_of_rmat
 3010              		.thumb
 3011              		.thumb_func
 3013              	float_quat_of_rmat:
 3014              	.LFB66:
 496:math/pprz_algebra_float.c **** 
 497:math/pprz_algebra_float.c **** void float_quat_of_rmat(struct FloatQuat *q, struct FloatRMat *rm)
 498:math/pprz_algebra_float.c **** {
 3015              		.loc 2 498 0
 3016              		.cfi_startproc
 3017              		@ args = 0, pretend = 0, frame = 0
 3018              		@ frame_needed = 0, uses_anonymous_args = 0
 3019              	.LVL325:
 499:math/pprz_algebra_float.c ****   const float tr = RMAT_TRACE(*rm);
 3020              		.loc 2 499 0
 3021 0000 91ED007A 		flds	s14, [r1]
 3022 0004 D1ED047A 		flds	s15, [r1, #16]
 3023 0008 D1ED086A 		flds	s13, [r1, #32]
 3024 000c 77EE275A 		fadds	s11, s14, s15
 498:math/pprz_algebra_float.c **** {
 3025              		.loc 2 498 0
 3026 0010 38B5     		push	{r3, r4, r5, lr}
 3027              		.cfi_def_cfa_offset 16
 3028              		.cfi_offset 3, -16
 3029              		.cfi_offset 4, -12
 3030              		.cfi_offset 5, -8
 3031              		.cfi_offset 14, -4
 3032              		.loc 2 499 0
 3033 0012 75EEA65A 		fadds	s11, s11, s13
 3034              	.LVL326:
 498:math/pprz_algebra_float.c **** {
 3035              		.loc 2 498 0
 3036 0016 2DED028B 		fstmfdd	sp!, {d8}
 3037              		.cfi_def_cfa_offset 24
 3038              		.cfi_offset 80, -24
 500:math/pprz_algebra_float.c ****   if (tr > 0) {
 3039              		.loc 2 500 0
 3040 001a F5EEC05A 		fcmpezs	s11
 3041 001e F1EE10FA 		fmstat
 498:math/pprz_algebra_float.c **** {
 3042              		.loc 2 498 0
 3043 0022 0546     		mov	r5, r0
 3044 0024 0C46     		mov	r4, r1
 3045 0026 B7EE006A 		fconsts	s12, #112
 3046 002a B6EE008A 		fconsts	s16, #96
 3047              		.loc 2 500 0
 3048 002e 28DD     		ble	.L102
 3049              	.LBB8:
 501:math/pprz_algebra_float.c ****     const float two_qi = sqrtf(1. + tr);
 3050              		.loc 2 501 0
 3051 0030 35EE866A 		fadds	s12, s11, s12
 3052 0034 16EE100A 		fmrs	r0, s12
 3053              	.LVL327:
 3054 0038 FFF7FEFF 		bl	sqrtf
 3055              	.LVL328:
 3056 003c 07EE100A 		fmsr	s14, r0
 3057              	.LVL329:
 502:math/pprz_algebra_float.c ****     const float four_qi = 2. * two_qi;
 503:math/pprz_algebra_float.c ****     q->qi = 0.5 * two_qi;
 504:math/pprz_algebra_float.c ****     q->qx = (RMAT_ELMT(*rm, 1, 2) - RMAT_ELMT(*rm, 2, 1)) / four_qi;
 3058              		.loc 2 504 0
 3059 0040 D4ED056A 		flds	s13, [r4, #20]
 502:math/pprz_algebra_float.c ****     const float four_qi = 2. * two_qi;
 3060              		.loc 2 502 0
 3061 0044 77EE077A 		fadds	s15, s14, s14
 3062              	.LVL330:
 503:math/pprz_algebra_float.c ****     q->qi = 0.5 * two_qi;
 3063              		.loc 2 503 0
 3064 0048 27EE088A 		fmuls	s16, s14, s16
 3065              		.loc 2 504 0
 3066 004c 94ED077A 		flds	s14, [r4, #28]
 503:math/pprz_algebra_float.c ****     q->qi = 0.5 * two_qi;
 3067              		.loc 2 503 0
 3068 0050 85ED008A 		fsts	s16, [r5]
 3069              		.loc 2 504 0
 3070 0054 36EEC77A 		fsubs	s14, s13, s14
 505:math/pprz_algebra_float.c ****     q->qy = (RMAT_ELMT(*rm, 2, 0) - RMAT_ELMT(*rm, 0, 2)) / four_qi;
 3071              		.loc 2 505 0
 3072 0058 D4ED066A 		flds	s13, [r4, #24]
 504:math/pprz_algebra_float.c ****     q->qx = (RMAT_ELMT(*rm, 1, 2) - RMAT_ELMT(*rm, 2, 1)) / four_qi;
 3073              		.loc 2 504 0
 3074 005c 87EE277A 		fdivs	s14, s14, s15
 3075 0060 85ED017A 		fsts	s14, [r5, #4]
 3076              		.loc 2 505 0
 3077 0064 94ED027A 		flds	s14, [r4, #8]
 3078 0068 36EEC77A 		fsubs	s14, s13, s14
 506:math/pprz_algebra_float.c ****     q->qz = (RMAT_ELMT(*rm, 0, 1) - RMAT_ELMT(*rm, 1, 0)) / four_qi;
 3079              		.loc 2 506 0
 3080 006c D4ED016A 		flds	s13, [r4, #4]
 505:math/pprz_algebra_float.c ****     q->qy = (RMAT_ELMT(*rm, 2, 0) - RMAT_ELMT(*rm, 0, 2)) / four_qi;
 3081              		.loc 2 505 0
 3082 0070 87EE277A 		fdivs	s14, s14, s15
 3083 0074 85ED027A 		fsts	s14, [r5, #8]
 3084              		.loc 2 506 0
 3085 0078 94ED037A 		flds	s14, [r4, #12]
 3086 007c 36EEC77A 		fsubs	s14, s13, s14
 3087 0080 65E0     		b	.L105
 3088              	.LVL331:
 3089              	.L102:
 3090              	.LBE8:
 507:math/pprz_algebra_float.c ****     /*printf("tr > 0\n");*/
 508:math/pprz_algebra_float.c ****   } else {
 509:math/pprz_algebra_float.c ****     if (RMAT_ELMT(*rm, 0, 0) > RMAT_ELMT(*rm, 1, 1) &&
 3091              		.loc 2 509 0
 3092 0082 B4EEE77A 		fcmpes	s14, s15
 3093 0086 F1EE10FA 		fmstat
 3094 008a 2FDD     		ble	.L93
 3095              		.loc 2 509 0 is_stmt 0 discriminator 1
 3096 008c B4EEE67A 		fcmpes	s14, s13
 3097 0090 F1EE10FA 		fmstat
 3098 0094 2ADD     		ble	.L93
 3099              	.LBB9:
 510:math/pprz_algebra_float.c ****         RMAT_ELMT(*rm, 0, 0) > RMAT_ELMT(*rm, 2, 2)) {
 511:math/pprz_algebra_float.c ****       const float two_qx = sqrtf(RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 1, 1)
 3100              		.loc 2 511 0 is_stmt 1
 3101 0096 77EE677A 		fsubs	s15, s14, s15
 512:math/pprz_algebra_float.c ****                                  - RMAT_ELMT(*rm, 2, 2) + 1);
 3102              		.loc 2 512 0
 3103 009a 77EEE66A 		fsubs	s13, s15, s13
 511:math/pprz_algebra_float.c ****       const float two_qx = sqrtf(RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 1, 1)
 3104              		.loc 2 511 0
 3105 009e 36EE866A 		fadds	s12, s13, s12
 3106 00a2 16EE100A 		fmrs	r0, s12
 3107              	.LVL332:
 3108 00a6 FFF7FEFF 		bl	sqrtf
 3109              	.LVL333:
 513:math/pprz_algebra_float.c ****       const float four_qx = 2. * two_qx;
 514:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 1, 2) - RMAT_ELMT(*rm, 2, 1)) / four_qx;
 3110              		.loc 2 514 0
 3111 00aa 94ED056A 		flds	s12, [r4, #20]
 3112 00ae D4ED076A 		flds	s13, [r4, #28]
 511:math/pprz_algebra_float.c ****       const float two_qx = sqrtf(RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 1, 1)
 3113              		.loc 2 511 0
 3114 00b2 07EE100A 		fmsr	s14, r0
 3115              	.LVL334:
 3116              		.loc 2 514 0
 3117 00b6 76EE666A 		fsubs	s13, s12, s13
 513:math/pprz_algebra_float.c ****       const float four_qx = 2. * two_qx;
 3118              		.loc 2 513 0
 3119 00ba 77EE077A 		fadds	s15, s14, s14
 3120              	.LVL335:
 515:math/pprz_algebra_float.c ****       q->qx = 0.5 * two_qx;
 3121              		.loc 2 515 0
 3122 00be 27EE088A 		fmuls	s16, s14, s16
 514:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 1, 2) - RMAT_ELMT(*rm, 2, 1)) / four_qx;
 3123              		.loc 2 514 0
 3124 00c2 C6EEA76A 		fdivs	s13, s13, s15
 516:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qx;
 3125              		.loc 2 516 0
 3126 00c6 94ED037A 		flds	s14, [r4, #12]
 514:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 1, 2) - RMAT_ELMT(*rm, 2, 1)) / four_qx;
 3127              		.loc 2 514 0
 3128 00ca C5ED006A 		fsts	s13, [r5]
 3129              		.loc 2 516 0
 3130 00ce D4ED016A 		flds	s13, [r4, #4]
 515:math/pprz_algebra_float.c ****       q->qx = 0.5 * two_qx;
 3131              		.loc 2 515 0
 3132 00d2 85ED018A 		fsts	s16, [r5, #4]
 3133              		.loc 2 516 0
 3134 00d6 36EE877A 		fadds	s14, s13, s14
 517:math/pprz_algebra_float.c ****       q->qz = (RMAT_ELMT(*rm, 2, 0) + RMAT_ELMT(*rm, 0, 2)) / four_qx;
 3135              		.loc 2 517 0
 3136 00da D4ED066A 		flds	s13, [r4, #24]
 516:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qx;
 3137              		.loc 2 516 0
 3138 00de 87EE277A 		fdivs	s14, s14, s15
 3139 00e2 85ED027A 		fsts	s14, [r5, #8]
 3140              		.loc 2 517 0
 3141 00e6 94ED027A 		flds	s14, [r4, #8]
 3142 00ea 2EE0     		b	.L104
 3143              	.LVL336:
 3144              	.L93:
 3145              	.LBE9:
 518:math/pprz_algebra_float.c ****       /*printf("m00 largest\n");*/
 519:math/pprz_algebra_float.c ****     } else if (RMAT_ELMT(*rm, 1, 1) > RMAT_ELMT(*rm, 2, 2)) {
 3146              		.loc 2 519 0
 3147 00ec F4EEE67A 		fcmpes	s15, s13
 3148 00f0 F1EE10FA 		fmstat
 3149 00f4 30DD     		ble	.L103
 3150              	.LBB10:
 520:math/pprz_algebra_float.c ****       const float two_qy =
 521:math/pprz_algebra_float.c ****         sqrtf(RMAT_ELMT(*rm, 1, 1) - RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 2, 2) + 1);
 3151              		.loc 2 521 0
 3152 00f6 77EEC77A 		fsubs	s15, s15, s14
 3153 00fa 77EEE66A 		fsubs	s13, s15, s13
 520:math/pprz_algebra_float.c ****       const float two_qy =
 3154              		.loc 2 520 0
 3155 00fe 36EE866A 		fadds	s12, s13, s12
 3156 0102 16EE100A 		fmrs	r0, s12
 3157              	.LVL337:
 3158 0106 FFF7FEFF 		bl	sqrtf
 3159              	.LVL338:
 522:math/pprz_algebra_float.c ****       const float four_qy = 2. * two_qy;
 523:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 2, 0) - RMAT_ELMT(*rm, 0, 2)) / four_qy;
 3160              		.loc 2 523 0
 3161 010a 94ED066A 		flds	s12, [r4, #24]
 3162 010e D4ED026A 		flds	s13, [r4, #8]
 520:math/pprz_algebra_float.c ****       const float two_qy =
 3163              		.loc 2 520 0
 3164 0112 07EE100A 		fmsr	s14, r0
 3165              	.LVL339:
 3166              		.loc 2 523 0
 3167 0116 76EE666A 		fsubs	s13, s12, s13
 522:math/pprz_algebra_float.c ****       const float four_qy = 2. * two_qy;
 3168              		.loc 2 522 0
 3169 011a 77EE077A 		fadds	s15, s14, s14
 3170              	.LVL340:
 524:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qy;
 3171              		.loc 2 524 0
 3172 011e 94ED016A 		flds	s12, [r4, #4]
 523:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 2, 0) - RMAT_ELMT(*rm, 0, 2)) / four_qy;
 3173              		.loc 2 523 0
 3174 0122 C6EEA76A 		fdivs	s13, s13, s15
 525:math/pprz_algebra_float.c ****       q->qy = 0.5 * two_qy;
 3175              		.loc 2 525 0
 3176 0126 27EE088A 		fmuls	s16, s14, s16
 523:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 2, 0) - RMAT_ELMT(*rm, 0, 2)) / four_qy;
 3177              		.loc 2 523 0
 3178 012a C5ED006A 		fsts	s13, [r5]
 524:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qy;
 3179              		.loc 2 524 0
 3180 012e D4ED036A 		flds	s13, [r4, #12]
 526:math/pprz_algebra_float.c ****       q->qz = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qy;
 3181              		.loc 2 526 0
 3182 0132 94ED077A 		flds	s14, [r4, #28]
 525:math/pprz_algebra_float.c ****       q->qy = 0.5 * two_qy;
 3183              		.loc 2 525 0
 3184 0136 85ED028A 		fsts	s16, [r5, #8]
 524:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qy;
 3185              		.loc 2 524 0
 3186 013a 76EE266A 		fadds	s13, s12, s13
 3187 013e C6EEA76A 		fdivs	s13, s13, s15
 3188 0142 C5ED016A 		fsts	s13, [r5, #4]
 3189              		.loc 2 526 0
 3190 0146 D4ED056A 		flds	s13, [r4, #20]
 3191              	.LVL341:
 3192              	.L104:
 3193 014a 36EE877A 		fadds	s14, s13, s14
 3194              	.L105:
 3195 014e C7EE277A 		fdivs	s15, s14, s15
 3196 0152 C5ED037A 		fsts	s15, [r5, #12]
 3197              	.LBE10:
 3198 0156 2FE0     		b	.L89
 3199              	.LVL342:
 3200              	.L103:
 3201              	.LBB11:
 527:math/pprz_algebra_float.c ****       /*printf("m11 largest\n");*/
 528:math/pprz_algebra_float.c ****     } else {
 529:math/pprz_algebra_float.c ****       const float two_qz =
 530:math/pprz_algebra_float.c ****         sqrtf(RMAT_ELMT(*rm, 2, 2) - RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 1, 1) + 1);
 3202              		.loc 2 530 0
 3203 0158 36EEC77A 		fsubs	s14, s13, s14
 3204 015c 77EE677A 		fsubs	s15, s14, s15
 529:math/pprz_algebra_float.c ****       const float two_qz =
 3205              		.loc 2 529 0
 3206 0160 37EE866A 		fadds	s12, s15, s12
 3207 0164 16EE100A 		fmrs	r0, s12
 3208              	.LVL343:
 3209 0168 FFF7FEFF 		bl	sqrtf
 3210              	.LVL344:
 531:math/pprz_algebra_float.c ****       const float four_qz = 2. * two_qz;
 532:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 0, 1) - RMAT_ELMT(*rm, 1, 0)) / four_qz;
 3211              		.loc 2 532 0
 3212 016c 94ED016A 		flds	s12, [r4, #4]
 3213 0170 D4ED036A 		flds	s13, [r4, #12]
 529:math/pprz_algebra_float.c ****       const float two_qz =
 3214              		.loc 2 529 0
 3215 0174 07EE900A 		fmsr	s15, r0
 3216              	.LVL345:
 3217              		.loc 2 532 0
 3218 0178 76EE666A 		fsubs	s13, s12, s13
 531:math/pprz_algebra_float.c ****       const float four_qz = 2. * two_qz;
 3219              		.loc 2 531 0
 3220 017c 37EEA77A 		fadds	s14, s15, s15
 3221              	.LVL346:
 533:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 2, 0) + RMAT_ELMT(*rm, 0, 2)) / four_qz;
 3222              		.loc 2 533 0
 3223 0180 94ED066A 		flds	s12, [r4, #24]
 532:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 0, 1) - RMAT_ELMT(*rm, 1, 0)) / four_qz;
 3224              		.loc 2 532 0
 3225 0184 C6EE876A 		fdivs	s13, s13, s14
 534:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qz;
 535:math/pprz_algebra_float.c ****       q->qz = 0.5 * two_qz;
 3226              		.loc 2 535 0
 3227 0188 27EE888A 		fmuls	s16, s15, s16
 532:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 0, 1) - RMAT_ELMT(*rm, 1, 0)) / four_qz;
 3228              		.loc 2 532 0
 3229 018c C5ED006A 		fsts	s13, [r5]
 533:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 2, 0) + RMAT_ELMT(*rm, 0, 2)) / four_qz;
 3230              		.loc 2 533 0
 3231 0190 D4ED026A 		flds	s13, [r4, #8]
 3232 0194 76EE266A 		fadds	s13, s12, s13
 534:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qz;
 3233              		.loc 2 534 0
 3234 0198 94ED056A 		flds	s12, [r4, #20]
 533:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 2, 0) + RMAT_ELMT(*rm, 0, 2)) / four_qz;
 3235              		.loc 2 533 0
 3236 019c C6EE876A 		fdivs	s13, s13, s14
 3237 01a0 C5ED016A 		fsts	s13, [r5, #4]
 534:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qz;
 3238              		.loc 2 534 0
 3239 01a4 D4ED076A 		flds	s13, [r4, #28]
 3240              		.loc 2 535 0
 3241 01a8 85ED038A 		fsts	s16, [r5, #12]
 534:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qz;
 3242              		.loc 2 534 0
 3243 01ac 76EE266A 		fadds	s13, s12, s13
 3244 01b0 86EE877A 		fdivs	s14, s13, s14
 3245              	.LVL347:
 3246 01b4 85ED027A 		fsts	s14, [r5, #8]
 3247              	.LVL348:
 3248              	.L89:
 3249              	.LBE11:
 536:math/pprz_algebra_float.c ****       /*printf("m22 largest\n");*/
 537:math/pprz_algebra_float.c ****     }
 538:math/pprz_algebra_float.c ****   }
 539:math/pprz_algebra_float.c **** }
 3250              		.loc 2 539 0
 3251 01b8 BDEC028B 		fldmfdd	sp!, {d8}
 3252 01bc 38BD     		pop	{r3, r4, r5, pc}
 3253              		.cfi_endproc
 3254              	.LFE66:
 3256              		.section	.text.float_eulers_of_rmat,"ax",%progbits
 3257              		.align	1
 3258              		.global	float_eulers_of_rmat
 3259              		.thumb
 3260              		.thumb_func
 3262              	float_eulers_of_rmat:
 3263              	.LFB67:
 540:math/pprz_algebra_float.c **** 
 541:math/pprz_algebra_float.c **** 
 542:math/pprz_algebra_float.c **** /*
 543:math/pprz_algebra_float.c ****  *
 544:math/pprz_algebra_float.c ****  * Euler angle functions.
 545:math/pprz_algebra_float.c ****  *
 546:math/pprz_algebra_float.c ****  */
 547:math/pprz_algebra_float.c **** 
 548:math/pprz_algebra_float.c **** void float_eulers_of_rmat(struct FloatEulers *e, struct FloatRMat *rm)
 549:math/pprz_algebra_float.c **** {
 3264              		.loc 2 549 0
 3265              		.cfi_startproc
 3266              		@ args = 0, pretend = 0, frame = 0
 3267              		@ frame_needed = 0, uses_anonymous_args = 0
 3268              	.LVL349:
 3269 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3270              		.cfi_def_cfa_offset 24
 3271              		.cfi_offset 3, -24
 3272              		.cfi_offset 4, -20
 3273              		.cfi_offset 5, -16
 3274              		.cfi_offset 6, -12
 3275              		.cfi_offset 7, -8
 3276              		.cfi_offset 14, -4
 3277              		.loc 2 549 0
 3278 0002 0446     		mov	r4, r0
 550:math/pprz_algebra_float.c ****   const float dcm00 = rm->m[0];
 3279              		.loc 2 550 0
 3280 0004 0D68     		ldr	r5, [r1]	@ float
 3281              	.LVL350:
 551:math/pprz_algebra_float.c ****   const float dcm01 = rm->m[1];
 3282              		.loc 2 551 0
 3283 0006 4E68     		ldr	r6, [r1, #4]	@ float
 3284              	.LVL351:
 552:math/pprz_algebra_float.c ****   const float dcm02 = rm->m[2];
 3285              		.loc 2 552 0
 3286 0008 8F68     		ldr	r7, [r1, #8]	@ float
 3287              	.LVL352:
 553:math/pprz_algebra_float.c ****   const float dcm12 = rm->m[5];
 554:math/pprz_algebra_float.c ****   const float dcm22 = rm->m[8];
 555:math/pprz_algebra_float.c ****   e->phi   = atan2f(dcm12, dcm22);
 3288              		.loc 2 555 0
 3289 000a 4869     		ldr	r0, [r1, #20]	@ float
 3290              	.LVL353:
 3291 000c 096A     		ldr	r1, [r1, #32]	@ float
 3292              	.LVL354:
 3293 000e FFF7FEFF 		bl	atan2f
 3294              	.LVL355:
 3295 0012 2060     		str	r0, [r4]	@ float
 556:math/pprz_algebra_float.c ****   e->theta = -asinf(dcm02);
 3296              		.loc 2 556 0
 3297 0014 3846     		mov	r0, r7	@ float
 3298 0016 FFF7FEFF 		bl	asinf
 3299              	.LVL356:
 3300 001a 80F00040 		eor	r0, r0, #-2147483648
 3301 001e 6060     		str	r0, [r4, #4]	@ float
 557:math/pprz_algebra_float.c ****   e->psi   = atan2f(dcm01, dcm00);
 3302              		.loc 2 557 0
 3303 0020 2946     		mov	r1, r5	@ float
 3304 0022 3046     		mov	r0, r6	@ float
 3305 0024 FFF7FEFF 		bl	atan2f
 3306              	.LVL357:
 3307 0028 A060     		str	r0, [r4, #8]	@ float
 3308 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3309              		.cfi_endproc
 3310              	.LFE67:
 3312              		.section	.text.float_eulers_of_quat,"ax",%progbits
 3313              		.align	1
 3314              		.global	float_eulers_of_quat
 3315              		.thumb
 3316              		.thumb_func
 3318              	float_eulers_of_quat:
 3319              	.LFB68:
 558:math/pprz_algebra_float.c **** }
 559:math/pprz_algebra_float.c **** 
 560:math/pprz_algebra_float.c **** void float_eulers_of_quat(struct FloatEulers *e, struct FloatQuat *q)
 561:math/pprz_algebra_float.c **** {
 3320              		.loc 2 561 0
 3321              		.cfi_startproc
 3322              		@ args = 0, pretend = 0, frame = 0
 3323              		@ frame_needed = 0, uses_anonymous_args = 0
 3324              	.LVL358:
 3325 0000 10B5     		push	{r4, lr}
 3326              		.cfi_def_cfa_offset 8
 3327              		.cfi_offset 4, -8
 3328              		.cfi_offset 14, -4
 3329 0002 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 3330              		.cfi_def_cfa_offset 32
 3331              		.cfi_offset 80, -32
 3332              		.cfi_offset 82, -24
 3333              		.cfi_offset 84, -16
 562:math/pprz_algebra_float.c ****   const float qx2  = q->qx * q->qx;
 563:math/pprz_algebra_float.c ****   const float qy2  = q->qy * q->qy;
 564:math/pprz_algebra_float.c ****   const float qz2  = q->qz * q->qz;
 3334              		.loc 2 564 0
 3335 0006 91ED038A 		flds	s16, [r1, #12]
 563:math/pprz_algebra_float.c ****   const float qy2  = q->qy * q->qy;
 3336              		.loc 2 563 0
 3337 000a D1ED028A 		flds	s17, [r1, #8]
 562:math/pprz_algebra_float.c ****   const float qx2  = q->qx * q->qx;
 3338              		.loc 2 562 0
 3339 000e 91ED019A 		flds	s18, [r1, #4]
 3340              	.LVL359:
 565:math/pprz_algebra_float.c ****   const float qiqx = q->qi * q->qx;
 3341              		.loc 2 565 0
 3342 0012 D1ED009A 		flds	s19, [r1]
 566:math/pprz_algebra_float.c ****   const float qiqy = q->qi * q->qy;
 567:math/pprz_algebra_float.c ****   const float qiqz = q->qi * q->qz;
 568:math/pprz_algebra_float.c ****   const float qxqy = q->qx * q->qy;
 569:math/pprz_algebra_float.c ****   const float qxqz = q->qx * q->qz;
 570:math/pprz_algebra_float.c ****   const float qyqz = q->qy * q->qz;
 3343              		.loc 2 570 0
 3344 0016 68EE887A 		fmuls	s15, s17, s16
 563:math/pprz_algebra_float.c ****   const float qy2  = q->qy * q->qy;
 3345              		.loc 2 563 0
 3346 001a 28EEA8AA 		fmuls	s20, s17, s17
 3347              	.LVL360:
 571:math/pprz_algebra_float.c ****   const float dcm00 = 1.0 - 2.*(qy2 +  qz2);
 572:math/pprz_algebra_float.c ****   const float dcm01 =       2.*(qxqy + qiqz);
 573:math/pprz_algebra_float.c ****   const float dcm02 =       2.*(qxqz - qiqy);
 574:math/pprz_algebra_float.c ****   const float dcm12 =       2.*(qyqz + qiqx);
 3348              		.loc 2 574 0
 3349 001e E9EE897A 		vfma.f32	s15, s19, s18
 3350              	.LVL361:
 561:math/pprz_algebra_float.c **** {
 3351              		.loc 2 561 0
 3352 0022 0446     		mov	r4, r0
 3353              		.loc 2 574 0
 3354 0024 77EEA7AA 		fadds	s21, s15, s15
 3355              	.LVL362:
 575:math/pprz_algebra_float.c ****   const float dcm22 = 1.0 - 2.*(qx2 +  qy2);
 3356              		.loc 2 575 0
 3357 0028 F0EE4A7A 		fcpys	s15, s20
 3358 002c E9EE097A 		vfma.f32	s15, s18, s18
 3359              	.LVL363:
 3360 0030 17EE900A 		fmrs	r0, s15
 3361              	.LVL364:
 3362 0034 FFF7FEFF 		bl	__aeabi_f2d
 3363              	.LVL365:
 3364 0038 0246     		mov	r2, r0
 3365 003a 0B46     		mov	r3, r1
 3366 003c FFF7FEFF 		bl	__aeabi_dadd
 3367              	.LVL366:
 3368 0040 0246     		mov	r2, r0
 3369 0042 0B46     		mov	r3, r1
 3370 0044 0020     		movs	r0, #0
 3371 0046 1C49     		ldr	r1, .L108
 3372 0048 FFF7FEFF 		bl	__aeabi_dsub
 3373              	.LVL367:
 3374 004c FFF7FEFF 		bl	__aeabi_d2f
 3375              	.LVL368:
 3376 0050 0146     		mov	r1, r0	@ float
 576:math/pprz_algebra_float.c **** 
 577:math/pprz_algebra_float.c ****   e->phi = atan2f(dcm12, dcm22);
 3377              		.loc 2 577 0
 3378 0052 1AEE900A 		fmrs	r0, s21
 3379 0056 FFF7FEFF 		bl	atan2f
 3380              	.LVL369:
 569:math/pprz_algebra_float.c ****   const float qxqz = q->qx * q->qz;
 3381              		.loc 2 569 0
 3382 005a 69EE087A 		fmuls	s15, s18, s16
 3383              	.LVL370:
 3384              		.loc 2 577 0
 3385 005e 2060     		str	r0, [r4]	@ float
 573:math/pprz_algebra_float.c ****   const float dcm02 =       2.*(qxqz - qiqy);
 3386              		.loc 2 573 0
 3387 0060 E9EEE87A 		vfms.f32	s15, s19, s17
 3388              	.LVL371:
 578:math/pprz_algebra_float.c ****   e->theta = -asinf(dcm02);
 3389              		.loc 2 578 0
 3390 0064 77EEA77A 		fadds	s15, s15, s15
 3391              	.LVL372:
 3392 0068 17EE900A 		fmrs	r0, s15
 3393 006c FFF7FEFF 		bl	asinf
 3394              	.LVL373:
 571:math/pprz_algebra_float.c ****   const float dcm00 = 1.0 - 2.*(qy2 +  qz2);
 3395              		.loc 2 571 0
 3396 0070 A8EE08AA 		vfma.f32	s20, s16, s16
 3397              	.LVL374:
 3398              		.loc 2 578 0
 3399 0074 80F00040 		eor	r0, r0, #-2147483648
 3400 0078 6060     		str	r0, [r4, #4]	@ float
 571:math/pprz_algebra_float.c ****   const float dcm00 = 1.0 - 2.*(qy2 +  qz2);
 3401              		.loc 2 571 0
 3402 007a 1AEE100A 		fmrs	r0, s20
 3403 007e FFF7FEFF 		bl	__aeabi_f2d
 3404              	.LVL375:
 3405 0082 0246     		mov	r2, r0
 3406 0084 0B46     		mov	r3, r1
 3407 0086 FFF7FEFF 		bl	__aeabi_dadd
 3408              	.LVL376:
 568:math/pprz_algebra_float.c ****   const float qxqy = q->qx * q->qy;
 3409              		.loc 2 568 0
 3410 008a 69EE288A 		fmuls	s17, s18, s17
 3411              	.LVL377:
 571:math/pprz_algebra_float.c ****   const float dcm00 = 1.0 - 2.*(qy2 +  qz2);
 3412              		.loc 2 571 0
 3413 008e 0246     		mov	r2, r0
 572:math/pprz_algebra_float.c ****   const float dcm01 =       2.*(qxqy + qiqz);
 3414              		.loc 2 572 0
 3415 0090 E9EE888A 		vfma.f32	s17, s19, s16
 3416              	.LVL378:
 571:math/pprz_algebra_float.c ****   const float dcm00 = 1.0 - 2.*(qy2 +  qz2);
 3417              		.loc 2 571 0
 3418 0094 0B46     		mov	r3, r1
 3419 0096 0020     		movs	r0, #0
 3420 0098 0749     		ldr	r1, .L108
 3421 009a FFF7FEFF 		bl	__aeabi_dsub
 3422              	.LVL379:
 3423 009e FFF7FEFF 		bl	__aeabi_d2f
 3424              	.LVL380:
 572:math/pprz_algebra_float.c ****   const float dcm01 =       2.*(qxqy + qiqz);
 3425              		.loc 2 572 0
 3426 00a2 78EEA88A 		fadds	s17, s17, s17
 3427              	.LVL381:
 571:math/pprz_algebra_float.c ****   const float dcm00 = 1.0 - 2.*(qy2 +  qz2);
 3428              		.loc 2 571 0
 3429 00a6 0146     		mov	r1, r0	@ float
 579:math/pprz_algebra_float.c ****   e->psi = atan2f(dcm01, dcm00);
 3430              		.loc 2 579 0
 3431 00a8 18EE900A 		fmrs	r0, s17
 3432 00ac FFF7FEFF 		bl	atan2f
 3433              	.LVL382:
 580:math/pprz_algebra_float.c **** }
 3434              		.loc 2 580 0
 3435 00b0 BDEC068B 		fldmfdd	sp!, {d8-d10}
 3436              	.LVL383:
 579:math/pprz_algebra_float.c ****   e->psi = atan2f(dcm01, dcm00);
 3437              		.loc 2 579 0
 3438 00b4 A060     		str	r0, [r4, #8]	@ float
 3439              		.loc 2 580 0
 3440 00b6 10BD     		pop	{r4, pc}
 3441              	.LVL384:
 3442              	.L109:
 3443              		.align	2
 3444              	.L108:
 3445 00b8 0000F03F 		.word	1072693248
 3446              		.cfi_endproc
 3447              	.LFE68:
 3449              		.text
 3450              	.Letext0:
 3451              		.file 3 "/home/lsk/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pprz_algebra_float.c
     /tmp/ccyIb8LN.s:20     .text.float_quat_wrap_shortest:00000000 $t
     /tmp/ccyIb8LN.s:24     .text.float_quat_wrap_shortest:00000000 float_quat_wrap_shortest
     /tmp/ccyIb8LN.s:56     .text.float_quat_norm:00000000 $t
     /tmp/ccyIb8LN.s:60     .text.float_quat_norm:00000000 float_quat_norm
     /tmp/ccyIb8LN.s:93     .text.float_quat_normalize:00000000 $t
     /tmp/ccyIb8LN.s:97     .text.float_quat_normalize:00000000 float_quat_normalize
     /tmp/ccyIb8LN.s:141    .text.float_quat_normalize:00000048 $d
     /tmp/ccyIb8LN.s:146    .text.renorm_factor:00000000 $t
     /tmp/ccyIb8LN.s:150    .text.renorm_factor:00000000 renorm_factor
     /tmp/ccyIb8LN.s:216    .text.renorm_factor:00000068 $d
     /tmp/ccyIb8LN.s:224    .text.float_vect3_integrate_fi:00000000 $t
     /tmp/ccyIb8LN.s:229    .text.float_vect3_integrate_fi:00000000 float_vect3_integrate_fi
     /tmp/ccyIb8LN.s:264    .text.float_rates_integrate_fi:00000000 $t
     /tmp/ccyIb8LN.s:269    .text.float_rates_integrate_fi:00000000 float_rates_integrate_fi
     /tmp/ccyIb8LN.s:304    .text.float_rates_of_euler_dot:00000000 $t
     /tmp/ccyIb8LN.s:309    .text.float_rates_of_euler_dot:00000000 float_rates_of_euler_dot
     /tmp/ccyIb8LN.s:385    .text.float_rmat_inv:00000000 $t
     /tmp/ccyIb8LN.s:390    .text.float_rmat_inv:00000000 float_rmat_inv
     /tmp/ccyIb8LN.s:430    .text.float_rmat_norm:00000000 $t
     /tmp/ccyIb8LN.s:435    .text.float_rmat_norm:00000000 float_rmat_norm
     /tmp/ccyIb8LN.s:476    .text.float_rmat_comp:00000000 $t
     /tmp/ccyIb8LN.s:481    .text.float_rmat_comp:00000000 float_rmat_comp
     /tmp/ccyIb8LN.s:571    .text.float_rmat_comp_inv:00000000 $t
     /tmp/ccyIb8LN.s:576    .text.float_rmat_comp_inv:00000000 float_rmat_comp_inv
     /tmp/ccyIb8LN.s:662    .text.float_rmat_vmult:00000000 $t
     /tmp/ccyIb8LN.s:667    .text.float_rmat_vmult:00000000 float_rmat_vmult
     /tmp/ccyIb8LN.s:713    .text.float_rmat_transp_vmult:00000000 $t
     /tmp/ccyIb8LN.s:718    .text.float_rmat_transp_vmult:00000000 float_rmat_transp_vmult
     /tmp/ccyIb8LN.s:764    .text.float_rmat_ratemult:00000000 $t
     /tmp/ccyIb8LN.s:769    .text.float_rmat_ratemult:00000000 float_rmat_ratemult
     /tmp/ccyIb8LN.s:815    .text.float_rmat_transp_ratemult:00000000 $t
     /tmp/ccyIb8LN.s:820    .text.float_rmat_transp_ratemult:00000000 float_rmat_transp_ratemult
     /tmp/ccyIb8LN.s:871    .text.float_rmat_of_axis_angle:00000000 $t
     /tmp/ccyIb8LN.s:876    .text.float_rmat_of_axis_angle:00000000 float_rmat_of_axis_angle
     /tmp/ccyIb8LN.s:1068   .text.float_rmat_of_axis_angle:0000012c $d
     /tmp/ccyIb8LN.s:1073   .text.float_rmat_of_eulers_321:00000000 $t
     /tmp/ccyIb8LN.s:1078   .text.float_rmat_of_eulers_321:00000000 float_rmat_of_eulers_321
     /tmp/ccyIb8LN.s:1204   .text.float_rmat_of_eulers_312:00000000 $t
     /tmp/ccyIb8LN.s:1209   .text.float_rmat_of_eulers_312:00000000 float_rmat_of_eulers_312
     /tmp/ccyIb8LN.s:1341   .text.float_rmat_of_quat:00000000 $t
     /tmp/ccyIb8LN.s:1346   .text.float_rmat_of_quat:00000000 float_rmat_of_quat
     /tmp/ccyIb8LN.s:1488   .text.float_rmat_of_quat:000000e8 $d
     /tmp/ccyIb8LN.s:1494   .text.float_rmat_integrate_fi:00000000 $t
     /tmp/ccyIb8LN.s:1499   .text.float_rmat_integrate_fi:00000000 float_rmat_integrate_fi
     /tmp/ccyIb8LN.s:1586   .text.float_rmat_reorthogonalize:00000000 $t
     /tmp/ccyIb8LN.s:1591   .text.float_rmat_reorthogonalize:00000000 float_rmat_reorthogonalize
     /tmp/ccyIb8LN.s:1737   .text.float_quat_comp:00000000 $t
     /tmp/ccyIb8LN.s:1742   .text.float_quat_comp:00000000 float_quat_comp
     /tmp/ccyIb8LN.s:1794   .text.float_quat_comp_inv:00000000 $t
     /tmp/ccyIb8LN.s:1799   .text.float_quat_comp_inv:00000000 float_quat_comp_inv
     /tmp/ccyIb8LN.s:1851   .text.float_quat_inv_comp:00000000 $t
     /tmp/ccyIb8LN.s:1856   .text.float_quat_inv_comp:00000000 float_quat_inv_comp
     /tmp/ccyIb8LN.s:1909   .text.float_quat_comp_norm_shortest:00000000 $t
     /tmp/ccyIb8LN.s:1914   .text.float_quat_comp_norm_shortest:00000000 float_quat_comp_norm_shortest
     /tmp/ccyIb8LN.s:1946   .text.float_quat_comp_inv_norm_shortest:00000000 $t
     /tmp/ccyIb8LN.s:1951   .text.float_quat_comp_inv_norm_shortest:00000000 float_quat_comp_inv_norm_shortest
     /tmp/ccyIb8LN.s:1983   .text.float_quat_inv_comp_norm_shortest:00000000 $t
     /tmp/ccyIb8LN.s:1988   .text.float_quat_inv_comp_norm_shortest:00000000 float_quat_inv_comp_norm_shortest
     /tmp/ccyIb8LN.s:2021   .text.float_quat_differential:00000000 $t
     /tmp/ccyIb8LN.s:2026   .text.float_quat_differential:00000000 float_quat_differential
     /tmp/ccyIb8LN.s:2157   .text.float_quat_differential:000000e0 $d
     /tmp/ccyIb8LN.s:2164   .text.float_quat_integrate_fi:00000000 $t
     /tmp/ccyIb8LN.s:2169   .text.float_quat_integrate_fi:00000000 float_quat_integrate_fi
     /tmp/ccyIb8LN.s:2297   .text.float_quat_integrate_fi:000000d8 $d
     /tmp/ccyIb8LN.s:2302   .text.float_quat_integrate:00000000 $t
     /tmp/ccyIb8LN.s:2307   .text.float_quat_integrate:00000000 float_quat_integrate
     /tmp/ccyIb8LN.s:2455   .text.float_quat_integrate:00000104 $d
     /tmp/ccyIb8LN.s:2461   .text.float_quat_vmult:00000000 $t
     /tmp/ccyIb8LN.s:2466   .text.float_quat_vmult:00000000 float_quat_vmult
     /tmp/ccyIb8LN.s:2566   .text.float_quat_derivative:00000000 $t
     /tmp/ccyIb8LN.s:2571   .text.float_quat_derivative:00000000 float_quat_derivative
     /tmp/ccyIb8LN.s:2623   .text.float_quat_derivative_lagrange:00000000 $t
     /tmp/ccyIb8LN.s:2628   .text.float_quat_derivative_lagrange:00000000 float_quat_derivative_lagrange
     /tmp/ccyIb8LN.s:2711   .text.float_quat_of_eulers:00000000 $t
     /tmp/ccyIb8LN.s:2716   .text.float_quat_of_eulers:00000000 float_quat_of_eulers
     /tmp/ccyIb8LN.s:2836   .text.float_quat_of_axis_angle:00000000 $t
     /tmp/ccyIb8LN.s:2841   .text.float_quat_of_axis_angle:00000000 float_quat_of_axis_angle
     /tmp/ccyIb8LN.s:2903   .text.float_quat_of_orientation_vect:00000000 $t
     /tmp/ccyIb8LN.s:2908   .text.float_quat_of_orientation_vect:00000000 float_quat_of_orientation_vect
     /tmp/ccyIb8LN.s:3002   .text.float_quat_of_orientation_vect:000000a0 $d
     /tmp/ccyIb8LN.s:3008   .text.float_quat_of_rmat:00000000 $t
     /tmp/ccyIb8LN.s:3013   .text.float_quat_of_rmat:00000000 float_quat_of_rmat
     /tmp/ccyIb8LN.s:3257   .text.float_eulers_of_rmat:00000000 $t
     /tmp/ccyIb8LN.s:3262   .text.float_eulers_of_rmat:00000000 float_eulers_of_rmat
     /tmp/ccyIb8LN.s:3313   .text.float_eulers_of_quat:00000000 $t
     /tmp/ccyIb8LN.s:3318   .text.float_eulers_of_quat:00000000 float_eulers_of_quat
     /tmp/ccyIb8LN.s:3445   .text.float_eulers_of_quat:000000b8 $d
                     .debug_frame:00000010 $d
     /tmp/ccyIb8LN.s:2163   .text.float_quat_differential:000000ec $t
                           .group:00000000 wm4.0.61e172dafa1e7adfbd840ee8b103061f
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4._default_types.h.6.9e4229723f5523536bc8f574589d6a99
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.56.a2d04de9d47039852021e66fca39bb58
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.stdint.h.10.d0f8e374834fcfc2e296d5d5fe82f02a
                           .group:00000000 wm4.inttypes.h.24.4db40689d622c4d3b547b5801303bdae
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.math.h.35.6ddd393aa87bd6f6206738d11f2687bd
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_algebra_float.h.98.bb035bcbfa66bb186e7ea81143fd64bc

UNDEFINED SYMBOLS
sqrtf
sinf
cosf
__aeabi_f2d
__aeabi_dsub
__aeabi_dmul
__aeabi_dadd
__aeabi_d2f
__aeabi_dcmplt
cos
sin
atan2f
asinf
