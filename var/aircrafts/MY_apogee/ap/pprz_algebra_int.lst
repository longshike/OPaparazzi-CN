   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"pprz_algebra_int.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.int32_quat_wrap_shortest,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	int32_quat_wrap_shortest:
  25              	.LFB7:
  26              		.file 1 "math/pprz_algebra_int.h"
   1:math/pprz_algebra_int.h **** /*
   2:math/pprz_algebra_int.h ****  * Copyright (C) 2008-2014 The Paparazzi Team
   3:math/pprz_algebra_int.h ****  *
   4:math/pprz_algebra_int.h ****  * This file is part of paparazzi.
   5:math/pprz_algebra_int.h ****  *
   6:math/pprz_algebra_int.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:math/pprz_algebra_int.h ****  * it under the terms of the GNU General Public License as published by
   8:math/pprz_algebra_int.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:math/pprz_algebra_int.h ****  * any later version.
  10:math/pprz_algebra_int.h ****  *
  11:math/pprz_algebra_int.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:math/pprz_algebra_int.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:math/pprz_algebra_int.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:math/pprz_algebra_int.h ****  * GNU General Public License for more details.
  15:math/pprz_algebra_int.h ****  *
  16:math/pprz_algebra_int.h ****  * You should have received a copy of the GNU General Public License
  17:math/pprz_algebra_int.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:math/pprz_algebra_int.h ****  * <http://www.gnu.org/licenses/>.
  19:math/pprz_algebra_int.h ****  */
  20:math/pprz_algebra_int.h **** 
  21:math/pprz_algebra_int.h **** /**
  22:math/pprz_algebra_int.h ****  * @file pprz_algebra_int.h
  23:math/pprz_algebra_int.h ****  * @brief Paparazzi fixed point algebra.
  24:math/pprz_algebra_int.h ****  *
  25:math/pprz_algebra_int.h ****  * @addtogroup math_algebra
  26:math/pprz_algebra_int.h ****  * @{
  27:math/pprz_algebra_int.h ****  * @addtogroup math_algebra_int Fixed Point Algebra
  28:math/pprz_algebra_int.h ****  * @{
  29:math/pprz_algebra_int.h ****  */
  30:math/pprz_algebra_int.h **** 
  31:math/pprz_algebra_int.h **** #ifndef PPRZ_ALGEBRA_INT_H
  32:math/pprz_algebra_int.h **** #define PPRZ_ALGEBRA_INT_H
  33:math/pprz_algebra_int.h **** 
  34:math/pprz_algebra_int.h **** #ifdef __cplusplus
  35:math/pprz_algebra_int.h **** extern "C" {
  36:math/pprz_algebra_int.h **** #endif
  37:math/pprz_algebra_int.h **** 
  38:math/pprz_algebra_int.h **** #include "std.h"
  39:math/pprz_algebra_int.h **** #include "math/pprz_algebra.h"
  40:math/pprz_algebra_int.h **** #include "math/pprz_trig_int.h"
  41:math/pprz_algebra_int.h **** #include <stdlib.h>
  42:math/pprz_algebra_int.h **** 
  43:math/pprz_algebra_int.h **** 
  44:math/pprz_algebra_int.h **** struct Uint8Vect3 {
  45:math/pprz_algebra_int.h ****   uint8_t x;
  46:math/pprz_algebra_int.h ****   uint8_t y;
  47:math/pprz_algebra_int.h ****   uint8_t z;
  48:math/pprz_algebra_int.h **** };
  49:math/pprz_algebra_int.h **** 
  50:math/pprz_algebra_int.h **** struct Int8Vect3 {
  51:math/pprz_algebra_int.h ****   int8_t x;
  52:math/pprz_algebra_int.h ****   int8_t y;
  53:math/pprz_algebra_int.h ****   int8_t z;
  54:math/pprz_algebra_int.h **** };
  55:math/pprz_algebra_int.h **** 
  56:math/pprz_algebra_int.h **** struct Uint16Vect3 {
  57:math/pprz_algebra_int.h ****   uint16_t x;
  58:math/pprz_algebra_int.h ****   uint16_t y;
  59:math/pprz_algebra_int.h ****   uint16_t z;
  60:math/pprz_algebra_int.h **** };
  61:math/pprz_algebra_int.h **** 
  62:math/pprz_algebra_int.h **** struct Int16Vect3 {
  63:math/pprz_algebra_int.h ****   int16_t x;
  64:math/pprz_algebra_int.h ****   int16_t y;
  65:math/pprz_algebra_int.h ****   int16_t z;
  66:math/pprz_algebra_int.h **** };
  67:math/pprz_algebra_int.h **** 
  68:math/pprz_algebra_int.h **** #define INT32_POS_FRAC 8
  69:math/pprz_algebra_int.h **** #define INT32_POS_OF_CM 2.56
  70:math/pprz_algebra_int.h **** #define INT32_POS_OF_CM_NUM 64
  71:math/pprz_algebra_int.h **** #define INT32_POS_OF_CM_DEN 25
  72:math/pprz_algebra_int.h **** 
  73:math/pprz_algebra_int.h **** #define INT32_SPEED_FRAC 19
  74:math/pprz_algebra_int.h **** #define INT32_SPEED_OF_CM_S 5242.88
  75:math/pprz_algebra_int.h **** #define INT32_SPEED_OF_CM_S_NUM 41943
  76:math/pprz_algebra_int.h **** #define INT32_SPEED_OF_CM_S_DEN 8
  77:math/pprz_algebra_int.h **** 
  78:math/pprz_algebra_int.h **** #define INT32_ACCEL_FRAC 10
  79:math/pprz_algebra_int.h **** #define INT32_MAG_FRAC 11
  80:math/pprz_algebra_int.h **** 
  81:math/pprz_algebra_int.h **** #define INT32_PERCENTAGE_FRAC 10
  82:math/pprz_algebra_int.h **** 
  83:math/pprz_algebra_int.h **** struct Int32Vect2 {
  84:math/pprz_algebra_int.h ****   int32_t x;
  85:math/pprz_algebra_int.h ****   int32_t y;
  86:math/pprz_algebra_int.h **** };
  87:math/pprz_algebra_int.h **** 
  88:math/pprz_algebra_int.h **** struct Int32Vect3 {
  89:math/pprz_algebra_int.h ****   int32_t x;
  90:math/pprz_algebra_int.h ****   int32_t y;
  91:math/pprz_algebra_int.h ****   int32_t z;
  92:math/pprz_algebra_int.h **** };
  93:math/pprz_algebra_int.h **** 
  94:math/pprz_algebra_int.h **** /* Rotation quaternions                         */
  95:math/pprz_algebra_int.h **** #define INT32_QUAT_FRAC 15
  96:math/pprz_algebra_int.h **** /**
  97:math/pprz_algebra_int.h ****  * @brief Rotation quaternion
  98:math/pprz_algebra_int.h ****  * @details Units: BFP with #INT32_QUAT_FRAC */
  99:math/pprz_algebra_int.h **** struct Int32Quat {
 100:math/pprz_algebra_int.h ****   int32_t qi;
 101:math/pprz_algebra_int.h ****   int32_t qx;
 102:math/pprz_algebra_int.h ****   int32_t qy;
 103:math/pprz_algebra_int.h ****   int32_t qz;
 104:math/pprz_algebra_int.h **** };
 105:math/pprz_algebra_int.h **** 
 106:math/pprz_algebra_int.h **** 
 107:math/pprz_algebra_int.h **** struct Int64Quat {
 108:math/pprz_algebra_int.h ****   int64_t qi;
 109:math/pprz_algebra_int.h ****   int64_t qx;
 110:math/pprz_algebra_int.h ****   int64_t qy;
 111:math/pprz_algebra_int.h ****   int64_t qz;
 112:math/pprz_algebra_int.h **** };
 113:math/pprz_algebra_int.h **** 
 114:math/pprz_algebra_int.h **** 
 115:math/pprz_algebra_int.h **** /* Euler angles                                 */
 116:math/pprz_algebra_int.h **** #define INT32_ANGLE_FRAC 12
 117:math/pprz_algebra_int.h **** #define INT32_RATE_FRAC 12
 118:math/pprz_algebra_int.h **** #define INT32_ANGLE_PI_4   (int32_t)ANGLE_BFP_OF_REAL(   0.7853981633974483096156608458198757)
 119:math/pprz_algebra_int.h **** #define INT32_ANGLE_PI_2   (int32_t)ANGLE_BFP_OF_REAL(   1.5707963267948966192313216916397514)
 120:math/pprz_algebra_int.h **** #define INT32_ANGLE_PI     (int32_t)ANGLE_BFP_OF_REAL(   3.1415926535897932384626433832795029)
 121:math/pprz_algebra_int.h **** #define INT32_ANGLE_2_PI   (int32_t)ANGLE_BFP_OF_REAL(2.*3.1415926535897932384626433832795029)
 122:math/pprz_algebra_int.h **** 
 123:math/pprz_algebra_int.h **** #define INT32_RAD_OF_DEG(_deg) (int32_t)(((int64_t)(_deg) * 14964008)/857374503)
 124:math/pprz_algebra_int.h **** #define INT32_DEG_OF_RAD(_rad) (int32_t)(((int64_t)(_rad) * 857374503)/14964008)
 125:math/pprz_algebra_int.h **** 
 126:math/pprz_algebra_int.h **** #define INT32_ANGLE_NORMALIZE(_a) {             \
 127:math/pprz_algebra_int.h ****     while ((_a) > INT32_ANGLE_PI)  (_a) -= INT32_ANGLE_2_PI;    \
 128:math/pprz_algebra_int.h ****     while ((_a) < -INT32_ANGLE_PI) (_a) += INT32_ANGLE_2_PI;    \
 129:math/pprz_algebra_int.h ****   }
 130:math/pprz_algebra_int.h **** 
 131:math/pprz_algebra_int.h **** #define INT32_COURSE_NORMALIZE(_a) {                \
 132:math/pprz_algebra_int.h ****     while ((_a) < 0) (_a) += INT32_ANGLE_2_PI;                  \
 133:math/pprz_algebra_int.h ****     while ((_a) >= INT32_ANGLE_2_PI)  (_a) -= INT32_ANGLE_2_PI; \
 134:math/pprz_algebra_int.h ****   }
 135:math/pprz_algebra_int.h **** 
 136:math/pprz_algebra_int.h **** 
 137:math/pprz_algebra_int.h **** struct Int16Eulers {
 138:math/pprz_algebra_int.h ****   int16_t phi;
 139:math/pprz_algebra_int.h ****   int16_t theta;
 140:math/pprz_algebra_int.h ****   int16_t psi;
 141:math/pprz_algebra_int.h **** };
 142:math/pprz_algebra_int.h **** 
 143:math/pprz_algebra_int.h **** /**
 144:math/pprz_algebra_int.h ****  * @brief euler angles
 145:math/pprz_algebra_int.h ****  * @details Units: rad in BFP with #INT32_ANGLE_FRAC */
 146:math/pprz_algebra_int.h **** struct Int32Eulers {
 147:math/pprz_algebra_int.h ****   int32_t phi;   ///< in rad with #INT32_ANGLE_FRAC
 148:math/pprz_algebra_int.h ****   int32_t theta; ///< in rad with #INT32_ANGLE_FRAC
 149:math/pprz_algebra_int.h ****   int32_t psi;   ///< in rad with #INT32_ANGLE_FRAC
 150:math/pprz_algebra_int.h **** };
 151:math/pprz_algebra_int.h **** 
 152:math/pprz_algebra_int.h **** 
 153:math/pprz_algebra_int.h **** /* Rotation matrix. */
 154:math/pprz_algebra_int.h **** #define INT32_TRIG_FRAC 14
 155:math/pprz_algebra_int.h **** 
 156:math/pprz_algebra_int.h **** /**
 157:math/pprz_algebra_int.h ****  * @brief rotation matrix
 158:math/pprz_algebra_int.h ****  * @details Units: rad in BFP with #INT32_TRIG_FRAC */
 159:math/pprz_algebra_int.h **** struct Int32RMat {
 160:math/pprz_algebra_int.h ****   int32_t m[3 * 3];
 161:math/pprz_algebra_int.h **** };
 162:math/pprz_algebra_int.h **** 
 163:math/pprz_algebra_int.h **** /* 3x3 matrix                                    */
 164:math/pprz_algebra_int.h **** struct Int32Mat33 {
 165:math/pprz_algebra_int.h ****   int32_t m[3 * 3];
 166:math/pprz_algebra_int.h **** };
 167:math/pprz_algebra_int.h **** 
 168:math/pprz_algebra_int.h **** /* Rotational speed                              */
 169:math/pprz_algebra_int.h **** struct Int16Rates {
 170:math/pprz_algebra_int.h ****   int16_t p;
 171:math/pprz_algebra_int.h ****   int16_t q;
 172:math/pprz_algebra_int.h ****   int16_t r;
 173:math/pprz_algebra_int.h **** };
 174:math/pprz_algebra_int.h **** 
 175:math/pprz_algebra_int.h **** /* Rotational speed                              */
 176:math/pprz_algebra_int.h **** /**
 177:math/pprz_algebra_int.h ****  * @brief angular rates
 178:math/pprz_algebra_int.h ****  * @details Units: rad/s in BFP with #INT32_RATE_FRAC */
 179:math/pprz_algebra_int.h **** struct Int32Rates {
 180:math/pprz_algebra_int.h ****   int32_t p; ///< in rad/s with #INT32_RATE_FRAC
 181:math/pprz_algebra_int.h ****   int32_t q; ///< in rad/s with #INT32_RATE_FRAC
 182:math/pprz_algebra_int.h ****   int32_t r; ///< in rad/s with #INT32_RATE_FRAC
 183:math/pprz_algebra_int.h **** };
 184:math/pprz_algebra_int.h **** 
 185:math/pprz_algebra_int.h **** struct Int64Rates {
 186:math/pprz_algebra_int.h ****   int64_t p;
 187:math/pprz_algebra_int.h ****   int64_t q;
 188:math/pprz_algebra_int.h ****   int64_t r;
 189:math/pprz_algebra_int.h **** };
 190:math/pprz_algebra_int.h **** 
 191:math/pprz_algebra_int.h **** 
 192:math/pprz_algebra_int.h **** struct Int64Vect2 {
 193:math/pprz_algebra_int.h ****   int64_t x;
 194:math/pprz_algebra_int.h ****   int64_t y;
 195:math/pprz_algebra_int.h **** };
 196:math/pprz_algebra_int.h **** 
 197:math/pprz_algebra_int.h **** struct Int64Vect3 {
 198:math/pprz_algebra_int.h ****   int64_t x;
 199:math/pprz_algebra_int.h ****   int64_t y;
 200:math/pprz_algebra_int.h ****   int64_t z;
 201:math/pprz_algebra_int.h **** };
 202:math/pprz_algebra_int.h **** 
 203:math/pprz_algebra_int.h **** 
 204:math/pprz_algebra_int.h **** // Real (floating point) ->  Binary Fixed Point  (int)
 205:math/pprz_algebra_int.h **** #define BFP_OF_REAL(_vr, _frac)    ((_vr)*(1<<(_frac)))
 206:math/pprz_algebra_int.h **** #define FLOAT_OF_BFP(_vbfp, _frac) ((float)(_vbfp)/(1<<(_frac)))
 207:math/pprz_algebra_int.h **** #define DOUBLE_OF_BFP(_vbfp, _frac) ((double)(_vbfp)/(1<<(_frac)))
 208:math/pprz_algebra_int.h **** #define RATE_BFP_OF_REAL(_af)   BFP_OF_REAL((_af), INT32_RATE_FRAC)
 209:math/pprz_algebra_int.h **** #define RATE_FLOAT_OF_BFP(_ai)  FLOAT_OF_BFP((_ai), INT32_RATE_FRAC)
 210:math/pprz_algebra_int.h **** #define ANGLE_BFP_OF_REAL(_af)  BFP_OF_REAL((_af), INT32_ANGLE_FRAC)
 211:math/pprz_algebra_int.h **** #define ANGLE_FLOAT_OF_BFP(_ai) FLOAT_OF_BFP((_ai), INT32_ANGLE_FRAC)
 212:math/pprz_algebra_int.h **** #define QUAT1_BFP_OF_REAL(_qf)  BFP_OF_REAL((_qf), INT32_QUAT_FRAC)
 213:math/pprz_algebra_int.h **** #define QUAT1_FLOAT_OF_BFP(_qi) FLOAT_OF_BFP((_qi), INT32_QUAT_FRAC)
 214:math/pprz_algebra_int.h **** #define TRIG_BFP_OF_REAL(_tf)   BFP_OF_REAL((_tf), INT32_TRIG_FRAC)
 215:math/pprz_algebra_int.h **** #define TRIG_FLOAT_OF_BFP(_ti)  FLOAT_OF_BFP((_ti),INT32_TRIG_FRAC)
 216:math/pprz_algebra_int.h **** #define POS_BFP_OF_REAL(_af)    BFP_OF_REAL((_af), INT32_POS_FRAC)
 217:math/pprz_algebra_int.h **** #define POS_FLOAT_OF_BFP(_ai)   FLOAT_OF_BFP((_ai), INT32_POS_FRAC)
 218:math/pprz_algebra_int.h **** #define SPEED_BFP_OF_REAL(_af)  BFP_OF_REAL((_af), INT32_SPEED_FRAC)
 219:math/pprz_algebra_int.h **** #define SPEED_FLOAT_OF_BFP(_ai) FLOAT_OF_BFP((_ai), INT32_SPEED_FRAC)
 220:math/pprz_algebra_int.h **** #define ACCEL_BFP_OF_REAL(_af)  BFP_OF_REAL((_af), INT32_ACCEL_FRAC)
 221:math/pprz_algebra_int.h **** #define ACCEL_FLOAT_OF_BFP(_ai) FLOAT_OF_BFP((_ai), INT32_ACCEL_FRAC)
 222:math/pprz_algebra_int.h **** #define MAG_BFP_OF_REAL(_af)    BFP_OF_REAL((_af), INT32_MAG_FRAC)
 223:math/pprz_algebra_int.h **** #define MAG_FLOAT_OF_BFP(_ai)   FLOAT_OF_BFP((_ai), INT32_MAG_FRAC)
 224:math/pprz_algebra_int.h **** 
 225:math/pprz_algebra_int.h **** #define INT_MULT_RSHIFT(_a, _b, _r) (((_a)*(_b))>>(_r))
 226:math/pprz_algebra_int.h **** 
 227:math/pprz_algebra_int.h **** 
 228:math/pprz_algebra_int.h **** extern uint32_t int32_sqrt(uint32_t in);
 229:math/pprz_algebra_int.h **** #define INT32_SQRT(_out,_in) { _out = int32_sqrt(_in); }
 230:math/pprz_algebra_int.h **** 
 231:math/pprz_algebra_int.h **** 
 232:math/pprz_algebra_int.h **** /*
 233:math/pprz_algebra_int.h ****  * Dimension 2 Vectors
 234:math/pprz_algebra_int.h ****  */
 235:math/pprz_algebra_int.h **** 
 236:math/pprz_algebra_int.h **** #define INT_VECT2_ZERO(_v) VECT2_ASSIGN(_v, 0, 0)
 237:math/pprz_algebra_int.h **** 
 238:math/pprz_algebra_int.h **** /* macros also usable if _v is not a Int32Vect2, but a different struct with x,y members */
 239:math/pprz_algebra_int.h **** #define INT32_VECT2_NORM(_v) int32_sqrt(VECT2_NORM2(_v))
 240:math/pprz_algebra_int.h **** 
 241:math/pprz_algebra_int.h **** /** return squared norm of 2D vector */
 242:math/pprz_algebra_int.h **** static inline uint32_t int32_vect2_norm2(struct Int32Vect2 *v)
 243:math/pprz_algebra_int.h **** {
 244:math/pprz_algebra_int.h ****   return v->x * v->x + v->y * v->y;
 245:math/pprz_algebra_int.h **** }
 246:math/pprz_algebra_int.h **** 
 247:math/pprz_algebra_int.h **** /** return norm of 2D vector */
 248:math/pprz_algebra_int.h **** static inline uint32_t int32_vect2_norm(struct Int32Vect2 *v)
 249:math/pprz_algebra_int.h **** {
 250:math/pprz_algebra_int.h ****   return int32_sqrt(int32_vect2_norm2(v));
 251:math/pprz_algebra_int.h **** }
 252:math/pprz_algebra_int.h **** 
 253:math/pprz_algebra_int.h **** /** normalize 2D vector inplace */
 254:math/pprz_algebra_int.h **** static inline void int32_vect2_normalize(struct Int32Vect2 *v, uint8_t frac)
 255:math/pprz_algebra_int.h **** {
 256:math/pprz_algebra_int.h ****   const uint32_t n = int32_vect2_norm(v);
 257:math/pprz_algebra_int.h ****   if (n > 0) {
 258:math/pprz_algebra_int.h ****     const int32_t f = BFP_OF_REAL((1.), frac);
 259:math/pprz_algebra_int.h ****     v->x = v->x * f / (int32_t)n;
 260:math/pprz_algebra_int.h ****     v->y = v->y * f / (int32_t)n;
 261:math/pprz_algebra_int.h ****   }
 262:math/pprz_algebra_int.h **** }
 263:math/pprz_algebra_int.h **** 
 264:math/pprz_algebra_int.h **** #define INT32_VECT2_NORMALIZE(_v,_frac) int32_vect2_normalize(&(_v), _frac)
 265:math/pprz_algebra_int.h **** 
 266:math/pprz_algebra_int.h **** 
 267:math/pprz_algebra_int.h **** #define INT32_VECT2_RSHIFT(_o, _i, _r) { \
 268:math/pprz_algebra_int.h ****     (_o).x = ((_i).x >> (_r)); \
 269:math/pprz_algebra_int.h ****     (_o).y = ((_i).y >> (_r)); \
 270:math/pprz_algebra_int.h ****   }
 271:math/pprz_algebra_int.h **** 
 272:math/pprz_algebra_int.h **** #define INT32_VECT2_LSHIFT(_o, _i, _l) { \
 273:math/pprz_algebra_int.h ****     (_o).x = ((_i).x << (_l)); \
 274:math/pprz_algebra_int.h ****     (_o).y = ((_i).y << (_l)); \
 275:math/pprz_algebra_int.h ****   }
 276:math/pprz_algebra_int.h **** 
 277:math/pprz_algebra_int.h **** #define INT32_VECT2_SCALE_2(_a, _b, _num, _den) {   \
 278:math/pprz_algebra_int.h ****     (_a).x = ((_b).x * (_num)) / (_den);        \
 279:math/pprz_algebra_int.h ****     (_a).y = ((_b).y * (_num)) / (_den);        \
 280:math/pprz_algebra_int.h ****   }
 281:math/pprz_algebra_int.h **** 
 282:math/pprz_algebra_int.h **** /*
 283:math/pprz_algebra_int.h ****  * Dimension 3 Vectors
 284:math/pprz_algebra_int.h ****  */
 285:math/pprz_algebra_int.h **** 
 286:math/pprz_algebra_int.h **** #define INT_VECT3_ZERO(_v) VECT3_ASSIGN(_v, 0, 0, 0)
 287:math/pprz_algebra_int.h **** #define INT32_VECT3_ZERO(_v) VECT3_ASSIGN(_v, 0, 0, 0)
 288:math/pprz_algebra_int.h **** 
 289:math/pprz_algebra_int.h **** #define INT32_VECT3_SCALE_2(_a, _b, _num, _den) {   \
 290:math/pprz_algebra_int.h ****     (_a).x = ((_b).x * (_num)) / (_den);        \
 291:math/pprz_algebra_int.h ****     (_a).y = ((_b).y * (_num)) / (_den);        \
 292:math/pprz_algebra_int.h ****     (_a).z = ((_b).z * (_num)) / (_den);        \
 293:math/pprz_algebra_int.h ****   }
 294:math/pprz_algebra_int.h **** 
 295:math/pprz_algebra_int.h **** #define INT32_VECT3_NORM(_v) int32_sqrt(VECT3_NORM2(_v))
 296:math/pprz_algebra_int.h **** 
 297:math/pprz_algebra_int.h **** #define INT32_VECT3_RSHIFT(_o, _i, _r) { \
 298:math/pprz_algebra_int.h ****     (_o).x = ((_i).x >> (_r));       \
 299:math/pprz_algebra_int.h ****     (_o).y = ((_i).y >> (_r));       \
 300:math/pprz_algebra_int.h ****     (_o).z = ((_i).z >> (_r));       \
 301:math/pprz_algebra_int.h ****   }
 302:math/pprz_algebra_int.h **** 
 303:math/pprz_algebra_int.h **** #define INT32_VECT3_LSHIFT(_o, _i, _l) { \
 304:math/pprz_algebra_int.h ****     (_o).x = ((_i).x << (_l));       \
 305:math/pprz_algebra_int.h ****     (_o).y = ((_i).y << (_l));       \
 306:math/pprz_algebra_int.h ****     (_o).z = ((_i).z << (_l));       \
 307:math/pprz_algebra_int.h ****   }
 308:math/pprz_algebra_int.h **** 
 309:math/pprz_algebra_int.h **** 
 310:math/pprz_algebra_int.h **** 
 311:math/pprz_algebra_int.h **** /*
 312:math/pprz_algebra_int.h ****  * 3x3 Matrices
 313:math/pprz_algebra_int.h ****  */
 314:math/pprz_algebra_int.h **** #define INT32_MAT33_ZERO(_m) {                      \
 315:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 0) = 0;                     \
 316:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 1) = 0;                     \
 317:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 2) = 0;                     \
 318:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 0) = 0;                     \
 319:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 1) = 0;                     \
 320:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 2) = 0;                     \
 321:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 0) = 0;                     \
 322:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 1) = 0;                     \
 323:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 2) = 0;                     \
 324:math/pprz_algebra_int.h ****   }
 325:math/pprz_algebra_int.h **** 
 326:math/pprz_algebra_int.h **** #define INT32_MAT33_DIAG(_m, _d00, _d11, _d22) {    \
 327:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 0) = (_d00);                \
 328:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 1) = 0;                     \
 329:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 0, 2) = 0;                     \
 330:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 0) = 0;                     \
 331:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 1) = (_d11);                \
 332:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 1, 2) = 0;                     \
 333:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 0) = 0;                     \
 334:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 1) = 0;                     \
 335:math/pprz_algebra_int.h ****     MAT33_ELMT((_m), 2, 2) = (_d22);                \
 336:math/pprz_algebra_int.h ****   }
 337:math/pprz_algebra_int.h **** 
 338:math/pprz_algebra_int.h **** 
 339:math/pprz_algebra_int.h **** 
 340:math/pprz_algebra_int.h **** /*
 341:math/pprz_algebra_int.h ****  * Rotation matrices
 342:math/pprz_algebra_int.h ****  */
 343:math/pprz_algebra_int.h **** 
 344:math/pprz_algebra_int.h **** /** initialises a rotation matrix to identity */
 345:math/pprz_algebra_int.h **** static inline void int32_rmat_identity(struct Int32RMat *rm)
 346:math/pprz_algebra_int.h **** {
 347:math/pprz_algebra_int.h ****   INT32_MAT33_DIAG(*rm, TRIG_BFP_OF_REAL(1.), TRIG_BFP_OF_REAL(1.), TRIG_BFP_OF_REAL(1.));
 348:math/pprz_algebra_int.h **** }
 349:math/pprz_algebra_int.h **** 
 350:math/pprz_algebra_int.h **** /** Composition (multiplication) of two rotation matrices.
 351:math/pprz_algebra_int.h ****  * m_a2c = m_a2b comp m_b2c , aka  m_a2c = m_b2c * m_a2b
 352:math/pprz_algebra_int.h ****  */
 353:math/pprz_algebra_int.h **** extern void int32_rmat_comp(struct Int32RMat *m_a2c, struct Int32RMat *m_a2b,
 354:math/pprz_algebra_int.h ****                             struct Int32RMat *m_b2c);
 355:math/pprz_algebra_int.h **** 
 356:math/pprz_algebra_int.h **** /** Composition (multiplication) of two rotation matrices.
 357:math/pprz_algebra_int.h ****  * m_a2b = m_a2c comp_inv m_b2c , aka  m_a2b = inv(_m_b2c) * m_a2c
 358:math/pprz_algebra_int.h ****  */
 359:math/pprz_algebra_int.h **** extern void int32_rmat_comp_inv(struct Int32RMat *m_a2b, struct Int32RMat *m_a2c,
 360:math/pprz_algebra_int.h ****                                 struct Int32RMat *m_b2c);
 361:math/pprz_algebra_int.h **** 
 362:math/pprz_algebra_int.h **** /** rotate 3D vector by rotation matrix.
 363:math/pprz_algebra_int.h ****  * vb = m_a2b * va
 364:math/pprz_algebra_int.h ****  */
 365:math/pprz_algebra_int.h **** extern void int32_rmat_vmult(struct Int32Vect3 *vb, struct Int32RMat *m_a2b,
 366:math/pprz_algebra_int.h ****                              struct Int32Vect3 *va);
 367:math/pprz_algebra_int.h **** 
 368:math/pprz_algebra_int.h **** /** rotate 3D vector by transposed rotation matrix.
 369:math/pprz_algebra_int.h ****  * vb = m_b2a^T * va
 370:math/pprz_algebra_int.h ****  */
 371:math/pprz_algebra_int.h **** extern void int32_rmat_transp_vmult(struct Int32Vect3 *vb, struct Int32RMat *m_b2a,
 372:math/pprz_algebra_int.h ****                                     struct Int32Vect3 *va);
 373:math/pprz_algebra_int.h **** 
 374:math/pprz_algebra_int.h **** /** rotate anglular rates by rotation matrix.
 375:math/pprz_algebra_int.h ****  * rb = m_a2b * ra
 376:math/pprz_algebra_int.h ****  */
 377:math/pprz_algebra_int.h **** extern void int32_rmat_ratemult(struct Int32Rates *rb, struct Int32RMat *m_a2b,
 378:math/pprz_algebra_int.h ****                                 struct Int32Rates *ra);
 379:math/pprz_algebra_int.h **** 
 380:math/pprz_algebra_int.h **** /** rotate anglular rates by transposed rotation matrix.
 381:math/pprz_algebra_int.h ****  * rb = m_b2a^T * ra
 382:math/pprz_algebra_int.h ****  */
 383:math/pprz_algebra_int.h **** extern void int32_rmat_transp_ratemult(struct Int32Rates *rb, struct Int32RMat *m_b2a,
 384:math/pprz_algebra_int.h ****                                        struct Int32Rates *ra);
 385:math/pprz_algebra_int.h **** 
 386:math/pprz_algebra_int.h **** /// Convert unit quaternion to rotation matrix.
 387:math/pprz_algebra_int.h **** extern void int32_rmat_of_quat(struct Int32RMat *rm, struct Int32Quat *q);
 388:math/pprz_algebra_int.h **** 
 389:math/pprz_algebra_int.h **** /** Rotation matrix from 321 Euler angles (int).
 390:math/pprz_algebra_int.h ****  * The Euler angles are interpreted as zy'x'' (intrinsic) rotation.
 391:math/pprz_algebra_int.h ****  * First rotate around z with psi, then around the new y' with theta,
 392:math/pprz_algebra_int.h ****  * then around new x'' with phi.
 393:math/pprz_algebra_int.h ****  * This is the same as a xyz (extrinsic) rotation,
 394:math/pprz_algebra_int.h ****  * rotating around the fixed x, then y then z axis.
 395:math/pprz_algebra_int.h ****  * - psi range: -pi < psi <= pi
 396:math/pprz_algebra_int.h ****  * - theta range: -pi/2 <= theta <= pi/2
 397:math/pprz_algebra_int.h ****  * - phi range: -pi < phi <= pi
 398:math/pprz_algebra_int.h ****  * @param[out] rm pointer to rotation matrix
 399:math/pprz_algebra_int.h ****  * @param[in]  e pointer to Euler angles
 400:math/pprz_algebra_int.h ****  */
 401:math/pprz_algebra_int.h **** extern void int32_rmat_of_eulers_321(struct Int32RMat *rm, struct Int32Eulers *e);
 402:math/pprz_algebra_int.h **** 
 403:math/pprz_algebra_int.h **** /// Rotation matrix from 312 Euler angles.
 404:math/pprz_algebra_int.h **** extern void int32_rmat_of_eulers_312(struct Int32RMat *rm, struct Int32Eulers *e);
 405:math/pprz_algebra_int.h **** 
 406:math/pprz_algebra_int.h **** /// Rotation matrix from Euler angles.
 407:math/pprz_algebra_int.h **** #define int32_rmat_of_eulers int32_rmat_of_eulers_321
 408:math/pprz_algebra_int.h **** 
 409:math/pprz_algebra_int.h **** /* defines for backwards compatibility */
 410:math/pprz_algebra_int.h **** #define INT32_RMAT_COMP(_m_a2c, _m_a2b, _m_b2c) int32_rmat_comp(&(_m_a2c), &(_m_a2b), &(_m_b2c))
 411:math/pprz_algebra_int.h **** #define INT32_RMAT_COMP_INV(_m_a2b, _m_a2c, _m_b2c) int32_rmat_comp_inv(&(_m_a2b), &(_m_a2c), &(_m_
 412:math/pprz_algebra_int.h **** #define INT32_RMAT_VMULT(_vb, _m_a2b, _va) int32_rmat_vmult(&(_vb), &(_m_a2b), &(_va))
 413:math/pprz_algebra_int.h **** #define INT32_RMAT_TRANSP_VMULT(_vb, _m_b2a, _va) int32_rmat_transp_vmult(&(_vb), &(_m_b2a), &(_va)
 414:math/pprz_algebra_int.h **** #define INT32_RMAT_RATEMULT(_rb, _m_a2b, _ra) int32_rmat_ratemult(&(_rb), &(_m_a2b), &(_ra))
 415:math/pprz_algebra_int.h **** #define INT32_RMAT_TRANSP_RATEMULT(_rb, _m_b2a, _ra) int32_rmat_ratemult(&(_rb), &(_m_b2a), &(_ra))
 416:math/pprz_algebra_int.h **** 
 417:math/pprz_algebra_int.h **** #define INT32_RMAT_OF_QUAT(_rm, _q) int32_rmat_of_quat(&(_rm), &(_q))
 418:math/pprz_algebra_int.h **** #define INT32_RMAT_OF_EULERS(_rm, _e) int32_rmat_of_eulers_321(&(_rm), &(_e))
 419:math/pprz_algebra_int.h **** #define INT32_RMAT_OF_EULERS_321(_rm, _e) int32_rmat_of_eulers_321(&(_rm), &(_e))
 420:math/pprz_algebra_int.h **** #define INT32_RMAT_OF_EULERS_312(_rm, _e) int32_rmat_of_eulers_312(&(_rm), &(_e))
 421:math/pprz_algebra_int.h **** 
 422:math/pprz_algebra_int.h **** 
 423:math/pprz_algebra_int.h **** /*
 424:math/pprz_algebra_int.h ****  *
 425:math/pprz_algebra_int.h ****  * Quaternions
 426:math/pprz_algebra_int.h ****  *
 427:math/pprz_algebra_int.h ****  */
 428:math/pprz_algebra_int.h **** 
 429:math/pprz_algebra_int.h **** /** initialises a quaternion to identity */
 430:math/pprz_algebra_int.h **** static inline void int32_quat_identity(struct Int32Quat *q)
 431:math/pprz_algebra_int.h **** {
 432:math/pprz_algebra_int.h ****   q->qi = QUAT1_BFP_OF_REAL(1);
 433:math/pprz_algebra_int.h ****   q->qx = 0;
 434:math/pprz_algebra_int.h ****   q->qy = 0;
 435:math/pprz_algebra_int.h ****   q->qz = 0;
 436:math/pprz_algebra_int.h **** }
 437:math/pprz_algebra_int.h **** 
 438:math/pprz_algebra_int.h **** /** Norm of a quaternion.
 439:math/pprz_algebra_int.h ****  */
 440:math/pprz_algebra_int.h **** static inline uint32_t int32_quat_norm(struct Int32Quat *q)
 441:math/pprz_algebra_int.h **** {
 442:math/pprz_algebra_int.h ****   uint32_t n2 = q->qi * q->qi + q->qx * q->qx + q->qy * q->qy + q->qz * q->qz;
 443:math/pprz_algebra_int.h ****   return int32_sqrt(n2);
 444:math/pprz_algebra_int.h **** }
 445:math/pprz_algebra_int.h **** 
 446:math/pprz_algebra_int.h **** static inline void int32_quat_wrap_shortest(struct Int32Quat *q)
 447:math/pprz_algebra_int.h **** {
  27              		.loc 1 447 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 448:math/pprz_algebra_int.h ****   if (q->qi < 0) {
  33              		.loc 1 448 0
  34 0000 0368     		ldr	r3, [r0]
  35 0002 002B     		cmp	r3, #0
  36 0004 0ADA     		bge	.L1
 449:math/pprz_algebra_int.h ****     QUAT_EXPLEMENTARY(*q, *q);
  37              		.loc 1 449 0
  38 0006 5B42     		negs	r3, r3
  39 0008 0360     		str	r3, [r0]
  40 000a 4368     		ldr	r3, [r0, #4]
  41 000c 5B42     		negs	r3, r3
  42 000e 4360     		str	r3, [r0, #4]
  43 0010 8368     		ldr	r3, [r0, #8]
  44 0012 5B42     		negs	r3, r3
  45 0014 8360     		str	r3, [r0, #8]
  46 0016 C368     		ldr	r3, [r0, #12]
  47 0018 5B42     		negs	r3, r3
  48 001a C360     		str	r3, [r0, #12]
  49              	.L1:
  50 001c 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE7:
  54              		.section	.text.int32_sqrt,"ax",%progbits
  55              		.align	1
  56              		.global	int32_sqrt
  57              		.thumb
  58              		.thumb_func
  60              	int32_sqrt:
  61              	.LFB9:
  62              		.file 2 "math/pprz_algebra_int.c"
   1:math/pprz_algebra_int.c **** /*
   2:math/pprz_algebra_int.c ****  * Copyright (C) 2008-2014 The Paparazzi Team
   3:math/pprz_algebra_int.c ****  *
   4:math/pprz_algebra_int.c ****  * This file is part of paparazzi.
   5:math/pprz_algebra_int.c ****  *
   6:math/pprz_algebra_int.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:math/pprz_algebra_int.c ****  * it under the terms of the GNU General Public License as published by
   8:math/pprz_algebra_int.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:math/pprz_algebra_int.c ****  * any later version.
  10:math/pprz_algebra_int.c ****  *
  11:math/pprz_algebra_int.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:math/pprz_algebra_int.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:math/pprz_algebra_int.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:math/pprz_algebra_int.c ****  * GNU General Public License for more details.
  15:math/pprz_algebra_int.c ****  *
  16:math/pprz_algebra_int.c ****  * You should have received a copy of the GNU General Public License
  17:math/pprz_algebra_int.c ****  * along with paparazzi; see the file COPYING.  If not, see
  18:math/pprz_algebra_int.c ****  * <http://www.gnu.org/licenses/>.
  19:math/pprz_algebra_int.c ****  */
  20:math/pprz_algebra_int.c **** 
  21:math/pprz_algebra_int.c **** /**
  22:math/pprz_algebra_int.c ****  * @file pprz_algebra_int.c
  23:math/pprz_algebra_int.c ****  * @brief Paparazzi fixed point algebra.
  24:math/pprz_algebra_int.c ****  *
  25:math/pprz_algebra_int.c ****  */
  26:math/pprz_algebra_int.c **** 
  27:math/pprz_algebra_int.c **** #include "pprz_algebra_int.h"
  28:math/pprz_algebra_int.c **** 
  29:math/pprz_algebra_int.c **** #define INT32_SQRT_MAX_ITER 40
  30:math/pprz_algebra_int.c **** uint32_t int32_sqrt(uint32_t in)
  31:math/pprz_algebra_int.c **** {
  63              		.loc 2 31 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68              	.LVL1:
  32:math/pprz_algebra_int.c ****   if (in == 0) {
  69              		.loc 2 32 0
  70 0000 80B1     		cbz	r0, .L5
  71 0002 0246     		mov	r2, r0
  72 0004 2821     		movs	r1, #40
  73              	.L6:
  74              	.LVL2:
  75              	.LBB7:
  76              	.LBB8:
  33:math/pprz_algebra_int.c ****     return 0;
  34:math/pprz_algebra_int.c ****   } else {
  35:math/pprz_algebra_int.c ****     uint32_t s1, s2;
  36:math/pprz_algebra_int.c ****     uint8_t iter = 0;
  37:math/pprz_algebra_int.c ****     s2 = in;
  38:math/pprz_algebra_int.c ****     do {
  39:math/pprz_algebra_int.c ****       s1 = s2;
  40:math/pprz_algebra_int.c ****       s2 = in / s1;
  77              		.loc 2 40 0
  78 0006 B0FBF2F3 		udiv	r3, r0, r2
  79              	.LVL3:
  41:math/pprz_algebra_int.c ****       s2 += s1;
  80              		.loc 2 41 0
  81 000a 1344     		add	r3, r3, r2
  82              	.LVL4:
  42:math/pprz_algebra_int.c ****       s2 /= 2;
  83              		.loc 2 42 0
  84 000c 5B08     		lsrs	r3, r3, #1
  85              	.LVL5:
  43:math/pprz_algebra_int.c ****       iter++;
  44:math/pprz_algebra_int.c ****     } while (((s1 - s2) > 1) && (iter < INT32_SQRT_MAX_ITER));
  86              		.loc 2 44 0
  87 000e D21A     		subs	r2, r2, r3
  88              	.LVL6:
  89 0010 012A     		cmp	r2, #1
  90 0012 06D9     		bls	.L8
  91 0014 0139     		subs	r1, r1, #1
  92              	.LVL7:
  93 0016 11F0FF01 		ands	r1, r1, #255
  42:math/pprz_algebra_int.c ****       s2 /= 2;
  94              		.loc 2 42 0
  95 001a 1A46     		mov	r2, r3
  96              		.loc 2 44 0
  97 001c F3D1     		bne	.L6
  98 001e 1846     		mov	r0, r3
  99              	.LVL8:
 100 0020 7047     		bx	lr
 101              	.LVL9:
 102              	.L8:
 103 0022 1846     		mov	r0, r3
 104              	.LVL10:
 105              	.L5:
 106              	.LBE8:
 107              	.LBE7:
  45:math/pprz_algebra_int.c ****     return s2;
  46:math/pprz_algebra_int.c ****   }
  47:math/pprz_algebra_int.c **** }
 108              		.loc 2 47 0
 109 0024 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE9:
 113              		.section	.text.int32_quat_normalize,"ax",%progbits
 114              		.align	1
 115              		.thumb
 116              		.thumb_func
 118              	int32_quat_normalize:
 119              	.LFB8:
 450:math/pprz_algebra_int.h ****   }
 451:math/pprz_algebra_int.h **** }
 452:math/pprz_algebra_int.h **** 
 453:math/pprz_algebra_int.h **** /** normalize a quaternion inplace */
 454:math/pprz_algebra_int.h **** static inline void int32_quat_normalize(struct Int32Quat *q)
 455:math/pprz_algebra_int.h **** {
 120              		.loc 1 455 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              	.LVL11:
 125 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 126              		.cfi_def_cfa_offset 24
 127              		.cfi_offset 4, -24
 128              		.cfi_offset 5, -20
 129              		.cfi_offset 6, -16
 130              		.cfi_offset 7, -12
 131              		.cfi_offset 8, -8
 132              		.cfi_offset 14, -4
 133              	.LBB11:
 134              	.LBB12:
 442:math/pprz_algebra_int.h ****   return int32_sqrt(n2);
 135              		.loc 1 442 0
 136 0004 4768     		ldr	r7, [r0, #4]
 137 0006 D0F80080 		ldr	r8, [r0]
 138 000a 8668     		ldr	r6, [r0, #8]
 139 000c C568     		ldr	r5, [r0, #12]
 140              	.LVL12:
 141              	.LBE12:
 142              	.LBE11:
 143              		.loc 1 455 0
 144 000e 0446     		mov	r4, r0
 145              	.LBB14:
 146              	.LBB13:
 442:math/pprz_algebra_int.h ****   return int32_sqrt(n2);
 147              		.loc 1 442 0
 148 0010 07FB07F0 		mul	r0, r7, r7
 149              	.LVL13:
 150 0014 08FB0800 		mla	r0, r8, r8, r0
 151 0018 06FB0600 		mla	r0, r6, r6, r0
 443:math/pprz_algebra_int.h **** }
 152              		.loc 1 443 0
 153 001c 05FB0500 		mla	r0, r5, r5, r0
 154              	.LVL14:
 155 0020 FFF7FEFF 		bl	int32_sqrt
 156              	.LVL15:
 157              	.LBE13:
 158              	.LBE14:
 456:math/pprz_algebra_int.h ****   int32_t n = int32_quat_norm(q);
 457:math/pprz_algebra_int.h ****   if (n > 0) {
 159              		.loc 1 457 0
 160 0024 0028     		cmp	r0, #0
 161 0026 10DD     		ble	.L10
 458:math/pprz_algebra_int.h ****     q->qi = q->qi * QUAT1_BFP_OF_REAL(1) / n;
 162              		.loc 1 458 0
 163 0028 4FEAC838 		lsl	r8, r8, #15
 164              	.LVL16:
 459:math/pprz_algebra_int.h ****     q->qx = q->qx * QUAT1_BFP_OF_REAL(1) / n;
 165              		.loc 1 459 0
 166 002c FF03     		lsls	r7, r7, #15
 458:math/pprz_algebra_int.h ****     q->qi = q->qi * QUAT1_BFP_OF_REAL(1) / n;
 167              		.loc 1 458 0
 168 002e 98FBF0F3 		sdiv	r3, r8, r0
 169              		.loc 1 459 0
 170 0032 97FBF0F7 		sdiv	r7, r7, r0
 460:math/pprz_algebra_int.h ****     q->qy = q->qy * QUAT1_BFP_OF_REAL(1) / n;
 171              		.loc 1 460 0
 172 0036 F603     		lsls	r6, r6, #15
 461:math/pprz_algebra_int.h ****     q->qz = q->qz * QUAT1_BFP_OF_REAL(1) / n;
 173              		.loc 1 461 0
 174 0038 ED03     		lsls	r5, r5, #15
 460:math/pprz_algebra_int.h ****     q->qy = q->qy * QUAT1_BFP_OF_REAL(1) / n;
 175              		.loc 1 460 0
 176 003a 96FBF0F6 		sdiv	r6, r6, r0
 177              		.loc 1 461 0
 178 003e 95FBF0F5 		sdiv	r5, r5, r0
 458:math/pprz_algebra_int.h ****     q->qx = q->qx * QUAT1_BFP_OF_REAL(1) / n;
 179              		.loc 1 458 0
 180 0042 2360     		str	r3, [r4]
 459:math/pprz_algebra_int.h ****     q->qy = q->qy * QUAT1_BFP_OF_REAL(1) / n;
 181              		.loc 1 459 0
 182 0044 6760     		str	r7, [r4, #4]
 460:math/pprz_algebra_int.h ****     q->qz = q->qz * QUAT1_BFP_OF_REAL(1) / n;
 183              		.loc 1 460 0
 184 0046 A660     		str	r6, [r4, #8]
 185              		.loc 1 461 0
 186 0048 E560     		str	r5, [r4, #12]
 187              	.L10:
 188 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 189              		.cfi_endproc
 190              	.LFE8:
 192              		.section	.text.int32_rmat_comp,"ax",%progbits
 193              		.align	1
 194              		.global	int32_rmat_comp
 195              		.thumb
 196              		.thumb_func
 198              	int32_rmat_comp:
 199              	.LFB10:
  48:math/pprz_algebra_int.c **** 
  49:math/pprz_algebra_int.c **** 
  50:math/pprz_algebra_int.c **** /*
  51:math/pprz_algebra_int.c ****  *
  52:math/pprz_algebra_int.c ****  * Rotation matrices
  53:math/pprz_algebra_int.c ****  *
  54:math/pprz_algebra_int.c ****  */
  55:math/pprz_algebra_int.c **** 
  56:math/pprz_algebra_int.c **** /** Composition (multiplication) of two rotation matrices.
  57:math/pprz_algebra_int.c ****  * _m_a2c = _m_a2b comp _m_b2c , aka  _m_a2c = _m_b2c * _m_a2b
  58:math/pprz_algebra_int.c ****  */
  59:math/pprz_algebra_int.c **** void int32_rmat_comp(struct Int32RMat *m_a2c, struct Int32RMat *m_a2b, struct Int32RMat *m_b2c)
  60:math/pprz_algebra_int.c **** {
 200              		.loc 2 60 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              	.LVL17:
 205 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 206              		.cfi_def_cfa_offset 36
 207              		.cfi_offset 4, -36
 208              		.cfi_offset 5, -32
 209              		.cfi_offset 6, -28
 210              		.cfi_offset 7, -24
 211              		.cfi_offset 8, -20
 212              		.cfi_offset 9, -16
 213              		.cfi_offset 10, -12
 214              		.cfi_offset 11, -8
 215              		.cfi_offset 14, -4
  61:math/pprz_algebra_int.c ****   m_a2c->m[0] = (m_b2c->m[0] * m_a2b->m[0] + m_b2c->m[1] * m_a2b->m[3] + m_b2c->m[2] * m_a2b->m[6])
 216              		.loc 2 61 0
 217 0004 D2F804E0 		ldr	lr, [r2, #4]
 218 0008 D1F80C90 		ldr	r9, [r1, #12]
 219 000c 1368     		ldr	r3, [r2]
 220 000e 0C68     		ldr	r4, [r1]
 221 0010 9768     		ldr	r7, [r2, #8]
 222 0012 8D69     		ldr	r5, [r1, #24]
 223 0014 09FB0EF6 		mul	r6, r9, lr
 224 0018 04FB0363 		mla	r3, r4, r3, r6
 225 001c 05FB0733 		mla	r3, r5, r7, r3
 226 0020 9B13     		asrs	r3, r3, #14
 227 0022 0360     		str	r3, [r0]
  62:math/pprz_algebra_int.c ****   m_a2c->m[1] = (m_b2c->m[0] * m_a2b->m[1] + m_b2c->m[1] * m_a2b->m[4] + m_b2c->m[2] * m_a2b->m[7])
 228              		.loc 2 62 0
 229 0024 0B69     		ldr	r3, [r1, #16]
 230 0026 D2F800C0 		ldr	ip, [r2]
 231 002a 4E68     		ldr	r6, [r1, #4]
 232 002c CC69     		ldr	r4, [r1, #28]
 233 002e 03FB0EFE 		mul	lr, r3, lr
 234 0032 06FB0CE6 		mla	r6, r6, ip, lr
 235 0036 04FB0766 		mla	r6, r4, r7, r6
 236 003a B613     		asrs	r6, r6, #14
 237 003c 4660     		str	r6, [r0, #4]
  63:math/pprz_algebra_int.c ****   m_a2c->m[2] = (m_b2c->m[0] * m_a2b->m[2] + m_b2c->m[1] * m_a2b->m[5] + m_b2c->m[2] * m_a2b->m[8])
 238              		.loc 2 63 0
 239 003e D1F81480 		ldr	r8, [r1, #20]
 240 0042 5668     		ldr	r6, [r2, #4]
 241 0044 D1F820E0 		ldr	lr, [r1, #32]
 242 0048 06FB08FA 		mul	r10, r6, r8
 243 004c 8E68     		ldr	r6, [r1, #8]
 244 004e 06FB0CAC 		mla	ip, r6, ip, r10
 245 0052 0EFB07C7 		mla	r7, lr, r7, ip
 246 0056 BF13     		asrs	r7, r7, #14
 247 0058 8760     		str	r7, [r0, #8]
  64:math/pprz_algebra_int.c ****   m_a2c->m[3] = (m_b2c->m[3] * m_a2b->m[0] + m_b2c->m[4] * m_a2b->m[3] + m_b2c->m[5] * m_a2b->m[6])
 248              		.loc 2 64 0
 249 005a D2F810A0 		ldr	r10, [r2, #16]
 250 005e D1F800C0 		ldr	ip, [r1]
 251 0062 D768     		ldr	r7, [r2, #12]
 252 0064 5669     		ldr	r6, [r2, #20]
 253 0066 09FB0AF9 		mul	r9, r9, r10
 254 006a 07FB0C97 		mla	r7, r7, ip, r9
 255 006e 05FB0677 		mla	r7, r5, r6, r7
 256 0072 BF13     		asrs	r7, r7, #14
 257 0074 C760     		str	r7, [r0, #12]
  65:math/pprz_algebra_int.c ****   m_a2c->m[4] = (m_b2c->m[3] * m_a2b->m[1] + m_b2c->m[4] * m_a2b->m[4] + m_b2c->m[5] * m_a2b->m[7])
 258              		.loc 2 65 0
 259 0076 D2F80CB0 		ldr	fp, [r2, #12]
 260 007a D1F80490 		ldr	r9, [r1, #4]
 261 007e 03FB0AF3 		mul	r3, r3, r10
 262 0082 09FB0B33 		mla	r3, r9, fp, r3
 263 0086 04FB0633 		mla	r3, r4, r6, r3
 264 008a 9B13     		asrs	r3, r3, #14
 265 008c 0361     		str	r3, [r0, #16]
  66:math/pprz_algebra_int.c ****   m_a2c->m[5] = (m_b2c->m[3] * m_a2b->m[2] + m_b2c->m[4] * m_a2b->m[5] + m_b2c->m[5] * m_a2b->m[8])
 266              		.loc 2 66 0
 267 008e 1769     		ldr	r7, [r2, #16]
 268 0090 D1F808A0 		ldr	r10, [r1, #8]
 269 0094 07FB08F7 		mul	r7, r7, r8
 270 0098 0AFB0B7B 		mla	fp, r10, fp, r7
 271 009c 0EFB06B6 		mla	r6, lr, r6, fp
 272 00a0 B613     		asrs	r6, r6, #14
 273 00a2 4661     		str	r6, [r0, #20]
  67:math/pprz_algebra_int.c ****   m_a2c->m[6] = (m_b2c->m[6] * m_a2b->m[0] + m_b2c->m[7] * m_a2b->m[3] + m_b2c->m[8] * m_a2b->m[6])
 274              		.loc 2 67 0
 275 00a4 D2F81C80 		ldr	r8, [r2, #28]
 276 00a8 CB68     		ldr	r3, [r1, #12]
 277 00aa 9669     		ldr	r6, [r2, #24]
 278 00ac 176A     		ldr	r7, [r2, #32]
 279 00ae 03FB08F3 		mul	r3, r3, r8
 280 00b2 06FB0C36 		mla	r6, r6, ip, r3
 281 00b6 05FB0765 		mla	r5, r5, r7, r6
 282 00ba AD13     		asrs	r5, r5, #14
 283 00bc 8561     		str	r5, [r0, #24]
  68:math/pprz_algebra_int.c ****   m_a2c->m[7] = (m_b2c->m[6] * m_a2b->m[1] + m_b2c->m[7] * m_a2b->m[4] + m_b2c->m[8] * m_a2b->m[7])
 284              		.loc 2 68 0
 285 00be 0B69     		ldr	r3, [r1, #16]
 286 00c0 9569     		ldr	r5, [r2, #24]
 287 00c2 03FB08F3 		mul	r3, r3, r8
 288 00c6 09FB0539 		mla	r9, r9, r5, r3
 289 00ca 04FB0794 		mla	r4, r4, r7, r9
 290 00ce A413     		asrs	r4, r4, #14
 291 00d0 C461     		str	r4, [r0, #28]
  69:math/pprz_algebra_int.c ****   m_a2c->m[8] = (m_b2c->m[6] * m_a2b->m[2] + m_b2c->m[7] * m_a2b->m[5] + m_b2c->m[8] * m_a2b->m[8])
 292              		.loc 2 69 0
 293 00d2 D269     		ldr	r2, [r2, #28]
 294              	.LVL18:
 295 00d4 4B69     		ldr	r3, [r1, #20]
 296 00d6 5343     		muls	r3, r2, r3
 297 00d8 0AFB053A 		mla	r10, r10, r5, r3
 298 00dc 0EFB07A7 		mla	r7, lr, r7, r10
 299 00e0 BF13     		asrs	r7, r7, #14
 300 00e2 0762     		str	r7, [r0, #32]
 301 00e4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 302              		.cfi_endproc
 303              	.LFE10:
 305              		.section	.text.int32_rmat_comp_inv,"ax",%progbits
 306              		.align	1
 307              		.global	int32_rmat_comp_inv
 308              		.thumb
 309              		.thumb_func
 311              	int32_rmat_comp_inv:
 312              	.LFB11:
  70:math/pprz_algebra_int.c **** }
  71:math/pprz_algebra_int.c **** 
  72:math/pprz_algebra_int.c **** /** Composition (multiplication) of two rotation matrices.
  73:math/pprz_algebra_int.c ****  * _m_a2b = _m_a2c comp_inv _m_b2c , aka  _m_a2b = inv(_m_b2c) * _m_a2c
  74:math/pprz_algebra_int.c ****  */
  75:math/pprz_algebra_int.c **** void int32_rmat_comp_inv(struct Int32RMat *m_a2b, struct Int32RMat *m_a2c, struct Int32RMat *m_b2c)
  76:math/pprz_algebra_int.c **** {
 313              		.loc 2 76 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              	.LVL19:
  77:math/pprz_algebra_int.c ****   m_a2b->m[0] = (m_b2c->m[0] * m_a2c->m[0] + m_b2c->m[3] * m_a2c->m[3] + m_b2c->m[6] * m_a2c->m[6])
 318              		.loc 2 77 0
 319 0000 D2F80CC0 		ldr	ip, [r2, #12]
 320 0004 1368     		ldr	r3, [r2]
  76:math/pprz_algebra_int.c ****   m_a2b->m[0] = (m_b2c->m[0] * m_a2c->m[0] + m_b2c->m[3] * m_a2c->m[3] + m_b2c->m[6] * m_a2c->m[6])
 321              		.loc 2 76 0
 322 0006 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 323              		.cfi_def_cfa_offset 32
 324              		.cfi_offset 4, -32
 325              		.cfi_offset 5, -28
 326              		.cfi_offset 6, -24
 327              		.cfi_offset 7, -20
 328              		.cfi_offset 8, -16
 329              		.cfi_offset 9, -12
 330              		.cfi_offset 10, -8
 331              		.cfi_offset 14, -4
 332              		.loc 2 77 0
 333 000a CC68     		ldr	r4, [r1, #12]
 334 000c 0D68     		ldr	r5, [r1]
 335 000e D2F818E0 		ldr	lr, [r2, #24]
 336 0012 8E69     		ldr	r6, [r1, #24]
 337 0014 04FB0CF7 		mul	r7, r4, ip
 338 0018 05FB0373 		mla	r3, r5, r3, r7
 339 001c 06FB0E33 		mla	r3, r6, lr, r3
 340 0020 9B13     		asrs	r3, r3, #14
 341 0022 0360     		str	r3, [r0]
  78:math/pprz_algebra_int.c ****   m_a2b->m[1] = (m_b2c->m[0] * m_a2c->m[1] + m_b2c->m[3] * m_a2c->m[4] + m_b2c->m[6] * m_a2c->m[7])
 342              		.loc 2 78 0
 343 0024 0B69     		ldr	r3, [r1, #16]
 344 0026 D2F800A0 		ldr	r10, [r2]
 345 002a 4F68     		ldr	r7, [r1, #4]
 346 002c CD69     		ldr	r5, [r1, #28]
 347 002e 03FB0CF8 		mul	r8, r3, ip
 348 0032 07FB0A87 		mla	r7, r7, r10, r8
 349 0036 05FB0E77 		mla	r7, r5, lr, r7
 350 003a BF13     		asrs	r7, r7, #14
 351 003c 4760     		str	r7, [r0, #4]
  79:math/pprz_algebra_int.c ****   m_a2b->m[2] = (m_b2c->m[0] * m_a2c->m[2] + m_b2c->m[3] * m_a2c->m[5] + m_b2c->m[6] * m_a2c->m[8])
 352              		.loc 2 79 0
 353 003e D1F81490 		ldr	r9, [r1, #20]
 354 0042 8F68     		ldr	r7, [r1, #8]
 355 0044 D1F82080 		ldr	r8, [r1, #32]
 356 0048 09FB0CFC 		mul	ip, r9, ip
 357 004c 07FB0AC7 		mla	r7, r7, r10, ip
 358 0050 08FB0E77 		mla	r7, r8, lr, r7
 359 0054 BF13     		asrs	r7, r7, #14
 360 0056 8760     		str	r7, [r0, #8]
  80:math/pprz_algebra_int.c ****   m_a2b->m[3] = (m_b2c->m[1] * m_a2c->m[0] + m_b2c->m[4] * m_a2c->m[3] + m_b2c->m[7] * m_a2c->m[6])
 361              		.loc 2 80 0
 362 0058 D2F810A0 		ldr	r10, [r2, #16]
 363 005c D2F804E0 		ldr	lr, [r2, #4]
 364 0060 D1F800C0 		ldr	ip, [r1]
 365 0064 D769     		ldr	r7, [r2, #28]
 366 0066 04FB0AF4 		mul	r4, r4, r10
 367 006a 0CFB0E44 		mla	r4, ip, lr, r4
 368 006e 06FB0744 		mla	r4, r6, r7, r4
 369 0072 A413     		asrs	r4, r4, #14
 370 0074 C460     		str	r4, [r0, #12]
  81:math/pprz_algebra_int.c ****   m_a2b->m[4] = (m_b2c->m[1] * m_a2c->m[1] + m_b2c->m[4] * m_a2c->m[4] + m_b2c->m[7] * m_a2c->m[7])
 371              		.loc 2 81 0
 372 0076 4C68     		ldr	r4, [r1, #4]
 373 0078 03FB0AF3 		mul	r3, r3, r10
 374 007c 04FB0E33 		mla	r3, r4, lr, r3
 375 0080 05FB0733 		mla	r3, r5, r7, r3
 376 0084 9B13     		asrs	r3, r3, #14
 377 0086 0361     		str	r3, [r0, #16]
  82:math/pprz_algebra_int.c ****   m_a2b->m[5] = (m_b2c->m[1] * m_a2c->m[2] + m_b2c->m[4] * m_a2c->m[5] + m_b2c->m[7] * m_a2c->m[8])
 378              		.loc 2 82 0
 379 0088 1369     		ldr	r3, [r2, #16]
 380 008a D1F808A0 		ldr	r10, [r1, #8]
 381 008e 03FB09F3 		mul	r3, r3, r9
 382 0092 0AFB0E3E 		mla	lr, r10, lr, r3
 383 0096 08FB07E7 		mla	r7, r8, r7, lr
 384 009a BF13     		asrs	r7, r7, #14
 385 009c 4761     		str	r7, [r0, #20]
  83:math/pprz_algebra_int.c ****   m_a2b->m[6] = (m_b2c->m[2] * m_a2c->m[0] + m_b2c->m[5] * m_a2c->m[3] + m_b2c->m[8] * m_a2c->m[6])
 386              		.loc 2 83 0
 387 009e D2F814E0 		ldr	lr, [r2, #20]
 388 00a2 CB68     		ldr	r3, [r1, #12]
 389 00a4 9768     		ldr	r7, [r2, #8]
 390 00a6 126A     		ldr	r2, [r2, #32]
 391              	.LVL20:
 392 00a8 03FB0EF3 		mul	r3, r3, lr
 393 00ac 0CFB073C 		mla	ip, ip, r7, r3
 394 00b0 06FB02C6 		mla	r6, r6, r2, ip
 395 00b4 B613     		asrs	r6, r6, #14
 396 00b6 8661     		str	r6, [r0, #24]
  84:math/pprz_algebra_int.c ****   m_a2b->m[7] = (m_b2c->m[2] * m_a2c->m[1] + m_b2c->m[5] * m_a2c->m[4] + m_b2c->m[8] * m_a2c->m[7])
 397              		.loc 2 84 0
 398 00b8 0B69     		ldr	r3, [r1, #16]
 399 00ba 03FB0EF3 		mul	r3, r3, lr
 400 00be 04FB0734 		mla	r4, r4, r7, r3
 401 00c2 05FB0245 		mla	r5, r5, r2, r4
 402 00c6 AD13     		asrs	r5, r5, #14
 403 00c8 C561     		str	r5, [r0, #28]
  85:math/pprz_algebra_int.c ****   m_a2b->m[8] = (m_b2c->m[2] * m_a2c->m[2] + m_b2c->m[5] * m_a2c->m[5] + m_b2c->m[8] * m_a2c->m[8])
 404              		.loc 2 85 0
 405 00ca 4B69     		ldr	r3, [r1, #20]
 406 00cc 03FB0EFE 		mul	lr, r3, lr
 407 00d0 0AFB07EA 		mla	r10, r10, r7, lr
 408 00d4 08FB02A2 		mla	r2, r8, r2, r10
 409 00d8 9213     		asrs	r2, r2, #14
 410 00da 0262     		str	r2, [r0, #32]
 411 00dc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 412              		.cfi_endproc
 413              	.LFE11:
 415              		.section	.text.int32_rmat_vmult,"ax",%progbits
 416              		.align	1
 417              		.global	int32_rmat_vmult
 418              		.thumb
 419              		.thumb_func
 421              	int32_rmat_vmult:
 422              	.LFB12:
  86:math/pprz_algebra_int.c **** }
  87:math/pprz_algebra_int.c **** 
  88:math/pprz_algebra_int.c **** /** rotate 3D vector by rotation matrix.
  89:math/pprz_algebra_int.c ****  * vb = m_a2b * va
  90:math/pprz_algebra_int.c ****  */
  91:math/pprz_algebra_int.c **** void int32_rmat_vmult(struct Int32Vect3 *vb, struct Int32RMat *m_a2b, struct Int32Vect3 *va)
  92:math/pprz_algebra_int.c **** {
 423              		.loc 2 92 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              	.LVL21:
 428 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 429              		.cfi_def_cfa_offset 20
 430              		.cfi_offset 4, -20
 431              		.cfi_offset 5, -16
 432              		.cfi_offset 6, -12
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
  93:math/pprz_algebra_int.c ****   vb->x = (m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z) >> INT32_TRIG_FRAC;
 435              		.loc 2 93 0
 436 0002 5468     		ldr	r4, [r2, #4]
 437 0004 4D68     		ldr	r5, [r1, #4]
 438 0006 1668     		ldr	r6, [r2]
 439 0008 0F68     		ldr	r7, [r1]
 440 000a 9368     		ldr	r3, [r2, #8]
 441 000c 6543     		muls	r5, r4, r5
 442 000e 06FB0757 		mla	r7, r6, r7, r5
 443 0012 8D68     		ldr	r5, [r1, #8]
  94:math/pprz_algebra_int.c ****   vb->y = (m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z) >> INT32_TRIG_FRAC;
 444              		.loc 2 94 0
 445 0014 CE68     		ldr	r6, [r1, #12]
  93:math/pprz_algebra_int.c ****   vb->x = (m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z) >> INT32_TRIG_FRAC;
 446              		.loc 2 93 0
 447 0016 05FB0375 		mla	r5, r5, r3, r7
 448 001a AD13     		asrs	r5, r5, #14
 449              		.loc 2 94 0
 450 001c 0F69     		ldr	r7, [r1, #16]
  93:math/pprz_algebra_int.c ****   vb->x = (m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z) >> INT32_TRIG_FRAC;
 451              		.loc 2 93 0
 452 001e 0560     		str	r5, [r0]
 453              		.loc 2 94 0
 454 0020 1568     		ldr	r5, [r2]
 455 0022 7C43     		muls	r4, r7, r4
 456 0024 06FB0546 		mla	r6, r6, r5, r4
 457 0028 4C69     		ldr	r4, [r1, #20]
 458 002a 04FB0364 		mla	r4, r4, r3, r6
 459 002e A413     		asrs	r4, r4, #14
 460 0030 4460     		str	r4, [r0, #4]
  95:math/pprz_algebra_int.c ****   vb->z = (m_a2b->m[6] * va->x + m_a2b->m[7] * va->y + m_a2b->m[8] * va->z) >> INT32_TRIG_FRAC;
 461              		.loc 2 95 0
 462 0032 CE69     		ldr	r6, [r1, #28]
 463 0034 5268     		ldr	r2, [r2, #4]
 464              	.LVL22:
 465 0036 8C69     		ldr	r4, [r1, #24]
 466 0038 7243     		muls	r2, r6, r2
 467 003a 04FB0525 		mla	r5, r4, r5, r2
 468 003e 0A6A     		ldr	r2, [r1, #32]
 469 0040 02FB0353 		mla	r3, r2, r3, r5
 470 0044 9B13     		asrs	r3, r3, #14
 471 0046 8360     		str	r3, [r0, #8]
 472 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 473              		.cfi_endproc
 474              	.LFE12:
 476              		.section	.text.int32_rmat_transp_vmult,"ax",%progbits
 477              		.align	1
 478              		.global	int32_rmat_transp_vmult
 479              		.thumb
 480              		.thumb_func
 482              	int32_rmat_transp_vmult:
 483              	.LFB13:
  96:math/pprz_algebra_int.c **** }
  97:math/pprz_algebra_int.c **** 
  98:math/pprz_algebra_int.c **** /** rotate 3D vector by transposed rotation matrix.
  99:math/pprz_algebra_int.c ****  * vb = m_b2a^T * va
 100:math/pprz_algebra_int.c ****  */
 101:math/pprz_algebra_int.c **** void int32_rmat_transp_vmult(struct Int32Vect3 *vb, struct Int32RMat *m_b2a, struct Int32Vect3 *va)
 102:math/pprz_algebra_int.c **** {
 484              		.loc 2 102 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              	.LVL23:
 489 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 490              		.cfi_def_cfa_offset 20
 491              		.cfi_offset 4, -20
 492              		.cfi_offset 5, -16
 493              		.cfi_offset 6, -12
 494              		.cfi_offset 7, -8
 495              		.cfi_offset 14, -4
 103:math/pprz_algebra_int.c ****   vb->x = (m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z) >> INT32_TRIG_FRAC;
 496              		.loc 2 103 0
 497 0002 5468     		ldr	r4, [r2, #4]
 498 0004 CD68     		ldr	r5, [r1, #12]
 499 0006 1668     		ldr	r6, [r2]
 500 0008 0F68     		ldr	r7, [r1]
 501 000a 9368     		ldr	r3, [r2, #8]
 502 000c 6543     		muls	r5, r4, r5
 503 000e 06FB0757 		mla	r7, r6, r7, r5
 504 0012 8D69     		ldr	r5, [r1, #24]
 104:math/pprz_algebra_int.c ****   vb->y = (m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z) >> INT32_TRIG_FRAC;
 505              		.loc 2 104 0
 506 0014 4E68     		ldr	r6, [r1, #4]
 103:math/pprz_algebra_int.c ****   vb->x = (m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z) >> INT32_TRIG_FRAC;
 507              		.loc 2 103 0
 508 0016 05FB0375 		mla	r5, r5, r3, r7
 509 001a AD13     		asrs	r5, r5, #14
 510              		.loc 2 104 0
 511 001c 0F69     		ldr	r7, [r1, #16]
 103:math/pprz_algebra_int.c ****   vb->x = (m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z) >> INT32_TRIG_FRAC;
 512              		.loc 2 103 0
 513 001e 0560     		str	r5, [r0]
 514              		.loc 2 104 0
 515 0020 1568     		ldr	r5, [r2]
 516 0022 7C43     		muls	r4, r7, r4
 517 0024 06FB0546 		mla	r6, r6, r5, r4
 518 0028 CC69     		ldr	r4, [r1, #28]
 519 002a 04FB0364 		mla	r4, r4, r3, r6
 520 002e A413     		asrs	r4, r4, #14
 521 0030 4460     		str	r4, [r0, #4]
 105:math/pprz_algebra_int.c ****   vb->z = (m_b2a->m[2] * va->x + m_b2a->m[5] * va->y + m_b2a->m[8] * va->z) >> INT32_TRIG_FRAC;
 522              		.loc 2 105 0
 523 0032 4E69     		ldr	r6, [r1, #20]
 524 0034 5268     		ldr	r2, [r2, #4]
 525              	.LVL24:
 526 0036 8C68     		ldr	r4, [r1, #8]
 527 0038 7243     		muls	r2, r6, r2
 528 003a 04FB0525 		mla	r5, r4, r5, r2
 529 003e 0A6A     		ldr	r2, [r1, #32]
 530 0040 02FB0353 		mla	r3, r2, r3, r5
 531 0044 9B13     		asrs	r3, r3, #14
 532 0046 8360     		str	r3, [r0, #8]
 533 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 534              		.cfi_endproc
 535              	.LFE13:
 537              		.section	.text.int32_rmat_ratemult,"ax",%progbits
 538              		.align	1
 539              		.global	int32_rmat_ratemult
 540              		.thumb
 541              		.thumb_func
 543              	int32_rmat_ratemult:
 544              	.LFB14:
 106:math/pprz_algebra_int.c **** }
 107:math/pprz_algebra_int.c **** 
 108:math/pprz_algebra_int.c **** /** rotate anglular rates by rotation matrix.
 109:math/pprz_algebra_int.c ****  * rb = m_a2b * ra
 110:math/pprz_algebra_int.c ****  */
 111:math/pprz_algebra_int.c **** void int32_rmat_ratemult(struct Int32Rates *rb, struct Int32RMat *m_a2b, struct Int32Rates *ra)
 112:math/pprz_algebra_int.c **** {
 545              		.loc 2 112 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              	.LVL25:
 550 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 551              		.cfi_def_cfa_offset 20
 552              		.cfi_offset 4, -20
 553              		.cfi_offset 5, -16
 554              		.cfi_offset 6, -12
 555              		.cfi_offset 7, -8
 556              		.cfi_offset 14, -4
 113:math/pprz_algebra_int.c ****   rb->p = (m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r) >> INT32_TRIG_FRAC;
 557              		.loc 2 113 0
 558 0002 5468     		ldr	r4, [r2, #4]
 559 0004 4D68     		ldr	r5, [r1, #4]
 560 0006 1668     		ldr	r6, [r2]
 561 0008 0F68     		ldr	r7, [r1]
 562 000a 9368     		ldr	r3, [r2, #8]
 563 000c 6543     		muls	r5, r4, r5
 564 000e 06FB0757 		mla	r7, r6, r7, r5
 565 0012 8D68     		ldr	r5, [r1, #8]
 114:math/pprz_algebra_int.c ****   rb->q = (m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r) >> INT32_TRIG_FRAC;
 566              		.loc 2 114 0
 567 0014 CE68     		ldr	r6, [r1, #12]
 113:math/pprz_algebra_int.c ****   rb->p = (m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r) >> INT32_TRIG_FRAC;
 568              		.loc 2 113 0
 569 0016 05FB0375 		mla	r5, r5, r3, r7
 570 001a AD13     		asrs	r5, r5, #14
 571              		.loc 2 114 0
 572 001c 0F69     		ldr	r7, [r1, #16]
 113:math/pprz_algebra_int.c ****   rb->p = (m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r) >> INT32_TRIG_FRAC;
 573              		.loc 2 113 0
 574 001e 0560     		str	r5, [r0]
 575              		.loc 2 114 0
 576 0020 1568     		ldr	r5, [r2]
 577 0022 7C43     		muls	r4, r7, r4
 578 0024 06FB0546 		mla	r6, r6, r5, r4
 579 0028 4C69     		ldr	r4, [r1, #20]
 580 002a 04FB0364 		mla	r4, r4, r3, r6
 581 002e A413     		asrs	r4, r4, #14
 582 0030 4460     		str	r4, [r0, #4]
 115:math/pprz_algebra_int.c ****   rb->r = (m_a2b->m[6] * ra->p + m_a2b->m[7] * ra->q + m_a2b->m[8] * ra->r) >> INT32_TRIG_FRAC;
 583              		.loc 2 115 0
 584 0032 CE69     		ldr	r6, [r1, #28]
 585 0034 5268     		ldr	r2, [r2, #4]
 586              	.LVL26:
 587 0036 8C69     		ldr	r4, [r1, #24]
 588 0038 7243     		muls	r2, r6, r2
 589 003a 04FB0525 		mla	r5, r4, r5, r2
 590 003e 0A6A     		ldr	r2, [r1, #32]
 591 0040 02FB0353 		mla	r3, r2, r3, r5
 592 0044 9B13     		asrs	r3, r3, #14
 593 0046 8360     		str	r3, [r0, #8]
 594 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 595              		.cfi_endproc
 596              	.LFE14:
 598              		.section	.text.int32_rmat_transp_ratemult,"ax",%progbits
 599              		.align	1
 600              		.global	int32_rmat_transp_ratemult
 601              		.thumb
 602              		.thumb_func
 604              	int32_rmat_transp_ratemult:
 605              	.LFB15:
 116:math/pprz_algebra_int.c **** }
 117:math/pprz_algebra_int.c **** 
 118:math/pprz_algebra_int.c **** /** rotate anglular rates by transposed rotation matrix.
 119:math/pprz_algebra_int.c ****  * rb = m_b2a^T * ra
 120:math/pprz_algebra_int.c ****  */
 121:math/pprz_algebra_int.c **** void int32_rmat_transp_ratemult(struct Int32Rates *rb, struct Int32RMat *m_b2a, struct Int32Rates *
 122:math/pprz_algebra_int.c **** {
 606              		.loc 2 122 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              	.LVL27:
 611 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 612              		.cfi_def_cfa_offset 20
 613              		.cfi_offset 4, -20
 614              		.cfi_offset 5, -16
 615              		.cfi_offset 6, -12
 616              		.cfi_offset 7, -8
 617              		.cfi_offset 14, -4
 123:math/pprz_algebra_int.c ****   rb->p = (m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r) >> INT32_TRIG_FRAC;
 618              		.loc 2 123 0
 619 0002 5468     		ldr	r4, [r2, #4]
 620 0004 CD68     		ldr	r5, [r1, #12]
 621 0006 1668     		ldr	r6, [r2]
 622 0008 0F68     		ldr	r7, [r1]
 623 000a 9368     		ldr	r3, [r2, #8]
 624 000c 6543     		muls	r5, r4, r5
 625 000e 06FB0757 		mla	r7, r6, r7, r5
 626 0012 8D69     		ldr	r5, [r1, #24]
 124:math/pprz_algebra_int.c ****   rb->q = (m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r) >> INT32_TRIG_FRAC;
 627              		.loc 2 124 0
 628 0014 4E68     		ldr	r6, [r1, #4]
 123:math/pprz_algebra_int.c ****   rb->p = (m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r) >> INT32_TRIG_FRAC;
 629              		.loc 2 123 0
 630 0016 05FB0375 		mla	r5, r5, r3, r7
 631 001a AD13     		asrs	r5, r5, #14
 632              		.loc 2 124 0
 633 001c 0F69     		ldr	r7, [r1, #16]
 123:math/pprz_algebra_int.c ****   rb->p = (m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r) >> INT32_TRIG_FRAC;
 634              		.loc 2 123 0
 635 001e 0560     		str	r5, [r0]
 636              		.loc 2 124 0
 637 0020 1568     		ldr	r5, [r2]
 638 0022 7C43     		muls	r4, r7, r4
 639 0024 06FB0546 		mla	r6, r6, r5, r4
 640 0028 CC69     		ldr	r4, [r1, #28]
 641 002a 04FB0364 		mla	r4, r4, r3, r6
 642 002e A413     		asrs	r4, r4, #14
 643 0030 4460     		str	r4, [r0, #4]
 125:math/pprz_algebra_int.c ****   rb->r = (m_b2a->m[2] * ra->p + m_b2a->m[5] * ra->q + m_b2a->m[8] * ra->r) >> INT32_TRIG_FRAC;
 644              		.loc 2 125 0
 645 0032 4E69     		ldr	r6, [r1, #20]
 646 0034 5268     		ldr	r2, [r2, #4]
 647              	.LVL28:
 648 0036 8C68     		ldr	r4, [r1, #8]
 649 0038 7243     		muls	r2, r6, r2
 650 003a 04FB0525 		mla	r5, r4, r5, r2
 651 003e 0A6A     		ldr	r2, [r1, #32]
 652 0040 02FB0353 		mla	r3, r2, r3, r5
 653 0044 9B13     		asrs	r3, r3, #14
 654 0046 8360     		str	r3, [r0, #8]
 655 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 656              		.cfi_endproc
 657              	.LFE15:
 659              		.section	.text.int32_rmat_of_quat,"ax",%progbits
 660              		.align	1
 661              		.global	int32_rmat_of_quat
 662              		.thumb
 663              		.thumb_func
 665              	int32_rmat_of_quat:
 666              	.LFB16:
 126:math/pprz_algebra_int.c **** }
 127:math/pprz_algebra_int.c **** 
 128:math/pprz_algebra_int.c **** 
 129:math/pprz_algebra_int.c **** /** Convert unit quaternion to rotation matrix.
 130:math/pprz_algebra_int.c ****  * http://www.mathworks.com/access/helpdesk_r13/help/toolbox/aeroblks/quaternionstodirectioncosinem
 131:math/pprz_algebra_int.c ****  */
 132:math/pprz_algebra_int.c **** void int32_rmat_of_quat(struct Int32RMat *rm, struct Int32Quat *q)
 133:math/pprz_algebra_int.c **** {
 667              		.loc 2 133 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671              	.LVL29:
 134:math/pprz_algebra_int.c ****   const int32_t _2qi2_m1  = INT_MULT_RSHIFT(q->qi, q->qi,
 672              		.loc 2 134 0
 673 0000 0B68     		ldr	r3, [r1]
 133:math/pprz_algebra_int.c ****   const int32_t _2qi2_m1  = INT_MULT_RSHIFT(q->qi, q->qi,
 674              		.loc 2 133 0
 675 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 676              		.cfi_def_cfa_offset 24
 677              		.cfi_offset 4, -24
 678              		.cfi_offset 5, -20
 679              		.cfi_offset 6, -16
 680              		.cfi_offset 7, -12
 681              		.cfi_offset 8, -8
 682              		.cfi_offset 14, -4
 683              		.loc 2 134 0
 684 0006 03FB03F2 		mul	r2, r3, r3
 135:math/pprz_algebra_int.c ****                             INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1) - TRIG_BFP_OF_
 136:math/pprz_algebra_int.c ****   rm->m[0] = INT_MULT_RSHIFT(q->qx, q->qx, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 685              		.loc 2 136 0
 686 000a 4D68     		ldr	r5, [r1, #4]
 137:math/pprz_algebra_int.c ****   rm->m[4] = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 687              		.loc 2 137 0
 688 000c 8C68     		ldr	r4, [r1, #8]
 138:math/pprz_algebra_int.c ****   rm->m[8] = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 689              		.loc 2 138 0
 690 000e C968     		ldr	r1, [r1, #12]
 691              	.LVL30:
 134:math/pprz_algebra_int.c ****                             INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1) - TRIG_BFP_OF_
 692              		.loc 2 134 0
 693 0010 D213     		asrs	r2, r2, #15
 694 0012 A2F58042 		sub	r2, r2, #16384
 695              	.LVL31:
 139:math/pprz_algebra_int.c **** 
 140:math/pprz_algebra_int.c ****   const int32_t _2qiqx = INT_MULT_RSHIFT(q->qi, q->qx, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 696              		.loc 2 140 0
 697 0016 05FB03F6 		mul	r6, r5, r3
 141:math/pprz_algebra_int.c ****   const int32_t _2qiqy = INT_MULT_RSHIFT(q->qi, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 698              		.loc 2 141 0
 699 001a 04FB03FC 		mul	ip, r4, r3
 142:math/pprz_algebra_int.c ****   const int32_t _2qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 143:math/pprz_algebra_int.c ****   rm->m[1] = INT_MULT_RSHIFT(q->qx, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 700              		.loc 2 143 0
 701 001e 04FB05F8 		mul	r8, r4, r5
 144:math/pprz_algebra_int.c ****   rm->m[2] = INT_MULT_RSHIFT(q->qx, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 702              		.loc 2 144 0
 703 0022 01FB05F7 		mul	r7, r1, r5
 142:math/pprz_algebra_int.c ****   const int32_t _2qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 704              		.loc 2 142 0
 705 0026 4B43     		muls	r3, r1, r3
 136:math/pprz_algebra_int.c ****   rm->m[4] = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 706              		.loc 2 136 0
 707 0028 6D43     		muls	r5, r5, r5
 142:math/pprz_algebra_int.c ****   const int32_t _2qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 708              		.loc 2 142 0
 709 002a DB13     		asrs	r3, r3, #15
 143:math/pprz_algebra_int.c ****   rm->m[2] = INT_MULT_RSHIFT(q->qx, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 710              		.loc 2 143 0
 711 002c 4FEAE838 		asr	r8, r8, #15
 145:math/pprz_algebra_int.c ****   rm->m[5] = INT_MULT_RSHIFT(q->qy, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 146:math/pprz_algebra_int.c ****   rm->m[0] += _2qi2_m1;
 712              		.loc 2 146 0
 713 0030 02EBE535 		add	r5, r2, r5, asr #15
 145:math/pprz_algebra_int.c ****   rm->m[5] = INT_MULT_RSHIFT(q->qy, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 714              		.loc 2 145 0
 715 0034 01FB04FE 		mul	lr, r1, r4
 141:math/pprz_algebra_int.c ****   const int32_t _2qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 716              		.loc 2 141 0
 717 0038 4FEAEC3C 		asr	ip, ip, #15
 144:math/pprz_algebra_int.c ****   rm->m[5] = INT_MULT_RSHIFT(q->qy, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 718              		.loc 2 144 0
 719 003c FF13     		asrs	r7, r7, #15
 720              		.loc 2 146 0
 721 003e 0560     		str	r5, [r0]
 147:math/pprz_algebra_int.c ****   rm->m[3] = rm->m[1] - _2qiqz;
 722              		.loc 2 147 0
 723 0040 C3EB0805 		rsb	r5, r3, r8
 140:math/pprz_algebra_int.c ****   const int32_t _2qiqy = INT_MULT_RSHIFT(q->qi, q->qy, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TR
 724              		.loc 2 140 0
 725 0044 F613     		asrs	r6, r6, #15
 726              	.LVL32:
 145:math/pprz_algebra_int.c ****   rm->m[0] += _2qi2_m1;
 727              		.loc 2 145 0
 728 0046 4FEAEE3E 		asr	lr, lr, #15
 729              		.loc 2 147 0
 730 004a C560     		str	r5, [r0, #12]
 137:math/pprz_algebra_int.c ****   rm->m[8] = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC - 1)
 731              		.loc 2 137 0
 732 004c 6443     		muls	r4, r4, r4
 148:math/pprz_algebra_int.c ****   rm->m[6] = rm->m[2] + _2qiqy;
 733              		.loc 2 148 0
 734 004e 07EB0C05 		add	r5, r7, ip
 138:math/pprz_algebra_int.c **** 
 735              		.loc 2 138 0
 736 0052 4943     		muls	r1, r1, r1
 737              		.loc 2 148 0
 738 0054 8561     		str	r5, [r0, #24]
 149:math/pprz_algebra_int.c ****   rm->m[7] = rm->m[5] - _2qiqx;
 150:math/pprz_algebra_int.c ****   rm->m[4] += _2qi2_m1;
 739              		.loc 2 150 0
 740 0056 02EBE434 		add	r4, r2, r4, asr #15
 149:math/pprz_algebra_int.c ****   rm->m[7] = rm->m[5] - _2qiqx;
 741              		.loc 2 149 0
 742 005a C6EB0E05 		rsb	r5, r6, lr
 151:math/pprz_algebra_int.c ****   rm->m[1] += _2qiqz;
 743              		.loc 2 151 0
 744 005e 4344     		add	r3, r3, r8
 745              	.LVL33:
 152:math/pprz_algebra_int.c ****   rm->m[2] -= _2qiqy;
 746              		.loc 2 152 0
 747 0060 CCEB0707 		rsb	r7, ip, r7
 153:math/pprz_algebra_int.c ****   rm->m[5] += _2qiqx;
 748              		.loc 2 153 0
 749 0064 7644     		add	r6, r6, lr
 750              	.LVL34:
 154:math/pprz_algebra_int.c ****   rm->m[8] += _2qi2_m1;
 751              		.loc 2 154 0
 752 0066 02EBE131 		add	r1, r2, r1, asr #15
 149:math/pprz_algebra_int.c ****   rm->m[4] += _2qi2_m1;
 753              		.loc 2 149 0
 754 006a C561     		str	r5, [r0, #28]
 150:math/pprz_algebra_int.c ****   rm->m[1] += _2qiqz;
 755              		.loc 2 150 0
 756 006c 0461     		str	r4, [r0, #16]
 151:math/pprz_algebra_int.c ****   rm->m[2] -= _2qiqy;
 757              		.loc 2 151 0
 758 006e 4360     		str	r3, [r0, #4]
 152:math/pprz_algebra_int.c ****   rm->m[5] += _2qiqx;
 759              		.loc 2 152 0
 760 0070 8760     		str	r7, [r0, #8]
 153:math/pprz_algebra_int.c ****   rm->m[8] += _2qi2_m1;
 761              		.loc 2 153 0
 762 0072 4661     		str	r6, [r0, #20]
 763              		.loc 2 154 0
 764 0074 0162     		str	r1, [r0, #32]
 765 0076 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 766              		.cfi_endproc
 767              	.LFE16:
 769              		.section	.text.int32_rmat_of_eulers_321,"ax",%progbits
 770              		.align	1
 771              		.global	int32_rmat_of_eulers_321
 772              		.thumb
 773              		.thumb_func
 775              	int32_rmat_of_eulers_321:
 776              	.LFB17:
 155:math/pprz_algebra_int.c **** }
 156:math/pprz_algebra_int.c **** 
 157:math/pprz_algebra_int.c **** 
 158:math/pprz_algebra_int.c **** /** Rotation matrix from 321 Euler angles.
 159:math/pprz_algebra_int.c ****  * http://www.mathworks.com/access/helpdesk_r13/help/toolbox/aeroblks/euleranglestodirectioncosinem
 160:math/pprz_algebra_int.c ****  */
 161:math/pprz_algebra_int.c **** void int32_rmat_of_eulers_321(struct Int32RMat *rm, struct Int32Eulers *e)
 162:math/pprz_algebra_int.c **** {
 777              		.loc 2 162 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 0
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781              	.LVL35:
 782 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 783              		.cfi_def_cfa_offset 32
 784              		.cfi_offset 4, -32
 785              		.cfi_offset 5, -28
 786              		.cfi_offset 6, -24
 787              		.cfi_offset 7, -20
 788              		.cfi_offset 8, -16
 789              		.cfi_offset 9, -12
 790              		.cfi_offset 10, -8
 791              		.cfi_offset 14, -4
 792              		.loc 2 162 0
 793 0004 0446     		mov	r4, r0
 163:math/pprz_algebra_int.c ****   int32_t sphi;
 164:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(sphi, e->phi);
 794              		.loc 2 164 0
 795 0006 0868     		ldr	r0, [r1]
 796              	.LVL36:
 162:math/pprz_algebra_int.c ****   int32_t sphi;
 797              		.loc 2 162 0
 798 0008 0F46     		mov	r7, r1
 799              		.loc 2 164 0
 800 000a FFF7FEFF 		bl	pprz_itrig_sin
 801              	.LVL37:
 802 000e 8146     		mov	r9, r0
 803              	.LVL38:
 165:math/pprz_algebra_int.c ****   int32_t cphi;
 166:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cphi, e->phi);
 804              		.loc 2 166 0
 805 0010 3868     		ldr	r0, [r7]
 806              	.LVL39:
 807 0012 FFF7FEFF 		bl	pprz_itrig_cos
 808              	.LVL40:
 809 0016 8046     		mov	r8, r0
 810              	.LVL41:
 167:math/pprz_algebra_int.c ****   int32_t stheta;
 168:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(stheta, e->theta);
 811              		.loc 2 168 0
 812 0018 7868     		ldr	r0, [r7, #4]
 813              	.LVL42:
 814 001a FFF7FEFF 		bl	pprz_itrig_sin
 815              	.LVL43:
 816 001e 8246     		mov	r10, r0
 817              	.LVL44:
 169:math/pprz_algebra_int.c ****   int32_t ctheta;
 170:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(ctheta, e->theta);
 818              		.loc 2 170 0
 819 0020 7868     		ldr	r0, [r7, #4]
 820              	.LVL45:
 821 0022 FFF7FEFF 		bl	pprz_itrig_cos
 822              	.LVL46:
 823 0026 0546     		mov	r5, r0
 824              	.LVL47:
 171:math/pprz_algebra_int.c ****   int32_t spsi;
 172:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(spsi, e->psi);
 825              		.loc 2 172 0
 826 0028 B868     		ldr	r0, [r7, #8]
 827              	.LVL48:
 828 002a FFF7FEFF 		bl	pprz_itrig_sin
 829              	.LVL49:
 830 002e 0646     		mov	r6, r0
 831              	.LVL50:
 173:math/pprz_algebra_int.c ****   int32_t cpsi;
 174:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cpsi, e->psi);
 832              		.loc 2 174 0
 833 0030 B868     		ldr	r0, [r7, #8]
 834              	.LVL51:
 835 0032 FFF7FEFF 		bl	pprz_itrig_cos
 836              	.LVL52:
 175:math/pprz_algebra_int.c **** 
 176:math/pprz_algebra_int.c ****   int32_t ctheta_cpsi = INT_MULT_RSHIFT(ctheta, cpsi,   INT32_TRIG_FRAC);
 837              		.loc 2 176 0
 838 0036 00FB05F2 		mul	r2, r0, r5
 839 003a 9213     		asrs	r2, r2, #14
 840              	.LVL53:
 177:math/pprz_algebra_int.c ****   int32_t ctheta_spsi = INT_MULT_RSHIFT(ctheta, spsi,   INT32_TRIG_FRAC);
 178:math/pprz_algebra_int.c ****   int32_t cphi_spsi   = INT_MULT_RSHIFT(cphi,   spsi,   INT32_TRIG_FRAC);
 179:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 180:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 181:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 182:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 183:math/pprz_algebra_int.c ****   int32_t sphi_stheta = INT_MULT_RSHIFT(sphi,   stheta, INT32_TRIG_FRAC);
 184:math/pprz_algebra_int.c ****   int32_t sphi_spsi   = INT_MULT_RSHIFT(sphi,   spsi,   INT32_TRIG_FRAC);
 185:math/pprz_algebra_int.c ****   int32_t sphi_cpsi   = INT_MULT_RSHIFT(sphi,   cpsi,   INT32_TRIG_FRAC);
 186:math/pprz_algebra_int.c **** 
 187:math/pprz_algebra_int.c ****   int32_t sphi_stheta_cpsi = INT_MULT_RSHIFT(sphi_stheta, cpsi, INT32_TRIG_FRAC);
 188:math/pprz_algebra_int.c ****   int32_t sphi_stheta_spsi = INT_MULT_RSHIFT(sphi_stheta, spsi, INT32_TRIG_FRAC);
 189:math/pprz_algebra_int.c ****   int32_t cphi_stheta_cpsi = INT_MULT_RSHIFT(cphi_stheta, cpsi, INT32_TRIG_FRAC);
 190:math/pprz_algebra_int.c ****   int32_t cphi_stheta_spsi = INT_MULT_RSHIFT(cphi_stheta, spsi, INT32_TRIG_FRAC);
 191:math/pprz_algebra_int.c **** 
 192:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 0) = ctheta_cpsi;
 841              		.loc 2 192 0
 842 003c 2260     		str	r2, [r4]
 177:math/pprz_algebra_int.c ****   int32_t ctheta_spsi = INT_MULT_RSHIFT(ctheta, spsi,   INT32_TRIG_FRAC);
 843              		.loc 2 177 0
 844 003e 06FB05F2 		mul	r2, r6, r5
 845              	.LVL54:
 846 0042 9213     		asrs	r2, r2, #14
 847              	.LVL55:
 183:math/pprz_algebra_int.c ****   int32_t sphi_spsi   = INT_MULT_RSHIFT(sphi,   spsi,   INT32_TRIG_FRAC);
 848              		.loc 2 183 0
 849 0044 0AFB09F3 		mul	r3, r10, r9
 193:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 1) = ctheta_spsi;
 850              		.loc 2 193 0
 851 0048 6260     		str	r2, [r4, #4]
 194:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 2) = -stheta;
 852              		.loc 2 194 0
 853 004a CAF10002 		rsb	r2, r10, #0
 854              	.LVL56:
 183:math/pprz_algebra_int.c ****   int32_t sphi_spsi   = INT_MULT_RSHIFT(sphi,   spsi,   INT32_TRIG_FRAC);
 855              		.loc 2 183 0
 856 004e 9B13     		asrs	r3, r3, #14
 857              		.loc 2 194 0
 858 0050 A260     		str	r2, [r4, #8]
 178:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 859              		.loc 2 178 0
 860 0052 06FB08F2 		mul	r2, r6, r8
 187:math/pprz_algebra_int.c ****   int32_t sphi_stheta_spsi = INT_MULT_RSHIFT(sphi_stheta, spsi, INT32_TRIG_FRAC);
 861              		.loc 2 187 0
 862 0056 00FB03F7 		mul	r7, r0, r3
 863              	.LVL57:
 178:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 864              		.loc 2 178 0
 865 005a 9213     		asrs	r2, r2, #14
 866              	.LVL58:
 195:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 0) = sphi_stheta_cpsi - cphi_spsi;
 867              		.loc 2 195 0
 868 005c C2EBA732 		rsb	r2, r2, r7, asr #14
 869              	.LVL59:
 870 0060 E260     		str	r2, [r4, #12]
 179:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 871              		.loc 2 179 0
 872 0062 00FB08F2 		mul	r2, r0, r8
 188:math/pprz_algebra_int.c ****   int32_t cphi_stheta_cpsi = INT_MULT_RSHIFT(cphi_stheta, cpsi, INT32_TRIG_FRAC);
 873              		.loc 2 188 0
 874 0066 7343     		muls	r3, r6, r3
 179:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 875              		.loc 2 179 0
 876 0068 9213     		asrs	r2, r2, #14
 877              	.LVL60:
 196:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 1) = sphi_stheta_spsi + cphi_cpsi;
 878              		.loc 2 196 0
 879 006a 02EBA333 		add	r3, r2, r3, asr #14
 181:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 880              		.loc 2 181 0
 881 006e 0AFB08F1 		mul	r1, r10, r8
 882              		.loc 2 196 0
 883 0072 2361     		str	r3, [r4, #16]
 182:math/pprz_algebra_int.c ****   int32_t sphi_stheta = INT_MULT_RSHIFT(sphi,   stheta, INT32_TRIG_FRAC);
 884              		.loc 2 182 0
 885 0074 05FB09F3 		mul	r3, r5, r9
 181:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 886              		.loc 2 181 0
 887 0078 8913     		asrs	r1, r1, #14
 888              	.LVL61:
 182:math/pprz_algebra_int.c ****   int32_t sphi_stheta = INT_MULT_RSHIFT(sphi,   stheta, INT32_TRIG_FRAC);
 889              		.loc 2 182 0
 890 007a 9B13     		asrs	r3, r3, #14
 891              	.LVL62:
 189:math/pprz_algebra_int.c ****   int32_t cphi_stheta_spsi = INT_MULT_RSHIFT(cphi_stheta, spsi, INT32_TRIG_FRAC);
 892              		.loc 2 189 0
 893 007c 00FB01F2 		mul	r2, r0, r1
 894              	.LVL63:
 197:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 2) = sphi_ctheta;
 895              		.loc 2 197 0
 896 0080 6361     		str	r3, [r4, #20]
 185:math/pprz_algebra_int.c **** 
 897              		.loc 2 185 0
 898 0082 00FB09F0 		mul	r0, r0, r9
 899              	.LVL64:
 184:math/pprz_algebra_int.c ****   int32_t sphi_cpsi   = INT_MULT_RSHIFT(sphi,   cpsi,   INT32_TRIG_FRAC);
 900              		.loc 2 184 0
 901 0086 06FB09F3 		mul	r3, r6, r9
 902              	.LVL65:
 903 008a 9B13     		asrs	r3, r3, #14
 904              	.LVL66:
 190:math/pprz_algebra_int.c **** 
 905              		.loc 2 190 0
 906 008c 4E43     		muls	r6, r1, r6
 907              	.LVL67:
 185:math/pprz_algebra_int.c **** 
 908              		.loc 2 185 0
 909 008e 8013     		asrs	r0, r0, #14
 910              	.LVL68:
 180:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 911              		.loc 2 180 0
 912 0090 05FB08F5 		mul	r5, r5, r8
 913              	.LVL69:
 198:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 0) = cphi_stheta_cpsi + sphi_spsi;
 914              		.loc 2 198 0
 915 0094 03EBA233 		add	r3, r3, r2, asr #14
 916              	.LVL70:
 199:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 1) = cphi_stheta_spsi - sphi_cpsi;
 917              		.loc 2 199 0
 918 0098 C0EBA630 		rsb	r0, r0, r6, asr #14
 919              	.LVL71:
 180:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 920              		.loc 2 180 0
 921 009c AD13     		asrs	r5, r5, #14
 922              	.LVL72:
 198:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 0) = cphi_stheta_cpsi + sphi_spsi;
 923              		.loc 2 198 0
 924 009e A361     		str	r3, [r4, #24]
 925              		.loc 2 199 0
 926 00a0 E061     		str	r0, [r4, #28]
 200:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 2) = cphi_ctheta;
 927              		.loc 2 200 0
 928 00a2 2562     		str	r5, [r4, #32]
 929 00a4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 930              		.cfi_endproc
 931              	.LFE17:
 933              		.section	.text.int32_rmat_of_eulers_312,"ax",%progbits
 934              		.align	1
 935              		.global	int32_rmat_of_eulers_312
 936              		.thumb
 937              		.thumb_func
 939              	int32_rmat_of_eulers_312:
 940              	.LFB18:
 201:math/pprz_algebra_int.c **** }
 202:math/pprz_algebra_int.c **** 
 203:math/pprz_algebra_int.c **** 
 204:math/pprz_algebra_int.c **** void int32_rmat_of_eulers_312(struct Int32RMat *rm, struct Int32Eulers *e)
 205:math/pprz_algebra_int.c **** {
 941              		.loc 2 205 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              	.LVL73:
 946 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 947              		.cfi_def_cfa_offset 32
 948              		.cfi_offset 4, -32
 949              		.cfi_offset 5, -28
 950              		.cfi_offset 6, -24
 951              		.cfi_offset 7, -20
 952              		.cfi_offset 8, -16
 953              		.cfi_offset 9, -12
 954              		.cfi_offset 10, -8
 955              		.cfi_offset 14, -4
 956              		.loc 2 205 0
 957 0004 0446     		mov	r4, r0
 206:math/pprz_algebra_int.c ****   int32_t sphi;
 207:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(sphi, e->phi);
 958              		.loc 2 207 0
 959 0006 0868     		ldr	r0, [r1]
 960              	.LVL74:
 205:math/pprz_algebra_int.c ****   int32_t sphi;
 961              		.loc 2 205 0
 962 0008 8846     		mov	r8, r1
 963              		.loc 2 207 0
 964 000a FFF7FEFF 		bl	pprz_itrig_sin
 965              	.LVL75:
 966 000e 8246     		mov	r10, r0
 967              	.LVL76:
 208:math/pprz_algebra_int.c ****   int32_t cphi;
 209:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cphi, e->phi);
 968              		.loc 2 209 0
 969 0010 D8F80000 		ldr	r0, [r8]
 970              	.LVL77:
 971 0014 FFF7FEFF 		bl	pprz_itrig_cos
 972              	.LVL78:
 973 0018 0746     		mov	r7, r0
 974              	.LVL79:
 210:math/pprz_algebra_int.c ****   int32_t stheta;
 211:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(stheta, e->theta);
 975              		.loc 2 211 0
 976 001a D8F80400 		ldr	r0, [r8, #4]
 977              	.LVL80:
 978 001e FFF7FEFF 		bl	pprz_itrig_sin
 979              	.LVL81:
 980 0022 8146     		mov	r9, r0
 981              	.LVL82:
 212:math/pprz_algebra_int.c ****   int32_t ctheta;
 213:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(ctheta, e->theta);
 982              		.loc 2 213 0
 983 0024 D8F80400 		ldr	r0, [r8, #4]
 984              	.LVL83:
 985 0028 FFF7FEFF 		bl	pprz_itrig_cos
 986              	.LVL84:
 987 002c 0546     		mov	r5, r0
 988              	.LVL85:
 214:math/pprz_algebra_int.c ****   int32_t spsi;
 215:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(spsi, e->psi);
 989              		.loc 2 215 0
 990 002e D8F80800 		ldr	r0, [r8, #8]
 991              	.LVL86:
 992 0032 FFF7FEFF 		bl	pprz_itrig_sin
 993              	.LVL87:
 994 0036 0646     		mov	r6, r0
 995              	.LVL88:
 216:math/pprz_algebra_int.c ****   int32_t cpsi;
 217:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cpsi, e->psi);
 996              		.loc 2 217 0
 997 0038 D8F80800 		ldr	r0, [r8, #8]
 998              	.LVL89:
 999 003c FFF7FEFF 		bl	pprz_itrig_cos
 1000              	.LVL90:
 218:math/pprz_algebra_int.c **** 
 219:math/pprz_algebra_int.c ****   int32_t stheta_spsi = INT_MULT_RSHIFT(stheta, spsi,   INT32_TRIG_FRAC);
 220:math/pprz_algebra_int.c ****   int32_t stheta_cpsi = INT_MULT_RSHIFT(stheta, cpsi,   INT32_TRIG_FRAC);
 221:math/pprz_algebra_int.c ****   int32_t ctheta_spsi = INT_MULT_RSHIFT(ctheta, spsi,   INT32_TRIG_FRAC);
 222:math/pprz_algebra_int.c ****   int32_t ctheta_cpsi = INT_MULT_RSHIFT(ctheta, cpsi,   INT32_TRIG_FRAC);
 223:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 224:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 225:math/pprz_algebra_int.c ****   int32_t cphi_spsi   = INT_MULT_RSHIFT(cphi,   spsi,   INT32_TRIG_FRAC);
 226:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 227:math/pprz_algebra_int.c ****   int32_t sphi_stheta = INT_MULT_RSHIFT(sphi,   stheta, INT32_TRIG_FRAC);
 1001              		.loc 2 227 0
 1002 0040 09FB0AF3 		mul	r3, r9, r10
 1003 0044 9B13     		asrs	r3, r3, #14
 1004              	.LVL91:
 228:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 229:math/pprz_algebra_int.c **** 
 230:math/pprz_algebra_int.c ****   int32_t sphi_stheta_spsi = INT_MULT_RSHIFT(sphi_stheta, spsi, INT32_TRIG_FRAC);
 1005              		.loc 2 230 0
 1006 0046 06FB03F1 		mul	r1, r6, r3
 222:math/pprz_algebra_int.c ****   int32_t cphi_stheta = INT_MULT_RSHIFT(cphi,   stheta, INT32_TRIG_FRAC);
 1007              		.loc 2 222 0
 1008 004a 00FB05FE 		mul	lr, r0, r5
 1009              		.loc 2 230 0
 1010 004e 8913     		asrs	r1, r1, #14
 231:math/pprz_algebra_int.c ****   int32_t sphi_stheta_cpsi = INT_MULT_RSHIFT(sphi_stheta, cpsi, INT32_TRIG_FRAC);
 232:math/pprz_algebra_int.c ****   int32_t sphi_ctheta_spsi = INT_MULT_RSHIFT(sphi_ctheta, spsi, INT32_TRIG_FRAC);
 233:math/pprz_algebra_int.c ****   int32_t sphi_ctheta_cpsi = INT_MULT_RSHIFT(sphi_ctheta, cpsi, INT32_TRIG_FRAC);
 234:math/pprz_algebra_int.c **** 
 235:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 0) =  ctheta_cpsi - sphi_stheta_spsi;
 1011              		.loc 2 235 0
 1012 0050 C1EBAE31 		rsb	r1, r1, lr, asr #14
 231:math/pprz_algebra_int.c ****   int32_t sphi_stheta_cpsi = INT_MULT_RSHIFT(sphi_stheta, cpsi, INT32_TRIG_FRAC);
 1013              		.loc 2 231 0
 1014 0054 4343     		muls	r3, r0, r3
 1015              	.LVL92:
 1016              		.loc 2 235 0
 1017 0056 2160     		str	r1, [r4]
 231:math/pprz_algebra_int.c ****   int32_t sphi_stheta_cpsi = INT_MULT_RSHIFT(sphi_stheta, cpsi, INT32_TRIG_FRAC);
 1018              		.loc 2 231 0
 1019 0058 9B13     		asrs	r3, r3, #14
 221:math/pprz_algebra_int.c ****   int32_t ctheta_cpsi = INT_MULT_RSHIFT(ctheta, cpsi,   INT32_TRIG_FRAC);
 1020              		.loc 2 221 0
 1021 005a 06FB05F1 		mul	r1, r6, r5
 236:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta_spsi + sphi_stheta_cpsi;
 1022              		.loc 2 236 0
 1023 005e 03EBA133 		add	r3, r3, r1, asr #14
 1024 0062 6360     		str	r3, [r4, #4]
 223:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 1025              		.loc 2 223 0
 1026 0064 09FB07F3 		mul	r3, r9, r7
 1027 0068 9B13     		asrs	r3, r3, #14
 1028              	.LVL93:
 237:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 0, 2) = -cphi_stheta;
 1029              		.loc 2 237 0
 1030 006a 5B42     		negs	r3, r3
 1031              	.LVL94:
 1032 006c A360     		str	r3, [r4, #8]
 225:math/pprz_algebra_int.c ****   int32_t cphi_cpsi   = INT_MULT_RSHIFT(cphi,   cpsi,   INT32_TRIG_FRAC);
 1033              		.loc 2 225 0
 1034 006e 06FB07F3 		mul	r3, r6, r7
 1035              	.LVL95:
 1036 0072 9B13     		asrs	r3, r3, #14
 1037              	.LVL96:
 238:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 0) = -cphi_spsi;
 1038              		.loc 2 238 0
 1039 0074 5B42     		negs	r3, r3
 1040              	.LVL97:
 228:math/pprz_algebra_int.c **** 
 1041              		.loc 2 228 0
 1042 0076 05FB0AF2 		mul	r2, r5, r10
 1043 007a 9213     		asrs	r2, r2, #14
 1044              	.LVL98:
 1045              		.loc 2 238 0
 1046 007c E360     		str	r3, [r4, #12]
 226:math/pprz_algebra_int.c ****   int32_t sphi_stheta = INT_MULT_RSHIFT(sphi,   stheta, INT32_TRIG_FRAC);
 1047              		.loc 2 226 0
 1048 007e 00FB07F3 		mul	r3, r0, r7
 1049              	.LVL99:
 1050 0082 9B13     		asrs	r3, r3, #14
 1051              	.LVL100:
 220:math/pprz_algebra_int.c ****   int32_t ctheta_spsi = INT_MULT_RSHIFT(ctheta, spsi,   INT32_TRIG_FRAC);
 1052              		.loc 2 220 0
 1053 0084 00FB09F1 		mul	r1, r0, r9
 233:math/pprz_algebra_int.c **** 
 1054              		.loc 2 233 0
 1055 0088 5043     		muls	r0, r2, r0
 1056              	.LVL101:
 239:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 1) =  cphi_cpsi;
 1057              		.loc 2 239 0
 1058 008a 2361     		str	r3, [r4, #16]
 233:math/pprz_algebra_int.c **** 
 1059              		.loc 2 233 0
 1060 008c 8013     		asrs	r0, r0, #14
 1061              	.LVL102:
 232:math/pprz_algebra_int.c ****   int32_t sphi_ctheta_cpsi = INT_MULT_RSHIFT(sphi_ctheta, cpsi, INT32_TRIG_FRAC);
 1062              		.loc 2 232 0
 1063 008e 06FB02F3 		mul	r3, r6, r2
 1064              	.LVL103:
 219:math/pprz_algebra_int.c ****   int32_t stheta_cpsi = INT_MULT_RSHIFT(stheta, cpsi,   INT32_TRIG_FRAC);
 1065              		.loc 2 219 0
 1066 0092 06FB09F6 		mul	r6, r6, r9
 1067              	.LVL104:
 240:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 1, 2) =  sphi;
 241:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta_cpsi + sphi_ctheta_spsi;
 242:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta_spsi - sphi_ctheta_cpsi;
 1068              		.loc 2 242 0
 1069 0096 C0EBA630 		rsb	r0, r0, r6, asr #14
 1070              	.LVL105:
 232:math/pprz_algebra_int.c ****   int32_t sphi_ctheta_cpsi = INT_MULT_RSHIFT(sphi_ctheta, cpsi, INT32_TRIG_FRAC);
 1071              		.loc 2 232 0
 1072 009a 9B13     		asrs	r3, r3, #14
 1073              	.LVL106:
 1074              		.loc 2 242 0
 1075 009c E061     		str	r0, [r4, #28]
 224:math/pprz_algebra_int.c ****   int32_t cphi_spsi   = INT_MULT_RSHIFT(cphi,   spsi,   INT32_TRIG_FRAC);
 1076              		.loc 2 224 0
 1077 009e 05FB07F0 		mul	r0, r5, r7
 241:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta_spsi - sphi_ctheta_cpsi;
 1078              		.loc 2 241 0
 1079 00a2 03EBA133 		add	r3, r3, r1, asr #14
 1080              	.LVL107:
 224:math/pprz_algebra_int.c ****   int32_t cphi_spsi   = INT_MULT_RSHIFT(cphi,   spsi,   INT32_TRIG_FRAC);
 1081              		.loc 2 224 0
 1082 00a6 8013     		asrs	r0, r0, #14
 1083              	.LVL108:
 240:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta_cpsi + sphi_ctheta_spsi;
 1084              		.loc 2 240 0
 1085 00a8 C4F814A0 		str	r10, [r4, #20]
 241:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta_spsi - sphi_ctheta_cpsi;
 1086              		.loc 2 241 0
 1087 00ac A361     		str	r3, [r4, #24]
 243:math/pprz_algebra_int.c ****   RMAT_ELMT(*rm, 2, 2) =  cphi_ctheta;
 1088              		.loc 2 243 0
 1089 00ae 2062     		str	r0, [r4, #32]
 1090 00b0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1091              		.cfi_endproc
 1092              	.LFE18:
 1094              		.section	.text.int32_quat_comp,"ax",%progbits
 1095              		.align	1
 1096              		.global	int32_quat_comp
 1097              		.thumb
 1098              		.thumb_func
 1100              	int32_quat_comp:
 1101              	.LFB19:
 244:math/pprz_algebra_int.c **** }
 245:math/pprz_algebra_int.c **** 
 246:math/pprz_algebra_int.c **** 
 247:math/pprz_algebra_int.c **** /*
 248:math/pprz_algebra_int.c ****  *
 249:math/pprz_algebra_int.c ****  * Quaternions
 250:math/pprz_algebra_int.c ****  *
 251:math/pprz_algebra_int.c ****  */
 252:math/pprz_algebra_int.c **** 
 253:math/pprz_algebra_int.c **** void int32_quat_comp(struct Int32Quat *a2c, struct Int32Quat *a2b, struct Int32Quat *b2c)
 254:math/pprz_algebra_int.c **** {
 1102              		.loc 2 254 0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 0
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 1106              	.LVL109:
 1107 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1108              		.cfi_def_cfa_offset 28
 1109              		.cfi_offset 4, -28
 1110              		.cfi_offset 5, -24
 1111              		.cfi_offset 6, -20
 1112              		.cfi_offset 7, -16
 1113              		.cfi_offset 8, -12
 1114              		.cfi_offset 9, -8
 1115              		.cfi_offset 14, -4
 255:math/pprz_algebra_int.c ****   a2c->qi = (a2b->qi * b2c->qi - a2b->qx * b2c->qx - a2b->qy * b2c->qy - a2b->qz * b2c->qz) >> INT3
 1116              		.loc 2 255 0
 1117 0004 1368     		ldr	r3, [r2]
 1118 0006 0C68     		ldr	r4, [r1]
 1119 0008 D2F80490 		ldr	r9, [r2, #4]
 1120 000c D1F804C0 		ldr	ip, [r1, #4]
 1121 0010 9768     		ldr	r7, [r2, #8]
 1122 0012 8D68     		ldr	r5, [r1, #8]
 1123 0014 D2F80CE0 		ldr	lr, [r2, #12]
 1124 0018 CE68     		ldr	r6, [r1, #12]
 1125 001a 6343     		muls	r3, r4, r3
 1126 001c 09FB1C33 		mls	r3, r9, ip, r3
 1127 0020 07FB1533 		mls	r3, r7, r5, r3
 1128 0024 0EFB1633 		mls	r3, lr, r6, r3
 1129 0028 DB13     		asrs	r3, r3, #15
 1130 002a 0360     		str	r3, [r0]
 256:math/pprz_algebra_int.c ****   a2c->qx = (a2b->qi * b2c->qx + a2b->qx * b2c->qi + a2b->qy * b2c->qz - a2b->qz * b2c->qy) >> INT3
 1131              		.loc 2 256 0
 1132 002c D2F80080 		ldr	r8, [r2]
 1133 0030 0B68     		ldr	r3, [r1]
 1134 0032 08FB0CFC 		mul	ip, r8, ip
 1135 0036 09FB03C4 		mla	r4, r9, r3, ip
 1136 003a 0EFB0544 		mla	r4, lr, r5, r4
 1137 003e 07FB1644 		mls	r4, r7, r6, r4
 1138 0042 E413     		asrs	r4, r4, #15
 1139 0044 4460     		str	r4, [r0, #4]
 257:math/pprz_algebra_int.c ****   a2c->qy = (a2b->qi * b2c->qy - a2b->qx * b2c->qz + a2b->qy * b2c->qi + a2b->qz * b2c->qx) >> INT3
 1140              		.loc 2 257 0
 1141 0046 D1F804C0 		ldr	ip, [r1, #4]
 1142 004a 5468     		ldr	r4, [r2, #4]
 1143 004c 5F43     		muls	r7, r3, r7
 1144 004e 0EFB1C77 		mls	r7, lr, ip, r7
 1145 0052 08FB0575 		mla	r5, r8, r5, r7
 1146 0056 04FB0655 		mla	r5, r4, r6, r5
 1147 005a ED13     		asrs	r5, r5, #15
 1148 005c 8560     		str	r5, [r0, #8]
 258:math/pprz_algebra_int.c ****   a2c->qz = (a2b->qi * b2c->qz + a2b->qx * b2c->qy - a2b->qy * b2c->qx + a2b->qz * b2c->qi) >> INT3
 1149              		.loc 2 258 0
 1150 005e 9268     		ldr	r2, [r2, #8]
 1151              	.LVL110:
 1152 0060 02FB0CFC 		mul	ip, r2, ip
 1153 0064 0EFB03CE 		mla	lr, lr, r3, ip
 1154 0068 8B68     		ldr	r3, [r1, #8]
 1155 006a 03FB14EE 		mls	lr, r3, r4, lr
 1156 006e 08FB06E6 		mla	r6, r8, r6, lr
 1157 0072 F613     		asrs	r6, r6, #15
 1158 0074 C660     		str	r6, [r0, #12]
 1159 0076 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1160              		.cfi_endproc
 1161              	.LFE19:
 1163              		.section	.text.int32_quat_comp_inv,"ax",%progbits
 1164              		.align	1
 1165              		.global	int32_quat_comp_inv
 1166              		.thumb
 1167              		.thumb_func
 1169              	int32_quat_comp_inv:
 1170              	.LFB20:
 259:math/pprz_algebra_int.c **** }
 260:math/pprz_algebra_int.c **** 
 261:math/pprz_algebra_int.c **** void int32_quat_comp_inv(struct Int32Quat *a2b, struct Int32Quat *a2c, struct Int32Quat *b2c)
 262:math/pprz_algebra_int.c **** {
 1171              		.loc 2 262 0
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 0
 1174              		@ frame_needed = 0, uses_anonymous_args = 0
 1175              	.LVL111:
 1176 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1177              		.cfi_def_cfa_offset 28
 1178              		.cfi_offset 4, -28
 1179              		.cfi_offset 5, -24
 1180              		.cfi_offset 6, -20
 1181              		.cfi_offset 7, -16
 1182              		.cfi_offset 8, -12
 1183              		.cfi_offset 9, -8
 1184              		.cfi_offset 14, -4
 263:math/pprz_algebra_int.c ****   a2b->qi = (a2c->qi * b2c->qi + a2c->qx * b2c->qx + a2c->qy * b2c->qy + a2c->qz * b2c->qz) >> INT3
 1185              		.loc 2 263 0
 1186 0004 D2F80490 		ldr	r9, [r2, #4]
 1187 0008 D1F80480 		ldr	r8, [r1, #4]
 1188 000c 0B68     		ldr	r3, [r1]
 1189 000e 1568     		ldr	r5, [r2]
 1190 0010 D2F808E0 		ldr	lr, [r2, #8]
 1191 0014 8C68     		ldr	r4, [r1, #8]
 1192 0016 D768     		ldr	r7, [r2, #12]
 1193 0018 CE68     		ldr	r6, [r1, #12]
 1194 001a 09FB08FC 		mul	ip, r9, r8
 1195 001e 05FB03C5 		mla	r5, r5, r3, ip
 1196 0022 0EFB0455 		mla	r5, lr, r4, r5
 1197 0026 07FB0655 		mla	r5, r7, r6, r5
 1198 002a ED13     		asrs	r5, r5, #15
 1199 002c 0560     		str	r5, [r0]
 264:math/pprz_algebra_int.c ****   a2b->qx = (-a2c->qi * b2c->qx + a2c->qx * b2c->qi - a2c->qy * b2c->qz + a2c->qz * b2c->qy) >> INT
 1200              		.loc 2 264 0
 1201 002e 0D68     		ldr	r5, [r1]
 1202 0030 C5F1000C 		rsb	ip, r5, #0
 1203 0034 1568     		ldr	r5, [r2]
 1204 0036 05FB08F8 		mul	r8, r5, r8
 1205 003a 09FB0C83 		mla	r3, r9, ip, r8
 1206 003e 07FB1433 		mls	r3, r7, r4, r3
 1207 0042 0EFB0633 		mla	r3, lr, r6, r3
 1208 0046 DB13     		asrs	r3, r3, #15
 1209 0048 4360     		str	r3, [r0, #4]
 265:math/pprz_algebra_int.c ****   a2b->qy = (-a2c->qi * b2c->qy + a2c->qx * b2c->qz + a2c->qy * b2c->qi - a2c->qz * b2c->qx) >> INT
 1210              		.loc 2 265 0
 1211 004a D1F80480 		ldr	r8, [r1, #4]
 1212 004e 5368     		ldr	r3, [r2, #4]
 1213 0050 07FB08F9 		mul	r9, r7, r8
 1214 0054 0EFB0C9E 		mla	lr, lr, ip, r9
 1215 0058 05FB04E4 		mla	r4, r5, r4, lr
 1216 005c 03FB1644 		mls	r4, r3, r6, r4
 1217 0060 E413     		asrs	r4, r4, #15
 1218 0062 8460     		str	r4, [r0, #8]
 266:math/pprz_algebra_int.c ****   a2b->qz = (-a2c->qi * b2c->qz - a2c->qx * b2c->qy + a2c->qy * b2c->qx + a2c->qz * b2c->qi) >> INT
 1219              		.loc 2 266 0
 1220 0064 9268     		ldr	r2, [r2, #8]
 1221              	.LVL112:
 1222 0066 07FB0CF7 		mul	r7, r7, ip
 1223 006a 02FB1877 		mls	r7, r2, r8, r7
 1224 006e 8A68     		ldr	r2, [r1, #8]
 1225 0070 02FB0373 		mla	r3, r2, r3, r7
 1226 0074 05FB0636 		mla	r6, r5, r6, r3
 1227 0078 F613     		asrs	r6, r6, #15
 1228 007a C660     		str	r6, [r0, #12]
 1229 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1230              		.cfi_endproc
 1231              	.LFE20:
 1233              		.section	.text.int32_quat_inv_comp,"ax",%progbits
 1234              		.align	1
 1235              		.global	int32_quat_inv_comp
 1236              		.thumb
 1237              		.thumb_func
 1239              	int32_quat_inv_comp:
 1240              	.LFB21:
 267:math/pprz_algebra_int.c **** }
 268:math/pprz_algebra_int.c **** 
 269:math/pprz_algebra_int.c **** void int32_quat_inv_comp(struct Int32Quat *b2c, struct Int32Quat *a2b, struct Int32Quat *a2c)
 270:math/pprz_algebra_int.c **** {
 1241              		.loc 2 270 0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245              	.LVL113:
 1246 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1247              		.cfi_def_cfa_offset 28
 1248              		.cfi_offset 4, -28
 1249              		.cfi_offset 5, -24
 1250              		.cfi_offset 6, -20
 1251              		.cfi_offset 7, -16
 1252              		.cfi_offset 8, -12
 1253              		.cfi_offset 9, -8
 1254              		.cfi_offset 14, -4
 271:math/pprz_algebra_int.c ****   b2c->qi = (a2b->qi * a2c->qi + a2b->qx * a2c->qx + a2b->qy * a2c->qy + a2b->qz * a2c->qz) >> INT3
 1255              		.loc 2 271 0
 1256 0004 4B68     		ldr	r3, [r1, #4]
 1257 0006 D2F80480 		ldr	r8, [r2, #4]
 1258 000a 1768     		ldr	r7, [r2]
 1259 000c 0D68     		ldr	r5, [r1]
 1260 000e 8C68     		ldr	r4, [r1, #8]
 1261 0010 D2F808C0 		ldr	ip, [r2, #8]
 1262 0014 CE68     		ldr	r6, [r1, #12]
 1263 0016 D2F80CE0 		ldr	lr, [r2, #12]
 1264 001a 08FB03F9 		mul	r9, r8, r3
 1265 001e 07FB0595 		mla	r5, r7, r5, r9
 1266 0022 0CFB0455 		mla	r5, ip, r4, r5
 1267 0026 0EFB0655 		mla	r5, lr, r6, r5
 1268 002a ED13     		asrs	r5, r5, #15
 1269 002c 0560     		str	r5, [r0]
 272:math/pprz_algebra_int.c ****   b2c->qx = (a2b->qi * a2c->qx - a2b->qx * a2c->qi - a2b->qy * a2c->qz + a2b->qz * a2c->qy) >> INT3
 1270              		.loc 2 272 0
 1271 002e 0F68     		ldr	r7, [r1]
 1272 0030 1568     		ldr	r5, [r2]
 1273 0032 08FB07F8 		mul	r8, r8, r7
 1274 0036 05FB1383 		mls	r3, r5, r3, r8
 1275 003a 0EFB1433 		mls	r3, lr, r4, r3
 1276 003e 0CFB0633 		mla	r3, ip, r6, r3
 1277 0042 DB13     		asrs	r3, r3, #15
 1278 0044 4360     		str	r3, [r0, #4]
 273:math/pprz_algebra_int.c ****   b2c->qy = (a2b->qi * a2c->qy + a2b->qx * a2c->qz - a2b->qy * a2c->qi - a2b->qz * a2c->qx) >> INT3
 1279              		.loc 2 273 0
 1280 0046 D1F80480 		ldr	r8, [r1, #4]
 1281 004a 5368     		ldr	r3, [r2, #4]
 1282 004c 0EFB08F9 		mul	r9, lr, r8
 1283 0050 0CFB079C 		mla	ip, ip, r7, r9
 1284 0054 05FB14C4 		mls	r4, r5, r4, ip
 1285 0058 03FB1644 		mls	r4, r3, r6, r4
 1286 005c E413     		asrs	r4, r4, #15
 1287 005e 8460     		str	r4, [r0, #8]
 274:math/pprz_algebra_int.c ****   b2c->qz = (a2b->qi * a2c->qz - a2b->qx * a2c->qy + a2b->qy * a2c->qx - a2b->qz * a2c->qi) >> INT3
 1288              		.loc 2 274 0
 1289 0060 0EFB07FE 		mul	lr, lr, r7
 1290 0064 9768     		ldr	r7, [r2, #8]
 1291 0066 07FB18EE 		mls	lr, r7, r8, lr
 1292 006a 8F68     		ldr	r7, [r1, #8]
 1293 006c 07FB03E3 		mla	r3, r7, r3, lr
 1294 0070 05FB1636 		mls	r6, r5, r6, r3
 1295 0074 F613     		asrs	r6, r6, #15
 1296 0076 C660     		str	r6, [r0, #12]
 1297 0078 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1298              		.cfi_endproc
 1299              	.LFE21:
 1301              		.section	.text.int32_quat_comp_norm_shortest,"ax",%progbits
 1302              		.align	1
 1303              		.global	int32_quat_comp_norm_shortest
 1304              		.thumb
 1305              		.thumb_func
 1307              	int32_quat_comp_norm_shortest:
 1308              	.LFB22:
 275:math/pprz_algebra_int.c **** }
 276:math/pprz_algebra_int.c **** 
 277:math/pprz_algebra_int.c **** void int32_quat_comp_norm_shortest(struct Int32Quat *a2c, struct Int32Quat *a2b, struct Int32Quat *
 278:math/pprz_algebra_int.c **** {
 1309              		.loc 2 278 0
 1310              		.cfi_startproc
 1311              		@ args = 0, pretend = 0, frame = 0
 1312              		@ frame_needed = 0, uses_anonymous_args = 0
 1313              	.LVL114:
 1314 0000 10B5     		push	{r4, lr}
 1315              		.cfi_def_cfa_offset 8
 1316              		.cfi_offset 4, -8
 1317              		.cfi_offset 14, -4
 1318              		.loc 2 278 0
 1319 0002 0446     		mov	r4, r0
 279:math/pprz_algebra_int.c ****   int32_quat_comp(a2c, a2b, b2c);
 1320              		.loc 2 279 0
 1321 0004 FFF7FEFF 		bl	int32_quat_comp
 1322              	.LVL115:
 280:math/pprz_algebra_int.c ****   int32_quat_wrap_shortest(a2c);
 1323              		.loc 2 280 0
 1324 0008 2046     		mov	r0, r4
 1325 000a FFF7FEFF 		bl	int32_quat_wrap_shortest
 1326              	.LVL116:
 281:math/pprz_algebra_int.c ****   int32_quat_normalize(a2c);
 1327              		.loc 2 281 0
 1328 000e 2046     		mov	r0, r4
 282:math/pprz_algebra_int.c **** }
 1329              		.loc 2 282 0
 1330 0010 BDE81040 		pop	{r4, lr}
 1331              		.cfi_restore 14
 1332              		.cfi_restore 4
 1333              		.cfi_def_cfa_offset 0
 1334              	.LVL117:
 281:math/pprz_algebra_int.c ****   int32_quat_normalize(a2c);
 1335              		.loc 2 281 0
 1336 0014 FFF7FEBF 		b	int32_quat_normalize
 1337              	.LVL118:
 1338              		.cfi_endproc
 1339              	.LFE22:
 1341              		.section	.text.int32_quat_comp_inv_norm_shortest,"ax",%progbits
 1342              		.align	1
 1343              		.global	int32_quat_comp_inv_norm_shortest
 1344              		.thumb
 1345              		.thumb_func
 1347              	int32_quat_comp_inv_norm_shortest:
 1348              	.LFB23:
 283:math/pprz_algebra_int.c **** 
 284:math/pprz_algebra_int.c **** void int32_quat_comp_inv_norm_shortest(struct Int32Quat *a2b, struct Int32Quat *a2c, struct Int32Qu
 285:math/pprz_algebra_int.c **** {
 1349              		.loc 2 285 0
 1350              		.cfi_startproc
 1351              		@ args = 0, pretend = 0, frame = 0
 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 1353              	.LVL119:
 1354 0000 10B5     		push	{r4, lr}
 1355              		.cfi_def_cfa_offset 8
 1356              		.cfi_offset 4, -8
 1357              		.cfi_offset 14, -4
 1358              		.loc 2 285 0
 1359 0002 0446     		mov	r4, r0
 286:math/pprz_algebra_int.c ****   int32_quat_comp_inv(a2b, a2c, b2c);
 1360              		.loc 2 286 0
 1361 0004 FFF7FEFF 		bl	int32_quat_comp_inv
 1362              	.LVL120:
 287:math/pprz_algebra_int.c ****   int32_quat_wrap_shortest(a2b);
 1363              		.loc 2 287 0
 1364 0008 2046     		mov	r0, r4
 1365 000a FFF7FEFF 		bl	int32_quat_wrap_shortest
 1366              	.LVL121:
 288:math/pprz_algebra_int.c ****   int32_quat_normalize(a2b);
 1367              		.loc 2 288 0
 1368 000e 2046     		mov	r0, r4
 289:math/pprz_algebra_int.c **** }
 1369              		.loc 2 289 0
 1370 0010 BDE81040 		pop	{r4, lr}
 1371              		.cfi_restore 14
 1372              		.cfi_restore 4
 1373              		.cfi_def_cfa_offset 0
 1374              	.LVL122:
 288:math/pprz_algebra_int.c ****   int32_quat_normalize(a2b);
 1375              		.loc 2 288 0
 1376 0014 FFF7FEBF 		b	int32_quat_normalize
 1377              	.LVL123:
 1378              		.cfi_endproc
 1379              	.LFE23:
 1381              		.section	.text.int32_quat_inv_comp_norm_shortest,"ax",%progbits
 1382              		.align	1
 1383              		.global	int32_quat_inv_comp_norm_shortest
 1384              		.thumb
 1385              		.thumb_func
 1387              	int32_quat_inv_comp_norm_shortest:
 1388              	.LFB24:
 290:math/pprz_algebra_int.c **** 
 291:math/pprz_algebra_int.c **** void int32_quat_inv_comp_norm_shortest(struct Int32Quat *b2c, struct Int32Quat *a2b, struct Int32Qu
 292:math/pprz_algebra_int.c **** {
 1389              		.loc 2 292 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              	.LVL124:
 1394 0000 10B5     		push	{r4, lr}
 1395              		.cfi_def_cfa_offset 8
 1396              		.cfi_offset 4, -8
 1397              		.cfi_offset 14, -4
 1398              		.loc 2 292 0
 1399 0002 0446     		mov	r4, r0
 293:math/pprz_algebra_int.c ****   int32_quat_inv_comp(b2c, a2b, a2c);
 1400              		.loc 2 293 0
 1401 0004 FFF7FEFF 		bl	int32_quat_inv_comp
 1402              	.LVL125:
 294:math/pprz_algebra_int.c ****   int32_quat_wrap_shortest(b2c);
 1403              		.loc 2 294 0
 1404 0008 2046     		mov	r0, r4
 1405 000a FFF7FEFF 		bl	int32_quat_wrap_shortest
 1406              	.LVL126:
 295:math/pprz_algebra_int.c ****   int32_quat_normalize(b2c);
 1407              		.loc 2 295 0
 1408 000e 2046     		mov	r0, r4
 296:math/pprz_algebra_int.c **** }
 1409              		.loc 2 296 0
 1410 0010 BDE81040 		pop	{r4, lr}
 1411              		.cfi_restore 14
 1412              		.cfi_restore 4
 1413              		.cfi_def_cfa_offset 0
 1414              	.LVL127:
 295:math/pprz_algebra_int.c ****   int32_quat_normalize(b2c);
 1415              		.loc 2 295 0
 1416 0014 FFF7FEBF 		b	int32_quat_normalize
 1417              	.LVL128:
 1418              		.cfi_endproc
 1419              	.LFE24:
 1421              		.section	.text.int32_quat_derivative,"ax",%progbits
 1422              		.align	1
 1423              		.global	int32_quat_derivative
 1424              		.thumb
 1425              		.thumb_func
 1427              	int32_quat_derivative:
 1428              	.LFB25:
 297:math/pprz_algebra_int.c **** 
 298:math/pprz_algebra_int.c **** /** Quaternion derivative from rotational velocity.
 299:math/pprz_algebra_int.c ****  * qd = -0.5*omega(r) * q
 300:math/pprz_algebra_int.c ****  * or equally:
 301:math/pprz_algebra_int.c ****  * qd = 0.5 * q * omega(r)
 302:math/pprz_algebra_int.c ****  * Multiplication with 0.5 is done by shifting one more bit to the right.
 303:math/pprz_algebra_int.c ****  */
 304:math/pprz_algebra_int.c **** void int32_quat_derivative(struct Int32Quat *qd, const struct Int32Rates *r, struct Int32Quat *q)
 305:math/pprz_algebra_int.c **** {
 1429              		.loc 2 305 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 0
 1432              		@ frame_needed = 0, uses_anonymous_args = 0
 1433              	.LVL129:
 1434 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1435              		.cfi_def_cfa_offset 20
 1436              		.cfi_offset 4, -20
 1437              		.cfi_offset 5, -16
 1438              		.cfi_offset 6, -12
 1439              		.cfi_offset 7, -8
 1440              		.cfi_offset 14, -4
 306:math/pprz_algebra_int.c ****   qd->qi = (-(r->p * q->qx + r->q * q->qy + r->r * q->qz)) >> (INT32_RATE_FRAC + 1);
 1441              		.loc 2 306 0
 1442 0002 91E85000 		ldmia	r1, {r4, r6}
 1443 0006 9568     		ldr	r5, [r2, #8]
 1444 0008 5368     		ldr	r3, [r2, #4]
 1445 000a 8F68     		ldr	r7, [r1, #8]
 1446 000c D168     		ldr	r1, [r2, #12]
 1447              	.LVL130:
 1448 000e 05FB06FE 		mul	lr, r5, r6
 1449 0012 03FB04E3 		mla	r3, r3, r4, lr
 1450 0016 01FB0733 		mla	r3, r1, r7, r3
 1451 001a 5B42     		negs	r3, r3
 1452 001c 5B13     		asrs	r3, r3, #13
 1453 001e 0360     		str	r3, [r0]
 307:math/pprz_algebra_int.c ****   qd->qx = (-(-r->p * q->qi - r->r * q->qy + r->q * q->qz)) >> (INT32_RATE_FRAC + 1);
 1454              		.loc 2 307 0
 1455 0020 1368     		ldr	r3, [r2]
 1456 0022 03FB04FE 		mul	lr, r3, r4
 1457 0026 05FB07E5 		mla	r5, r5, r7, lr
 1458 002a 01FB1655 		mls	r5, r1, r6, r5
 1459 002e 6D13     		asrs	r5, r5, #13
 1460 0030 4560     		str	r5, [r0, #4]
 308:math/pprz_algebra_int.c ****   qd->qy = (-(-r->q * q->qi + r->r * q->qx - r->p * q->qz)) >> (INT32_RATE_FRAC + 1);
 1461              		.loc 2 308 0
 1462 0032 D2F804E0 		ldr	lr, [r2, #4]
 1463 0036 03FB06F5 		mul	r5, r3, r6
 1464 003a 0EFB1755 		mls	r5, lr, r7, r5
 1465 003e 01FB0451 		mla	r1, r1, r4, r5
 1466 0042 4913     		asrs	r1, r1, #13
 1467 0044 8160     		str	r1, [r0, #8]
 309:math/pprz_algebra_int.c ****   qd->qz = (-(-r->r * q->qi - r->q * q->qx + r->p * q->qy)) >> (INT32_RATE_FRAC + 1);
 1468              		.loc 2 309 0
 1469 0046 5F43     		muls	r7, r3, r7
 1470 0048 9368     		ldr	r3, [r2, #8]
 1471 004a 0EFB0676 		mla	r6, lr, r6, r7
 1472 004e 03FB1464 		mls	r4, r3, r4, r6
 1473 0052 6413     		asrs	r4, r4, #13
 1474 0054 C460     		str	r4, [r0, #12]
 1475 0056 F0BD     		pop	{r4, r5, r6, r7, pc}
 1476              		.cfi_endproc
 1477              	.LFE25:
 1479              		.section	.text.int32_quat_integrate_fi,"ax",%progbits
 1480              		.align	1
 1481              		.global	int32_quat_integrate_fi
 1482              		.thumb
 1483              		.thumb_func
 1485              	int32_quat_integrate_fi:
 1486              	.LFB26:
 310:math/pprz_algebra_int.c **** }
 311:math/pprz_algebra_int.c **** 
 312:math/pprz_algebra_int.c **** /** in place quaternion first order integration with constant rotational velocity. */
 313:math/pprz_algebra_int.c **** void int32_quat_integrate_fi(struct Int32Quat *q, struct Int64Quat *hr, struct Int32Rates *omega, i
 314:math/pprz_algebra_int.c **** {
 1487              		.loc 2 314 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 32
 1490              		@ frame_needed = 0, uses_anonymous_args = 0
 1491              	.LVL131:
 1492 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1493              		.cfi_def_cfa_offset 36
 1494              		.cfi_offset 4, -36
 1495              		.cfi_offset 5, -32
 1496              		.cfi_offset 6, -28
 1497              		.cfi_offset 7, -24
 1498              		.cfi_offset 8, -20
 1499              		.cfi_offset 9, -16
 1500              		.cfi_offset 10, -12
 1501              		.cfi_offset 11, -8
 1502              		.cfi_offset 14, -4
 315:math/pprz_algebra_int.c ****   hr->qi += - ((int64_t) omega->p) * q->qx - ((int64_t) omega->q) * q->qy - ((int64_t) omega->r) * 
 1503              		.loc 2 315 0
 1504 0004 D2F800C0 		ldr	ip, [r2]
 1505 0008 4668     		ldr	r6, [r0, #4]
 1506 000a D2F808E0 		ldr	lr, [r2, #8]
 1507 000e 5768     		ldr	r7, [r2, #4]
 1508 0010 C268     		ldr	r2, [r0, #12]
 1509              	.LVL132:
 314:math/pprz_algebra_int.c ****   hr->qi += - ((int64_t) omega->p) * q->qx - ((int64_t) omega->q) * q->qy - ((int64_t) omega->r) * 
 1510              		.loc 2 314 0
 1511 0012 8BB0     		sub	sp, sp, #44
 1512              		.cfi_def_cfa_offset 80
 314:math/pprz_algebra_int.c ****   hr->qi += - ((int64_t) omega->p) * q->qx - ((int64_t) omega->q) * q->qy - ((int64_t) omega->r) * 
 1513              		.loc 2 314 0
 1514 0014 0C46     		mov	r4, r1
 1515 0016 0546     		mov	r5, r0
 1516              		.loc 2 315 0
 1517 0018 8168     		ldr	r1, [r0, #8]
 1518              	.LVL133:
 1519 001a 0291     		str	r1, [sp, #8]
 1520 001c CCF10000 		rsb	r0, ip, #0
 1521              	.LVL134:
 1522 0020 20EA0C01 		bic	r1, r0, ip
 1523 0024 4FEAE679 		asr	r9, r6, #31
 1524 0028 00FB09F8 		mul	r8, r0, r9
 1525 002c C917     		asrs	r1, r1, #31
 1526 002e 06FB0188 		mla	r8, r6, r1, r8
 1527 0032 0299     		ldr	r1, [sp, #8]
 1528 0034 A0FB06AB 		umull	r10, fp, r0, r6
 1529 0038 C344     		add	fp, fp, r8
 1530 003a 87FB0189 		smull	r8, r9, r7, r1
 1531 003e BAEB0800 		subs	r0, r10, r8
 1532 0042 6BEB0901 		sbc	r1, fp, r9
 1533 0046 8EFB0289 		smull	r8, r9, lr, r2
 1534 004a B0EB0800 		subs	r0, r0, r8
 1535 004e 61EB0901 		sbc	r1, r1, r9
 1536 0052 D4E90089 		ldrd	r8, [r4]
 1537 0056 10EB080A 		adds	r10, r0, r8
 1538 005a 41EB090B 		adc	fp, r1, r9
 1539 005e 5046     		mov	r0, r10
 1540 0060 5946     		mov	r1, fp
 1541 0062 C4E90001 		strd	r0, [r4]
 316:math/pprz_algebra_int.c ****   hr->qx += ((int64_t) omega->p) * q->qi + ((int64_t) omega->r) * q->qy - ((int64_t) omega->q) * q-
 1542              		.loc 2 316 0
 1543 0066 2968     		ldr	r1, [r5]
 1544 0068 0391     		str	r1, [sp, #12]
 1545 006a 0299     		ldr	r1, [sp, #8]
 1546 006c 8EFB0189 		smull	r8, r9, lr, r1
 1547 0070 0399     		ldr	r1, [sp, #12]
 1548 0072 C1FB0C89 		smlal	r8, r9, r1, ip
 1549 0076 87FB0201 		smull	r0, r1, r7, r2
 1550 007a B8EB0008 		subs	r8, r8, r0
 1551 007e 69EB0109 		sbc	r9, r9, r1
 1552 0082 D4E90201 		ldrd	r0, [r4, #8]
 315:math/pprz_algebra_int.c ****   hr->qi += - ((int64_t) omega->p) * q->qx - ((int64_t) omega->q) * q->qy - ((int64_t) omega->r) * 
 1553              		.loc 2 315 0
 1554 0086 CDE904AB 		strd	r10, [sp, #16]
 1555              		.loc 2 316 0
 1556 008a 10EB080A 		adds	r10, r0, r8
 1557 008e 41EB090B 		adc	fp, r1, r9
 1558 0092 5046     		mov	r0, r10
 1559 0094 5946     		mov	r1, fp
 1560 0096 C4E90201 		strd	r0, [r4, #8]
 317:math/pprz_algebra_int.c ****   hr->qy += ((int64_t) omega->q) * q->qi - ((int64_t) omega->r) * q->qx + ((int64_t) omega->p) * q-
 1561              		.loc 2 317 0
 1562 009a 0399     		ldr	r1, [sp, #12]
 1563 009c 8EFB0689 		smull	r8, r9, lr, r6
 1564 00a0 87FB0101 		smull	r0, r1, r7, r1
 1565 00a4 B0EB0800 		subs	r0, r0, r8
 1566 00a8 61EB0901 		sbc	r1, r1, r9
 1567 00ac D4E90489 		ldrd	r8, [r4, #16]
 1568 00b0 C2FB0C01 		smlal	r0, r1, r2, ip
 318:math/pprz_algebra_int.c ****   hr->qz += ((int64_t) omega->r) * q->qi + ((int64_t) omega->q) * q->qx - ((int64_t) omega->p) * q-
 1569              		.loc 2 318 0
 1570 00b4 039A     		ldr	r2, [sp, #12]
 317:math/pprz_algebra_int.c ****   hr->qy += ((int64_t) omega->q) * q->qi - ((int64_t) omega->r) * q->qx + ((int64_t) omega->p) * q-
 1571              		.loc 2 317 0
 1572 00b6 18EB000A 		adds	r10, r8, r0
 1573              		.loc 2 318 0
 1574 00ba 87FB0667 		smull	r6, r7, r7, r6
 1575 00be C2FB0E67 		smlal	r6, r7, r2, lr
 317:math/pprz_algebra_int.c ****   hr->qy += ((int64_t) omega->q) * q->qi - ((int64_t) omega->r) * q->qx + ((int64_t) omega->p) * q-
 1576              		.loc 2 317 0
 1577 00c2 49EB010B 		adc	fp, r9, r1
 1578              		.loc 2 318 0
 1579 00c6 029A     		ldr	r2, [sp, #8]
 317:math/pprz_algebra_int.c ****   hr->qy += ((int64_t) omega->q) * q->qi - ((int64_t) omega->r) * q->qx + ((int64_t) omega->p) * q-
 1580              		.loc 2 317 0
 1581 00c8 5046     		mov	r0, r10
 1582 00ca 5946     		mov	r1, fp
 1583 00cc C4E90401 		strd	r0, [r4, #16]
 1584              		.loc 2 318 0
 1585 00d0 8CFB0201 		smull	r0, r1, ip, r2
 1586 00d4 361A     		subs	r6, r6, r0
 1587 00d6 67EB0107 		sbc	r7, r7, r1
 1588 00da D4E90601 		ldrd	r0, [r4, #24]
 319:math/pprz_algebra_int.c **** 
 320:math/pprz_algebra_int.c ****   lldiv_t _div = lldiv(hr->qi, ((1 << INT32_RATE_FRAC) * freq * 2));
 1589              		.loc 2 320 0
 1590 00de 5B03     		lsls	r3, r3, #13
 1591              	.LVL135:
 318:math/pprz_algebra_int.c ****   hr->qz += ((int64_t) omega->r) * q->qi + ((int64_t) omega->q) * q->qx - ((int64_t) omega->p) * q-
 1592              		.loc 2 318 0
 1593 00e0 10EB0608 		adds	r8, r0, r6
 1594 00e4 41EB0709 		adc	r9, r1, r7
 1595              		.loc 2 320 0
 1596 00e8 1E46     		mov	r6, r3
 1597 00ea DF17     		asrs	r7, r3, #31
 1598 00ec 06A8     		add	r0, sp, #24
 1599 00ee DDE90423 		ldrd	r2, [sp, #16]
 318:math/pprz_algebra_int.c ****   hr->qz += ((int64_t) omega->r) * q->qi + ((int64_t) omega->q) * q->qx - ((int64_t) omega->p) * q-
 1600              		.loc 2 318 0
 1601 00f2 C4E90689 		strd	r8, [r4, #24]
 1602              		.loc 2 320 0
 1603 00f6 CDE90067 		strd	r6, [sp]
 1604 00fa FFF7FEFF 		bl	lldiv
 1605              	.LVL136:
 321:math/pprz_algebra_int.c ****   q->qi += (int32_t) _div.quot;
 1606              		.loc 2 321 0
 1607 00fe 2A68     		ldr	r2, [r5]
 1608 0100 069B     		ldr	r3, [sp, #24]
 1609 0102 1344     		add	r3, r3, r2
 1610 0104 2B60     		str	r3, [r5]
 322:math/pprz_algebra_int.c ****   hr->qi = _div.rem;
 1611              		.loc 2 322 0
 1612 0106 DDE90823 		ldrd	r2, [sp, #32]
 323:math/pprz_algebra_int.c **** 
 324:math/pprz_algebra_int.c ****   _div = lldiv(hr->qx, ((1 << INT32_RATE_FRAC) * freq * 2));
 1613              		.loc 2 324 0
 1614 010a 06A8     		add	r0, sp, #24
 1615              	.LVL137:
 322:math/pprz_algebra_int.c ****   hr->qi = _div.rem;
 1616              		.loc 2 322 0
 1617 010c C4E90023 		strd	r2, [r4]
 1618              		.loc 2 324 0
 1619 0110 CDE90067 		strd	r6, [sp]
 1620 0114 D4E90223 		ldrd	r2, [r4, #8]
 1621 0118 FFF7FEFF 		bl	lldiv
 1622              	.LVL138:
 325:math/pprz_algebra_int.c ****   q->qx += (int32_t) _div.quot;
 1623              		.loc 2 325 0
 1624 011c 6A68     		ldr	r2, [r5, #4]
 1625 011e 069B     		ldr	r3, [sp, #24]
 1626 0120 1344     		add	r3, r3, r2
 1627 0122 6B60     		str	r3, [r5, #4]
 326:math/pprz_algebra_int.c ****   hr->qx = _div.rem;
 1628              		.loc 2 326 0
 1629 0124 DDE90823 		ldrd	r2, [sp, #32]
 327:math/pprz_algebra_int.c **** 
 328:math/pprz_algebra_int.c ****   _div = lldiv(hr->qy, ((1 << INT32_RATE_FRAC) * freq * 2));
 1630              		.loc 2 328 0
 1631 0128 06A8     		add	r0, sp, #24
 1632              	.LVL139:
 326:math/pprz_algebra_int.c ****   hr->qx = _div.rem;
 1633              		.loc 2 326 0
 1634 012a C4E90223 		strd	r2, [r4, #8]
 1635              		.loc 2 328 0
 1636 012e CDE90067 		strd	r6, [sp]
 1637 0132 D4E90423 		ldrd	r2, [r4, #16]
 1638 0136 FFF7FEFF 		bl	lldiv
 1639              	.LVL140:
 329:math/pprz_algebra_int.c ****   q->qy += (int32_t) _div.quot;
 1640              		.loc 2 329 0
 1641 013a AA68     		ldr	r2, [r5, #8]
 1642 013c 069B     		ldr	r3, [sp, #24]
 1643 013e 1344     		add	r3, r3, r2
 1644 0140 AB60     		str	r3, [r5, #8]
 330:math/pprz_algebra_int.c ****   hr->qy = _div.rem;
 1645              		.loc 2 330 0
 1646 0142 DDE90823 		ldrd	r2, [sp, #32]
 331:math/pprz_algebra_int.c **** 
 332:math/pprz_algebra_int.c ****   _div = lldiv(hr->qz, ((1 << INT32_RATE_FRAC) * freq * 2));
 1647              		.loc 2 332 0
 1648 0146 CDE90067 		strd	r6, [sp]
 330:math/pprz_algebra_int.c ****   hr->qy = _div.rem;
 1649              		.loc 2 330 0
 1650 014a C4E90423 		strd	r2, [r4, #16]
 1651              		.loc 2 332 0
 1652 014e 06A8     		add	r0, sp, #24
 1653              	.LVL141:
 1654 0150 D4E90623 		ldrd	r2, [r4, #24]
 1655 0154 FFF7FEFF 		bl	lldiv
 1656              	.LVL142:
 333:math/pprz_algebra_int.c ****   q->qz += (int32_t) _div.quot;
 1657              		.loc 2 333 0
 1658 0158 EA68     		ldr	r2, [r5, #12]
 1659 015a 069B     		ldr	r3, [sp, #24]
 1660 015c 1344     		add	r3, r3, r2
 1661 015e EB60     		str	r3, [r5, #12]
 334:math/pprz_algebra_int.c ****   hr->qz = _div.rem;
 1662              		.loc 2 334 0
 1663 0160 DDE90823 		ldrd	r2, [sp, #32]
 1664 0164 C4E90623 		strd	r2, [r4, #24]
 335:math/pprz_algebra_int.c **** }
 1665              		.loc 2 335 0
 1666 0168 0BB0     		add	sp, sp, #44
 1667              		.cfi_def_cfa_offset 36
 1668              		@ sp needed
 1669 016a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1670              		.cfi_endproc
 1671              	.LFE26:
 1673              		.section	.text.int32_quat_vmult,"ax",%progbits
 1674              		.align	1
 1675              		.global	int32_quat_vmult
 1676              		.thumb
 1677              		.thumb_func
 1679              	int32_quat_vmult:
 1680              	.LFB27:
 336:math/pprz_algebra_int.c **** 
 337:math/pprz_algebra_int.c **** void int32_quat_vmult(struct Int32Vect3 *v_out, struct Int32Quat *q, struct Int32Vect3 *v_in)
 338:math/pprz_algebra_int.c **** {
 1681              		.loc 2 338 0
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 8
 1684              		@ frame_needed = 0, uses_anonymous_args = 0
 1685              	.LVL143:
 1686 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1687              		.cfi_def_cfa_offset 48
 1688              		.cfi_offset 4, -36
 1689              		.cfi_offset 5, -32
 1690              		.cfi_offset 6, -28
 1691              		.cfi_offset 7, -24
 1692              		.cfi_offset 8, -20
 1693              		.cfi_offset 9, -16
 1694              		.cfi_offset 10, -12
 1695              		.cfi_offset 11, -8
 1696              		.cfi_offset 14, -4
 339:math/pprz_algebra_int.c ****   const int32_t _2qi2_m1 = ((q->qi * q->qi) >> (INT32_QUAT_FRAC - 1)) - QUAT1_BFP_OF_REAL(1);
 1697              		.loc 2 339 0
 1698 0004 0C68     		ldr	r4, [r1]
 340:math/pprz_algebra_int.c ****   const int32_t _2qx2    = (q->qx * q->qx) >> (INT32_QUAT_FRAC - 1);
 1699              		.loc 2 340 0
 1700 0006 D1F804A0 		ldr	r10, [r1, #4]
 341:math/pprz_algebra_int.c ****   const int32_t _2qy2    = (q->qy * q->qy) >> (INT32_QUAT_FRAC - 1);
 1701              		.loc 2 341 0
 1702 000a 8B68     		ldr	r3, [r1, #8]
 342:math/pprz_algebra_int.c ****   const int32_t _2qz2    = (q->qz * q->qz) >> (INT32_QUAT_FRAC - 1);
 1703              		.loc 2 342 0
 1704 000c CD68     		ldr	r5, [r1, #12]
 343:math/pprz_algebra_int.c ****   const int32_t _2qiqx   = (q->qi * q->qx) >> (INT32_QUAT_FRAC - 1);
 344:math/pprz_algebra_int.c ****   const int32_t _2qiqy   = (q->qi * q->qy) >> (INT32_QUAT_FRAC - 1);
 345:math/pprz_algebra_int.c ****   const int32_t _2qiqz   = (q->qi * q->qz) >> (INT32_QUAT_FRAC - 1);
 346:math/pprz_algebra_int.c ****   const int32_t m01 = ((q->qx * q->qy) >> (INT32_QUAT_FRAC - 1)) + _2qiqz;
 347:math/pprz_algebra_int.c ****   const int32_t m02 = ((q->qx * q->qz) >> (INT32_QUAT_FRAC - 1)) - _2qiqy;
 348:math/pprz_algebra_int.c ****   const int32_t m12 = ((q->qy * q->qz) >> (INT32_QUAT_FRAC - 1)) + _2qiqx;
 349:math/pprz_algebra_int.c ****   v_out->x = (_2qi2_m1 * v_in->x + _2qx2 * v_in->x + m01 * v_in->y +  m02 * v_in->z) >> INT32_QUAT_
 1705              		.loc 2 349 0
 1706 000e D2F80490 		ldr	r9, [r2, #4]
 1707 0012 D2F80880 		ldr	r8, [r2, #8]
 343:math/pprz_algebra_int.c ****   const int32_t _2qiqx   = (q->qi * q->qx) >> (INT32_QUAT_FRAC - 1);
 1708              		.loc 2 343 0
 1709 0016 0AFB04F1 		mul	r1, r10, r4
 1710              	.LVL144:
 344:math/pprz_algebra_int.c ****   const int32_t _2qiqz   = (q->qi * q->qz) >> (INT32_QUAT_FRAC - 1);
 1711              		.loc 2 344 0
 1712 001a 03FB04F7 		mul	r7, r3, r4
 339:math/pprz_algebra_int.c ****   const int32_t _2qx2    = (q->qx * q->qx) >> (INT32_QUAT_FRAC - 1);
 1713              		.loc 2 339 0
 1714 001e 04FB04F6 		mul	r6, r4, r4
 343:math/pprz_algebra_int.c ****   const int32_t _2qiqx   = (q->qi * q->qx) >> (INT32_QUAT_FRAC - 1);
 1715              		.loc 2 343 0
 1716 0022 8913     		asrs	r1, r1, #14
 345:math/pprz_algebra_int.c ****   const int32_t m01 = ((q->qx * q->qy) >> (INT32_QUAT_FRAC - 1)) + _2qiqz;
 1717              		.loc 2 345 0
 1718 0024 6C43     		muls	r4, r5, r4
 343:math/pprz_algebra_int.c ****   const int32_t _2qiqy   = (q->qi * q->qy) >> (INT32_QUAT_FRAC - 1);
 1719              		.loc 2 343 0
 1720 0026 0091     		str	r1, [sp]
 346:math/pprz_algebra_int.c ****   const int32_t m02 = ((q->qx * q->qz) >> (INT32_QUAT_FRAC - 1)) - _2qiqy;
 1721              		.loc 2 346 0
 1722 0028 03FB0AFE 		mul	lr, r3, r10
 345:math/pprz_algebra_int.c ****   const int32_t m01 = ((q->qx * q->qy) >> (INT32_QUAT_FRAC - 1)) + _2qiqz;
 1723              		.loc 2 345 0
 1724 002c A113     		asrs	r1, r4, #14
 1725 002e 0191     		str	r1, [sp, #4]
 346:math/pprz_algebra_int.c ****   const int32_t m02 = ((q->qx * q->qz) >> (INT32_QUAT_FRAC - 1)) - _2qiqy;
 1726              		.loc 2 346 0
 1727 0030 01EBAE3E 		add	lr, r1, lr, asr #14
 339:math/pprz_algebra_int.c ****   const int32_t _2qx2    = (q->qx * q->qx) >> (INT32_QUAT_FRAC - 1);
 1728              		.loc 2 339 0
 1729 0034 B613     		asrs	r6, r6, #14
 348:math/pprz_algebra_int.c ****   v_out->x = (_2qi2_m1 * v_in->x + _2qx2 * v_in->x + m01 * v_in->y +  m02 * v_in->z) >> INT32_QUAT_
 1730              		.loc 2 348 0
 1731 0036 0099     		ldr	r1, [sp]
 339:math/pprz_algebra_int.c ****   const int32_t _2qx2    = (q->qx * q->qx) >> (INT32_QUAT_FRAC - 1);
 1732              		.loc 2 339 0
 1733 0038 A6F50046 		sub	r6, r6, #32768
 1734              	.LVL145:
 347:math/pprz_algebra_int.c ****   const int32_t m12 = ((q->qy * q->qz) >> (INT32_QUAT_FRAC - 1)) + _2qiqx;
 1735              		.loc 2 347 0
 1736 003c 05FB0AFC 		mul	ip, r5, r10
 348:math/pprz_algebra_int.c ****   v_out->x = (_2qi2_m1 * v_in->x + _2qx2 * v_in->x + m01 * v_in->y +  m02 * v_in->z) >> INT32_QUAT_
 1737              		.loc 2 348 0
 1738 0040 05FB03FB 		mul	fp, r5, r3
 340:math/pprz_algebra_int.c ****   const int32_t _2qy2    = (q->qy * q->qy) >> (INT32_QUAT_FRAC - 1);
 1739              		.loc 2 340 0
 1740 0044 0AFB0AFA 		mul	r10, r10, r10
 1741              	.LVL146:
 348:math/pprz_algebra_int.c ****   v_out->x = (_2qi2_m1 * v_in->x + _2qx2 * v_in->x + m01 * v_in->y +  m02 * v_in->z) >> INT32_QUAT_
 1742              		.loc 2 348 0
 1743 0048 01EBAB3B 		add	fp, r1, fp, asr #14
 1744              		.loc 2 349 0
 1745 004c 06EBAA31 		add	r1, r6, r10, asr #14
 1746              	.LVL147:
 1747 0050 0C46     		mov	r4, r1
 1748 0052 1168     		ldr	r1, [r2]
 1749 0054 09FB0EFA 		mul	r10, r9, lr
 344:math/pprz_algebra_int.c ****   const int32_t _2qiqz   = (q->qi * q->qz) >> (INT32_QUAT_FRAC - 1);
 1750              		.loc 2 344 0
 1751 0058 BF13     		asrs	r7, r7, #14
 1752              	.LVL148:
 347:math/pprz_algebra_int.c ****   const int32_t m12 = ((q->qy * q->qz) >> (INT32_QUAT_FRAC - 1)) + _2qiqx;
 1753              		.loc 2 347 0
 1754 005a C7EBAC3C 		rsb	ip, r7, ip, asr #14
 1755              	.LVL149:
 1756              		.loc 2 349 0
 1757 005e 01FB04A1 		mla	r1, r1, r4, r10
 1758 0062 08FB0C11 		mla	r1, r8, ip, r1
 1759 0066 C913     		asrs	r1, r1, #15
 1760 0068 0160     		str	r1, [r0]
 350:math/pprz_algebra_int.c ****   v_out->y = (_2qi2_m1 * v_in->y + m01 * v_in->x - 2 * _2qiqz * v_in->x + _2qy2 * v_in->y + m12 * v
 1761              		.loc 2 350 0
 1762 006a D2F800A0 		ldr	r10, [r2]
 1763 006e 019C     		ldr	r4, [sp, #4]
 1764 0070 6FF00101 		mvn	r1, #1
 1765 0074 0AFB0EFE 		mul	lr, r10, lr
 1766              	.LVL150:
 1767 0078 09FB06EE 		mla	lr, r9, r6, lr
 1768 007c 4C43     		muls	r4, r1, r4
 341:math/pprz_algebra_int.c ****   const int32_t _2qz2    = (q->qz * q->qz) >> (INT32_QUAT_FRAC - 1);
 1769              		.loc 2 341 0
 1770 007e 5B43     		muls	r3, r3, r3
 1771              	.LVL151:
 1772              		.loc 2 350 0
 1773 0080 0AFB04E4 		mla	r4, r10, r4, lr
 341:math/pprz_algebra_int.c ****   const int32_t _2qz2    = (q->qz * q->qz) >> (INT32_QUAT_FRAC - 1);
 1774              		.loc 2 341 0
 1775 0084 9B13     		asrs	r3, r3, #14
 1776              	.LVL152:
 1777              		.loc 2 350 0
 1778 0086 09FB0344 		mla	r4, r9, r3, r4
 1779 008a 08FB0B44 		mla	r4, r8, fp, r4
 1780 008e E413     		asrs	r4, r4, #15
 351:math/pprz_algebra_int.c ****              INT32_QUAT_FRAC;
 352:math/pprz_algebra_int.c ****   v_out->z = (_2qi2_m1 * v_in->z + m02 * v_in->x + 2 * _2qiqy * v_in->x + m12 * v_in->y - 2 * _2qiq
 1781              		.loc 2 352 0
 1782 0090 0AFB0CFC 		mul	ip, r10, ip
 1783              	.LVL153:
 350:math/pprz_algebra_int.c ****              INT32_QUAT_FRAC;
 1784              		.loc 2 350 0
 1785 0094 4460     		str	r4, [r0, #4]
 1786              		.loc 2 352 0
 1787 0096 5268     		ldr	r2, [r2, #4]
 1788              	.LVL154:
 1789 0098 009B     		ldr	r3, [sp]
 1790              	.LVL155:
 1791 009a 08FB06C6 		mla	r6, r8, r6, ip
 1792              	.LVL156:
 1793 009e 7F00     		lsls	r7, r7, #1
 1794              	.LVL157:
 1795 00a0 0AFB076A 		mla	r10, r10, r7, r6
 1796 00a4 02FB0BAA 		mla	r10, r2, fp, r10
 1797 00a8 4B43     		muls	r3, r1, r3
 342:math/pprz_algebra_int.c ****   const int32_t _2qiqx   = (q->qi * q->qx) >> (INT32_QUAT_FRAC - 1);
 1798              		.loc 2 342 0
 1799 00aa 6D43     		muls	r5, r5, r5
 1800              	.LVL158:
 1801              		.loc 2 352 0
 1802 00ac 02FB03A1 		mla	r1, r2, r3, r10
 342:math/pprz_algebra_int.c ****   const int32_t _2qiqx   = (q->qi * q->qx) >> (INT32_QUAT_FRAC - 1);
 1803              		.loc 2 342 0
 1804 00b0 AD13     		asrs	r5, r5, #14
 1805              	.LVL159:
 1806              		.loc 2 352 0
 1807 00b2 08FB0518 		mla	r8, r8, r5, r1
 353:math/pprz_algebra_int.c ****               v_in->z) >> INT32_QUAT_FRAC;
 1808              		.loc 2 353 0
 1809 00b6 4FEAE831 		asr	r1, r8, #15
 352:math/pprz_algebra_int.c ****               v_in->z) >> INT32_QUAT_FRAC;
 1810              		.loc 2 352 0
 1811 00ba 8160     		str	r1, [r0, #8]
 354:math/pprz_algebra_int.c **** }
 1812              		.loc 2 354 0
 1813 00bc 03B0     		add	sp, sp, #12
 1814              		.cfi_def_cfa_offset 36
 1815              	.LVL160:
 1816              		@ sp needed
 1817 00be BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1818              		.cfi_endproc
 1819              	.LFE27:
 1821              		.section	.text.int32_quat_of_eulers,"ax",%progbits
 1822              		.align	1
 1823              		.global	int32_quat_of_eulers
 1824              		.thumb
 1825              		.thumb_func
 1827              	int32_quat_of_eulers:
 1828              	.LFB28:
 355:math/pprz_algebra_int.c **** 
 356:math/pprz_algebra_int.c **** /*
 357:math/pprz_algebra_int.c ****  * http://www.mathworks.com/access/helpdesk_r13/help/toolbox/aeroblks/euleranglestoquaternions.html
 358:math/pprz_algebra_int.c ****  */
 359:math/pprz_algebra_int.c **** void int32_quat_of_eulers(struct Int32Quat *q, struct Int32Eulers *e)
 360:math/pprz_algebra_int.c **** {
 1829              		.loc 2 360 0
 1830              		.cfi_startproc
 1831              		@ args = 0, pretend = 0, frame = 0
 1832              		@ frame_needed = 0, uses_anonymous_args = 0
 1833              	.LVL161:
 1834 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1835              		.cfi_def_cfa_offset 32
 1836              		.cfi_offset 4, -32
 1837              		.cfi_offset 5, -28
 1838              		.cfi_offset 6, -24
 1839              		.cfi_offset 7, -20
 1840              		.cfi_offset 8, -16
 1841              		.cfi_offset 9, -12
 1842              		.cfi_offset 10, -8
 1843              		.cfi_offset 14, -4
 361:math/pprz_algebra_int.c ****   const int32_t phi2   = e->phi   / 2;
 1844              		.loc 2 361 0
 1845 0004 0223     		movs	r3, #2
 1846 0006 0E68     		ldr	r6, [r1]
 1847 0008 96FBF3F6 		sdiv	r6, r6, r3
 1848              	.LVL162:
 360:math/pprz_algebra_int.c ****   const int32_t phi2   = e->phi   / 2;
 1849              		.loc 2 360 0
 1850 000c 0546     		mov	r5, r0
 362:math/pprz_algebra_int.c ****   const int32_t theta2 = e->theta / 2;
 363:math/pprz_algebra_int.c ****   const int32_t psi2   = e->psi   / 2;
 364:math/pprz_algebra_int.c **** 
 365:math/pprz_algebra_int.c ****   int32_t s_phi2;
 366:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(s_phi2, phi2);
 1851              		.loc 2 366 0
 1852 000e 3046     		mov	r0, r6
 1853              	.LVL163:
 363:math/pprz_algebra_int.c **** 
 1854              		.loc 2 363 0
 1855 0010 8A68     		ldr	r2, [r1, #8]
 362:math/pprz_algebra_int.c ****   const int32_t theta2 = e->theta / 2;
 1856              		.loc 2 362 0
 1857 0012 4F68     		ldr	r7, [r1, #4]
 363:math/pprz_algebra_int.c **** 
 1858              		.loc 2 363 0
 1859 0014 92FBF3FA 		sdiv	r10, r2, r3
 362:math/pprz_algebra_int.c ****   const int32_t theta2 = e->theta / 2;
 1860              		.loc 2 362 0
 1861 0018 97FBF3F7 		sdiv	r7, r7, r3
 1862              	.LVL164:
 1863              		.loc 2 366 0
 1864 001c FFF7FEFF 		bl	pprz_itrig_sin
 1865              	.LVL165:
 1866 0020 0446     		mov	r4, r0
 1867              	.LVL166:
 367:math/pprz_algebra_int.c ****   int32_t c_phi2;
 368:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(c_phi2, phi2);
 1868              		.loc 2 368 0
 1869 0022 3046     		mov	r0, r6
 1870              	.LVL167:
 1871 0024 FFF7FEFF 		bl	pprz_itrig_cos
 1872              	.LVL168:
 1873 0028 0646     		mov	r6, r0
 1874              	.LVL169:
 369:math/pprz_algebra_int.c ****   int32_t s_theta2;
 370:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(s_theta2, theta2);
 1875              		.loc 2 370 0
 1876 002a 3846     		mov	r0, r7
 1877              	.LVL170:
 1878 002c FFF7FEFF 		bl	pprz_itrig_sin
 1879              	.LVL171:
 1880 0030 8146     		mov	r9, r0
 1881              	.LVL172:
 371:math/pprz_algebra_int.c ****   int32_t c_theta2;
 372:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(c_theta2, theta2);
 1882              		.loc 2 372 0
 1883 0032 3846     		mov	r0, r7
 1884              	.LVL173:
 1885 0034 FFF7FEFF 		bl	pprz_itrig_cos
 1886              	.LVL174:
 1887 0038 8046     		mov	r8, r0
 1888              	.LVL175:
 373:math/pprz_algebra_int.c ****   int32_t s_psi2;
 374:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(s_psi2, psi2);
 1889              		.loc 2 374 0
 1890 003a 5046     		mov	r0, r10
 1891              	.LVL176:
 1892 003c FFF7FEFF 		bl	pprz_itrig_sin
 1893              	.LVL177:
 1894 0040 0746     		mov	r7, r0
 1895              	.LVL178:
 375:math/pprz_algebra_int.c ****   int32_t c_psi2;
 376:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(c_psi2, psi2);
 1896              		.loc 2 376 0
 1897 0042 5046     		mov	r0, r10
 1898              	.LVL179:
 1899 0044 FFF7FEFF 		bl	pprz_itrig_cos
 1900              	.LVL180:
 377:math/pprz_algebra_int.c **** 
 378:math/pprz_algebra_int.c ****   int32_t c_th_c_ps = INT_MULT_RSHIFT(c_theta2, c_psi2, INT32_TRIG_FRAC);
 379:math/pprz_algebra_int.c ****   int32_t c_th_s_ps = INT_MULT_RSHIFT(c_theta2, s_psi2, INT32_TRIG_FRAC);
 1901              		.loc 2 379 0
 1902 0048 07FB08F1 		mul	r1, r7, r8
 380:math/pprz_algebra_int.c ****   int32_t s_th_s_ps = INT_MULT_RSHIFT(s_theta2, s_psi2, INT32_TRIG_FRAC);
 1903              		.loc 2 380 0
 1904 004c 07FB09F7 		mul	r7, r7, r9
 1905              	.LVL181:
 378:math/pprz_algebra_int.c ****   int32_t c_th_s_ps = INT_MULT_RSHIFT(c_theta2, s_psi2, INT32_TRIG_FRAC);
 1906              		.loc 2 378 0
 1907 0050 00FB08F2 		mul	r2, r0, r8
 1908              		.loc 2 380 0
 1909 0054 BF13     		asrs	r7, r7, #14
 378:math/pprz_algebra_int.c ****   int32_t c_th_s_ps = INT_MULT_RSHIFT(c_theta2, s_psi2, INT32_TRIG_FRAC);
 1910              		.loc 2 378 0
 1911 0056 9213     		asrs	r2, r2, #14
 1912              	.LVL182:
 381:math/pprz_algebra_int.c ****   int32_t s_th_c_ps = INT_MULT_RSHIFT(s_theta2, c_psi2, INT32_TRIG_FRAC);
 1913              		.loc 2 381 0
 1914 0058 00FB09F3 		mul	r3, r0, r9
 382:math/pprz_algebra_int.c **** 
 383:math/pprz_algebra_int.c ****   q->qi = INT_MULT_RSHIFT(c_phi2, c_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 384:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1915              		.loc 2 384 0
 1916 005c 07FB04F0 		mul	r0, r7, r4
 1917              	.LVL183:
 383:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1918              		.loc 2 383 0
 1919 0060 02FB06FE 		mul	lr, r2, r6
 1920              		.loc 2 384 0
 1921 0064 4013     		asrs	r0, r0, #13
 383:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1922              		.loc 2 383 0
 1923 0066 00EB6E30 		add	r0, r0, lr, asr #13
 385:math/pprz_algebra_int.c ****   q->qx = INT_MULT_RSHIFT(-c_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) 
 386:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, c_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1924              		.loc 2 386 0
 1925 006a 6243     		muls	r2, r4, r2
 1926              	.LVL184:
 383:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1927              		.loc 2 383 0
 1928 006c 2860     		str	r0, [r5]
 385:math/pprz_algebra_int.c ****   q->qx = INT_MULT_RSHIFT(-c_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) 
 1929              		.loc 2 385 0
 1930 006e 7042     		negs	r0, r6
 1931 0070 7843     		muls	r0, r7, r0
 1932              		.loc 2 386 0
 1933 0072 5213     		asrs	r2, r2, #13
 385:math/pprz_algebra_int.c ****   q->qx = INT_MULT_RSHIFT(-c_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) 
 1934              		.loc 2 385 0
 1935 0074 02EB6032 		add	r2, r2, r0, asr #13
 379:math/pprz_algebra_int.c ****   int32_t s_th_s_ps = INT_MULT_RSHIFT(s_theta2, s_psi2, INT32_TRIG_FRAC);
 1936              		.loc 2 379 0
 1937 0078 8913     		asrs	r1, r1, #14
 1938              	.LVL185:
 381:math/pprz_algebra_int.c **** 
 1939              		.loc 2 381 0
 1940 007a 9B13     		asrs	r3, r3, #14
 1941              	.LVL186:
 385:math/pprz_algebra_int.c ****   q->qx = INT_MULT_RSHIFT(-c_phi2, s_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) 
 1942              		.loc 2 385 0
 1943 007c 6A60     		str	r2, [r5, #4]
 387:math/pprz_algebra_int.c ****   q->qy = INT_MULT_RSHIFT(c_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 388:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(s_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1944              		.loc 2 388 0
 1945 007e 01FB04F2 		mul	r2, r1, r4
 389:math/pprz_algebra_int.c ****   q->qz = INT_MULT_RSHIFT(c_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 390:math/pprz_algebra_int.c ****           INT_MULT_RSHIFT(-s_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC);
 1946              		.loc 2 390 0
 1947 0082 6442     		negs	r4, r4
 1948              	.LVL187:
 387:math/pprz_algebra_int.c ****   q->qy = INT_MULT_RSHIFT(c_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1949              		.loc 2 387 0
 1950 0084 03FB06F0 		mul	r0, r3, r6
 1951              		.loc 2 390 0
 1952 0088 6343     		muls	r3, r4, r3
 1953              	.LVL188:
 388:math/pprz_algebra_int.c ****   q->qz = INT_MULT_RSHIFT(c_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1954              		.loc 2 388 0
 1955 008a 5213     		asrs	r2, r2, #13
 389:math/pprz_algebra_int.c ****   q->qz = INT_MULT_RSHIFT(c_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1956              		.loc 2 389 0
 1957 008c 7143     		muls	r1, r6, r1
 1958              	.LVL189:
 1959              		.loc 2 390 0
 1960 008e 5B13     		asrs	r3, r3, #13
 387:math/pprz_algebra_int.c ****   q->qy = INT_MULT_RSHIFT(c_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1961              		.loc 2 387 0
 1962 0090 02EB6032 		add	r2, r2, r0, asr #13
 389:math/pprz_algebra_int.c ****   q->qz = INT_MULT_RSHIFT(c_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1963              		.loc 2 389 0
 1964 0094 03EB6133 		add	r3, r3, r1, asr #13
 387:math/pprz_algebra_int.c ****   q->qy = INT_MULT_RSHIFT(c_phi2, s_th_c_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1965              		.loc 2 387 0
 1966 0098 AA60     		str	r2, [r5, #8]
 389:math/pprz_algebra_int.c ****   q->qz = INT_MULT_RSHIFT(c_phi2, c_th_s_ps, INT32_TRIG_FRAC + INT32_TRIG_FRAC - INT32_QUAT_FRAC) +
 1967              		.loc 2 389 0
 1968 009a EB60     		str	r3, [r5, #12]
 1969 009c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1970              		.cfi_endproc
 1971              	.LFE28:
 1973              		.section	.text.int32_quat_of_axis_angle,"ax",%progbits
 1974              		.align	1
 1975              		.global	int32_quat_of_axis_angle
 1976              		.thumb
 1977              		.thumb_func
 1979              	int32_quat_of_axis_angle:
 1980              	.LFB29:
 391:math/pprz_algebra_int.c **** }
 392:math/pprz_algebra_int.c **** 
 393:math/pprz_algebra_int.c **** void int32_quat_of_axis_angle(struct Int32Quat *q, struct Int32Vect3 *uv, int32_t angle)
 394:math/pprz_algebra_int.c **** {
 1981              		.loc 2 394 0
 1982              		.cfi_startproc
 1983              		@ args = 0, pretend = 0, frame = 0
 1984              		@ frame_needed = 0, uses_anonymous_args = 0
 1985              	.LVL190:
 1986 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1987              		.cfi_def_cfa_offset 24
 1988              		.cfi_offset 3, -24
 1989              		.cfi_offset 4, -20
 1990              		.cfi_offset 5, -16
 1991              		.cfi_offset 6, -12
 1992              		.cfi_offset 7, -8
 1993              		.cfi_offset 14, -4
 1994              		.loc 2 394 0
 1995 0002 0446     		mov	r4, r0
 395:math/pprz_algebra_int.c ****   int32_t san2;
 396:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(san2, (angle / 2));
 1996              		.loc 2 396 0
 1997 0004 0225     		movs	r5, #2
 1998 0006 92FBF5F5 		sdiv	r5, r2, r5
 1999 000a 2846     		mov	r0, r5
 2000              	.LVL191:
 394:math/pprz_algebra_int.c ****   int32_t san2;
 2001              		.loc 2 394 0
 2002 000c 0F46     		mov	r7, r1
 2003              		.loc 2 396 0
 2004 000e FFF7FEFF 		bl	pprz_itrig_sin
 2005              	.LVL192:
 2006 0012 0646     		mov	r6, r0
 2007              	.LVL193:
 397:math/pprz_algebra_int.c ****   int32_t can2;
 398:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(can2, (angle / 2));
 2008              		.loc 2 398 0
 2009 0014 2846     		mov	r0, r5
 2010              	.LVL194:
 2011 0016 FFF7FEFF 		bl	pprz_itrig_cos
 2012              	.LVL195:
 399:math/pprz_algebra_int.c ****   q->qi = can2;
 400:math/pprz_algebra_int.c ****   q->qx = san2 * uv->x;
 2013              		.loc 2 400 0
 2014 001a 3B68     		ldr	r3, [r7]
 399:math/pprz_algebra_int.c ****   q->qi = can2;
 2015              		.loc 2 399 0
 2016 001c 2060     		str	r0, [r4]
 2017              		.loc 2 400 0
 2018 001e 7343     		muls	r3, r6, r3
 401:math/pprz_algebra_int.c ****   q->qy = san2 * uv->y;
 402:math/pprz_algebra_int.c ****   q->qz = san2 * uv->z;
 2019              		.loc 2 402 0
 2020 0020 B868     		ldr	r0, [r7, #8]
 2021              	.LVL196:
 400:math/pprz_algebra_int.c ****   q->qy = san2 * uv->y;
 2022              		.loc 2 400 0
 2023 0022 6360     		str	r3, [r4, #4]
 401:math/pprz_algebra_int.c ****   q->qy = san2 * uv->y;
 2024              		.loc 2 401 0
 2025 0024 7B68     		ldr	r3, [r7, #4]
 2026              		.loc 2 402 0
 2027 0026 7043     		muls	r0, r6, r0
 401:math/pprz_algebra_int.c ****   q->qy = san2 * uv->y;
 2028              		.loc 2 401 0
 2029 0028 7343     		muls	r3, r6, r3
 2030 002a A360     		str	r3, [r4, #8]
 2031              		.loc 2 402 0
 2032 002c E060     		str	r0, [r4, #12]
 2033 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2034              		.cfi_endproc
 2035              	.LFE29:
 2037              		.global	__aeabi_i2d
 2038              		.global	__aeabi_dadd
 2039              		.global	__aeabi_d2iz
 2040              		.section	.text.int32_quat_of_rmat,"ax",%progbits
 2041              		.align	1
 2042              		.global	int32_quat_of_rmat
 2043              		.thumb
 2044              		.thumb_func
 2046              	int32_quat_of_rmat:
 2047              	.LFB30:
 403:math/pprz_algebra_int.c **** }
 404:math/pprz_algebra_int.c **** 
 405:math/pprz_algebra_int.c **** void int32_quat_of_rmat(struct Int32Quat *q, struct Int32RMat *r)
 406:math/pprz_algebra_int.c **** {
 2048              		.loc 2 406 0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              	.LVL197:
 2053 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2054              		.cfi_def_cfa_offset 32
 2055              		.cfi_offset 4, -32
 2056              		.cfi_offset 5, -28
 2057              		.cfi_offset 6, -24
 2058              		.cfi_offset 7, -20
 2059              		.cfi_offset 8, -16
 2060              		.cfi_offset 9, -12
 2061              		.cfi_offset 10, -8
 2062              		.cfi_offset 14, -4
 407:math/pprz_algebra_int.c ****   const int32_t tr = RMAT_TRACE(*r);
 2063              		.loc 2 407 0
 2064 0004 0B69     		ldr	r3, [r1, #16]
 2065 0006 D1F800E0 		ldr	lr, [r1]
 2066 000a 0A6A     		ldr	r2, [r1, #32]
 2067 000c D1F81480 		ldr	r8, [r1, #20]
 2068 0010 CC69     		ldr	r4, [r1, #28]
 2069 0012 D1F818A0 		ldr	r10, [r1, #24]
 2070 0016 8D68     		ldr	r5, [r1, #8]
 2071 0018 D1F80490 		ldr	r9, [r1, #4]
 2072 001c CE68     		ldr	r6, [r1, #12]
 406:math/pprz_algebra_int.c ****   const int32_t tr = RMAT_TRACE(*r);
 2073              		.loc 2 406 0
 2074 001e 0746     		mov	r7, r0
 2075              		.loc 2 407 0
 2076 0020 0EEB0300 		add	r0, lr, r3
 2077              	.LVL198:
 2078 0024 1044     		add	r0, r0, r2
 2079              	.LVL199:
 408:math/pprz_algebra_int.c ****   if (tr > 0) {
 2080              		.loc 2 408 0
 2081 0026 0028     		cmp	r0, #0
 2082 0028 1FDD     		ble	.L33
 2083              	.LVL200:
 2084              	.LBB15:
 409:math/pprz_algebra_int.c ****     const int32_t two_qi_two = TRIG_BFP_OF_REAL(1.) + tr;
 2085              		.loc 2 409 0
 2086 002a FFF7FEFF 		bl	__aeabi_i2d
 2087              	.LVL201:
 2088 002e 444B     		ldr	r3, .L38
 2089 0030 0022     		movs	r2, #0
 2090 0032 FFF7FEFF 		bl	__aeabi_dadd
 2091              	.LVL202:
 2092 0036 FFF7FEFF 		bl	__aeabi_d2iz
 2093              	.LVL203:
 410:math/pprz_algebra_int.c ****     uint32_t two_qi = int32_sqrt(two_qi_two << INT32_TRIG_FRAC);
 2094              		.loc 2 410 0
 2095 003a 8003     		lsls	r0, r0, #14
 2096 003c FFF7FEFF 		bl	int32_sqrt
 2097              	.LVL204:
 411:math/pprz_algebra_int.c ****     two_qi = two_qi << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2098              		.loc 2 411 0
 2099 0040 4000     		lsls	r0, r0, #1
 2100              	.LVL205:
 412:math/pprz_algebra_int.c ****     q->qi = two_qi / 2;
 2101              		.loc 2 412 0
 2102 0042 4308     		lsrs	r3, r0, #1
 413:math/pprz_algebra_int.c ****     q->qx = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 2103              		.loc 2 413 0
 2104 0044 C4EB0804 		rsb	r4, r4, r8
 414:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 415:math/pprz_algebra_int.c ****             / two_qi;
 416:math/pprz_algebra_int.c ****     q->qy = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 2105              		.loc 2 416 0
 2106 0048 C5EB0A05 		rsb	r5, r5, r10
 417:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 418:math/pprz_algebra_int.c ****             / two_qi;
 419:math/pprz_algebra_int.c ****     q->qz = ((RMAT_ELMT(*r, 0, 1) - RMAT_ELMT(*r, 1, 0)) <<
 2107              		.loc 2 419 0
 2108 004c C6EB0906 		rsb	r6, r6, r9
 413:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2109              		.loc 2 413 0
 2110 0050 E403     		lsls	r4, r4, #15
 416:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2111              		.loc 2 416 0
 2112 0052 ED03     		lsls	r5, r5, #15
 415:math/pprz_algebra_int.c ****     q->qy = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 2113              		.loc 2 415 0
 2114 0054 B4FBF0F4 		udiv	r4, r4, r0
 418:math/pprz_algebra_int.c ****     q->qz = ((RMAT_ELMT(*r, 0, 1) - RMAT_ELMT(*r, 1, 0)) <<
 2115              		.loc 2 418 0
 2116 0058 B5FBF0F5 		udiv	r5, r5, r0
 2117              		.loc 2 419 0
 2118 005c F603     		lsls	r6, r6, #15
 412:math/pprz_algebra_int.c ****     q->qx = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 2119              		.loc 2 412 0
 2120 005e 3B60     		str	r3, [r7]
 413:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2121              		.loc 2 413 0
 2122 0060 7C60     		str	r4, [r7, #4]
 416:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2123              		.loc 2 416 0
 2124 0062 BD60     		str	r5, [r7, #8]
 420:math/pprz_algebra_int.c ****              (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 421:math/pprz_algebra_int.c ****             / two_qi;
 2125              		.loc 2 421 0
 2126 0064 B6FBF0F0 		udiv	r0, r6, r0
 2127              	.LVL206:
 2128 0068 67E0     		b	.L37
 2129              	.LVL207:
 2130              	.L33:
 2131              	.LBE15:
 422:math/pprz_algebra_int.c ****   } else {
 423:math/pprz_algebra_int.c ****     if (RMAT_ELMT(*r, 0, 0) > RMAT_ELMT(*r, 1, 1) &&
 2132              		.loc 2 423 0
 2133 006a 9E45     		cmp	lr, r3
 2134 006c 22DD     		ble	.L35
 2135              		.loc 2 423 0 is_stmt 0 discriminator 1
 2136 006e 9645     		cmp	lr, r2
 2137 0070 20DD     		ble	.L35
 2138              	.LVL208:
 2139              	.LBB16:
 424:math/pprz_algebra_int.c ****         RMAT_ELMT(*r, 0, 0) > RMAT_ELMT(*r, 2, 2)) {
 425:math/pprz_algebra_int.c ****       const int32_t two_qx_two = RMAT_ELMT(*r, 0, 0) - RMAT_ELMT(*r, 1, 1)
 2140              		.loc 2 425 0 is_stmt 1
 2141 0072 C3EB0E00 		rsb	r0, r3, lr
 2142              	.LVL209:
 426:math/pprz_algebra_int.c ****                                  - RMAT_ELMT(*r, 2, 2) + TRIG_BFP_OF_REAL(1.);
 2143              		.loc 2 426 0
 2144 0076 801A     		subs	r0, r0, r2
 2145              	.LVL210:
 2146 0078 FFF7FEFF 		bl	__aeabi_i2d
 2147              	.LVL211:
 2148 007c 304B     		ldr	r3, .L38
 2149 007e 0022     		movs	r2, #0
 2150 0080 FFF7FEFF 		bl	__aeabi_dadd
 2151              	.LVL212:
 425:math/pprz_algebra_int.c ****                                  - RMAT_ELMT(*r, 2, 2) + TRIG_BFP_OF_REAL(1.);
 2152              		.loc 2 425 0
 2153 0084 FFF7FEFF 		bl	__aeabi_d2iz
 2154              	.LVL213:
 427:math/pprz_algebra_int.c ****       uint32_t two_qx = int32_sqrt(two_qx_two << INT32_TRIG_FRAC);
 2155              		.loc 2 427 0
 2156 0088 8003     		lsls	r0, r0, #14
 2157 008a FFF7FEFF 		bl	int32_sqrt
 2158              	.LVL214:
 428:math/pprz_algebra_int.c ****       two_qx = two_qx << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2159              		.loc 2 428 0
 2160 008e 4000     		lsls	r0, r0, #1
 2161              	.LVL215:
 429:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 430:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 431:math/pprz_algebra_int.c ****               / two_qx;
 432:math/pprz_algebra_int.c ****       q->qx = two_qx / 2;
 2162              		.loc 2 432 0
 2163 0090 4308     		lsrs	r3, r0, #1
 429:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 1, 2) - RMAT_ELMT(*r, 2, 1)) <<
 2164              		.loc 2 429 0
 2165 0092 C4EB0804 		rsb	r4, r4, r8
 433:math/pprz_algebra_int.c ****       q->qy = ((RMAT_ELMT(*r, 0, 1) + RMAT_ELMT(*r, 1, 0)) <<
 2166              		.loc 2 433 0
 2167 0096 4E44     		add	r6, r6, r9
 434:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 435:math/pprz_algebra_int.c ****               / two_qx;
 436:math/pprz_algebra_int.c ****       q->qz = ((RMAT_ELMT(*r, 2, 0) + RMAT_ELMT(*r, 0, 2)) <<
 2168              		.loc 2 436 0
 2169 0098 5544     		add	r5, r5, r10
 429:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2170              		.loc 2 429 0
 2171 009a E403     		lsls	r4, r4, #15
 433:math/pprz_algebra_int.c ****       q->qy = ((RMAT_ELMT(*r, 0, 1) + RMAT_ELMT(*r, 1, 0)) <<
 2172              		.loc 2 433 0
 2173 009c F603     		lsls	r6, r6, #15
 431:math/pprz_algebra_int.c ****       q->qx = two_qx / 2;
 2174              		.loc 2 431 0
 2175 009e B4FBF0F4 		udiv	r4, r4, r0
 435:math/pprz_algebra_int.c ****       q->qz = ((RMAT_ELMT(*r, 2, 0) + RMAT_ELMT(*r, 0, 2)) <<
 2176              		.loc 2 435 0
 2177 00a2 B6FBF0F6 		udiv	r6, r6, r0
 2178              		.loc 2 436 0
 2179 00a6 ED03     		lsls	r5, r5, #15
 429:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2180              		.loc 2 429 0
 2181 00a8 3C60     		str	r4, [r7]
 432:math/pprz_algebra_int.c ****       q->qy = ((RMAT_ELMT(*r, 0, 1) + RMAT_ELMT(*r, 1, 0)) <<
 2182              		.loc 2 432 0
 2183 00aa 7B60     		str	r3, [r7, #4]
 433:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2184              		.loc 2 433 0
 2185 00ac BE60     		str	r6, [r7, #8]
 437:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 438:math/pprz_algebra_int.c ****               / two_qx;
 2186              		.loc 2 438 0
 2187 00ae B5FBF0F0 		udiv	r0, r5, r0
 2188              	.LVL216:
 2189 00b2 42E0     		b	.L37
 2190              	.LVL217:
 2191              	.L35:
 2192              	.LBE16:
 439:math/pprz_algebra_int.c ****     } else if (RMAT_ELMT(*r, 1, 1) > RMAT_ELMT(*r, 2, 2)) {
 2193              		.loc 2 439 0
 2194 00b4 9342     		cmp	r3, r2
 2195 00b6 20DD     		ble	.L36
 2196              	.LVL218:
 2197              	.LBB17:
 440:math/pprz_algebra_int.c ****       const int32_t two_qy_two = RMAT_ELMT(*r, 1, 1) - RMAT_ELMT(*r, 0, 0)
 2198              		.loc 2 440 0
 2199 00b8 CEEB0300 		rsb	r0, lr, r3
 2200              	.LVL219:
 441:math/pprz_algebra_int.c ****                                  - RMAT_ELMT(*r, 2, 2) + TRIG_BFP_OF_REAL(1.);
 2201              		.loc 2 441 0
 2202 00bc 801A     		subs	r0, r0, r2
 2203              	.LVL220:
 2204 00be FFF7FEFF 		bl	__aeabi_i2d
 2205              	.LVL221:
 2206 00c2 1F4B     		ldr	r3, .L38
 2207 00c4 0022     		movs	r2, #0
 2208 00c6 FFF7FEFF 		bl	__aeabi_dadd
 2209              	.LVL222:
 440:math/pprz_algebra_int.c ****       const int32_t two_qy_two = RMAT_ELMT(*r, 1, 1) - RMAT_ELMT(*r, 0, 0)
 2210              		.loc 2 440 0
 2211 00ca FFF7FEFF 		bl	__aeabi_d2iz
 2212              	.LVL223:
 442:math/pprz_algebra_int.c ****       uint32_t two_qy = int32_sqrt(two_qy_two << INT32_TRIG_FRAC);
 2213              		.loc 2 442 0
 2214 00ce 8003     		lsls	r0, r0, #14
 2215 00d0 FFF7FEFF 		bl	int32_sqrt
 2216              	.LVL224:
 443:math/pprz_algebra_int.c ****       two_qy = two_qy << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2217              		.loc 2 443 0
 2218 00d4 4000     		lsls	r0, r0, #1
 2219              	.LVL225:
 444:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 445:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 446:math/pprz_algebra_int.c ****               / two_qy;
 447:math/pprz_algebra_int.c ****       q->qx = ((RMAT_ELMT(*r, 0, 1) + RMAT_ELMT(*r, 1, 0)) <<
 448:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 449:math/pprz_algebra_int.c ****               / two_qy;
 450:math/pprz_algebra_int.c ****       q->qy = two_qy / 2;
 2220              		.loc 2 450 0
 2221 00d6 4308     		lsrs	r3, r0, #1
 444:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 2222              		.loc 2 444 0
 2223 00d8 C5EB0A05 		rsb	r5, r5, r10
 447:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2224              		.loc 2 447 0
 2225 00dc 4E44     		add	r6, r6, r9
 451:math/pprz_algebra_int.c ****       q->qz = ((RMAT_ELMT(*r, 1, 2) + RMAT_ELMT(*r, 2, 1)) <<
 2226              		.loc 2 451 0
 2227 00de 4444     		add	r4, r4, r8
 444:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 2, 0) - RMAT_ELMT(*r, 0, 2)) <<
 2228              		.loc 2 444 0
 2229 00e0 ED03     		lsls	r5, r5, #15
 447:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2230              		.loc 2 447 0
 2231 00e2 F603     		lsls	r6, r6, #15
 446:math/pprz_algebra_int.c ****       q->qx = ((RMAT_ELMT(*r, 0, 1) + RMAT_ELMT(*r, 1, 0)) <<
 2232              		.loc 2 446 0
 2233 00e4 B5FBF0F5 		udiv	r5, r5, r0
 449:math/pprz_algebra_int.c ****       q->qy = two_qy / 2;
 2234              		.loc 2 449 0
 2235 00e8 B6FBF0F6 		udiv	r6, r6, r0
 2236              		.loc 2 451 0
 2237 00ec E403     		lsls	r4, r4, #15
 444:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2238              		.loc 2 444 0
 2239 00ee 3D60     		str	r5, [r7]
 447:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2240              		.loc 2 447 0
 2241 00f0 7E60     		str	r6, [r7, #4]
 450:math/pprz_algebra_int.c ****       q->qz = ((RMAT_ELMT(*r, 1, 2) + RMAT_ELMT(*r, 2, 1)) <<
 2242              		.loc 2 450 0
 2243 00f2 BB60     		str	r3, [r7, #8]
 452:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 453:math/pprz_algebra_int.c ****               / two_qy;
 2244              		.loc 2 453 0
 2245 00f4 B4FBF0F0 		udiv	r0, r4, r0
 2246              	.LVL226:
 2247 00f8 1FE0     		b	.L37
 2248              	.LVL227:
 2249              	.L36:
 2250              	.LBE17:
 2251              	.LBB18:
 454:math/pprz_algebra_int.c ****     } else {
 455:math/pprz_algebra_int.c ****       const int32_t two_qz_two = RMAT_ELMT(*r, 2, 2) - RMAT_ELMT(*r, 0, 0)
 2252              		.loc 2 455 0
 2253 00fa CEEB0200 		rsb	r0, lr, r2
 2254              	.LVL228:
 456:math/pprz_algebra_int.c ****                                  - RMAT_ELMT(*r, 1, 1) + TRIG_BFP_OF_REAL(1.);
 2255              		.loc 2 456 0
 2256 00fe C01A     		subs	r0, r0, r3
 2257 0100 FFF7FEFF 		bl	__aeabi_i2d
 2258              	.LVL229:
 2259 0104 0022     		movs	r2, #0
 2260 0106 0E4B     		ldr	r3, .L38
 2261 0108 FFF7FEFF 		bl	__aeabi_dadd
 2262              	.LVL230:
 455:math/pprz_algebra_int.c ****                                  - RMAT_ELMT(*r, 1, 1) + TRIG_BFP_OF_REAL(1.);
 2263              		.loc 2 455 0
 2264 010c FFF7FEFF 		bl	__aeabi_d2iz
 2265              	.LVL231:
 457:math/pprz_algebra_int.c ****       uint32_t two_qz = int32_sqrt(two_qz_two << INT32_TRIG_FRAC);
 2266              		.loc 2 457 0
 2267 0110 8003     		lsls	r0, r0, #14
 2268 0112 FFF7FEFF 		bl	int32_sqrt
 2269              	.LVL232:
 458:math/pprz_algebra_int.c ****       two_qz = two_qz << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 459:math/pprz_algebra_int.c ****       q->qi = ((RMAT_ELMT(*r, 0, 1) - RMAT_ELMT(*r, 1, 0)) <<
 2270              		.loc 2 459 0
 2271 0116 C6EB0906 		rsb	r6, r6, r9
 458:math/pprz_algebra_int.c ****       two_qz = two_qz << (INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2272              		.loc 2 458 0
 2273 011a 4000     		lsls	r0, r0, #1
 2274              	.LVL233:
 460:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 461:math/pprz_algebra_int.c ****               / two_qz;
 462:math/pprz_algebra_int.c ****       q->qx = ((RMAT_ELMT(*r, 2, 0) + RMAT_ELMT(*r, 0, 2)) <<
 2275              		.loc 2 462 0
 2276 011c 5544     		add	r5, r5, r10
 463:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 464:math/pprz_algebra_int.c ****               / two_qz;
 465:math/pprz_algebra_int.c ****       q->qy = ((RMAT_ELMT(*r, 1, 2) + RMAT_ELMT(*r, 2, 1)) <<
 2277              		.loc 2 465 0
 2278 011e 4444     		add	r4, r4, r8
 459:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2279              		.loc 2 459 0
 2280 0120 F603     		lsls	r6, r6, #15
 462:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2281              		.loc 2 462 0
 2282 0122 ED03     		lsls	r5, r5, #15
 461:math/pprz_algebra_int.c ****       q->qx = ((RMAT_ELMT(*r, 2, 0) + RMAT_ELMT(*r, 0, 2)) <<
 2283              		.loc 2 461 0
 2284 0124 B6FBF0F6 		udiv	r6, r6, r0
 464:math/pprz_algebra_int.c ****       q->qy = ((RMAT_ELMT(*r, 1, 2) + RMAT_ELMT(*r, 2, 1)) <<
 2285              		.loc 2 464 0
 2286 0128 B5FBF0F5 		udiv	r5, r5, r0
 2287              		.loc 2 465 0
 2288 012c E403     		lsls	r4, r4, #15
 459:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2289              		.loc 2 459 0
 2290 012e 3E60     		str	r6, [r7]
 466:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 467:math/pprz_algebra_int.c ****               / two_qz;
 2291              		.loc 2 467 0
 2292 0130 B4FBF0F4 		udiv	r4, r4, r0
 462:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2293              		.loc 2 462 0
 2294 0134 7D60     		str	r5, [r7, #4]
 465:math/pprz_algebra_int.c ****                (INT32_QUAT_FRAC - INT32_TRIG_FRAC + INT32_QUAT_FRAC - 1))
 2295              		.loc 2 465 0
 2296 0136 BC60     		str	r4, [r7, #8]
 468:math/pprz_algebra_int.c ****       q->qz = two_qz / 2;
 2297              		.loc 2 468 0
 2298 0138 4008     		lsrs	r0, r0, #1
 2299              	.LVL234:
 2300              	.L37:
 2301 013a F860     		str	r0, [r7, #12]
 2302 013c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2303              	.LVL235:
 2304              	.L39:
 2305              		.align	2
 2306              	.L38:
 2307 0140 0000D040 		.word	1087373312
 2308              	.LBE18:
 2309              		.cfi_endproc
 2310              	.LFE30:
 2312              		.section	.text.int32_eulers_of_rmat,"ax",%progbits
 2313              		.align	1
 2314              		.global	int32_eulers_of_rmat
 2315              		.thumb
 2316              		.thumb_func
 2318              	int32_eulers_of_rmat:
 2319              	.LFB31:
 469:math/pprz_algebra_int.c ****     }
 470:math/pprz_algebra_int.c ****   }
 471:math/pprz_algebra_int.c **** }
 472:math/pprz_algebra_int.c **** 
 473:math/pprz_algebra_int.c **** 
 474:math/pprz_algebra_int.c **** /*
 475:math/pprz_algebra_int.c ****  *
 476:math/pprz_algebra_int.c ****  * Euler angles
 477:math/pprz_algebra_int.c ****  *
 478:math/pprz_algebra_int.c ****  */
 479:math/pprz_algebra_int.c **** 
 480:math/pprz_algebra_int.c **** void int32_eulers_of_rmat(struct Int32Eulers *e, struct Int32RMat *rm)
 481:math/pprz_algebra_int.c **** {
 2320              		.loc 2 481 0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 0
 2323              		@ frame_needed = 0, uses_anonymous_args = 0
 2324              	.LVL236:
 2325 0000 10B5     		push	{r4, lr}
 2326              		.cfi_def_cfa_offset 8
 2327              		.cfi_offset 4, -8
 2328              		.cfi_offset 14, -4
 482:math/pprz_algebra_int.c ****   const float dcm00 = TRIG_FLOAT_OF_BFP(rm->m[0]);
 483:math/pprz_algebra_int.c ****   const float dcm01 = TRIG_FLOAT_OF_BFP(rm->m[1]);
 2329              		.loc 2 483 0
 2330 0002 91ED017A 		flds	s14, [r1, #4]	@ int
 482:math/pprz_algebra_int.c ****   const float dcm00 = TRIG_FLOAT_OF_BFP(rm->m[0]);
 2331              		.loc 2 482 0
 2332 0006 D1ED007A 		flds	s15, [r1]	@ int
 481:math/pprz_algebra_int.c ****   const float dcm00 = TRIG_FLOAT_OF_BFP(rm->m[0]);
 2333              		.loc 2 481 0
 2334 000a 2DED048B 		fstmfdd	sp!, {d8, d9}
 2335              		.cfi_def_cfa_offset 24
 2336              		.cfi_offset 80, -24
 2337              		.cfi_offset 81, -20
 2338              		.cfi_offset 82, -16
 2339              		.cfi_offset 83, -12
 2340              		.loc 2 483 0
 2341 000e F8EEC79A 		fsitos	s19, s14
 484:math/pprz_algebra_int.c ****   const float dcm02 = TRIG_FLOAT_OF_BFP(rm->m[2]);
 2342              		.loc 2 484 0
 2343 0012 91ED027A 		flds	s14, [r1, #8]	@ int
 2344 0016 B8EEC78A 		fsitos	s16, s14
 485:math/pprz_algebra_int.c ****   const float dcm12 = TRIG_FLOAT_OF_BFP(rm->m[5]);
 2345              		.loc 2 485 0
 2346 001a 91ED057A 		flds	s14, [r1, #20]	@ int
 2347 001e F8EEC76A 		fsitos	s13, s14
 486:math/pprz_algebra_int.c ****   const float dcm22 = TRIG_FLOAT_OF_BFP(rm->m[8]);
 2348              		.loc 2 486 0
 2349 0022 91ED087A 		flds	s14, [r1, #32]	@ int
 482:math/pprz_algebra_int.c ****   const float dcm01 = TRIG_FLOAT_OF_BFP(rm->m[1]);
 2350              		.loc 2 482 0
 2351 0026 B8EEE79A 		fsitos	s18, s15
 2352              		.loc 2 486 0
 2353 002a B8EEC77A 		fsitos	s14, s14
 482:math/pprz_algebra_int.c ****   const float dcm01 = TRIG_FLOAT_OF_BFP(rm->m[1]);
 2354              		.loc 2 482 0
 2355 002e DFED1D7A 		flds	s15, .L41
 487:math/pprz_algebra_int.c ****   const float phi   = atan2f(dcm12, dcm22);
 2356              		.loc 2 487 0
 2357 0032 66EEA76A 		fmuls	s13, s13, s15
 482:math/pprz_algebra_int.c ****   const float dcm01 = TRIG_FLOAT_OF_BFP(rm->m[1]);
 2358              		.loc 2 482 0
 2359 0036 29EE279A 		fmuls	s18, s18, s15
 2360              	.LVL237:
 483:math/pprz_algebra_int.c ****   const float dcm02 = TRIG_FLOAT_OF_BFP(rm->m[2]);
 2361              		.loc 2 483 0
 2362 003a 69EEA79A 		fmuls	s19, s19, s15
 2363              	.LVL238:
 484:math/pprz_algebra_int.c ****   const float dcm12 = TRIG_FLOAT_OF_BFP(rm->m[5]);
 2364              		.loc 2 484 0
 2365 003e 28EE278A 		fmuls	s16, s16, s15
 2366              	.LVL239:
 2367              		.loc 2 487 0
 2368 0042 67EE277A 		fmuls	s15, s14, s15
 2369              	.LVL240:
 481:math/pprz_algebra_int.c ****   const float dcm00 = TRIG_FLOAT_OF_BFP(rm->m[0]);
 2370              		.loc 2 481 0
 2371 0046 0446     		mov	r4, r0
 2372              		.loc 2 487 0
 2373 0048 17EE901A 		fmrs	r1, s15
 2374              	.LVL241:
 2375 004c 16EE900A 		fmrs	r0, s13
 2376              	.LVL242:
 2377 0050 FFF7FEFF 		bl	atan2f
 2378              	.LVL243:
 2379 0054 08EE900A 		fmsr	s17, r0
 2380              	.LVL244:
 488:math/pprz_algebra_int.c ****   const float theta = -asinf(dcm02);
 2381              		.loc 2 488 0
 2382 0058 18EE100A 		fmrs	r0, s16
 2383              	.LVL245:
 2384 005c FFF7FEFF 		bl	asinf
 2385              	.LVL246:
 489:math/pprz_algebra_int.c ****   const float psi   = atan2f(dcm01, dcm00);
 2386              		.loc 2 489 0
 2387 0060 19EE101A 		fmrs	r1, s18
 488:math/pprz_algebra_int.c ****   const float theta = -asinf(dcm02);
 2388              		.loc 2 488 0
 2389 0064 08EE100A 		fmsr	s16, r0
 2390              	.LVL247:
 2391              		.loc 2 489 0
 2392 0068 19EE900A 		fmrs	r0, s19
 2393              	.LVL248:
 2394 006c FFF7FEFF 		bl	atan2f
 2395              	.LVL249:
 490:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2396              		.loc 2 490 0
 2397 0070 DFED0D7A 		flds	s15, .L41+4
 2398 0074 68EEA78A 		fmuls	s17, s17, s15
 2399              	.LVL250:
 491:math/pprz_algebra_int.c ****   e->theta = ANGLE_BFP_OF_REAL(theta);
 2400              		.loc 2 491 0
 2401 0078 28EE678A 		fnmuls	s16, s16, s15
 2402              	.LVL251:
 490:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2403              		.loc 2 490 0
 2404 007c FDEEE88A 		ftosizs	s17, s17
 2405              		.loc 2 491 0
 2406 0080 BDEEC88A 		ftosizs	s16, s16
 492:math/pprz_algebra_int.c ****   e->psi   = ANGLE_BFP_OF_REAL(psi);
 2407              		.loc 2 492 0
 2408 0084 07EE100A 		fmsr	s14, r0
 490:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2409              		.loc 2 490 0
 2410 0088 C4ED008A 		fsts	s17, [r4]	@ int
 491:math/pprz_algebra_int.c ****   e->theta = ANGLE_BFP_OF_REAL(theta);
 2411              		.loc 2 491 0
 2412 008c 84ED018A 		fsts	s16, [r4, #4]	@ int
 493:math/pprz_algebra_int.c **** }
 2413              		.loc 2 493 0
 2414 0090 BDEC048B 		fldmfdd	sp!, {d8-d9}
 2415              		.cfi_restore 82
 2416              		.cfi_restore 83
 2417              		.cfi_restore 80
 2418              		.cfi_restore 81
 2419              		.cfi_def_cfa_offset 8
 2420              	.LVL252:
 492:math/pprz_algebra_int.c ****   e->psi   = ANGLE_BFP_OF_REAL(psi);
 2421              		.loc 2 492 0
 2422 0094 67EE277A 		fmuls	s15, s14, s15
 2423 0098 FDEEE77A 		ftosizs	s15, s15
 2424 009c C4ED027A 		fsts	s15, [r4, #8]	@ int
 2425              		.loc 2 493 0
 2426 00a0 10BD     		pop	{r4, pc}
 2427              	.LVL253:
 2428              	.L42:
 2429 00a2 00BF     		.align	2
 2430              	.L41:
 2431 00a4 00008038 		.word	947912704
 2432 00a8 00008045 		.word	1166016512
 2433              		.cfi_endproc
 2434              	.LFE31:
 2436              		.section	.text.int32_eulers_of_quat,"ax",%progbits
 2437              		.align	1
 2438              		.global	int32_eulers_of_quat
 2439              		.thumb
 2440              		.thumb_func
 2442              	int32_eulers_of_quat:
 2443              	.LFB32:
 494:math/pprz_algebra_int.c **** 
 495:math/pprz_algebra_int.c **** void int32_eulers_of_quat(struct Int32Eulers *e, struct Int32Quat *q)
 496:math/pprz_algebra_int.c **** {
 2444              		.loc 2 496 0
 2445              		.cfi_startproc
 2446              		@ args = 0, pretend = 0, frame = 0
 2447              		@ frame_needed = 0, uses_anonymous_args = 0
 2448              	.LVL254:
 2449 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2450              		.cfi_def_cfa_offset 32
 2451              		.cfi_offset 3, -32
 2452              		.cfi_offset 4, -28
 2453              		.cfi_offset 5, -24
 2454              		.cfi_offset 6, -20
 2455              		.cfi_offset 7, -16
 2456              		.cfi_offset 8, -12
 2457              		.cfi_offset 9, -8
 2458              		.cfi_offset 14, -4
 497:math/pprz_algebra_int.c ****   const int32_t qx2  = INT_MULT_RSHIFT(q->qx, q->qx, INT32_QUAT_FRAC);
 2459              		.loc 2 497 0
 2460 0004 D1F80490 		ldr	r9, [r1, #4]
 2461              	.LVL255:
 498:math/pprz_algebra_int.c ****   const int32_t qy2  = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC);
 499:math/pprz_algebra_int.c ****   const int32_t qz2  = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC);
 500:math/pprz_algebra_int.c ****   const int32_t qiqx = INT_MULT_RSHIFT(q->qi, q->qx, INT32_QUAT_FRAC);
 2462              		.loc 2 500 0
 2463 0008 0C68     		ldr	r4, [r1]
 498:math/pprz_algebra_int.c ****   const int32_t qy2  = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC);
 2464              		.loc 2 498 0
 2465 000a D1F80880 		ldr	r8, [r1, #8]
 499:math/pprz_algebra_int.c ****   const int32_t qiqx = INT_MULT_RSHIFT(q->qi, q->qx, INT32_QUAT_FRAC);
 2466              		.loc 2 499 0
 2467 000e CF68     		ldr	r7, [r1, #12]
 2468              		.loc 2 500 0
 2469 0010 09FB04F3 		mul	r3, r9, r4
 501:math/pprz_algebra_int.c ****   const int32_t qiqy = INT_MULT_RSHIFT(q->qi, q->qy, INT32_QUAT_FRAC);
 502:math/pprz_algebra_int.c ****   const int32_t qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC);
 503:math/pprz_algebra_int.c ****   const int32_t qxqy = INT_MULT_RSHIFT(q->qx, q->qy, INT32_QUAT_FRAC);
 504:math/pprz_algebra_int.c ****   const int32_t qxqz = INT_MULT_RSHIFT(q->qx, q->qz, INT32_QUAT_FRAC);
 505:math/pprz_algebra_int.c ****   const int32_t qyqz = INT_MULT_RSHIFT(q->qy, q->qz, INT32_QUAT_FRAC);
 2470              		.loc 2 505 0
 2471 0014 07FB08F2 		mul	r2, r7, r8
 500:math/pprz_algebra_int.c ****   const int32_t qiqy = INT_MULT_RSHIFT(q->qi, q->qy, INT32_QUAT_FRAC);
 2472              		.loc 2 500 0
 2473 0018 DB13     		asrs	r3, r3, #15
 506:math/pprz_algebra_int.c ****   const int32_t one = TRIG_BFP_OF_REAL(1);
 507:math/pprz_algebra_int.c ****   const int32_t two = TRIG_BFP_OF_REAL(2);
 508:math/pprz_algebra_int.c **** 
 509:math/pprz_algebra_int.c ****   /* dcm00 = 1.0 - 2.*(  qy2 +  qz2 ); */
 510:math/pprz_algebra_int.c ****   const int32_t idcm00 =  one - INT_MULT_RSHIFT(two, (qy2 + qz2),
 511:math/pprz_algebra_int.c ****                           INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 512:math/pprz_algebra_int.c ****   /* dcm01 =       2.*( qxqy + qiqz ); */
 513:math/pprz_algebra_int.c ****   const int32_t idcm01 = INT_MULT_RSHIFT(two, (qxqy + qiqz),
 514:math/pprz_algebra_int.c ****                                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 515:math/pprz_algebra_int.c ****   /* dcm02 =       2.*( qxqz - qiqy ); */
 516:math/pprz_algebra_int.c ****   const int32_t idcm02 = INT_MULT_RSHIFT(two, (qxqz - qiqy),
 517:math/pprz_algebra_int.c ****                                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 518:math/pprz_algebra_int.c ****   /* dcm12 =       2.*( qyqz + qiqx ); */
 519:math/pprz_algebra_int.c ****   const int32_t idcm12 = INT_MULT_RSHIFT(two, (qyqz + qiqx),
 2474              		.loc 2 519 0
 2475 001a 03EBE233 		add	r3, r3, r2, asr #15
 498:math/pprz_algebra_int.c ****   const int32_t qz2  = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC);
 2476              		.loc 2 498 0
 2477 001e 08FB08F5 		mul	r5, r8, r8
 2478              		.loc 2 519 0
 2479 0022 43F31003 		sbfx	r3, r3, #0, #17
 520:math/pprz_algebra_int.c ****                                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 521:math/pprz_algebra_int.c ****   /* dcm22 = 1.0 - 2.*(  qx2 +  qy2 ); */
 522:math/pprz_algebra_int.c ****   const int32_t idcm22 = one - INT_MULT_RSHIFT(two, (qx2 + qy2),
 523:math/pprz_algebra_int.c ****                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 524:math/pprz_algebra_int.c ****   const float dcm00 = (float)idcm00 / (1 << INT32_TRIG_FRAC);
 525:math/pprz_algebra_int.c ****   const float dcm01 = (float)idcm01 / (1 << INT32_TRIG_FRAC);
 526:math/pprz_algebra_int.c ****   const float dcm02 = (float)idcm02 / (1 << INT32_TRIG_FRAC);
 527:math/pprz_algebra_int.c ****   const float dcm12 = (float)idcm12 / (1 << INT32_TRIG_FRAC);
 2480              		.loc 2 527 0
 2481 0026 07EE903A 		fmsr	s15, r3	@ int
 498:math/pprz_algebra_int.c ****   const int32_t qz2  = INT_MULT_RSHIFT(q->qz, q->qz, INT32_QUAT_FRAC);
 2482              		.loc 2 498 0
 2483 002a ED13     		asrs	r5, r5, #15
 2484              	.LVL256:
 497:math/pprz_algebra_int.c ****   const int32_t qy2  = INT_MULT_RSHIFT(q->qy, q->qy, INT32_QUAT_FRAC);
 2485              		.loc 2 497 0
 2486 002c 09FB09F3 		mul	r3, r9, r9
 522:math/pprz_algebra_int.c ****                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2487              		.loc 2 522 0
 2488 0030 05EBE333 		add	r3, r5, r3, asr #15
 2489 0034 43F31003 		sbfx	r3, r3, #0, #17
 2490 0038 C3F58043 		rsb	r3, r3, #16384
 2491              		.loc 2 527 0
 2492 003c B8EEE77A 		fsitos	s14, s15
 528:math/pprz_algebra_int.c ****   const float dcm22 = (float)idcm22 / (1 << INT32_TRIG_FRAC);
 2493              		.loc 2 528 0
 2494 0040 07EE903A 		fmsr	s15, r3	@ int
 496:math/pprz_algebra_int.c ****   const int32_t qx2  = INT_MULT_RSHIFT(q->qx, q->qx, INT32_QUAT_FRAC);
 2495              		.loc 2 496 0
 2496 0044 2DED048B 		fstmfdd	sp!, {d8, d9}
 2497              		.cfi_def_cfa_offset 48
 2498              		.cfi_offset 80, -48
 2499              		.cfi_offset 81, -44
 2500              		.cfi_offset 82, -40
 2501              		.cfi_offset 83, -36
 2502              		.loc 2 528 0
 2503 0048 F8EEE77A 		fsitos	s15, s15
 527:math/pprz_algebra_int.c ****   const float dcm22 = (float)idcm22 / (1 << INT32_TRIG_FRAC);
 2504              		.loc 2 527 0
 2505 004c 9FED2F9A 		flds	s18, .L44
 529:math/pprz_algebra_int.c **** 
 530:math/pprz_algebra_int.c ****   const float phi   = atan2f(dcm12, dcm22);
 2506              		.loc 2 530 0
 2507 0050 27EE097A 		fmuls	s14, s14, s18
 2508 0054 67EE897A 		fmuls	s15, s15, s18
 496:math/pprz_algebra_int.c ****   const int32_t qx2  = INT_MULT_RSHIFT(q->qx, q->qx, INT32_QUAT_FRAC);
 2509              		.loc 2 496 0
 2510 0058 0646     		mov	r6, r0
 2511              		.loc 2 530 0
 2512 005a 17EE901A 		fmrs	r1, s15
 2513              	.LVL257:
 2514 005e 17EE100A 		fmrs	r0, s14
 2515              	.LVL258:
 2516 0062 FFF7FEFF 		bl	atan2f
 2517              	.LVL259:
 501:math/pprz_algebra_int.c ****   const int32_t qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC);
 2518              		.loc 2 501 0
 2519 0066 08FB04F3 		mul	r3, r8, r4
 2520              	.LVL260:
 504:math/pprz_algebra_int.c ****   const int32_t qyqz = INT_MULT_RSHIFT(q->qy, q->qz, INT32_QUAT_FRAC);
 2521              		.loc 2 504 0
 2522 006a 07FB09F2 		mul	r2, r7, r9
 2523              	.LVL261:
 501:math/pprz_algebra_int.c ****   const int32_t qiqz = INT_MULT_RSHIFT(q->qi, q->qz, INT32_QUAT_FRAC);
 2524              		.loc 2 501 0
 2525 006e DB13     		asrs	r3, r3, #15
 2526              	.LVL262:
 516:math/pprz_algebra_int.c ****                                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2527              		.loc 2 516 0
 2528 0070 C3EBE233 		rsb	r3, r3, r2, asr #15
 2529              	.LVL263:
 2530 0074 43F31003 		sbfx	r3, r3, #0, #17
 2531              	.LVL264:
 526:math/pprz_algebra_int.c ****   const float dcm12 = (float)idcm12 / (1 << INT32_TRIG_FRAC);
 2532              		.loc 2 526 0
 2533 0078 07EE903A 		fmsr	s15, r3	@ int
 2534 007c F8EEE77A 		fsitos	s15, s15
 502:math/pprz_algebra_int.c ****   const int32_t qxqy = INT_MULT_RSHIFT(q->qx, q->qy, INT32_QUAT_FRAC);
 2535              		.loc 2 502 0
 2536 0080 7C43     		muls	r4, r7, r4
 2537              	.LVL265:
 531:math/pprz_algebra_int.c ****   const float theta = -asinf(dcm02);
 2538              		.loc 2 531 0
 2539 0082 67EE897A 		fmuls	s15, s15, s18
 503:math/pprz_algebra_int.c ****   const int32_t qxqz = INT_MULT_RSHIFT(q->qx, q->qz, INT32_QUAT_FRAC);
 2540              		.loc 2 503 0
 2541 0086 08FB09F8 		mul	r8, r8, r9
 2542              	.LVL266:
 502:math/pprz_algebra_int.c ****   const int32_t qxqy = INT_MULT_RSHIFT(q->qx, q->qy, INT32_QUAT_FRAC);
 2543              		.loc 2 502 0
 2544 008a E413     		asrs	r4, r4, #15
 2545              	.LVL267:
 513:math/pprz_algebra_int.c ****                                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2546              		.loc 2 513 0
 2547 008c 04EBE834 		add	r4, r4, r8, asr #15
 2548              	.LVL268:
 499:math/pprz_algebra_int.c ****   const int32_t qiqx = INT_MULT_RSHIFT(q->qi, q->qx, INT32_QUAT_FRAC);
 2549              		.loc 2 499 0
 2550 0090 7F43     		muls	r7, r7, r7
 2551              	.LVL269:
 530:math/pprz_algebra_int.c ****   const float theta = -asinf(dcm02);
 2552              		.loc 2 530 0
 2553 0092 08EE900A 		fmsr	s17, r0
 2554              	.LVL270:
 513:math/pprz_algebra_int.c ****                                          INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2555              		.loc 2 513 0
 2556 0096 44F31004 		sbfx	r4, r4, #0, #17
 2557              	.LVL271:
 2558              		.loc 2 531 0
 2559 009a 17EE900A 		fmrs	r0, s15
 2560              	.LVL272:
 510:math/pprz_algebra_int.c ****                           INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2561              		.loc 2 510 0
 2562 009e 05EBE735 		add	r5, r5, r7, asr #15
 2563              	.LVL273:
 2564              		.loc 2 531 0
 2565 00a2 FFF7FEFF 		bl	asinf
 2566              	.LVL274:
 510:math/pprz_algebra_int.c ****                           INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2567              		.loc 2 510 0
 2568 00a6 45F31005 		sbfx	r5, r5, #0, #17
 525:math/pprz_algebra_int.c ****   const float dcm02 = (float)idcm02 / (1 << INT32_TRIG_FRAC);
 2569              		.loc 2 525 0
 2570 00aa 07EE904A 		fmsr	s15, r4	@ int
 510:math/pprz_algebra_int.c ****                           INT32_TRIG_FRAC + INT32_QUAT_FRAC - INT32_TRIG_FRAC);
 2571              		.loc 2 510 0
 2572 00ae C5F58045 		rsb	r5, r5, #16384
 525:math/pprz_algebra_int.c ****   const float dcm02 = (float)idcm02 / (1 << INT32_TRIG_FRAC);
 2573              		.loc 2 525 0
 2574 00b2 F8EEE77A 		fsitos	s15, s15
 524:math/pprz_algebra_int.c ****   const float dcm01 = (float)idcm01 / (1 << INT32_TRIG_FRAC);
 2575              		.loc 2 524 0
 2576 00b6 07EE105A 		fmsr	s14, r5	@ int
 532:math/pprz_algebra_int.c ****   const float psi   = atan2f(dcm01, dcm00);
 2577              		.loc 2 532 0
 2578 00ba 67EE897A 		fmuls	s15, s15, s18
 524:math/pprz_algebra_int.c ****   const float dcm01 = (float)idcm01 / (1 << INT32_TRIG_FRAC);
 2579              		.loc 2 524 0
 2580 00be B8EEC77A 		fsitos	s14, s14
 531:math/pprz_algebra_int.c ****   const float psi   = atan2f(dcm01, dcm00);
 2581              		.loc 2 531 0
 2582 00c2 08EE100A 		fmsr	s16, r0
 2583              	.LVL275:
 2584              		.loc 2 532 0
 2585 00c6 17EE900A 		fmrs	r0, s15
 2586              	.LVL276:
 2587 00ca 67EE097A 		fmuls	s15, s14, s18
 2588 00ce 17EE901A 		fmrs	r1, s15
 2589 00d2 FFF7FEFF 		bl	atan2f
 2590              	.LVL277:
 533:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2591              		.loc 2 533 0
 2592 00d6 DFED0E7A 		flds	s15, .L44+4
 2593 00da 68EEA78A 		fmuls	s17, s17, s15
 2594              	.LVL278:
 534:math/pprz_algebra_int.c ****   e->theta = ANGLE_BFP_OF_REAL(theta);
 2595              		.loc 2 534 0
 2596 00de 28EE678A 		fnmuls	s16, s16, s15
 2597              	.LVL279:
 533:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2598              		.loc 2 533 0
 2599 00e2 FDEEE88A 		ftosizs	s17, s17
 2600              		.loc 2 534 0
 2601 00e6 BDEEC88A 		ftosizs	s16, s16
 535:math/pprz_algebra_int.c ****   e->psi   = ANGLE_BFP_OF_REAL(psi);
 2602              		.loc 2 535 0
 2603 00ea 07EE100A 		fmsr	s14, r0
 533:math/pprz_algebra_int.c ****   e->phi   = ANGLE_BFP_OF_REAL(phi);
 2604              		.loc 2 533 0
 2605 00ee C6ED008A 		fsts	s17, [r6]	@ int
 534:math/pprz_algebra_int.c ****   e->theta = ANGLE_BFP_OF_REAL(theta);
 2606              		.loc 2 534 0
 2607 00f2 86ED018A 		fsts	s16, [r6, #4]	@ int
 536:math/pprz_algebra_int.c **** }
 2608              		.loc 2 536 0
 2609 00f6 BDEC048B 		fldmfdd	sp!, {d8-d9}
 2610              		.cfi_restore 82
 2611              		.cfi_restore 83
 2612              		.cfi_restore 80
 2613              		.cfi_restore 81
 2614              		.cfi_def_cfa_offset 32
 535:math/pprz_algebra_int.c ****   e->psi   = ANGLE_BFP_OF_REAL(psi);
 2615              		.loc 2 535 0
 2616 00fa 67EE277A 		fmuls	s15, s14, s15
 2617 00fe FDEEE77A 		ftosizs	s15, s15
 2618 0102 C6ED027A 		fsts	s15, [r6, #8]	@ int
 2619              		.loc 2 536 0
 2620 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2621              	.LVL280:
 2622              	.L45:
 2623 010a 00BF     		.align	2
 2624              	.L44:
 2625 010c 00008038 		.word	947912704
 2626 0110 00008045 		.word	1166016512
 2627              		.cfi_endproc
 2628              	.LFE32:
 2630              		.section	.text.int32_rates_of_eulers_dot_321,"ax",%progbits
 2631              		.align	1
 2632              		.global	int32_rates_of_eulers_dot_321
 2633              		.thumb
 2634              		.thumb_func
 2636              	int32_rates_of_eulers_dot_321:
 2637              	.LFB33:
 537:math/pprz_algebra_int.c **** 
 538:math/pprz_algebra_int.c **** 
 539:math/pprz_algebra_int.c **** /*
 540:math/pprz_algebra_int.c ****  *
 541:math/pprz_algebra_int.c ****  * Rotational speeds
 542:math/pprz_algebra_int.c ****  *
 543:math/pprz_algebra_int.c ****  */
 544:math/pprz_algebra_int.c **** 
 545:math/pprz_algebra_int.c **** void int32_rates_of_eulers_dot_321(struct Int32Rates *r, struct Int32Eulers *e, struct Int32Eulers 
 546:math/pprz_algebra_int.c **** {
 2638              		.loc 2 546 0
 2639              		.cfi_startproc
 2640              		@ args = 0, pretend = 0, frame = 0
 2641              		@ frame_needed = 0, uses_anonymous_args = 0
 2642              	.LVL281:
 2643 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2644              		.cfi_def_cfa_offset 32
 2645              		.cfi_offset 3, -32
 2646              		.cfi_offset 4, -28
 2647              		.cfi_offset 5, -24
 2648              		.cfi_offset 6, -20
 2649              		.cfi_offset 7, -16
 2650              		.cfi_offset 8, -12
 2651              		.cfi_offset 9, -8
 2652              		.cfi_offset 14, -4
 2653              		.loc 2 546 0
 2654 0004 0446     		mov	r4, r0
 547:math/pprz_algebra_int.c ****   int32_t sphi;
 548:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(sphi, e->phi);
 2655              		.loc 2 548 0
 2656 0006 0868     		ldr	r0, [r1]
 2657              	.LVL282:
 546:math/pprz_algebra_int.c ****   int32_t sphi;
 2658              		.loc 2 546 0
 2659 0008 0D46     		mov	r5, r1
 2660 000a 9046     		mov	r8, r2
 2661              		.loc 2 548 0
 2662 000c FFF7FEFF 		bl	pprz_itrig_sin
 2663              	.LVL283:
 2664 0010 0646     		mov	r6, r0
 2665              	.LVL284:
 549:math/pprz_algebra_int.c ****   int32_t cphi;
 550:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cphi, e->phi);
 2666              		.loc 2 550 0
 2667 0012 2868     		ldr	r0, [r5]
 2668              	.LVL285:
 2669 0014 FFF7FEFF 		bl	pprz_itrig_cos
 2670              	.LVL286:
 2671 0018 0746     		mov	r7, r0
 2672              	.LVL287:
 551:math/pprz_algebra_int.c ****   int32_t stheta;
 552:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(stheta, e->theta);
 2673              		.loc 2 552 0
 2674 001a 6868     		ldr	r0, [r5, #4]
 2675              	.LVL288:
 2676 001c FFF7FEFF 		bl	pprz_itrig_sin
 2677              	.LVL289:
 2678 0020 8146     		mov	r9, r0
 2679              	.LVL290:
 553:math/pprz_algebra_int.c ****   int32_t ctheta;
 554:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(ctheta, e->theta);
 2680              		.loc 2 554 0
 2681 0022 6868     		ldr	r0, [r5, #4]
 2682              	.LVL291:
 2683 0024 FFF7FEFF 		bl	pprz_itrig_cos
 2684              	.LVL292:
 555:math/pprz_algebra_int.c **** 
 556:math/pprz_algebra_int.c ****   int32_t cphi_ctheta = INT_MULT_RSHIFT(cphi,   ctheta, INT32_TRIG_FRAC);
 557:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 558:math/pprz_algebra_int.c **** 
 559:math/pprz_algebra_int.c ****   r->p = - INT_MULT_RSHIFT(stheta, ed->psi, INT32_TRIG_FRAC) + ed->phi;
 2685              		.loc 2 559 0
 2686 0028 D8F80810 		ldr	r1, [r8, #8]
 2687 002c D8F80030 		ldr	r3, [r8]
 2688 0030 01FB09F9 		mul	r9, r1, r9
 2689              	.LVL293:
 2690 0034 A3EBA933 		sub	r3, r3, r9, asr #14
 557:math/pprz_algebra_int.c **** 
 2691              		.loc 2 557 0
 2692 0038 00FB06F2 		mul	r2, r0, r6
 2693              		.loc 2 559 0
 2694 003c 2360     		str	r3, [r4]
 560:math/pprz_algebra_int.c ****   r->q = INT_MULT_RSHIFT(sphi_ctheta, ed->psi, INT32_TRIG_FRAC) + INT_MULT_RSHIFT(cphi, ed->theta, 
 2695              		.loc 2 560 0
 2696 003e D8F80430 		ldr	r3, [r8, #4]
 557:math/pprz_algebra_int.c **** 
 2697              		.loc 2 557 0
 2698 0042 9213     		asrs	r2, r2, #14
 2699              	.LVL294:
 556:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 2700              		.loc 2 556 0
 2701 0044 7843     		muls	r0, r7, r0
 2702              	.LVL295:
 2703              		.loc 2 560 0
 2704 0046 01FB02F5 		mul	r5, r1, r2
 2705              	.LVL296:
 556:math/pprz_algebra_int.c ****   int32_t sphi_ctheta = INT_MULT_RSHIFT(sphi,   ctheta, INT32_TRIG_FRAC);
 2706              		.loc 2 556 0
 2707 004a 8013     		asrs	r0, r0, #14
 2708              	.LVL297:
 2709              		.loc 2 560 0
 2710 004c 03FB07F2 		mul	r2, r3, r7
 2711              	.LVL298:
 561:math/pprz_algebra_int.c ****   r->r = INT_MULT_RSHIFT(cphi_ctheta, ed->psi, INT32_TRIG_FRAC) - INT_MULT_RSHIFT(sphi, ed->theta, 
 2712              		.loc 2 561 0
 2713 0050 7343     		muls	r3, r6, r3
 560:math/pprz_algebra_int.c ****   r->q = INT_MULT_RSHIFT(sphi_ctheta, ed->psi, INT32_TRIG_FRAC) + INT_MULT_RSHIFT(cphi, ed->theta, 
 2714              		.loc 2 560 0
 2715 0052 9213     		asrs	r2, r2, #14
 2716              		.loc 2 561 0
 2717 0054 4843     		muls	r0, r1, r0
 2718              	.LVL299:
 2719 0056 9B13     		asrs	r3, r3, #14
 560:math/pprz_algebra_int.c ****   r->q = INT_MULT_RSHIFT(sphi_ctheta, ed->psi, INT32_TRIG_FRAC) + INT_MULT_RSHIFT(cphi, ed->theta, 
 2720              		.loc 2 560 0
 2721 0058 02EBA532 		add	r2, r2, r5, asr #14
 2722              		.loc 2 561 0
 2723 005c C3EBA033 		rsb	r3, r3, r0, asr #14
 560:math/pprz_algebra_int.c ****   r->q = INT_MULT_RSHIFT(sphi_ctheta, ed->psi, INT32_TRIG_FRAC) + INT_MULT_RSHIFT(cphi, ed->theta, 
 2724              		.loc 2 560 0
 2725 0060 6260     		str	r2, [r4, #4]
 2726              		.loc 2 561 0
 2727 0062 A360     		str	r3, [r4, #8]
 2728 0064 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2729              		.cfi_endproc
 2730              	.LFE33:
 2732              		.global	__aeabi_ldivmod
 2733              		.section	.text.int32_eulers_dot_321_of_rates,"ax",%progbits
 2734              		.align	1
 2735              		.global	int32_eulers_dot_321_of_rates
 2736              		.thumb
 2737              		.thumb_func
 2739              	int32_eulers_dot_321_of_rates:
 2740              	.LFB34:
 562:math/pprz_algebra_int.c **** }
 563:math/pprz_algebra_int.c **** 
 564:math/pprz_algebra_int.c **** void int32_eulers_dot_321_of_rates(struct Int32Eulers *ed, struct Int32Eulers *e, struct Int32Rates
 565:math/pprz_algebra_int.c **** {
 2741              		.loc 2 565 0
 2742              		.cfi_startproc
 2743              		@ args = 0, pretend = 0, frame = 8
 2744              		@ frame_needed = 0, uses_anonymous_args = 0
 2745              	.LVL300:
 2746 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2747              		.cfi_def_cfa_offset 48
 2748              		.cfi_offset 4, -36
 2749              		.cfi_offset 5, -32
 2750              		.cfi_offset 6, -28
 2751              		.cfi_offset 7, -24
 2752              		.cfi_offset 8, -20
 2753              		.cfi_offset 9, -16
 2754              		.cfi_offset 10, -12
 2755              		.cfi_offset 11, -8
 2756              		.cfi_offset 14, -4
 2757              		.loc 2 565 0
 2758 0004 0446     		mov	r4, r0
 566:math/pprz_algebra_int.c ****   int32_t sphi;
 567:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(sphi, e->phi);
 2759              		.loc 2 567 0
 2760 0006 0868     		ldr	r0, [r1]
 2761              	.LVL301:
 565:math/pprz_algebra_int.c ****   int32_t sphi;
 2762              		.loc 2 565 0
 2763 0008 0E46     		mov	r6, r1
 2764 000a 9346     		mov	fp, r2
 2765              		.loc 2 567 0
 2766 000c FFF7FEFF 		bl	pprz_itrig_sin
 2767              	.LVL302:
 2768 0010 8146     		mov	r9, r0
 2769              	.LVL303:
 568:math/pprz_algebra_int.c ****   int32_t cphi;
 569:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(cphi, e->phi);
 2770              		.loc 2 569 0
 2771 0012 3068     		ldr	r0, [r6]
 2772              	.LVL304:
 2773 0014 FFF7FEFF 		bl	pprz_itrig_cos
 2774              	.LVL305:
 2775 0018 8046     		mov	r8, r0
 2776              	.LVL306:
 570:math/pprz_algebra_int.c ****   int32_t stheta;
 571:math/pprz_algebra_int.c ****   PPRZ_ITRIG_SIN(stheta, e->theta);
 2777              		.loc 2 571 0
 2778 001a 7068     		ldr	r0, [r6, #4]
 2779              	.LVL307:
 2780 001c FFF7FEFF 		bl	pprz_itrig_sin
 2781              	.LVL308:
 2782 0020 0546     		mov	r5, r0
 2783              	.LVL309:
 572:math/pprz_algebra_int.c ****   int64_t ctheta;
 573:math/pprz_algebra_int.c ****   PPRZ_ITRIG_COS(ctheta, e->theta);
 2784              		.loc 2 573 0
 2785 0022 7068     		ldr	r0, [r6, #4]
 2786              	.LVL310:
 2787 0024 FFF7FEFF 		bl	pprz_itrig_cos
 2788              	.LVL311:
 574:math/pprz_algebra_int.c **** 
 575:math/pprz_algebra_int.c ****   if (ctheta != 0) {
 2789              		.loc 2 575 0
 2790 0028 0646     		mov	r6, r0
 2791              	.LVL312:
 2792 002a C717     		asrs	r7, r0, #31
 2793 002c C0B3     		cbz	r0, .L48
 2794              	.LBB19:
 576:math/pprz_algebra_int.c ****     int64_t cphi_stheta = INT_MULT_RSHIFT(cphi, stheta, INT32_TRIG_FRAC);
 577:math/pprz_algebra_int.c ****     int64_t sphi_stheta = INT_MULT_RSHIFT(sphi, stheta, INT32_TRIG_FRAC);
 578:math/pprz_algebra_int.c **** 
 579:math/pprz_algebra_int.c ****     ed->phi = r->p + (int32_t)((sphi_stheta * (int64_t)r->q) / ctheta) + (int32_t)((cphi_stheta * (
 2795              		.loc 2 579 0
 2796 002e DBF804C0 		ldr	ip, [fp, #4]
 2797 0032 CDF804C0 		str	ip, [sp, #4]
 577:math/pprz_algebra_int.c **** 
 2798              		.loc 2 577 0
 2799 0036 05FB09F0 		mul	r0, r5, r9
 2800              	.LVL313:
 2801 003a 8013     		asrs	r0, r0, #14
 2802              		.loc 2 579 0
 2803 003c 80FB0C01 		smull	r0, r1, r0, ip
 2804 0040 3246     		mov	r2, r6
 2805 0042 3B46     		mov	r3, r7
 2806 0044 FFF7FEFF 		bl	__aeabi_ldivmod
 2807              	.LVL314:
 576:math/pprz_algebra_int.c ****     int64_t cphi_stheta = INT_MULT_RSHIFT(cphi, stheta, INT32_TRIG_FRAC);
 2808              		.loc 2 576 0
 2809 0048 05FB08FA 		mul	r10, r5, r8
 2810              		.loc 2 579 0
 2811 004c DBF80030 		ldr	r3, [fp]
 2812 0050 DBF80850 		ldr	r5, [fp, #8]
 2813              	.LVL315:
 576:math/pprz_algebra_int.c ****     int64_t cphi_stheta = INT_MULT_RSHIFT(cphi, stheta, INT32_TRIG_FRAC);
 2814              		.loc 2 576 0
 2815 0054 4FEAAA3A 		asr	r10, r10, #14
 2816              	.LVL316:
 2817              		.loc 2 579 0
 2818 0058 03EB000B 		add	fp, r3, r0
 2819              	.LVL317:
 2820 005c 3246     		mov	r2, r6
 2821 005e 3B46     		mov	r3, r7
 2822 0060 8AFB0501 		smull	r0, r1, r10, r5
 2823 0064 FFF7FEFF 		bl	__aeabi_ldivmod
 2824              	.LVL318:
 580:math/pprz_algebra_int.c ****     ed->theta = INT_MULT_RSHIFT(cphi, r->q, INT32_TRIG_FRAC) - INT_MULT_RSHIFT(sphi, r->r, INT32_TR
 2825              		.loc 2 580 0
 2826 0068 DDF804C0 		ldr	ip, [sp, #4]
 2827 006c 05FB09F3 		mul	r3, r5, r9
 2828 0070 0CFB08F2 		mul	r2, ip, r8
 2829 0074 9B13     		asrs	r3, r3, #14
 2830 0076 C3EBA233 		rsb	r3, r3, r2, asr #14
 579:math/pprz_algebra_int.c ****     ed->theta = INT_MULT_RSHIFT(cphi, r->q, INT32_TRIG_FRAC) - INT_MULT_RSHIFT(sphi, r->r, INT32_TR
 2831              		.loc 2 579 0
 2832 007a 5844     		add	r0, r0, fp
 2833 007c 2060     		str	r0, [r4]
 2834              		.loc 2 580 0
 2835 007e 6360     		str	r3, [r4, #4]
 581:math/pprz_algebra_int.c ****     ed->psi = (int32_t)(((int64_t)sphi * (int64_t)r->q) / ctheta) + (int32_t)(((int64_t)cphi * (int
 2836              		.loc 2 581 0
 2837 0080 89FB0C01 		smull	r0, r1, r9, ip
 2838 0084 3246     		mov	r2, r6
 2839 0086 3B46     		mov	r3, r7
 2840 0088 FFF7FEFF 		bl	__aeabi_ldivmod
 2841              	.LVL319:
 2842 008c 3246     		mov	r2, r6
 2843 008e 8146     		mov	r9, r0
 2844              	.LVL320:
 2845 0090 3B46     		mov	r3, r7
 2846 0092 88FB0501 		smull	r0, r1, r8, r5
 2847 0096 FFF7FEFF 		bl	__aeabi_ldivmod
 2848              	.LVL321:
 2849 009a 4844     		add	r0, r0, r9
 2850 009c A060     		str	r0, [r4, #8]
 2851              	.LBE19:
 2852 009e 03E0     		b	.L47
 2853              	.LVL322:
 2854              	.L48:
 582:math/pprz_algebra_int.c ****   }
 583:math/pprz_algebra_int.c ****   /* FIXME: What do you wanna do when you hit the singularity ? */
 584:math/pprz_algebra_int.c ****   /* probably not return an uninitialized variable, or ?        */
 585:math/pprz_algebra_int.c ****   else {
 586:math/pprz_algebra_int.c ****     INT_EULERS_ZERO(*ed);
 2855              		.loc 2 586 0
 2856 00a0 0023     		movs	r3, #0
 2857 00a2 2360     		str	r3, [r4]
 2858 00a4 6360     		str	r3, [r4, #4]
 2859 00a6 A360     		str	r3, [r4, #8]
 2860              	.LVL323:
 2861              	.L47:
 587:math/pprz_algebra_int.c ****   }
 588:math/pprz_algebra_int.c **** }
 2862              		.loc 2 588 0
 2863 00a8 03B0     		add	sp, sp, #12
 2864              		.cfi_def_cfa_offset 36
 2865              		@ sp needed
 2866 00aa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2867              		.cfi_endproc
 2868              	.LFE34:
 2870              		.text
 2871              	.Letext0:
 2872              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2873              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2874              		.file 5 "/usr/arm-none-eabi/include/stdlib.h"
 2875              		.file 6 "./math/pprz_trig_int.h"
 2876              		.file 7 "/usr/arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pprz_algebra_int.c
     /tmp/ccQJnp2U.s:20     .text.int32_quat_wrap_shortest:00000000 $t
     /tmp/ccQJnp2U.s:24     .text.int32_quat_wrap_shortest:00000000 int32_quat_wrap_shortest
     /tmp/ccQJnp2U.s:55     .text.int32_sqrt:00000000 $t
     /tmp/ccQJnp2U.s:60     .text.int32_sqrt:00000000 int32_sqrt
     /tmp/ccQJnp2U.s:114    .text.int32_quat_normalize:00000000 $t
     /tmp/ccQJnp2U.s:118    .text.int32_quat_normalize:00000000 int32_quat_normalize
     /tmp/ccQJnp2U.s:193    .text.int32_rmat_comp:00000000 $t
     /tmp/ccQJnp2U.s:198    .text.int32_rmat_comp:00000000 int32_rmat_comp
     /tmp/ccQJnp2U.s:306    .text.int32_rmat_comp_inv:00000000 $t
     /tmp/ccQJnp2U.s:311    .text.int32_rmat_comp_inv:00000000 int32_rmat_comp_inv
     /tmp/ccQJnp2U.s:416    .text.int32_rmat_vmult:00000000 $t
     /tmp/ccQJnp2U.s:421    .text.int32_rmat_vmult:00000000 int32_rmat_vmult
     /tmp/ccQJnp2U.s:477    .text.int32_rmat_transp_vmult:00000000 $t
     /tmp/ccQJnp2U.s:482    .text.int32_rmat_transp_vmult:00000000 int32_rmat_transp_vmult
     /tmp/ccQJnp2U.s:538    .text.int32_rmat_ratemult:00000000 $t
     /tmp/ccQJnp2U.s:543    .text.int32_rmat_ratemult:00000000 int32_rmat_ratemult
     /tmp/ccQJnp2U.s:599    .text.int32_rmat_transp_ratemult:00000000 $t
     /tmp/ccQJnp2U.s:604    .text.int32_rmat_transp_ratemult:00000000 int32_rmat_transp_ratemult
     /tmp/ccQJnp2U.s:660    .text.int32_rmat_of_quat:00000000 $t
     /tmp/ccQJnp2U.s:665    .text.int32_rmat_of_quat:00000000 int32_rmat_of_quat
     /tmp/ccQJnp2U.s:770    .text.int32_rmat_of_eulers_321:00000000 $t
     /tmp/ccQJnp2U.s:775    .text.int32_rmat_of_eulers_321:00000000 int32_rmat_of_eulers_321
     /tmp/ccQJnp2U.s:934    .text.int32_rmat_of_eulers_312:00000000 $t
     /tmp/ccQJnp2U.s:939    .text.int32_rmat_of_eulers_312:00000000 int32_rmat_of_eulers_312
     /tmp/ccQJnp2U.s:1095   .text.int32_quat_comp:00000000 $t
     /tmp/ccQJnp2U.s:1100   .text.int32_quat_comp:00000000 int32_quat_comp
     /tmp/ccQJnp2U.s:1164   .text.int32_quat_comp_inv:00000000 $t
     /tmp/ccQJnp2U.s:1169   .text.int32_quat_comp_inv:00000000 int32_quat_comp_inv
     /tmp/ccQJnp2U.s:1234   .text.int32_quat_inv_comp:00000000 $t
     /tmp/ccQJnp2U.s:1239   .text.int32_quat_inv_comp:00000000 int32_quat_inv_comp
     /tmp/ccQJnp2U.s:1302   .text.int32_quat_comp_norm_shortest:00000000 $t
     /tmp/ccQJnp2U.s:1307   .text.int32_quat_comp_norm_shortest:00000000 int32_quat_comp_norm_shortest
     /tmp/ccQJnp2U.s:1342   .text.int32_quat_comp_inv_norm_shortest:00000000 $t
     /tmp/ccQJnp2U.s:1347   .text.int32_quat_comp_inv_norm_shortest:00000000 int32_quat_comp_inv_norm_shortest
     /tmp/ccQJnp2U.s:1382   .text.int32_quat_inv_comp_norm_shortest:00000000 $t
     /tmp/ccQJnp2U.s:1387   .text.int32_quat_inv_comp_norm_shortest:00000000 int32_quat_inv_comp_norm_shortest
     /tmp/ccQJnp2U.s:1422   .text.int32_quat_derivative:00000000 $t
     /tmp/ccQJnp2U.s:1427   .text.int32_quat_derivative:00000000 int32_quat_derivative
     /tmp/ccQJnp2U.s:1480   .text.int32_quat_integrate_fi:00000000 $t
     /tmp/ccQJnp2U.s:1485   .text.int32_quat_integrate_fi:00000000 int32_quat_integrate_fi
     /tmp/ccQJnp2U.s:1674   .text.int32_quat_vmult:00000000 $t
     /tmp/ccQJnp2U.s:1679   .text.int32_quat_vmult:00000000 int32_quat_vmult
     /tmp/ccQJnp2U.s:1822   .text.int32_quat_of_eulers:00000000 $t
     /tmp/ccQJnp2U.s:1827   .text.int32_quat_of_eulers:00000000 int32_quat_of_eulers
     /tmp/ccQJnp2U.s:1974   .text.int32_quat_of_axis_angle:00000000 $t
     /tmp/ccQJnp2U.s:1979   .text.int32_quat_of_axis_angle:00000000 int32_quat_of_axis_angle
     /tmp/ccQJnp2U.s:2041   .text.int32_quat_of_rmat:00000000 $t
     /tmp/ccQJnp2U.s:2046   .text.int32_quat_of_rmat:00000000 int32_quat_of_rmat
     /tmp/ccQJnp2U.s:2307   .text.int32_quat_of_rmat:00000140 $d
     /tmp/ccQJnp2U.s:2313   .text.int32_eulers_of_rmat:00000000 $t
     /tmp/ccQJnp2U.s:2318   .text.int32_eulers_of_rmat:00000000 int32_eulers_of_rmat
     /tmp/ccQJnp2U.s:2431   .text.int32_eulers_of_rmat:000000a4 $d
     /tmp/ccQJnp2U.s:2437   .text.int32_eulers_of_quat:00000000 $t
     /tmp/ccQJnp2U.s:2442   .text.int32_eulers_of_quat:00000000 int32_eulers_of_quat
     /tmp/ccQJnp2U.s:2625   .text.int32_eulers_of_quat:0000010c $d
     /tmp/ccQJnp2U.s:2631   .text.int32_rates_of_eulers_dot_321:00000000 $t
     /tmp/ccQJnp2U.s:2636   .text.int32_rates_of_eulers_dot_321:00000000 int32_rates_of_eulers_dot_321
     /tmp/ccQJnp2U.s:2734   .text.int32_eulers_dot_321_of_rates:00000000 $t
     /tmp/ccQJnp2U.s:2739   .text.int32_eulers_dot_321_of_rates:00000000 int32_eulers_dot_321_of_rates
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.7f506cdee5614e5fae524d20989ad8c8
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.stddef.h.263.49e44f5ee9cdd8820580fc4aa239e32a
                           .group:00000000 wm4.inttypes.h.23.a096771aacee9aba4b33c2d04aacc9b1
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4._ansi.h.13.1b5575dc7921a4c0cff7dbaa2f33e670
                           .group:00000000 wm4.stddef.h.39.2b75ea897b59bf67f50e970d678806e4
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.math.h.35.ad242c9287d2217c7d2035216e5d04ca
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_trig_int.h.28.b756be608c9d9f3092a41321446e5fa2
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.pprz_algebra_int.h.68.04ac162ae1e1d94f716d0bb402062624

UNDEFINED SYMBOLS
pprz_itrig_sin
pprz_itrig_cos
lldiv
__aeabi_i2d
__aeabi_dadd
__aeabi_d2iz
atan2f
asinf
__aeabi_ldivmod
