   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"autopilot.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.send_airspeed,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	send_airspeed:
  25              	.LFB469:
  26              		.file 1 "firmwares/fixedwing/autopilot.c"
   1:firmwares/fixedwing/autopilot.c **** /*
   2:firmwares/fixedwing/autopilot.c ****  * Copyright (C) 2012 Gautier Hattenberger
   3:firmwares/fixedwing/autopilot.c ****  *
   4:firmwares/fixedwing/autopilot.c ****  * This file is part of paparazzi.
   5:firmwares/fixedwing/autopilot.c ****  *
   6:firmwares/fixedwing/autopilot.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:firmwares/fixedwing/autopilot.c ****  * it under the terms of the GNU General Public License as published by
   8:firmwares/fixedwing/autopilot.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:firmwares/fixedwing/autopilot.c ****  * any later version.
  10:firmwares/fixedwing/autopilot.c ****  *
  11:firmwares/fixedwing/autopilot.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:firmwares/fixedwing/autopilot.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:firmwares/fixedwing/autopilot.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:firmwares/fixedwing/autopilot.c ****  * GNU General Public License for more details.
  15:firmwares/fixedwing/autopilot.c ****  *
  16:firmwares/fixedwing/autopilot.c ****  * You should have received a copy of the GNU General Public License
  17:firmwares/fixedwing/autopilot.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:firmwares/fixedwing/autopilot.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:firmwares/fixedwing/autopilot.c ****  * Boston, MA 02111-1307, USA.
  20:firmwares/fixedwing/autopilot.c ****  */
  21:firmwares/fixedwing/autopilot.c **** 
  22:firmwares/fixedwing/autopilot.c **** /**
  23:firmwares/fixedwing/autopilot.c ****  * @file firmwares/fixedwing/autopilot.c
  24:firmwares/fixedwing/autopilot.c ****  *
  25:firmwares/fixedwing/autopilot.c ****  * Fixedwing autopilot inititalization.
  26:firmwares/fixedwing/autopilot.c ****  *
  27:firmwares/fixedwing/autopilot.c ****  */
  28:firmwares/fixedwing/autopilot.c **** 
  29:firmwares/fixedwing/autopilot.c **** #include "firmwares/fixedwing/autopilot.h"
  30:firmwares/fixedwing/autopilot.c **** 
  31:firmwares/fixedwing/autopilot.c **** #include "state.h"
  32:firmwares/fixedwing/autopilot.c **** #include "firmwares/fixedwing/nav.h"
  33:firmwares/fixedwing/autopilot.c **** 
  34:firmwares/fixedwing/autopilot.c **** #ifdef POWER_SWITCH_GPIO
  35:firmwares/fixedwing/autopilot.c **** #include "mcu_periph/gpio.h"
  36:firmwares/fixedwing/autopilot.c **** #endif
  37:firmwares/fixedwing/autopilot.c **** 
  38:firmwares/fixedwing/autopilot.c **** #include "pprz_version.h"
  39:firmwares/fixedwing/autopilot.c **** 
  40:firmwares/fixedwing/autopilot.c **** uint8_t pprz_mode;
  41:firmwares/fixedwing/autopilot.c **** bool_t kill_throttle;
  42:firmwares/fixedwing/autopilot.c **** uint8_t  mcu1_status;
  43:firmwares/fixedwing/autopilot.c **** 
  44:firmwares/fixedwing/autopilot.c **** bool_t launch;
  45:firmwares/fixedwing/autopilot.c **** 
  46:firmwares/fixedwing/autopilot.c **** /** flight time in seconds. */
  47:firmwares/fixedwing/autopilot.c **** uint16_t autopilot_flight_time;
  48:firmwares/fixedwing/autopilot.c **** 
  49:firmwares/fixedwing/autopilot.c **** uint8_t lateral_mode;
  50:firmwares/fixedwing/autopilot.c **** 
  51:firmwares/fixedwing/autopilot.c **** uint16_t vsupply;
  52:firmwares/fixedwing/autopilot.c **** int32_t current;
  53:firmwares/fixedwing/autopilot.c **** float energy;
  54:firmwares/fixedwing/autopilot.c **** 
  55:firmwares/fixedwing/autopilot.c **** bool_t gps_lost;
  56:firmwares/fixedwing/autopilot.c **** 
  57:firmwares/fixedwing/autopilot.c **** bool_t power_switch;
  58:firmwares/fixedwing/autopilot.c **** 
  59:firmwares/fixedwing/autopilot.c **** #if PERIODIC_TELEMETRY
  60:firmwares/fixedwing/autopilot.c **** #include "subsystems/datalink/telemetry.h"
  61:firmwares/fixedwing/autopilot.c **** #include "generated/settings.h"
  62:firmwares/fixedwing/autopilot.c **** 
  63:firmwares/fixedwing/autopilot.c **** void send_autopilot_version(struct transport_tx *trans, struct link_device *dev)
  64:firmwares/fixedwing/autopilot.c **** {
  65:firmwares/fixedwing/autopilot.c ****   static uint32_t ap_version = PPRZ_VERSION_INT;
  66:firmwares/fixedwing/autopilot.c ****   static char *ver_desc = PPRZ_VERSION_DESC;
  67:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_AUTOPILOT_VERSION(trans, dev, AC_ID, &ap_version, strlen(ver_desc), ver_desc);
  68:firmwares/fixedwing/autopilot.c **** }
  69:firmwares/fixedwing/autopilot.c **** 
  70:firmwares/fixedwing/autopilot.c **** static void send_alive(struct transport_tx *trans, struct link_device *dev)
  71:firmwares/fixedwing/autopilot.c **** {
  72:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ALIVE(trans, dev, AC_ID, 16, MD5SUM);
  73:firmwares/fixedwing/autopilot.c **** }
  74:firmwares/fixedwing/autopilot.c **** 
  75:firmwares/fixedwing/autopilot.c **** #if defined RADIO_CALIB && defined RADIO_CONTROL_SETTINGS
  76:firmwares/fixedwing/autopilot.c **** #include "rc_settings.h"
  77:firmwares/fixedwing/autopilot.c **** static void send_rc_settings(struct transport_tx *trans, struct link_device *dev)
  78:firmwares/fixedwing/autopilot.c **** {
  79:firmwares/fixedwing/autopilot.c ****   if (!RcSettingsOff()) {
  80:firmwares/fixedwing/autopilot.c ****     pprz_msg_send_SETTINGS(trans, dev, AC_ID, &slider_1_val, &slider_2_val);
  81:firmwares/fixedwing/autopilot.c ****   }
  82:firmwares/fixedwing/autopilot.c **** }
  83:firmwares/fixedwing/autopilot.c **** #else
  84:firmwares/fixedwing/autopilot.c **** uint8_t rc_settings_mode = 0;
  85:firmwares/fixedwing/autopilot.c **** #endif
  86:firmwares/fixedwing/autopilot.c **** 
  87:firmwares/fixedwing/autopilot.c **** static void send_mode(struct transport_tx *trans, struct link_device *dev)
  88:firmwares/fixedwing/autopilot.c **** {
  89:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_PPRZ_MODE(trans, dev, AC_ID,
  90:firmwares/fixedwing/autopilot.c ****                           &pprz_mode, &v_ctl_mode, &lateral_mode, &horizontal_mode, &rc_settings_mo
  91:firmwares/fixedwing/autopilot.c **** }
  92:firmwares/fixedwing/autopilot.c **** 
  93:firmwares/fixedwing/autopilot.c **** static void send_attitude(struct transport_tx *trans, struct link_device *dev)
  94:firmwares/fixedwing/autopilot.c **** {
  95:firmwares/fixedwing/autopilot.c ****   struct FloatEulers *att = stateGetNedToBodyEulers_f();
  96:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ATTITUDE(trans, dev, AC_ID,
  97:firmwares/fixedwing/autopilot.c ****                          &(att->phi), &(att->psi), &(att->theta));
  98:firmwares/fixedwing/autopilot.c **** };
  99:firmwares/fixedwing/autopilot.c **** 
 100:firmwares/fixedwing/autopilot.c **** static void send_estimator(struct transport_tx *trans, struct link_device *dev)
 101:firmwares/fixedwing/autopilot.c **** {
 102:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ESTIMATOR(trans, dev, AC_ID,
 103:firmwares/fixedwing/autopilot.c ****                           &(stateGetPositionUtm_f()->alt), &(stateGetSpeedEnu_f()->z));
 104:firmwares/fixedwing/autopilot.c **** }
 105:firmwares/fixedwing/autopilot.c **** 
 106:firmwares/fixedwing/autopilot.c **** static void send_bat(struct transport_tx *trans, struct link_device *dev)
 107:firmwares/fixedwing/autopilot.c **** {
 108:firmwares/fixedwing/autopilot.c ****   int16_t amps = (int16_t)(current / 10);
 109:firmwares/fixedwing/autopilot.c ****   int16_t e = energy;
 110:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_BAT(trans, dev, AC_ID,
 111:firmwares/fixedwing/autopilot.c ****                     &v_ctl_throttle_slewed, &vsupply, &amps,
 112:firmwares/fixedwing/autopilot.c ****                     &autopilot_flight_time, (uint8_t *)(&kill_throttle),
 113:firmwares/fixedwing/autopilot.c ****                     &block_time, &stage_time, &e);
 114:firmwares/fixedwing/autopilot.c **** }
 115:firmwares/fixedwing/autopilot.c **** 
 116:firmwares/fixedwing/autopilot.c **** static void send_energy(struct transport_tx *trans, struct link_device *dev)
 117:firmwares/fixedwing/autopilot.c **** {
 118:firmwares/fixedwing/autopilot.c ****   uint16_t e = energy;
 119:firmwares/fixedwing/autopilot.c ****   float vsup = ((float)vsupply) / 10.0f;
 120:firmwares/fixedwing/autopilot.c ****   float curs = ((float)current) / 1000.0f;
 121:firmwares/fixedwing/autopilot.c ****   float power = vsup * curs;
 122:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ENERGY(trans, dev, AC_ID, &vsup, &curs, &e, &power);
 123:firmwares/fixedwing/autopilot.c **** }
 124:firmwares/fixedwing/autopilot.c **** 
 125:firmwares/fixedwing/autopilot.c **** static void send_dl_value(struct transport_tx *trans, struct link_device *dev)
 126:firmwares/fixedwing/autopilot.c **** {
 127:firmwares/fixedwing/autopilot.c ****   PeriodicSendDlValue(trans, dev);
 128:firmwares/fixedwing/autopilot.c **** }
 129:firmwares/fixedwing/autopilot.c **** 
 130:firmwares/fixedwing/autopilot.c **** // FIXME not the best place
 131:firmwares/fixedwing/autopilot.c **** #include "firmwares/fixedwing/stabilization/stabilization_attitude.h"
 132:firmwares/fixedwing/autopilot.c **** #include CTRL_TYPE_H
 133:firmwares/fixedwing/autopilot.c **** static void send_desired(struct transport_tx *trans, struct link_device *dev)
 134:firmwares/fixedwing/autopilot.c **** {
 135:firmwares/fixedwing/autopilot.c **** #ifndef USE_AIRSPEED
 136:firmwares/fixedwing/autopilot.c ****   float v_ctl_auto_airspeed_setpoint = NOMINAL_AIRSPEED;
 137:firmwares/fixedwing/autopilot.c **** #endif
 138:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_DESIRED(trans, dev, AC_ID,
 139:firmwares/fixedwing/autopilot.c ****                         &h_ctl_roll_setpoint, &h_ctl_pitch_loop_setpoint, &h_ctl_course_setpoint,
 140:firmwares/fixedwing/autopilot.c ****                         &desired_x, &desired_y, &v_ctl_altitude_setpoint, &v_ctl_climb_setpoint,
 141:firmwares/fixedwing/autopilot.c ****                         &v_ctl_auto_airspeed_setpoint);
 142:firmwares/fixedwing/autopilot.c **** }
 143:firmwares/fixedwing/autopilot.c **** 
 144:firmwares/fixedwing/autopilot.c **** static void send_airspeed(struct transport_tx *trans __attribute__((unused)),
 145:firmwares/fixedwing/autopilot.c ****                           struct link_device *dev __attribute__((unused)))
 146:firmwares/fixedwing/autopilot.c **** {
  27              		.loc 1 146 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  33              		.cfi_def_cfa_offset 40
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
 147:firmwares/fixedwing/autopilot.c **** #if USE_AIRSPEED
 148:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_AIRSPEED(trans, dev, AC_ID,
 149:firmwares/fixedwing/autopilot.c ****                          stateGetAirspeed_f(), &v_ctl_auto_airspeed_setpoint,
 150:firmwares/fixedwing/autopilot.c ****                          &v_ctl_auto_airspeed_controlled, &v_ctl_auto_groundspeed_setpoint);
 151:firmwares/fixedwing/autopilot.c **** #else
 152:firmwares/fixedwing/autopilot.c ****   float zero = 0;
  40              		.loc 1 152 0
  41 0004 0023     		movs	r3, #0
  42 0006 0393     		str	r3, [sp, #12]	@ float
  43              	.LBB6:
  44              	.LBB7:
  45              		.file 2 "./state.h"
   1:./state.h     **** /*
   2:./state.h     ****  * Copyright (C) 2011-2012 Felix Ruess <felix.ruess@gmail.com>
   3:./state.h     ****  *
   4:./state.h     ****  * This file is part of paparazzi.
   5:./state.h     ****  *
   6:./state.h     ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./state.h     ****  * it under the terms of the GNU General Public License as published by
   8:./state.h     ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./state.h     ****  * any later version.
  10:./state.h     ****  *
  11:./state.h     ****  * paparazzi is distributed in the hope that it will be useful,
  12:./state.h     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./state.h     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./state.h     ****  * GNU General Public License for more details.
  15:./state.h     ****  *
  16:./state.h     ****  * You should have received a copy of the GNU General Public License
  17:./state.h     ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./state.h     ****  * <http://www.gnu.org/licenses/>.
  19:./state.h     ****  */
  20:./state.h     **** 
  21:./state.h     **** /**
  22:./state.h     ****  * @file state.h
  23:./state.h     ****  *
  24:./state.h     ****  * API to get/set the generic vehicle states.
  25:./state.h     ****  *
  26:./state.h     ****  * Also see the @ref state_interface "State Interface" page.
  27:./state.h     ****  *
  28:./state.h     ****  * @author Felix Ruess <felix.ruess@gmail.com>
  29:./state.h     ****  */
  30:./state.h     **** 
  31:./state.h     **** #ifndef STATE_H
  32:./state.h     **** #define STATE_H
  33:./state.h     **** 
  34:./state.h     **** #include "math/pprz_algebra_int.h"
  35:./state.h     **** #include "math/pprz_algebra_float.h"
  36:./state.h     **** #include "math/pprz_geodetic_int.h"
  37:./state.h     **** #include "math/pprz_geodetic_float.h"
  38:./state.h     **** #include "math/pprz_orientation_conversion.h"
  39:./state.h     **** 
  40:./state.h     **** #include "std.h"
  41:./state.h     **** #include <string.h>
  42:./state.h     **** 
  43:./state.h     **** /**
  44:./state.h     ****  * This general state interface holds all the most important vehicle states like
  45:./state.h     ****  * position, velocity, attitude, etc. It handles coordinate system and
  46:./state.h     ****  * fixed-/floating-point conversion on the fly when needed.
  47:./state.h     ****  *
  48:./state.h     ****  * You can set e.g. the position in any coordinate system you wish:
  49:./state.h     ****  * stateSetPositionNed_i() to set the position in fixed-point NED coordinates.
  50:./state.h     ****  * If you need to read the position somewhere else in a different representation,
  51:./state.h     ****  * call: stateGetPositionLla_f() and only then the LLA float position representation
  52:./state.h     ****  * is calculated on the fly and returned. It's also only calculated once,
  53:./state.h     ****  * until a new position is set which invalidates all the other representations again.
  54:./state.h     ****  */
  55:./state.h     **** 
  56:./state.h     **** /**
  57:./state.h     ****  * @defgroup state_interface State interface
  58:./state.h     ****  * @{
  59:./state.h     ****  */
  60:./state.h     **** 
  61:./state.h     **** /**
  62:./state.h     ****  * @defgroup state_position Position representations
  63:./state.h     ****  * @{
  64:./state.h     ****  */
  65:./state.h     **** #define POS_ECEF_I 0
  66:./state.h     **** #define POS_NED_I  1
  67:./state.h     **** #define POS_ENU_I  2
  68:./state.h     **** #define POS_LLA_I  3
  69:./state.h     **** #define POS_UTM_I  4
  70:./state.h     **** #define POS_ECEF_F 5
  71:./state.h     **** #define POS_NED_F  6
  72:./state.h     **** #define POS_ENU_F  7
  73:./state.h     **** #define POS_LLA_F  8
  74:./state.h     **** #define POS_UTM_F  9
  75:./state.h     **** #define POS_LOCAL_COORD ((1<<POS_NED_I)|(1<<POS_NED_F)|(1<<POS_ENU_I)|(1<<POS_ENU_F))
  76:./state.h     **** #define POS_GLOBAL_COORD ((1<<POS_ECEF_I)|(1<<POS_ECEF_F)|(1<<POS_LLA_I)|(1<<POS_LLA_F)|(1<<POS_UTM
  77:./state.h     **** /**@}*/
  78:./state.h     **** 
  79:./state.h     **** /**
  80:./state.h     ****  * @defgroup state_velocity Speed representations
  81:./state.h     ****  * @{
  82:./state.h     ****  */
  83:./state.h     **** #define SPEED_ECEF_I  0
  84:./state.h     **** #define SPEED_NED_I   1
  85:./state.h     **** #define SPEED_ENU_I   2
  86:./state.h     **** #define SPEED_HNORM_I 3
  87:./state.h     **** #define SPEED_HDIR_I  4
  88:./state.h     **** #define SPEED_ECEF_F  5
  89:./state.h     **** #define SPEED_NED_F   6
  90:./state.h     **** #define SPEED_ENU_F   7
  91:./state.h     **** #define SPEED_HNORM_F 8
  92:./state.h     **** #define SPEED_HDIR_F  9
  93:./state.h     **** #define SPEED_LOCAL_COORD ((1<<SPEED_NED_I)|(1<<SPEED_ENU_I)|(1<<SPEED_NED_F)|(1<<SPEED_ENU_F))
  94:./state.h     **** /**@}*/
  95:./state.h     **** 
  96:./state.h     **** /**
  97:./state.h     ****  * @defgroup state_acceleration Acceleration representations
  98:./state.h     ****  * @{
  99:./state.h     ****  */
 100:./state.h     **** #define ACCEL_ECEF_I 0
 101:./state.h     **** #define ACCEL_NED_I  1
 102:./state.h     **** #define ACCEL_ECEF_F 2
 103:./state.h     **** #define ACCEL_NED_F  3
 104:./state.h     **** /**@}*/
 105:./state.h     **** 
 106:./state.h     **** /**
 107:./state.h     ****  * @defgroup state_rate Angular rate representations
 108:./state.h     ****  * @{
 109:./state.h     ****  */
 110:./state.h     **** #define RATE_I 0
 111:./state.h     **** #define RATE_F 1
 112:./state.h     **** /**@}*/
 113:./state.h     **** 
 114:./state.h     **** /**
 115:./state.h     ****  * @defgroup state_wind_airspeed Wind- and airspeed representations
 116:./state.h     ****  * @{
 117:./state.h     ****  */
 118:./state.h     **** #define WINDSPEED_I 0
 119:./state.h     **** #define AIRSPEED_I  1
 120:./state.h     **** #define WINDSPEED_F 2
 121:./state.h     **** #define AIRSPEED_F  3
 122:./state.h     **** #define AOA_F       4
 123:./state.h     **** #define SIDESLIP_F  5
 124:./state.h     **** /**@}*/
 125:./state.h     **** 
 126:./state.h     **** 
 127:./state.h     **** /**
 128:./state.h     ****  * Structure holding vehicle state data.
 129:./state.h     ****  */
 130:./state.h     **** struct State {
 131:./state.h     **** 
 132:./state.h     ****   /** @addtogroup state_position
 133:./state.h     ****    *  @{ */
 134:./state.h     **** 
 135:./state.h     ****   /**
 136:./state.h     ****    * Holds the status bits for all position representations.
 137:./state.h     ****    * When the corresponding bit is set the representation
 138:./state.h     ****    * is already computed.
 139:./state.h     ****    */
 140:./state.h     ****   uint16_t pos_status;
 141:./state.h     **** 
 142:./state.h     ****   /**
 143:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 144:./state.h     ****    * Units: centimeters
 145:./state.h     ****    */
 146:./state.h     ****   struct EcefCoor_i ecef_pos_i;
 147:./state.h     **** 
 148:./state.h     ****   /**
 149:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 150:./state.h     ****    * Units lat,lon: degrees*1e7
 151:./state.h     ****    * Units alt: milimeters above reference ellipsoid
 152:./state.h     ****    */
 153:./state.h     ****   struct LlaCoor_i lla_pos_i;
 154:./state.h     **** 
 155:./state.h     ****   /**
 156:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 157:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 158:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 159:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 160:./state.h     ****    * (int version)
 161:./state.h     ****    */
 162:./state.h     ****   struct LtpDef_i ned_origin_i;
 163:./state.h     **** 
 164:./state.h     ****   /**
 165:./state.h     ****    * true if local int coordinate frame is initialsed
 166:./state.h     ****    */
 167:./state.h     ****   bool_t ned_initialized_i;
 168:./state.h     **** 
 169:./state.h     ****   /**
 170:./state.h     ****    * Position in North East Down coordinates.
 171:./state.h     ****    * with respect to ned_origin_i (flat earth)
 172:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 173:./state.h     ****    */
 174:./state.h     ****   struct NedCoor_i ned_pos_i;
 175:./state.h     **** 
 176:./state.h     ****   /**
 177:./state.h     ****    * Position in East North Up coordinates.
 178:./state.h     ****    * with respect to ned_origin_i (flat earth)
 179:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 180:./state.h     ****    */
 181:./state.h     ****   struct EnuCoor_i enu_pos_i;
 182:./state.h     **** 
 183:./state.h     ****   /**
 184:./state.h     ****    * Position in UTM coordinates.
 185:./state.h     ****    * Units x,y: meters.
 186:./state.h     ****    * Units z: meters above MSL
 187:./state.h     ****    */
 188:./state.h     ****   struct UtmCoor_f utm_pos_f;
 189:./state.h     **** 
 190:./state.h     ****   /**
 191:./state.h     ****    * Altitude above ground level.
 192:./state.h     ****    * Unit: meters
 193:./state.h     ****    */
 194:./state.h     ****   float alt_agl_f;
 195:./state.h     **** 
 196:./state.h     ****   /**
 197:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 198:./state.h     ****    * Units lat,lon: radians
 199:./state.h     ****    * Units alt: meters above reference ellipsoid
 200:./state.h     ****    */
 201:./state.h     ****   struct LlaCoor_f lla_pos_f;
 202:./state.h     **** 
 203:./state.h     ****   /**
 204:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 205:./state.h     ****    * Units: meters
 206:./state.h     ****    */
 207:./state.h     ****   struct EcefCoor_f ecef_pos_f;
 208:./state.h     **** 
 209:./state.h     ****   /**
 210:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 211:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 212:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 213:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 214:./state.h     ****    * (float version)
 215:./state.h     ****    */
 216:./state.h     ****   struct LtpDef_f ned_origin_f;
 217:./state.h     **** 
 218:./state.h     ****   /// True if local float coordinate frame is initialsed
 219:./state.h     ****   bool_t ned_initialized_f;
 220:./state.h     **** 
 221:./state.h     ****   /**
 222:./state.h     ****    * Definition of the origin of Utm coordinate system.
 223:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 224:./state.h     ****    * in UTM coordinates, used as a reference when ned_origin is not
 225:./state.h     ****    * initialized.
 226:./state.h     ****    * (float version)
 227:./state.h     ****    */
 228:./state.h     ****   struct UtmCoor_f utm_origin_f;
 229:./state.h     **** 
 230:./state.h     ****   /// True if utm origin (float) coordinate frame is initialsed
 231:./state.h     ****   bool_t utm_initialized_f;
 232:./state.h     **** 
 233:./state.h     ****   /**
 234:./state.h     ****    * Position in North East Down coordinates.
 235:./state.h     ****    * with respect to ned_origin_i (flat earth)
 236:./state.h     ****    * Units: meters
 237:./state.h     ****    */
 238:./state.h     ****   struct NedCoor_f ned_pos_f;
 239:./state.h     **** 
 240:./state.h     ****   /**
 241:./state.h     ****    * Position in East North Up coordinates.
 242:./state.h     ****    * with respect to ned_origin_i (flat earth)
 243:./state.h     ****    * Units: meters
 244:./state.h     ****    */
 245:./state.h     ****   struct EnuCoor_f enu_pos_f;
 246:./state.h     ****   /** @}*/
 247:./state.h     **** 
 248:./state.h     **** 
 249:./state.h     ****   /** @addtogroup state_velocity
 250:./state.h     ****    *  @{ */
 251:./state.h     ****   /**
 252:./state.h     ****    * Holds the status bits for all ground speed representations.
 253:./state.h     ****    * When the corresponding bit is one the representation
 254:./state.h     ****    * is already computed.
 255:./state.h     ****    */
 256:./state.h     ****   uint16_t speed_status;
 257:./state.h     **** 
 258:./state.h     ****   /**
 259:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 260:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 261:./state.h     ****    */
 262:./state.h     ****   struct EcefCoor_i ecef_speed_i;
 263:./state.h     **** 
 264:./state.h     ****   /**
 265:./state.h     ****    * Velocity in North East Down coordinates.
 266:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 267:./state.h     ****    */
 268:./state.h     ****   struct NedCoor_i ned_speed_i;
 269:./state.h     **** 
 270:./state.h     ****   /**
 271:./state.h     ****    * Velocity in East North Up coordinates.
 272:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 273:./state.h     ****    */
 274:./state.h     ****   struct EnuCoor_i enu_speed_i;
 275:./state.h     **** 
 276:./state.h     ****   /**
 277:./state.h     ****    * Norm of horizontal ground speed.
 278:./state.h     ****    * Unit: m/s in BFP with #INT32_SPEED_FRAC
 279:./state.h     ****    */
 280:./state.h     ****   uint32_t h_speed_norm_i;
 281:./state.h     **** 
 282:./state.h     ****   /**
 283:./state.h     ****    * Direction of horizontal ground speed.
 284:./state.h     ****    * Unit: rad in BFP with #INT32_ANGLE_FRAC
 285:./state.h     ****    * (clockwise, zero=north)
 286:./state.h     ****    */
 287:./state.h     ****   int32_t h_speed_dir_i;
 288:./state.h     **** 
 289:./state.h     ****   /**
 290:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 291:./state.h     ****    * Units: m/s
 292:./state.h     ****    */
 293:./state.h     ****   struct EcefCoor_f ecef_speed_f;
 294:./state.h     **** 
 295:./state.h     ****   /**
 296:./state.h     ****    * @brief speed in North East Down coordinates
 297:./state.h     ****    * @details Units: m/s */
 298:./state.h     ****   struct NedCoor_f ned_speed_f;
 299:./state.h     **** 
 300:./state.h     ****   /**
 301:./state.h     ****    * Velocity in East North Up coordinates.
 302:./state.h     ****    * Units: m/s
 303:./state.h     ****    */
 304:./state.h     ****   struct EnuCoor_f enu_speed_f;
 305:./state.h     **** 
 306:./state.h     ****   /**
 307:./state.h     ****    * Norm of horizontal ground speed.
 308:./state.h     ****    * Unit: m/s
 309:./state.h     ****    */
 310:./state.h     ****   float h_speed_norm_f;
 311:./state.h     **** 
 312:./state.h     ****   /**
 313:./state.h     ****    * Direction of horizontal ground speed.
 314:./state.h     ****    * Unit: rad (clockwise, zero=north)
 315:./state.h     ****    */
 316:./state.h     ****   float h_speed_dir_f;
 317:./state.h     ****   /** @}*/
 318:./state.h     **** 
 319:./state.h     **** 
 320:./state.h     ****   /** @addtogroup state_acceleration
 321:./state.h     ****    *  @{ */
 322:./state.h     ****   /**
 323:./state.h     ****    * Holds the status bits for all acceleration representations.
 324:./state.h     ****    * When the corresponding bit is one the representation
 325:./state.h     ****    * is already computed.
 326:./state.h     ****    */
 327:./state.h     ****   uint8_t accel_status;
 328:./state.h     **** 
 329:./state.h     ****   /**
 330:./state.h     ****    * Acceleration in North East Down coordinates.
 331:./state.h     ****    * Units: m/s^2 in BFP with #INT32_ACCEL_FRAC
 332:./state.h     ****    */
 333:./state.h     ****   struct NedCoor_i ned_accel_i;
 334:./state.h     **** 
 335:./state.h     ****   /**
 336:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 337:./state.h     ****    * Units: m/s^2 in BFP with INT32_ACCEL_FRAC
 338:./state.h     ****    */
 339:./state.h     ****   struct EcefCoor_i ecef_accel_i;
 340:./state.h     **** 
 341:./state.h     ****   /**
 342:./state.h     ****    * Acceleration in North East Down coordinates.
 343:./state.h     ****    * Units: m/s^2
 344:./state.h     ****    */
 345:./state.h     ****   struct NedCoor_f ned_accel_f;
 346:./state.h     **** 
 347:./state.h     ****   /**
 348:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 349:./state.h     ****    * Units: m/s^2
 350:./state.h     ****    */
 351:./state.h     ****   struct EcefCoor_f ecef_accel_f;
 352:./state.h     ****   /** @}*/
 353:./state.h     **** 
 354:./state.h     **** 
 355:./state.h     ****   /** @defgroup state_attitude Attitude representations
 356:./state.h     ****    */
 357:./state.h     ****   struct OrientationReps ned_to_body_orientation;
 358:./state.h     **** 
 359:./state.h     **** 
 360:./state.h     ****   /** @addtogroup state_rate
 361:./state.h     ****    *  @{ */
 362:./state.h     ****   /**
 363:./state.h     ****    * Holds the status bits for all angular rate representations.
 364:./state.h     ****    * When the corresponding bit is one the representation
 365:./state.h     ****    * is already computed.
 366:./state.h     ****    */
 367:./state.h     ****   uint8_t rate_status;
 368:./state.h     **** 
 369:./state.h     ****   /**
 370:./state.h     ****    * Angular rates in body frame.
 371:./state.h     ****    * Units: rad/s in BFP with #INT32_RATE_FRAC
 372:./state.h     ****    */
 373:./state.h     ****   struct Int32Rates  body_rates_i;
 374:./state.h     **** 
 375:./state.h     ****   /**
 376:./state.h     ****    * Angular rates in body frame.
 377:./state.h     ****    * Units: rad/s
 378:./state.h     ****    */
 379:./state.h     ****   struct FloatRates  body_rates_f;
 380:./state.h     ****   /** @}*/
 381:./state.h     **** 
 382:./state.h     **** 
 383:./state.h     ****   /** @addtogroup state_wind_airspeed
 384:./state.h     ****    *  @{ */
 385:./state.h     ****   /**
 386:./state.h     ****    * Holds the status bits for all wind- and airspeed representations.
 387:./state.h     ****    * When the corresponding bit is one the representation
 388:./state.h     ****    * is already computed.
 389:./state.h     ****    */
 390:./state.h     ****   uint8_t wind_air_status;
 391:./state.h     **** 
 392:./state.h     ****   /**
 393:./state.h     ****    * Horizontal windspeed in north/east.
 394:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 395:./state.h     ****    */
 396:./state.h     ****   struct Int32Vect2 h_windspeed_i;
 397:./state.h     **** 
 398:./state.h     ****   /**
 399:./state.h     ****    * Norm of horizontal ground speed.
 400:./state.h     ****    * @details Unit: m/s in BFP with #INT32_SPEED_FRAC
 401:./state.h     ****    */
 402:./state.h     ****   int32_t airspeed_i;
 403:./state.h     **** 
 404:./state.h     ****   /**
 405:./state.h     ****    * Horizontal windspeed.
 406:./state.h     ****    * Units: m/s with x=north, y=east
 407:./state.h     ****    */
 408:./state.h     ****   struct FloatVect2 h_windspeed_f;
 409:./state.h     **** 
 410:./state.h     ****   /**
 411:./state.h     ****    * Norm of relative air speed.
 412:./state.h     ****    * Unit: m/s
 413:./state.h     ****    */
 414:./state.h     ****   float airspeed_f;
 415:./state.h     **** 
 416:./state.h     ****   /**
 417:./state.h     ****    * Angle of attack
 418:./state.h     ****    * Unit: rad
 419:./state.h     ****    */
 420:./state.h     ****   float angle_of_attack_f;
 421:./state.h     **** 
 422:./state.h     ****   /**
 423:./state.h     ****    * Sideslip angle
 424:./state.h     ****    * Unit: rad
 425:./state.h     ****    */
 426:./state.h     ****   float sideslip_f;
 427:./state.h     **** 
 428:./state.h     ****   /** @}*/
 429:./state.h     **** 
 430:./state.h     **** };
 431:./state.h     **** 
 432:./state.h     **** extern struct State state;
 433:./state.h     **** 
 434:./state.h     **** extern void stateInit(void);
 435:./state.h     **** 
 436:./state.h     **** /** @addtogroup state_position
 437:./state.h     ****  *  @{ */
 438:./state.h     **** 
 439:./state.h     **** /// Set the local (flat earth) coordinate frame origin (int).
 440:./state.h     **** static inline void stateSetLocalOrigin_i(struct LtpDef_i *ltp_def)
 441:./state.h     **** {
 442:./state.h     ****   memcpy(&state.ned_origin_i, ltp_def, sizeof(struct LtpDef_i));
 443:./state.h     ****   /* convert to float */
 444:./state.h     ****   ECEF_FLOAT_OF_BFP(state.ned_origin_f.ecef, state.ned_origin_i.ecef);
 445:./state.h     ****   LLA_FLOAT_OF_BFP(state.ned_origin_f.lla, state.ned_origin_i.lla);
 446:./state.h     ****   HIGH_RES_RMAT_FLOAT_OF_BFP(state.ned_origin_f.ltp_of_ecef, state.ned_origin_i.ltp_of_ecef);
 447:./state.h     ****   state.ned_origin_f.hmsl = M_OF_MM(state.ned_origin_i.hmsl);
 448:./state.h     **** 
 449:./state.h     ****   /* clear bits for all local frame representations */
 450:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 451:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 452:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 453:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 454:./state.h     **** 
 455:./state.h     ****   state.ned_initialized_i = TRUE;
 456:./state.h     ****   state.ned_initialized_f = TRUE;
 457:./state.h     **** }
 458:./state.h     **** 
 459:./state.h     **** /// Set the local (flat earth) coordinate frame origin from UTM (float).
 460:./state.h     **** static inline void stateSetLocalUtmOrigin_f(struct UtmCoor_f *utm_def)
 461:./state.h     **** {
 462:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
 463:./state.h     ****   state.utm_initialized_f = TRUE;
 464:./state.h     **** 
 465:./state.h     ****   /* clear bits for all local frame representations */
 466:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 467:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 468:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 469:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 470:./state.h     **** }
 471:./state.h     **** /*******************************************************************************
 472:./state.h     ****  *                                                                             *
 473:./state.h     ****  * Set and Get functions for the POSITION representations                      *
 474:./state.h     ****  *                                                                             *
 475:./state.h     ****  ******************************************************************************/
 476:./state.h     **** 
 477:./state.h     **** /************* declaration of transformation functions ************/
 478:./state.h     **** extern void stateCalcPositionEcef_i(void);
 479:./state.h     **** extern void stateCalcPositionNed_i(void);
 480:./state.h     **** extern void stateCalcPositionEnu_i(void);
 481:./state.h     **** extern void stateCalcPositionLla_i(void);
 482:./state.h     **** extern void stateCalcPositionUtm_f(void);
 483:./state.h     **** extern void stateCalcPositionEcef_f(void);
 484:./state.h     **** extern void stateCalcPositionNed_f(void);
 485:./state.h     **** extern void stateCalcPositionEnu_f(void);
 486:./state.h     **** extern void stateCalcPositionLla_f(void);
 487:./state.h     **** 
 488:./state.h     **** /*********************** validity test functions ******************/
 489:./state.h     **** 
 490:./state.h     **** /// Test if local coordinates are valid.
 491:./state.h     **** static inline bool_t stateIsLocalCoordinateValid(void)
 492:./state.h     **** {
 493:./state.h     ****   return ((state.ned_initialized_i || state.ned_initialized_f || state.utm_initialized_f)
 494:./state.h     ****           && (state.pos_status & (POS_LOCAL_COORD)));
 495:./state.h     **** }
 496:./state.h     **** 
 497:./state.h     **** /// Test if global coordinates are valid.
 498:./state.h     **** static inline bool_t stateIsGlobalCoordinateValid(void)
 499:./state.h     **** {
 500:./state.h     ****   return ((state.pos_status & (POS_GLOBAL_COORD)) || stateIsLocalCoordinateValid());
 501:./state.h     **** }
 502:./state.h     **** 
 503:./state.h     **** /************************ Set functions ****************************/
 504:./state.h     **** 
 505:./state.h     **** /// Set position from ECEF coordinates (int).
 506:./state.h     **** static inline void stateSetPositionEcef_i(struct EcefCoor_i *ecef_pos)
 507:./state.h     **** {
 508:./state.h     ****   VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 509:./state.h     ****   /* clear bits for all position representations and only set the new one */
 510:./state.h     ****   state.pos_status = (1 << POS_ECEF_I);
 511:./state.h     **** }
 512:./state.h     **** 
 513:./state.h     **** /// Set position from local NED coordinates (int).
 514:./state.h     **** static inline void stateSetPositionNed_i(struct NedCoor_i *ned_pos)
 515:./state.h     **** {
 516:./state.h     ****   VECT3_COPY(state.ned_pos_i, *ned_pos);
 517:./state.h     ****   /* clear bits for all position representations and only set the new one */
 518:./state.h     ****   state.pos_status = (1 << POS_NED_I);
 519:./state.h     **** }
 520:./state.h     **** 
 521:./state.h     **** /// Set position from local ENU coordinates (int).
 522:./state.h     **** static inline void stateSetPositionEnu_i(struct EnuCoor_i *enu_pos)
 523:./state.h     **** {
 524:./state.h     ****   VECT3_COPY(state.enu_pos_i, *enu_pos);
 525:./state.h     ****   /* clear bits for all position representations and only set the new one */
 526:./state.h     ****   state.pos_status = (1 << POS_ENU_I);
 527:./state.h     **** }
 528:./state.h     **** 
 529:./state.h     **** /// Set position from LLA coordinates (int).
 530:./state.h     **** static inline void stateSetPositionLla_i(struct LlaCoor_i *lla_pos)
 531:./state.h     **** {
 532:./state.h     ****   LLA_COPY(state.lla_pos_i, *lla_pos);
 533:./state.h     ****   /* clear bits for all position representations and only set the new one */
 534:./state.h     ****   state.pos_status = (1 << POS_LLA_I);
 535:./state.h     **** }
 536:./state.h     **** 
 537:./state.h     **** /// Set multiple position coordinates (int).
 538:./state.h     **** static inline void stateSetPosition_i(
 539:./state.h     ****   struct EcefCoor_i *ecef_pos,
 540:./state.h     ****   struct NedCoor_i *ned_pos,
 541:./state.h     ****   struct EnuCoor_i *enu_pos,
 542:./state.h     ****   struct LlaCoor_i *lla_pos)
 543:./state.h     **** {
 544:./state.h     ****   /* clear all status bit */
 545:./state.h     ****   state.pos_status = 0;
 546:./state.h     ****   if (ecef_pos != NULL) {
 547:./state.h     ****     VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 548:./state.h     ****     state.pos_status |= (1 << POS_ECEF_I);
 549:./state.h     ****   }
 550:./state.h     ****   if (ned_pos != NULL) {
 551:./state.h     ****     VECT3_COPY(state.ned_pos_i, *ned_pos);
 552:./state.h     ****     state.pos_status |= (1 << POS_NED_I);
 553:./state.h     ****   }
 554:./state.h     ****   if (enu_pos != NULL) {
 555:./state.h     ****     VECT3_COPY(state.enu_pos_i, *enu_pos);
 556:./state.h     ****     state.pos_status |= (1 << POS_ENU_I);
 557:./state.h     ****   }
 558:./state.h     ****   if (lla_pos != NULL) {
 559:./state.h     ****     LLA_COPY(state.lla_pos_i, *lla_pos);
 560:./state.h     ****     state.pos_status |= (1 << POS_LLA_I);
 561:./state.h     ****   }
 562:./state.h     **** }
 563:./state.h     **** 
 564:./state.h     **** /// Set position from UTM coordinates (float).
 565:./state.h     **** static inline void stateSetPositionUtm_f(struct UtmCoor_f *utm_pos)
 566:./state.h     **** {
 567:./state.h     ****   memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 568:./state.h     ****   /* clear bits for all position representations and only set the new one */
 569:./state.h     ****   state.pos_status = (1 << POS_UTM_F);
 570:./state.h     **** }
 571:./state.h     **** 
 572:./state.h     **** /// Set position from ECEF coordinates (float).
 573:./state.h     **** static inline void stateSetPositionEcef_f(struct EcefCoor_f *ecef_pos)
 574:./state.h     **** {
 575:./state.h     ****   VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 576:./state.h     ****   /* clear bits for all position representations and only set the new one */
 577:./state.h     ****   state.pos_status = (1 << POS_ECEF_F);
 578:./state.h     **** }
 579:./state.h     **** 
 580:./state.h     **** /// Set position from local NED coordinates (float).
 581:./state.h     **** static inline void stateSetPositionNed_f(struct NedCoor_f *ned_pos)
 582:./state.h     **** {
 583:./state.h     ****   VECT3_COPY(state.ned_pos_f, *ned_pos);
 584:./state.h     ****   /* clear bits for all position representations and only set the new one */
 585:./state.h     ****   state.pos_status = (1 << POS_NED_F);
 586:./state.h     **** }
 587:./state.h     **** 
 588:./state.h     **** /// Set position from local ENU coordinates (float).
 589:./state.h     **** static inline void stateSetPositionEnu_f(struct EnuCoor_f *enu_pos)
 590:./state.h     **** {
 591:./state.h     ****   VECT3_COPY(state.enu_pos_f, *enu_pos);
 592:./state.h     ****   /* clear bits for all position representations and only set the new one */
 593:./state.h     ****   state.pos_status = (1 << POS_ENU_F);
 594:./state.h     **** }
 595:./state.h     **** 
 596:./state.h     **** /// Set position from LLA coordinates (float).
 597:./state.h     **** static inline void stateSetPositionLla_f(struct LlaCoor_f *lla_pos)
 598:./state.h     **** {
 599:./state.h     ****   LLA_COPY(state.lla_pos_f, *lla_pos);
 600:./state.h     ****   /* clear bits for all position representations and only set the new one */
 601:./state.h     ****   state.pos_status = (1 << POS_LLA_F);
 602:./state.h     **** }
 603:./state.h     **** 
 604:./state.h     **** /// Set multiple position coordinates (float).
 605:./state.h     **** static inline void stateSetPosition_f(
 606:./state.h     ****   struct EcefCoor_f *ecef_pos,
 607:./state.h     ****   struct NedCoor_f *ned_pos,
 608:./state.h     ****   struct EnuCoor_f *enu_pos,
 609:./state.h     ****   struct LlaCoor_f *lla_pos,
 610:./state.h     ****   struct UtmCoor_f *utm_pos)
 611:./state.h     **** {
 612:./state.h     ****   /* clear all status bit */
 613:./state.h     ****   state.pos_status = 0;
 614:./state.h     ****   if (ecef_pos != NULL) {
 615:./state.h     ****     VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 616:./state.h     ****     state.pos_status |= (1 << POS_ECEF_F);
 617:./state.h     ****   }
 618:./state.h     ****   if (ned_pos != NULL) {
 619:./state.h     ****     VECT3_COPY(state.ned_pos_f, *ned_pos);
 620:./state.h     ****     state.pos_status |= (1 << POS_NED_F);
 621:./state.h     ****   }
 622:./state.h     ****   if (enu_pos != NULL) {
 623:./state.h     ****     VECT3_COPY(state.enu_pos_f, *enu_pos);
 624:./state.h     ****     state.pos_status |= (1 << POS_ENU_F);
 625:./state.h     ****   }
 626:./state.h     ****   if (lla_pos != NULL) {
 627:./state.h     ****     LLA_COPY(state.lla_pos_f, *lla_pos);
 628:./state.h     ****     state.pos_status |= (1 << POS_LLA_F);
 629:./state.h     ****   }
 630:./state.h     ****   if (utm_pos != NULL) {
 631:./state.h     ****     memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 632:./state.h     ****     state.pos_status |= (1 << POS_UTM_F);
 633:./state.h     ****   }
 634:./state.h     **** }
 635:./state.h     **** 
 636:./state.h     **** /************************ Get functions ****************************/
 637:./state.h     **** 
 638:./state.h     **** /// Get position in ECEF coordinates (int).
 639:./state.h     **** static inline struct EcefCoor_i *stateGetPositionEcef_i(void)
 640:./state.h     **** {
 641:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_I)) {
 642:./state.h     ****     stateCalcPositionEcef_i();
 643:./state.h     ****   }
 644:./state.h     ****   return &state.ecef_pos_i;
 645:./state.h     **** }
 646:./state.h     **** 
 647:./state.h     **** /// Get position in local NED coordinates (int).
 648:./state.h     **** static inline struct NedCoor_i *stateGetPositionNed_i(void)
 649:./state.h     **** {
 650:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_I)) {
 651:./state.h     ****     stateCalcPositionNed_i();
 652:./state.h     ****   }
 653:./state.h     ****   return &state.ned_pos_i;
 654:./state.h     **** }
 655:./state.h     **** 
 656:./state.h     **** /// Get position in local ENU coordinates (int).
 657:./state.h     **** static inline struct EnuCoor_i *stateGetPositionEnu_i(void)
 658:./state.h     **** {
 659:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_I)) {
 660:./state.h     ****     stateCalcPositionEnu_i();
 661:./state.h     ****   }
 662:./state.h     ****   return &state.enu_pos_i;
 663:./state.h     **** }
 664:./state.h     **** 
 665:./state.h     **** /// Get position in LLA coordinates (int).
 666:./state.h     **** static inline struct LlaCoor_i *stateGetPositionLla_i(void)
 667:./state.h     **** {
 668:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_I)) {
 669:./state.h     ****     stateCalcPositionLla_i();
 670:./state.h     ****   }
 671:./state.h     ****   return &state.lla_pos_i;
 672:./state.h     **** }
 673:./state.h     **** 
 674:./state.h     **** /// Get position in UTM coordinates (float).
 675:./state.h     **** static inline struct UtmCoor_f *stateGetPositionUtm_f(void)
 676:./state.h     **** {
 677:./state.h     ****   if (!bit_is_set(state.pos_status, POS_UTM_F)) {
 678:./state.h     ****     stateCalcPositionUtm_f();
 679:./state.h     ****   }
 680:./state.h     ****   return &state.utm_pos_f;
 681:./state.h     **** }
 682:./state.h     **** 
 683:./state.h     **** /// Get position in ECEF coordinates (float).
 684:./state.h     **** static inline struct EcefCoor_f *stateGetPositionEcef_f(void)
 685:./state.h     **** {
 686:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_F)) {
 687:./state.h     ****     stateCalcPositionEcef_f();
 688:./state.h     ****   }
 689:./state.h     ****   return &state.ecef_pos_f;
 690:./state.h     **** }
 691:./state.h     **** 
 692:./state.h     **** /// Get position in local NED coordinates (float).
 693:./state.h     **** static inline struct NedCoor_f *stateGetPositionNed_f(void)
 694:./state.h     **** {
 695:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_F)) {
 696:./state.h     ****     stateCalcPositionNed_f();
 697:./state.h     ****   }
 698:./state.h     ****   return &state.ned_pos_f;
 699:./state.h     **** }
 700:./state.h     **** 
 701:./state.h     **** /// Get position in local ENU coordinates (float).
 702:./state.h     **** static inline struct EnuCoor_f *stateGetPositionEnu_f(void)
 703:./state.h     **** {
 704:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_F)) {
 705:./state.h     ****     stateCalcPositionEnu_f();
 706:./state.h     ****   }
 707:./state.h     ****   return &state.enu_pos_f;
 708:./state.h     **** }
 709:./state.h     **** 
 710:./state.h     **** /// Get position in LLA coordinates (float).
 711:./state.h     **** static inline struct LlaCoor_f *stateGetPositionLla_f(void)
 712:./state.h     **** {
 713:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_F)) {
 714:./state.h     ****     stateCalcPositionLla_f();
 715:./state.h     ****   }
 716:./state.h     ****   return &state.lla_pos_f;
 717:./state.h     **** }
 718:./state.h     **** 
 719:./state.h     **** /** @}*/
 720:./state.h     **** 
 721:./state.h     **** 
 722:./state.h     **** 
 723:./state.h     **** /******************************************************************************
 724:./state.h     ****  *                                                                            *
 725:./state.h     ****  * Set and Get functions for the SPEED representations                        *
 726:./state.h     ****  *                                                                            *
 727:./state.h     ****  *****************************************************************************/
 728:./state.h     **** /** @addtogroup state_velocity
 729:./state.h     ****  *  @{ */
 730:./state.h     **** 
 731:./state.h     **** /************* declaration of transformation functions ************/
 732:./state.h     **** extern void stateCalcSpeedNed_i(void);
 733:./state.h     **** extern void stateCalcSpeedEnu_i(void);
 734:./state.h     **** extern void stateCalcSpeedEcef_i(void);
 735:./state.h     **** extern void stateCalcHorizontalSpeedNorm_i(void);
 736:./state.h     **** extern void stateCalcHorizontalSpeedDir_i(void);
 737:./state.h     **** extern void stateCalcSpeedNed_f(void);
 738:./state.h     **** extern void stateCalcSpeedEnu_f(void);
 739:./state.h     **** extern void stateCalcSpeedEcef_f(void);
 740:./state.h     **** extern void stateCalcHorizontalSpeedNorm_f(void);
 741:./state.h     **** extern void stateCalcHorizontalSpeedDir_f(void);
 742:./state.h     **** 
 743:./state.h     **** /************************ Set functions ****************************/
 744:./state.h     **** 
 745:./state.h     **** /// Set ground speed in local NED coordinates (int).
 746:./state.h     **** static inline void stateSetSpeedNed_i(struct NedCoor_i *ned_speed)
 747:./state.h     **** {
 748:./state.h     ****   VECT3_COPY(state.ned_speed_i, *ned_speed);
 749:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 750:./state.h     ****   state.speed_status = (1 << SPEED_NED_I);
 751:./state.h     **** }
 752:./state.h     **** 
 753:./state.h     **** /// Set ground speed in local ENU coordinates (int).
 754:./state.h     **** static inline void stateSetSpeedEnu_i(struct EnuCoor_i *enu_speed)
 755:./state.h     **** {
 756:./state.h     ****   VECT3_COPY(state.enu_speed_i, *enu_speed);
 757:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 758:./state.h     ****   state.speed_status = (1 << SPEED_ENU_I);
 759:./state.h     **** }
 760:./state.h     **** 
 761:./state.h     **** /// Set ground speed in ECEF coordinates (int).
 762:./state.h     **** static inline void stateSetSpeedEcef_i(struct EcefCoor_i *ecef_speed)
 763:./state.h     **** {
 764:./state.h     ****   VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 765:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 766:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_I);
 767:./state.h     **** }
 768:./state.h     **** 
 769:./state.h     **** /// Set multiple speed coordinates (int).
 770:./state.h     **** static inline void stateSetSpeed_i(
 771:./state.h     ****   struct EcefCoor_i *ecef_speed,
 772:./state.h     ****   struct NedCoor_i *ned_speed,
 773:./state.h     ****   struct EnuCoor_i *enu_speed)
 774:./state.h     **** {
 775:./state.h     ****   /* clear all status bit */
 776:./state.h     ****   state.speed_status = 0;
 777:./state.h     ****   if (ecef_speed != NULL) {
 778:./state.h     ****     VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 779:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_I);
 780:./state.h     ****   }
 781:./state.h     ****   if (ned_speed != NULL) {
 782:./state.h     ****     VECT3_COPY(state.ned_speed_i, *ned_speed);
 783:./state.h     ****     state.speed_status |= (1 << SPEED_NED_I);
 784:./state.h     ****   }
 785:./state.h     ****   if (enu_speed != NULL) {
 786:./state.h     ****     VECT3_COPY(state.enu_speed_i, *enu_speed);
 787:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_I);
 788:./state.h     ****   }
 789:./state.h     **** }
 790:./state.h     **** 
 791:./state.h     **** /// Set ground speed in local NED coordinates (float).
 792:./state.h     **** static inline void stateSetSpeedNed_f(struct NedCoor_f *ned_speed)
 793:./state.h     **** {
 794:./state.h     ****   VECT3_COPY(state.ned_speed_f, *ned_speed);
 795:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 796:./state.h     ****   state.speed_status = (1 << SPEED_NED_F);
 797:./state.h     **** }
 798:./state.h     **** 
 799:./state.h     **** /// Set ground speed in local ENU coordinates (float).
 800:./state.h     **** static inline void stateSetSpeedEnu_f(struct EnuCoor_f *enu_speed)
 801:./state.h     **** {
 802:./state.h     ****   VECT3_COPY(state.enu_speed_f, *enu_speed);
 803:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 804:./state.h     ****   state.speed_status = (1 << SPEED_ENU_F);
 805:./state.h     **** }
 806:./state.h     **** 
 807:./state.h     **** /// Set ground speed in ECEF coordinates (float).
 808:./state.h     **** static inline void stateSetSpeedEcef_f(struct EcefCoor_f *ecef_speed)
 809:./state.h     **** {
 810:./state.h     ****   VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 811:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 812:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_F);
 813:./state.h     **** }
 814:./state.h     **** 
 815:./state.h     **** /// Set multiple speed coordinates (float).
 816:./state.h     **** static inline void stateSetSpeed_f(
 817:./state.h     ****   struct EcefCoor_f *ecef_speed,
 818:./state.h     ****   struct NedCoor_f *ned_speed,
 819:./state.h     ****   struct EnuCoor_f *enu_speed)
 820:./state.h     **** {
 821:./state.h     ****   /* clear all status bit */
 822:./state.h     ****   state.speed_status = 0;
 823:./state.h     ****   if (ecef_speed != NULL) {
 824:./state.h     ****     VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 825:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_F);
 826:./state.h     ****   }
 827:./state.h     ****   if (ned_speed != NULL) {
 828:./state.h     ****     VECT3_COPY(state.ned_speed_f, *ned_speed);
 829:./state.h     ****     state.speed_status |= (1 << SPEED_NED_F);
 830:./state.h     ****   }
 831:./state.h     ****   if (enu_speed != NULL) {
 832:./state.h     ****     VECT3_COPY(state.enu_speed_f, *enu_speed);
 833:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_F);
 834:./state.h     ****   }
 835:./state.h     **** }
 836:./state.h     **** 
 837:./state.h     **** /************************ Get functions ****************************/
 838:./state.h     **** 
 839:./state.h     **** /// Get ground speed in local NED coordinates (int).
 840:./state.h     **** static inline struct NedCoor_i *stateGetSpeedNed_i(void)
 841:./state.h     **** {
 842:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_I)) {
 843:./state.h     ****     stateCalcSpeedNed_i();
 844:./state.h     ****   }
 845:./state.h     ****   return &state.ned_speed_i;
 846:./state.h     **** }
 847:./state.h     **** 
 848:./state.h     **** /// Get ground speed in local ENU coordinates (int).
 849:./state.h     **** static inline struct EnuCoor_i *stateGetSpeedEnu_i(void)
 850:./state.h     **** {
 851:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_I)) {
 852:./state.h     ****     stateCalcSpeedEnu_i();
 853:./state.h     ****   }
 854:./state.h     ****   return &state.enu_speed_i;
 855:./state.h     **** }
 856:./state.h     **** 
 857:./state.h     **** /// Get ground speed in ECEF coordinates (int).
 858:./state.h     **** static inline struct EcefCoor_i *stateGetSpeedEcef_i(void)
 859:./state.h     **** {
 860:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_I)) {
 861:./state.h     ****     stateCalcSpeedEcef_i();
 862:./state.h     ****   }
 863:./state.h     ****   return &state.ecef_speed_i;
 864:./state.h     **** }
 865:./state.h     **** 
 866:./state.h     **** /// Get norm of horizontal ground speed (int).
 867:./state.h     **** static inline uint32_t *stateGetHorizontalSpeedNorm_i(void)
 868:./state.h     **** {
 869:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_I)) {
 870:./state.h     ****     stateCalcHorizontalSpeedNorm_i();
 871:./state.h     ****   }
 872:./state.h     ****   return &state.h_speed_norm_i;
 873:./state.h     **** }
 874:./state.h     **** 
 875:./state.h     **** /// Get dir of horizontal ground speed (int).
 876:./state.h     **** static inline int32_t *stateGetHorizontalSpeedDir_i(void)
 877:./state.h     **** {
 878:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_I)) {
 879:./state.h     ****     stateCalcHorizontalSpeedDir_i();
 880:./state.h     ****   }
 881:./state.h     ****   return &state.h_speed_dir_i;
 882:./state.h     **** }
 883:./state.h     **** 
 884:./state.h     **** /// Get ground speed in local NED coordinates (float).
 885:./state.h     **** static inline struct NedCoor_f *stateGetSpeedNed_f(void)
 886:./state.h     **** {
 887:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_F)) {
 888:./state.h     ****     stateCalcSpeedNed_f();
 889:./state.h     ****   }
 890:./state.h     ****   return &state.ned_speed_f;
 891:./state.h     **** }
 892:./state.h     **** 
 893:./state.h     **** /// Get ground speed in local ENU coordinates (float).
 894:./state.h     **** static inline struct EnuCoor_f *stateGetSpeedEnu_f(void)
 895:./state.h     **** {
 896:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_F)) {
 897:./state.h     ****     stateCalcSpeedEnu_f();
 898:./state.h     ****   }
 899:./state.h     ****   return &state.enu_speed_f;
 900:./state.h     **** }
 901:./state.h     **** 
 902:./state.h     **** /// Get ground speed in ECEF coordinates (float).
 903:./state.h     **** static inline struct EcefCoor_f *stateGetSpeedEcef_f(void)
 904:./state.h     **** {
 905:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_F)) {
 906:./state.h     ****     stateCalcSpeedEcef_f();
 907:./state.h     ****   }
 908:./state.h     ****   return &state.ecef_speed_f;
 909:./state.h     **** }
 910:./state.h     **** 
 911:./state.h     **** /// Get norm of horizontal ground speed (float).
 912:./state.h     **** static inline float *stateGetHorizontalSpeedNorm_f(void)
 913:./state.h     **** {
 914:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_F)) {
 915:./state.h     ****     stateCalcHorizontalSpeedNorm_f();
 916:./state.h     ****   }
 917:./state.h     ****   return &state.h_speed_norm_f;
 918:./state.h     **** }
 919:./state.h     **** 
 920:./state.h     **** /// Get dir of horizontal ground speed (float).
 921:./state.h     **** static inline float *stateGetHorizontalSpeedDir_f(void)
 922:./state.h     **** {
 923:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_F)) {
 924:./state.h     ****     stateCalcHorizontalSpeedDir_f();
 925:./state.h     ****   }
 926:./state.h     ****   return &state.h_speed_dir_f;
 927:./state.h     **** }
 928:./state.h     **** /** @}*/
 929:./state.h     **** 
 930:./state.h     **** 
 931:./state.h     **** 
 932:./state.h     **** /******************************************************************************
 933:./state.h     ****  *                                                                            *
 934:./state.h     ****  * Set and Get functions for the ACCELERATION representations                 *
 935:./state.h     ****  *                                                                            *
 936:./state.h     ****  *****************************************************************************/
 937:./state.h     **** /** @addtogroup state_acceleration
 938:./state.h     ****  *  @{ */
 939:./state.h     **** 
 940:./state.h     **** /************* declaration of transformation functions ************/
 941:./state.h     **** extern void stateCalcAccelNed_i(void);
 942:./state.h     **** extern void stateCalcAccelEcef_i(void);
 943:./state.h     **** extern void stateCalcAccelNed_f(void);
 944:./state.h     **** extern void stateCalcAccelEcef_f(void);
 945:./state.h     **** 
 946:./state.h     **** /*********************** validity test functions ******************/
 947:./state.h     **** 
 948:./state.h     **** /// Test if accelerations are valid.
 949:./state.h     **** static inline bool_t stateIsAccelValid(void)
 950:./state.h     **** {
 951:./state.h     ****   return (state.accel_status);
 952:./state.h     **** }
 953:./state.h     **** 
 954:./state.h     **** /************************ Set functions ****************************/
 955:./state.h     **** 
 956:./state.h     **** /// Set acceleration in NED coordinates (int).
 957:./state.h     **** static inline void stateSetAccelNed_i(struct NedCoor_i *ned_accel)
 958:./state.h     **** {
 959:./state.h     ****   VECT3_COPY(state.ned_accel_i, *ned_accel);
 960:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 961:./state.h     ****   state.accel_status = (1 << ACCEL_NED_I);
 962:./state.h     **** }
 963:./state.h     **** 
 964:./state.h     **** /// Set acceleration in ECEF coordinates (int).
 965:./state.h     **** static inline void stateSetAccelEcef_i(struct EcefCoor_i *ecef_accel)
 966:./state.h     **** {
 967:./state.h     ****   VECT3_COPY(state.ecef_accel_i, *ecef_accel);
 968:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 969:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_I);
 970:./state.h     **** }
 971:./state.h     **** 
 972:./state.h     **** /// Set acceleration in NED coordinates (float).
 973:./state.h     **** static inline void stateSetAccelNed_f(struct NedCoor_f *ned_accel)
 974:./state.h     **** {
 975:./state.h     ****   VECT3_COPY(state.ned_accel_f, *ned_accel);
 976:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 977:./state.h     ****   state.accel_status = (1 << ACCEL_NED_F);
 978:./state.h     **** }
 979:./state.h     **** 
 980:./state.h     **** /// Set acceleration in ECEF coordinates (float).
 981:./state.h     **** static inline void stateSetAccelEcef_f(struct EcefCoor_f *ecef_accel)
 982:./state.h     **** {
 983:./state.h     ****   VECT3_COPY(state.ecef_accel_f, *ecef_accel);
 984:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 985:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_F);
 986:./state.h     **** }
 987:./state.h     **** 
 988:./state.h     **** /************************ Get functions ****************************/
 989:./state.h     **** 
 990:./state.h     **** /// Get acceleration in NED coordinates (int).
 991:./state.h     **** static inline struct NedCoor_i *stateGetAccelNed_i(void)
 992:./state.h     **** {
 993:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_I)) {
 994:./state.h     ****     stateCalcAccelNed_i();
 995:./state.h     ****   }
 996:./state.h     ****   return &state.ned_accel_i;
 997:./state.h     **** }
 998:./state.h     **** 
 999:./state.h     **** /// Get acceleration in ECEF coordinates (int).
1000:./state.h     **** static inline struct EcefCoor_i *stateGetAccelEcef_i(void)
1001:./state.h     **** {
1002:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_I)) {
1003:./state.h     ****     stateCalcAccelEcef_i();
1004:./state.h     ****   }
1005:./state.h     ****   return &state.ecef_accel_i;
1006:./state.h     **** }
1007:./state.h     **** 
1008:./state.h     **** /// Get acceleration in NED coordinates (float).
1009:./state.h     **** static inline struct NedCoor_f *stateGetAccelNed_f(void)
1010:./state.h     **** {
1011:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_F)) {
1012:./state.h     ****     stateCalcAccelNed_f();
1013:./state.h     ****   }
1014:./state.h     ****   return &state.ned_accel_f;
1015:./state.h     **** }
1016:./state.h     **** 
1017:./state.h     **** /// Get acceleration in ECEF coordinates (float).
1018:./state.h     **** static inline struct EcefCoor_f *stateGetAccelEcef_f(void)
1019:./state.h     **** {
1020:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_F)) {
1021:./state.h     ****     stateCalcAccelEcef_f();
1022:./state.h     ****   }
1023:./state.h     ****   return &state.ecef_accel_f;
1024:./state.h     **** }
1025:./state.h     **** /** @}*/
1026:./state.h     **** 
1027:./state.h     **** /******************************************************************************
1028:./state.h     **** *                                                                             *
1029:./state.h     **** * Set and Get functions for the ATTITUDE representations                      *
1030:./state.h     **** * (Calls the functions in math/pprz_orientation_conversion)                   *
1031:./state.h     **** *                                                                             *
1032:./state.h     **** *****************************************************************************/
1033:./state.h     **** /** @addtogroup state_attitude
1034:./state.h     **** * @{ */
1035:./state.h     **** /*********************** validity test functions ******************/
1036:./state.h     **** 
1037:./state.h     **** /// Test if attitudes are valid.
1038:./state.h     **** static inline bool_t stateIsAttitudeValid(void)
1039:./state.h     **** {
1040:./state.h     ****   return (orienationCheckValid(&state.ned_to_body_orientation));
1041:./state.h     **** }
1042:./state.h     **** 
1043:./state.h     **** /************************ Set functions ****************************/
1044:./state.h     **** 
1045:./state.h     **** /// Set vehicle body attitude from quaternion (int).
1046:./state.h     **** static inline void stateSetNedToBodyQuat_i(struct Int32Quat *ned_to_body_quat)
1047:./state.h     **** {
1048:./state.h     ****   orientationSetQuat_i(&state.ned_to_body_orientation, ned_to_body_quat);
1049:./state.h     **** }
1050:./state.h     **** 
1051:./state.h     **** /// Set vehicle body attitude from rotation matrix (int).
1052:./state.h     **** static inline void stateSetNedToBodyRMat_i(struct Int32RMat *ned_to_body_rmat)
1053:./state.h     **** {
1054:./state.h     ****   orientationSetRMat_i(&state.ned_to_body_orientation, ned_to_body_rmat);
1055:./state.h     **** }
1056:./state.h     **** 
1057:./state.h     **** /// Set vehicle body attitude from euler angles (int).
1058:./state.h     **** static inline void stateSetNedToBodyEulers_i(struct Int32Eulers *ned_to_body_eulers)
1059:./state.h     **** {
1060:./state.h     ****   orientationSetEulers_i(&state.ned_to_body_orientation, ned_to_body_eulers);
1061:./state.h     **** }
1062:./state.h     **** 
1063:./state.h     **** /// Set vehicle body attitude from quaternion (float).
1064:./state.h     **** static inline void stateSetNedToBodyQuat_f(struct FloatQuat *ned_to_body_quat)
1065:./state.h     **** {
1066:./state.h     ****   orientationSetQuat_f(&state.ned_to_body_orientation, ned_to_body_quat);
1067:./state.h     **** }
1068:./state.h     **** 
1069:./state.h     **** /// Set vehicle body attitude from rotation matrix (float).
1070:./state.h     **** static inline void stateSetNedToBodyRMat_f(struct FloatRMat *ned_to_body_rmat)
1071:./state.h     **** {
1072:./state.h     ****   orientationSetRMat_f(&state.ned_to_body_orientation, ned_to_body_rmat);
1073:./state.h     **** }
1074:./state.h     **** 
1075:./state.h     **** /// Set vehicle body attitude from euler angles (float).
1076:./state.h     **** static inline void stateSetNedToBodyEulers_f(struct FloatEulers *ned_to_body_eulers)
1077:./state.h     **** {
1078:./state.h     ****   orientationSetEulers_f(&state.ned_to_body_orientation, ned_to_body_eulers);
1079:./state.h     **** }
1080:./state.h     **** 
1081:./state.h     **** /************************ Get functions ****************************/
1082:./state.h     **** 
1083:./state.h     **** /// Get vehicle body attitude quaternion (int).
1084:./state.h     **** static inline struct Int32Quat *stateGetNedToBodyQuat_i(void)
1085:./state.h     **** {
1086:./state.h     ****   return orientationGetQuat_i(&state.ned_to_body_orientation);
1087:./state.h     **** }
1088:./state.h     **** 
1089:./state.h     **** /// Get vehicle body attitude rotation matrix (int).
1090:./state.h     **** static inline struct Int32RMat *stateGetNedToBodyRMat_i(void)
1091:./state.h     **** {
1092:./state.h     ****   return orientationGetRMat_i(&state.ned_to_body_orientation);
1093:./state.h     **** }
1094:./state.h     **** 
1095:./state.h     **** /// Get vehicle body attitude euler angles (int).
1096:./state.h     **** static inline struct Int32Eulers *stateGetNedToBodyEulers_i(void)
1097:./state.h     **** {
1098:./state.h     ****   return orientationGetEulers_i(&state.ned_to_body_orientation);
1099:./state.h     **** }
1100:./state.h     **** 
1101:./state.h     **** /// Get vehicle body attitude quaternion (float).
1102:./state.h     **** static inline struct FloatQuat *stateGetNedToBodyQuat_f(void)
1103:./state.h     **** {
1104:./state.h     ****   return orientationGetQuat_f(&state.ned_to_body_orientation);
1105:./state.h     **** }
1106:./state.h     **** 
1107:./state.h     **** /// Get vehicle body attitude rotation matrix (float).
1108:./state.h     **** static inline struct FloatRMat *stateGetNedToBodyRMat_f(void)
1109:./state.h     **** {
1110:./state.h     ****   return orientationGetRMat_f(&state.ned_to_body_orientation);
1111:./state.h     **** }
1112:./state.h     **** 
1113:./state.h     **** /// Get vehicle body attitude euler angles (float).
1114:./state.h     **** static inline struct FloatEulers *stateGetNedToBodyEulers_f(void)
1115:./state.h     **** {
1116:./state.h     ****   return orientationGetEulers_f(&state.ned_to_body_orientation);
1117:./state.h     **** }
1118:./state.h     **** /** @}*/
1119:./state.h     **** 
1120:./state.h     **** 
1121:./state.h     **** /******************************************************************************
1122:./state.h     ****  *                                                                            *
1123:./state.h     ****  * Set and Get functions for the ANGULAR RATE representations                 *
1124:./state.h     ****  *                                                                            *
1125:./state.h     ****  *****************************************************************************/
1126:./state.h     **** /** @addtogroup state_rate
1127:./state.h     ****  *  @{ */
1128:./state.h     **** 
1129:./state.h     **** /************* declaration of transformation functions ************/
1130:./state.h     **** extern void stateCalcBodyRates_i(void);
1131:./state.h     **** extern void stateCalcBodyRates_f(void);
1132:./state.h     **** 
1133:./state.h     **** /*********************** validity test functions ******************/
1134:./state.h     **** 
1135:./state.h     **** /// Test if rates are valid.
1136:./state.h     **** static inline bool_t stateIsRateValid(void)
1137:./state.h     **** {
1138:./state.h     ****   return (state.rate_status);
1139:./state.h     **** }
1140:./state.h     **** 
1141:./state.h     **** /************************ Set functions ****************************/
1142:./state.h     **** 
1143:./state.h     **** /// Set vehicle body angular rate (int).
1144:./state.h     **** static inline void stateSetBodyRates_i(struct Int32Rates *body_rate)
1145:./state.h     **** {
1146:./state.h     ****   RATES_COPY(state.body_rates_i, *body_rate);
1147:./state.h     ****   /* clear bits for all attitude representations and only set the new one */
1148:./state.h     ****   state.rate_status = (1 << RATE_I);
1149:./state.h     **** }
1150:./state.h     **** 
1151:./state.h     **** /// Set vehicle body angular rate (float).
1152:./state.h     **** static inline void stateSetBodyRates_f(struct FloatRates *body_rate)
1153:./state.h     **** {
1154:./state.h     ****   RATES_COPY(state.body_rates_f, *body_rate);
1155:./state.h     ****   /* clear bits for all attitude representations and only set the new one */
1156:./state.h     ****   state.rate_status = (1 << RATE_F);
1157:./state.h     **** }
1158:./state.h     **** 
1159:./state.h     **** /************************ Get functions ****************************/
1160:./state.h     **** 
1161:./state.h     **** /// Get vehicle body angular rate (int).
1162:./state.h     **** static inline struct Int32Rates *stateGetBodyRates_i(void)
1163:./state.h     **** {
1164:./state.h     ****   if (!bit_is_set(state.rate_status, RATE_I)) {
1165:./state.h     ****     stateCalcBodyRates_i();
1166:./state.h     ****   }
1167:./state.h     ****   return &state.body_rates_i;
1168:./state.h     **** }
1169:./state.h     **** 
1170:./state.h     **** /// Get vehicle body angular rate (float).
1171:./state.h     **** static inline struct FloatRates *stateGetBodyRates_f(void)
1172:./state.h     **** {
1173:./state.h     ****   if (!bit_is_set(state.rate_status, RATE_F)) {
1174:./state.h     ****     stateCalcBodyRates_f();
1175:./state.h     ****   }
1176:./state.h     ****   return &state.body_rates_f;
1177:./state.h     **** }
1178:./state.h     **** 
1179:./state.h     **** /** @}*/
1180:./state.h     **** 
1181:./state.h     **** 
1182:./state.h     **** 
1183:./state.h     **** /******************************************************************************
1184:./state.h     ****  *                                                                            *
1185:./state.h     ****  * Set and Get functions for the WIND- AND AIRSPEED representations           *
1186:./state.h     ****  *                                                                            *
1187:./state.h     ****  *****************************************************************************/
1188:./state.h     **** /** @addtogroup state_wind_airspeed
1189:./state.h     ****  *  @{ */
1190:./state.h     **** 
1191:./state.h     **** /************* declaration of transformation functions ************/
1192:./state.h     **** extern void stateCalcHorizontalWindspeed_i(void);
1193:./state.h     **** extern void stateCalcAirspeed_i(void);
1194:./state.h     **** extern void stateCalcHorizontalWindspeed_f(void);
1195:./state.h     **** extern void stateCalcAirspeed_f(void);
1196:./state.h     **** 
1197:./state.h     **** 
1198:./state.h     **** /************************ validity test function *******************/
1199:./state.h     **** 
1200:./state.h     **** /// test if wind speed is available.
1201:./state.h     **** static inline bool_t stateIsWindspeedValid(void)
1202:./state.h     **** {
1203:./state.h     ****   return (state.wind_air_status &= ~((1 << WINDSPEED_I) | (1 << WINDSPEED_F)));
1204:./state.h     **** }
1205:./state.h     **** 
1206:./state.h     **** /// test if air speed is available.
1207:./state.h     **** static inline bool_t stateIsAirspeedValid(void)
1208:./state.h     **** {
1209:./state.h     ****   return (state.wind_air_status &= ~((1 << AIRSPEED_I) | (1 << AIRSPEED_F)));
1210:./state.h     **** }
1211:./state.h     **** 
1212:./state.h     **** /// test if angle of attack is available.
1213:./state.h     **** static inline bool_t stateIsAngleOfAttackValid(void)
1214:./state.h     **** {
1215:./state.h     ****   return (state.wind_air_status &= ~(1 << AOA_F));
1216:./state.h     **** }
1217:./state.h     **** 
1218:./state.h     **** /// test if sideslip is available.
1219:./state.h     **** static inline bool_t stateIsSideslipValid(void)
1220:./state.h     **** {
1221:./state.h     ****   return (state.wind_air_status &= ~(1 << SIDESLIP_F));
1222:./state.h     **** }
1223:./state.h     **** 
1224:./state.h     **** /************************ Set functions ****************************/
1225:./state.h     **** 
1226:./state.h     **** /// Set horizontal windspeed (int).
1227:./state.h     **** static inline void stateSetHorizontalWindspeed_i(struct Int32Vect2 *h_windspeed)
1228:./state.h     **** {
1229:./state.h     ****   VECT2_COPY(state.h_windspeed_i, *h_windspeed);
1230:./state.h     ****   /* clear bits for all windspeed representations and only set the new one */
1231:./state.h     ****   ClearBit(state.wind_air_status, WINDSPEED_F);
1232:./state.h     ****   SetBit(state.wind_air_status, WINDSPEED_I);
1233:./state.h     **** }
1234:./state.h     **** 
1235:./state.h     **** /// Set airspeed (int).
1236:./state.h     **** static inline void stateSetAirspeed_i(int32_t *airspeed)
1237:./state.h     **** {
1238:./state.h     ****   state.airspeed_i = *airspeed;
1239:./state.h     ****   /* clear bits for all airspeed representations and only set the new one */
1240:./state.h     ****   ClearBit(state.wind_air_status, AIRSPEED_F);
1241:./state.h     ****   SetBit(state.wind_air_status, AIRSPEED_I);
1242:./state.h     **** }
1243:./state.h     **** 
1244:./state.h     **** /// Set horizontal windspeed (float).
1245:./state.h     **** static inline void stateSetHorizontalWindspeed_f(struct FloatVect2 *h_windspeed)
1246:./state.h     **** {
1247:./state.h     ****   VECT2_COPY(state.h_windspeed_f, *h_windspeed);
1248:./state.h     ****   /* clear bits for all windspeed representations and only set the new one */
1249:./state.h     ****   ClearBit(state.wind_air_status, WINDSPEED_I);
1250:./state.h     ****   SetBit(state.wind_air_status, WINDSPEED_F);
1251:./state.h     **** }
1252:./state.h     **** 
1253:./state.h     **** /// Set airspeed (float).
1254:./state.h     **** static inline void stateSetAirspeed_f(float *airspeed)
1255:./state.h     **** {
1256:./state.h     ****   state.airspeed_f = *airspeed;
1257:./state.h     ****   /* clear bits for all airspeed representations and only set the new one */
1258:./state.h     ****   ClearBit(state.wind_air_status, AIRSPEED_I);
1259:./state.h     ****   SetBit(state.wind_air_status, AIRSPEED_F);
1260:./state.h     **** }
1261:./state.h     **** 
1262:./state.h     **** /// Set angle of attack in radians (float).
1263:./state.h     **** static inline void stateSetAngleOfAttack_f(float *aoa)
1264:./state.h     **** {
1265:./state.h     ****   state.angle_of_attack_f = *aoa;
1266:./state.h     ****   /* clear bits for all AOA representations and only set the new one */
1267:./state.h     ****   /// @todo no integer yet
1268:./state.h     ****   SetBit(state.wind_air_status, AOA_F);
1269:./state.h     **** }
1270:./state.h     **** 
1271:./state.h     **** /// Set sideslip angle in radians (float).
1272:./state.h     **** static inline void stateSetSideslip_f(float *sideslip)
1273:./state.h     **** {
1274:./state.h     ****   state.sideslip_f = *sideslip;
1275:./state.h     ****   /* clear bits for all sideslip representations and only set the new one */
1276:./state.h     ****   /// @todo no integer yet
1277:./state.h     ****   SetBit(state.wind_air_status, SIDESLIP_F);
1278:./state.h     **** }
1279:./state.h     **** 
1280:./state.h     **** /************************ Get functions ****************************/
1281:./state.h     **** 
1282:./state.h     **** /// Get horizontal windspeed (int).
1283:./state.h     **** static inline struct Int32Vect2 *stateGetHorizontalWindspeed_i(void)
1284:./state.h     **** {
1285:./state.h     ****   if (!bit_is_set(state.wind_air_status, WINDSPEED_I)) {
1286:./state.h     ****     stateCalcHorizontalWindspeed_i();
1287:./state.h     ****   }
1288:./state.h     ****   return &state.h_windspeed_i;
1289:./state.h     **** }
1290:./state.h     **** 
1291:./state.h     **** /// Get airspeed (int).
1292:./state.h     **** static inline int32_t *stateGetAirspeed_i(void)
1293:./state.h     **** {
1294:./state.h     ****   if (!bit_is_set(state.wind_air_status, AIRSPEED_I)) {
1295:./state.h     ****     stateCalcAirspeed_i();
1296:./state.h     ****   }
1297:./state.h     ****   return &state.airspeed_i;
1298:./state.h     **** }
1299:./state.h     **** 
1300:./state.h     **** /// Get horizontal windspeed (float).
1301:./state.h     **** static inline struct FloatVect2 *stateGetHorizontalWindspeed_f(void)
1302:./state.h     **** {
1303:./state.h     ****   if (!bit_is_set(state.wind_air_status, WINDSPEED_F)) {
1304:./state.h     ****     stateCalcHorizontalWindspeed_f();
1305:./state.h     ****   }
1306:./state.h     ****   return &state.h_windspeed_f;
1307:./state.h     **** }
1308:./state.h     **** 
1309:./state.h     **** /// Get airspeed (float).
1310:./state.h     **** static inline float *stateGetAirspeed_f(void)
1311:./state.h     **** {
1312:./state.h     ****   if (!bit_is_set(state.wind_air_status, AIRSPEED_F)) {
  46              		.loc 2 1312 0
  47 0008 364B     		ldr	r3, .L7
  48 000a 93F84432 		ldrb	r3, [r3, #580]	@ zero_extendqisi2
  49 000e 1B07     		lsls	r3, r3, #28
  50              	.LBE7:
  51              	.LBE6:
 146:firmwares/fixedwing/autopilot.c **** #if USE_AIRSPEED
  52              		.loc 1 146 0
  53 0010 0446     		mov	r4, r0
  54 0012 0D46     		mov	r5, r1
  55              	.LBB9:
  56              	.LBB8:
  57              		.loc 2 1312 0
  58 0014 01D4     		bmi	.L2
1313:./state.h     ****     stateCalcAirspeed_f();
  59              		.loc 2 1313 0
  60 0016 FFF7FEFF 		bl	stateCalcAirspeed_f
  61              	.LVL1:
  62              	.L2:
  63              	.LBE8:
  64              	.LBE9:
  65              	.LBB10:
  66              	.LBB11:
  67              		.file 3 "/home/dino/paparazzi/var/include/messages.h"
   1:/home/dino/paparazzi/var/include/messages.h **** /* Automatically generated by gen_messages from /home/dino/paparazzi/conf/messages.xml */
   2:/home/dino/paparazzi/var/include/messages.h **** /* Please DO NOT EDIT */
   3:/home/dino/paparazzi/var/include/messages.h **** /* Macros to send and receive messages of class telemetry */
   4:/home/dino/paparazzi/var/include/messages.h **** #ifndef _VAR_MESSAGES_telemetry_H_
   5:/home/dino/paparazzi/var/include/messages.h **** #define _VAR_MESSAGES_telemetry_H_
   6:/home/dino/paparazzi/var/include/messages.h **** #include "subsystems/datalink/transport.h"
   7:/home/dino/paparazzi/var/include/messages.h **** #include "mcu_periph/link_device.h"
   8:/home/dino/paparazzi/var/include/messages.h **** #if DOWNLINK
   9:/home/dino/paparazzi/var/include/messages.h **** #define DL_AUTOPILOT_VERSION 1
  10:/home/dino/paparazzi/var/include/messages.h **** #define DL_ALIVE 2
  11:/home/dino/paparazzi/var/include/messages.h **** #define DL_PONG 3
  12:/home/dino/paparazzi/var/include/messages.h **** #define DL_TAKEOFF 4
  13:/home/dino/paparazzi/var/include/messages.h **** #define DL_ARDRONE_NAVDATA 5
  14:/home/dino/paparazzi/var/include/messages.h **** #define DL_ATTITUDE 6
  15:/home/dino/paparazzi/var/include/messages.h **** #define DL_IR_SENSORS 7
  16:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS 8
  17:/home/dino/paparazzi/var/include/messages.h **** #define DL_NAVIGATION_REF 9
  18:/home/dino/paparazzi/var/include/messages.h **** #define DL_NAVIGATION 10
  19:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPRZ_MODE 11
  20:/home/dino/paparazzi/var/include/messages.h **** #define DL_BAT 12
  21:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG_MCU_LINK 13
  22:/home/dino/paparazzi/var/include/messages.h **** #define DL_CALIBRATION 14
  23:/home/dino/paparazzi/var/include/messages.h **** #define DL_SETTINGS 15
  24:/home/dino/paparazzi/var/include/messages.h **** #define DL_DESIRED 16
  25:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_SOL 17
  26:/home/dino/paparazzi/var/include/messages.h **** #define DL_ADC_GENERIC 18
  27:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_FORMAT 19
  28:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAM 20
  29:/home/dino/paparazzi/var/include/messages.h **** #define DL_CIRCLE 21
  30:/home/dino/paparazzi/var/include/messages.h **** #define DL_SEGMENT 22
  31:/home/dino/paparazzi/var/include/messages.h **** #define DL_SVINFO 25
  32:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG 26
  33:/home/dino/paparazzi/var/include/messages.h **** #define DL_SURVEY 27
  34:/home/dino/paparazzi/var/include/messages.h **** #define DL_WC_RSSI 28
  35:/home/dino/paparazzi/var/include/messages.h **** #define DL_RANGEFINDER 29
  36:/home/dino/paparazzi/var/include/messages.h **** #define DL_DATALINK_REPORT 30
  37:/home/dino/paparazzi/var/include/messages.h **** #define DL_DL_VALUE 31
  38:/home/dino/paparazzi/var/include/messages.h **** #define DL_MARK 32
  39:/home/dino/paparazzi/var/include/messages.h **** #define DL_SYS_MON 33
  40:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR 34
  41:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED 35
  42:/home/dino/paparazzi/var/include/messages.h **** #define DL_MKK 36
  43:/home/dino/paparazzi/var/include/messages.h **** #define DL_ENERGY 37
  44:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_BMP85_CALIB 38
  45:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_BMP85 39
  46:/home/dino/paparazzi/var/include/messages.h **** #define DL_SPEED_LOOP 40
  47:/home/dino/paparazzi/var/include/messages.h **** #define DL_ALT_KALMAN 41
  48:/home/dino/paparazzi/var/include/messages.h **** #define DL_ESTIMATOR 42
  49:/home/dino/paparazzi/var/include/messages.h **** #define DL_TUNE_ROLL 43
  50:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_MS5534A 44
  51:/home/dino/paparazzi/var/include/messages.h **** #define DL_PRESSURE 45
  52:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_WORDS 46
  53:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED_LLA 47
  54:/home/dino/paparazzi/var/include/messages.h **** #define DL_CHRONO 48
  55:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED_ENU 49
  56:/home/dino/paparazzi/var/include/messages.h **** #define DL_WINDTURBINE_STATUS_ 50
  57:/home/dino/paparazzi/var/include/messages.h **** #define DL_RC_3CH_ 51
  58:/home/dino/paparazzi/var/include/messages.h **** #define DL_MPPT 52
  59:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG_IR_I2C 53
  60:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED 54
  61:/home/dino/paparazzi/var/include/messages.h **** #define DL_XSENS 55
  62:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_ETS 56
  63:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED_ETS 57
  64:/home/dino/paparazzi/var/include/messages.h **** #define DL_PBN 58
  65:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_LLA 59
  66:/home/dino/paparazzi/var/include/messages.h **** #define DL_H_CTL_A 60
  67:/home/dino/paparazzi/var/include/messages.h **** #define DL_TURB_PRESSURE_RAW 61
  68:/home/dino/paparazzi/var/include/messages.h **** #define DL_TURB_PRESSURE_VOLTAGE 62
  69:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAM_POINT 63
  70:/home/dino/paparazzi/var/include/messages.h **** #define DL_DC_INFO 64
  71:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSYS_BARO 65
  72:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSYS_AIRSPEED 66
  73:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLIGHT_BENCHMARK 67
  74:/home/dino/paparazzi/var/include/messages.h **** #define DL_MPL3115_BARO 68
  75:/home/dino/paparazzi/var/include/messages.h **** #define DL_AOA_ADC 69
  76:/home/dino/paparazzi/var/include/messages.h **** #define DL_XTEND_RSSI 70
  77:/home/dino/paparazzi/var/include/messages.h **** #define DL_SUPERBITRF 72
  78:/home/dino/paparazzi/var/include/messages.h **** #define DL_GX3_INFO 73
  79:/home/dino/paparazzi/var/include/messages.h **** #define DL_EXPLAIN 74
  80:/home/dino/paparazzi/var/include/messages.h **** #define DL_VIDEO_TELEMETRY 75
  81:/home/dino/paparazzi/var/include/messages.h **** #define DL_VF_UPDATE 76
  82:/home/dino/paparazzi/var/include/messages.h **** #define DL_VF_PREDICT 77
  83:/home/dino/paparazzi/var/include/messages.h **** #define DL_INV_FILTER 78
  84:/home/dino/paparazzi/var/include/messages.h **** #define DL_MISSION_STATUS 79
  85:/home/dino/paparazzi/var/include/messages.h **** #define DL_CROSS_TRACK_ERROR 80
  86:/home/dino/paparazzi/var/include/messages.h **** #define DL_GENERIC_COM 81
  87:/home/dino/paparazzi/var/include/messages.h **** #define DL_FORMATION_SLOT_TM 82
  88:/home/dino/paparazzi/var/include/messages.h **** #define DL_FORMATION_STATUS_TM 83
  89:/home/dino/paparazzi/var/include/messages.h **** #define DL_BMP_STATUS 84
  90:/home/dino/paparazzi/var/include/messages.h **** #define DL_MLX_STATUS 85
  91:/home/dino/paparazzi/var/include/messages.h **** #define DL_TMP_STATUS 86
  92:/home/dino/paparazzi/var/include/messages.h **** #define DL_WIND_INFO_RET 87
  93:/home/dino/paparazzi/var/include/messages.h **** #define DL_SCP_STATUS 88
  94:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_STATUS 89
  95:/home/dino/paparazzi/var/include/messages.h **** #define DL_ENOSE_STATUS 90
  96:/home/dino/paparazzi/var/include/messages.h **** #define DL_DPICCO_STATUS 91
  97:/home/dino/paparazzi/var/include/messages.h **** #define DL_ANTENNA_DEBUG 92
  98:/home/dino/paparazzi/var/include/messages.h **** #define DL_ANTENNA_STATUS 93
  99:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR_BENCH_STATUS 94
 100:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR_BENCH_STATIC 95
 101:/home/dino/paparazzi/var/include/messages.h **** #define DL_HIH_STATUS 96
 102:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMT_STATUS 97
 103:/home/dino/paparazzi/var/include/messages.h **** #define DL_GP2Y_STATUS 98
 104:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_I2C_SERIAL 99
 105:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPM 100
 106:/home/dino/paparazzi/var/include/messages.h **** #define DL_RC 101
 107:/home/dino/paparazzi/var/include/messages.h **** #define DL_COMMANDS 102
 108:/home/dino/paparazzi/var/include/messages.h **** #define DL_FBW_STATUS 103
 109:/home/dino/paparazzi/var/include/messages.h **** #define DL_ADC 104
 110:/home/dino/paparazzi/var/include/messages.h **** #define DL_ACTUATORS 105
 111:/home/dino/paparazzi/var/include/messages.h **** #define DL_DC_SHOT 110
 112:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_BOARD_RESULTS 111
 113:/home/dino/paparazzi/var/include/messages.h **** #define DL_MLX_SERIAL 113
 114:/home/dino/paparazzi/var/include/messages.h **** #define DL_PAYLOAD 114
 115:/home/dino/paparazzi/var/include/messages.h **** #define DL_HTM_STATUS 115
 116:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_MS5611 116
 117:/home/dino/paparazzi/var/include/messages.h **** #define DL_MS5611_COEFF 117
 118:/home/dino/paparazzi/var/include/messages.h **** #define DL_ATMOSPHERE_CHARGE 118
 119:/home/dino/paparazzi/var/include/messages.h **** #define DL_SOLAR_RADIATION 119
 120:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_TA 120
 121:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_RA 121
 122:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_RESOLVED 122
 123:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_DEBUG 123
 124:/home/dino/paparazzi/var/include/messages.h **** #define DL_POTENTIAL 124
 125:/home/dino/paparazzi/var/include/messages.h **** #define DL_VERTICAL_ENERGY 125
 126:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMP_TCOUPLE 126
 127:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_I2C_STATUS 127
 128:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAMERA_SNAPSHOT 128
 129:/home/dino/paparazzi/var/include/messages.h **** #define DL_TIMESTAMP 129
 130:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_FLOAT 130
 131:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_SCALED 131
 132:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL_SCALED 132
 133:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_SCALED 133
 134:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER 134
 135:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER2 135
 136:/home/dino/paparazzi/var/include/messages.h **** #define DL_RATE_LOOP 136
 137:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER_ALIGNER 137
 138:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED_MS45XX 138
 139:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER_COR 139
 140:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_INT 140
 141:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_REF_INT 141
 142:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_REF_FLOAT 142
 143:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_CMD 143
 144:/home/dino/paparazzi/var/include/messages.h **** #define DL_GUIDANCE_H_INT 144
 145:/home/dino/paparazzi/var/include/messages.h **** #define DL_VERT_LOOP 145
 146:/home/dino/paparazzi/var/include/messages.h **** #define DL_HOVER_LOOP 146
 147:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_FP 147
 148:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMP_ADC 148
 149:/home/dino/paparazzi/var/include/messages.h **** #define DL_GUIDANCE_H_REF_INT 149
 150:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_TUNE_HOVER 150
 151:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_Z 151
 152:/home/dino/paparazzi/var/include/messages.h **** #define DL_PCAP01_STATUS 152
 153:/home/dino/paparazzi/var/include/messages.h **** #define DL_GEIGER_COUNTER 153
 154:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_REF 154
 155:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_INT 155
 156:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_EULER_INT 156
 157:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_QUAT_INT 157
 158:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_RMAT_INT 158
 159:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_NAV_STATUS 159
 160:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_RADIO_CONTROL 160
 161:/home/dino/paparazzi/var/include/messages.h **** #define DL_VFF_EXTENDED 161
 162:/home/dino/paparazzi/var/include/messages.h **** #define DL_VFF 162
 163:/home/dino/paparazzi/var/include/messages.h **** #define DL_GEO_MAG 163
 164:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF 164
 165:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF_DBG 165
 166:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF_GPS 166
 167:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_SONAR 167
 168:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_CAM 168
 169:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_REF_QUAT 169
 170:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_XHAT 170
 171:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_Y 171
 172:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_P_DIAG 172
 173:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_EULER 173
 174:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_MEASUREMENT_EULER 174
 175:/home/dino/paparazzi/var/include/messages.h **** #define DL_WT 175
 176:/home/dino/paparazzi/var/include/messages.h **** #define DL_CSC_CAN_DEBUG 176
 177:/home/dino/paparazzi/var/include/messages.h **** #define DL_CSC_CAN_MSG 177
 178:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_GYRO_BIAS_INT 178
 179:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLOW_AP_OTF 179
 180:/home/dino/paparazzi/var/include/messages.h **** #define DL_FMS_TIME 180
 181:/home/dino/paparazzi/var/include/messages.h **** #define DL_LOADCELL 181
 182:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLA_DEBUG 182
 183:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_FAULT_STATUS 183
 184:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_SPEEDS 184
 185:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_DEBUG_QUAT 185
 186:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_BUSVOLTS 186
 187:/home/dino/paparazzi/var/include/messages.h **** #define DL_SYSTEM_STATUS 187
 188:/home/dino/paparazzi/var/include/messages.h **** #define DL_DYNAMIXEL 188
 189:/home/dino/paparazzi/var/include/messages.h **** #define DL_RMAT_DEBUG 189
 190:/home/dino/paparazzi/var/include/messages.h **** #define DL_SIMPLE_COMMANDS 190
 191:/home/dino/paparazzi/var/include/messages.h **** #define DL_VANE_SENSOR 191
 192:/home/dino/paparazzi/var/include/messages.h **** #define DL_CONTROLLER_GAINS 192
 193:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF 193
 194:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_DEBUG 194
 195:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_ACC_DBG 195
 196:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_MAG_DBG 196
 197:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_SENSORS_SCALED 197
 198:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS 198
 199:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_ERROR 199
 200:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO 200
 201:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG 201
 202:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL 202
 203:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_RAW 203
 204:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL_RAW 204
 205:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_RAW 205
 206:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_SETTINGS 206
 207:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_CURRENT_CALIBRATION 207
 208:/home/dino/paparazzi/var/include/messages.h **** #define DL_UART_ERRORS 208
 209:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_LP 209
 210:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_PRESSURE 210
 211:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_HS_GYRO 211
 212:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_PASSTHROUGH_STATUS 212
 213:/home/dino/paparazzi/var/include/messages.h **** #define DL_TUNE_VERT 213
 214:/home/dino/paparazzi/var/include/messages.h **** #define DL_MF_DAQ_STATE 214
 215:/home/dino/paparazzi/var/include/messages.h **** #define DL_INFO_MSG 215
 216:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_INDI 216
 217:/home/dino/paparazzi/var/include/messages.h **** #define DL_BEBOP_ACTUATORS 218
 218:/home/dino/paparazzi/var/include/messages.h **** #define DL_WEATHER 219
 219:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_TURNTABLE 220
 220:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_RAW 221
 221:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIR_DATA 222
 222:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSL 223
 223:/home/dino/paparazzi/var/include/messages.h **** #define DL_VIDEO_SYNC 225
 224:/home/dino/paparazzi/var/include/messages.h **** #define DL_PERIODIC_TELEMETRY_ERR 226
 225:/home/dino/paparazzi/var/include/messages.h **** #define DL_TIME 227
 226:/home/dino/paparazzi/var/include/messages.h **** #define DL_OPTIC_FLOW_EST 228
 227:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_ARDRONE2 230
 228:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_STATUS 231
 229:/home/dino/paparazzi/var/include/messages.h **** #define DL_STATE_FILTER_STATUS 232
 230:/home/dino/paparazzi/var/include/messages.h **** #define DL_PX4FLOW 233
 231:/home/dino/paparazzi/var/include/messages.h **** #define DL_OPTICFLOW 234
 232:/home/dino/paparazzi/var/include/messages.h **** #define DL_VISUALTARGET 235
 233:/home/dino/paparazzi/var/include/messages.h **** #define DL_SONAR 236
 234:/home/dino/paparazzi/var/include/messages.h **** #define DL_PAYLOAD_FLOAT 237
 235:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_POS_LLH 238
 236:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RPMS 239
 237:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_SPEED_POS 240
 238:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RATE_ATTITUDE 241
 239:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_GYRO_BIAS 242
 240:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RANGE_METER 243
 241:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_WIND 244
 242:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPRZ_DEBUG 247
 243:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_ACCEL_LTP 248
 244:/home/dino/paparazzi/var/include/messages.h **** #define DL_LOOSE_INS_GPS 249
 245:/home/dino/paparazzi/var/include/messages.h **** #define DL_AFL_COEFFS 250
 246:/home/dino/paparazzi/var/include/messages.h **** #define DL_I2C_ERRORS 253
 247:/home/dino/paparazzi/var/include/messages.h **** #define DL_RDYB_TRAJECTORY 254
 248:/home/dino/paparazzi/var/include/messages.h **** #define DL_HENRY_GNSS 255
 249:/home/dino/paparazzi/var/include/messages.h **** #define DL_MSG_telemetry_NB 240
 250:/home/dino/paparazzi/var/include/messages.h **** 
 251:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AUTOPILOT_VERSION(_trans, _dev, version, nb_desc, desc) pprz_msg_send_AUTOPIL
 252:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AUTOPILOT_VERSION(struct transport_tx *trans, struct link_device *
 253:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 
 254:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 /* msg heade
 255:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1+nb_desc*1 +2 /* msg header overhead */);
 256:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 257:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AUTOPILOT_VERSION, "
 258:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _version);
 259:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_desc)
 260:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * nb_desc, (void *) _desc);
 261:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 262:/home/dino/paparazzi/var/include/messages.h **** 	} else
 263:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 264:/home/dino/paparazzi/var/include/messages.h **** }
 265:/home/dino/paparazzi/var/include/messages.h **** 
 266:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ALIVE(_trans, _dev, nb_md5sum, md5sum) pprz_msg_send_ALIVE(&((_trans).trans_t
 267:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ALIVE(struct transport_tx *trans, struct link_device *dev, uint8_t
 268:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 
 269:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 /* msg heade
 270:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_md5sum*1 +2 /* msg header overhead */);
 271:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 272:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ALIVE, "ALIVE");
 273:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_md5su
 274:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_md5sum, (void *) _md5s
 275:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 276:/home/dino/paparazzi/var/include/messages.h **** 	} else
 277:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 278:/home/dino/paparazzi/var/include/messages.h **** }
 279:/home/dino/paparazzi/var/include/messages.h **** 
 280:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PONG(_trans, _dev) pprz_msg_send_PONG(&((_trans).trans_tx), &((_dev).device),
 281:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PONG(struct transport_tx *trans, struct link_device *dev, uint8_t 
 282:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0 +2 /* msg header 
 283:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0 +2 /* msg header overhead */)
 284:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0 +2 /* msg header overhead */);
 285:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 286:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PONG, "PONG");
 287:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 288:/home/dino/paparazzi/var/include/messages.h **** 	} else
 289:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 290:/home/dino/paparazzi/var/include/messages.h **** }
 291:/home/dino/paparazzi/var/include/messages.h **** 
 292:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TAKEOFF(_trans, _dev, cpu_time) pprz_msg_send_TAKEOFF(&((_trans).trans_tx), &
 293:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TAKEOFF(struct transport_tx *trans, struct link_device *dev, uint8
 294:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg heade
 295:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg header overhead *
 296:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2 +2 /* msg header overhead */);
 297:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 298:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TAKEOFF, "TAKEOFF");
 299:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _cpu_time);
 300:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 301:/home/dino/paparazzi/var/include/messages.h **** 	} else
 302:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 303:/home/dino/paparazzi/var/include/messages.h **** }
 304:/home/dino/paparazzi/var/include/messages.h **** 
 305:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ARDRONE_NAVDATA(_trans, _dev, taille, nu_trame, ax, ay, az, vx, vy, vz, tempe
 306:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ARDRONE_NAVDATA(struct transport_tx *trans, struct link_device *de
 307:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2
 308:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2
 309:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+4+2+2+4+2+2+2+2+2
 310:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 311:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ARDRONE_NAVDATA, "AR
 312:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _taille);
 313:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _nu_trame);
 314:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ax);
 315:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ay);
 316:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _az);
 317:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vx);
 318:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vy);
 319:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vz);
 320:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_ac
 321:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_gy
 322:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ultrasound);
 323:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_debut_echo)
 324:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_fin_echo);
 325:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_association
 326:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_distance_ec
 327:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_time)
 328:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_value
 329:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_ref);
 330:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _nb_echo);
 331:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _sum_echo);
 332:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _gradient);
 333:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flag_echo_ini)
 334:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _pressure);
 335:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_pr
 336:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mx);
 337:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _my);
 338:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mz);
 339:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _chksum);
 340:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _checksum_error
 341:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 342:/home/dino/paparazzi/var/include/messages.h **** 	} else
 343:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 344:/home/dino/paparazzi/var/include/messages.h **** }
 345:/home/dino/paparazzi/var/include/messages.h **** 
 346:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ATTITUDE(_trans, _dev, phi, psi, theta) pprz_msg_send_ATTITUDE(&((_trans).tra
 347:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ATTITUDE(struct transport_tx *trans, struct link_device *dev, uint
 348:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
 349:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 350:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 351:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 352:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ATTITUDE, "ATTITUDE"
 353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
 354:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
 355:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
 356:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 357:/home/dino/paparazzi/var/include/messages.h **** 	} else
 358:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 359:/home/dino/paparazzi/var/include/messages.h **** }
 360:/home/dino/paparazzi/var/include/messages.h **** 
 361:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IR_SENSORS(_trans, _dev, ir1, ir2, longitudinal, lateral, vertical) pprz_msg_
 362:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IR_SENSORS(struct transport_tx *trans, struct link_device *dev, ui
 363:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2 +2 /* m
 364:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2 +2 /* msg header ov
 365:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2 +2 /* msg header overhead */);
 366:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 367:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IR_SENSORS, "IR_SENS
 368:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir1);
 369:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir2);
 370:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _longitudinal);
 371:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _lateral);
 372:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vertical);
 373:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 374:/home/dino/paparazzi/var/include/messages.h **** 	} else
 375:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 376:/home/dino/paparazzi/var/include/messages.h **** }
 377:/home/dino/paparazzi/var/include/messages.h **** 
 378:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS(_trans, _dev, mode, utm_east, utm_north, course, alt, speed, climb, week,
 379:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS(struct transport_tx *trans, struct link_device *dev, uint8_t a
 380:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+2+4+2+2+2+4
 381:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+2+4+2+2+2+4+1+1 +2 /* m
 382:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+2+4+2+2+2+4+1+1 +2 /* msg header overhead */);
 383:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 384:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS, "GPS");
 385:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mode);
 386:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 387:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 388:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _course);
 389:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
 390:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _speed);
 391:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _climb);
 392:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _week);
 393:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _itow);
 394:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 395:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _gps_nb_err);
 396:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 397:/home/dino/paparazzi/var/include/messages.h **** 	} else
 398:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 399:/home/dino/paparazzi/var/include/messages.h **** }
 400:/home/dino/paparazzi/var/include/messages.h **** 
 401:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_NAVIGATION_REF(_trans, _dev, utm_east, utm_north, utm_zone, ground_alt) pprz_
 402:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_NAVIGATION_REF(struct transport_tx *trans, struct link_device *dev
 403:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+4 +2 /* msg
 404:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+4 +2 /* msg header over
 405:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+1+4 +2 /* msg header overhead */);
 406:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 407:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NAVIGATION_REF, "NAV
 408:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 409:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 410:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 411:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ground_alt);
 412:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 413:/home/dino/paparazzi/var/include/messages.h **** 	} else
 414:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 415:/home/dino/paparazzi/var/include/messages.h **** }
 416:/home/dino/paparazzi/var/include/messages.h **** 
 417:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_NAVIGATION(_trans, _dev, cur_block, cur_stage, pos_x, pos_y, dist_wp, dist_ho
 418:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_NAVIGATION(struct transport_tx *trans, struct link_device *dev, ui
 419:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +
 420:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +2 /* msg hea
 421:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4+4+4+1+1 +2 /* msg header overhead */);
 422:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 423:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NAVIGATION, "NAVIGAT
 424:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_block);
 425:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_stage);
 426:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_x);
 427:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_y);
 428:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_wp);
 429:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_home);
 430:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _circle_count);
 431:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _oval_count);
 432:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 433:/home/dino/paparazzi/var/include/messages.h **** 	} else
 434:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 435:/home/dino/paparazzi/var/include/messages.h **** }
 436:/home/dino/paparazzi/var/include/messages.h **** 
 437:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PPRZ_MODE(_trans, _dev, ap_mode, ap_gaz, ap_lateral, ap_horizontal, if_calib_
 438:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PPRZ_MODE(struct transport_tx *trans, struct link_device *dev, uin
 439:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /*
 440:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /* msg header 
 441:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+1 +2 /* msg header overhead */);
 442:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 443:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PPRZ_MODE, "PPRZ_MOD
 444:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_mode);
 445:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_gaz);
 446:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_lateral);
 447:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_horizontal);
 448:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _if_calib_mode);
 449:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mcu1_status);
 450:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 451:/home/dino/paparazzi/var/include/messages.h **** 	} else
 452:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 453:/home/dino/paparazzi/var/include/messages.h **** }
 454:/home/dino/paparazzi/var/include/messages.h **** 
 455:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BAT(_trans, _dev, throttle, voltage, amps, flight_time, kill_auto_throttle, b
 456:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BAT(struct transport_tx *trans, struct link_device *dev, uint8_t a
 457:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +
 458:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +2 /* msg hea
 459:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+1+2+2+2 +2 /* msg header overhead */);
 460:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 461:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BAT, "BAT");
 462:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _throttle);
 463:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _voltage);
 464:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _amps);
 465:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flight_time);
 466:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _kill_auto_throt
 467:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _block_time);
 468:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _stage_time);
 469:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _energy);
 470:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 471:/home/dino/paparazzi/var/include/messages.h **** 	} else
 472:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 473:/home/dino/paparazzi/var/include/messages.h **** }
 474:/home/dino/paparazzi/var/include/messages.h **** 
 475:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DEBUG_MCU_LINK(_trans, _dev, i2c_nb_err, i2c_mcu1_nb_err, ppm_rate) pprz_msg_
 476:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DEBUG_MCU_LINK(struct transport_tx *trans, struct link_device *dev
 477:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg h
 478:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhe
 479:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
 480:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 481:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DEBUG_MCU_LINK, "DEB
 482:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _i2c_nb_err);
 483:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _i2c_mcu1_nb_err
 484:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ppm_rate);
 485:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 486:/home/dino/paparazzi/var/include/messages.h **** 	} else
 487:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 488:/home/dino/paparazzi/var/include/messages.h **** }
 489:/home/dino/paparazzi/var/include/messages.h **** 
 490:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CALIBRATION(_trans, _dev, climb_sum_err, climb_gaz_submode) pprz_msg_send_CAL
 491:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CALIBRATION(struct transport_tx *trans, struct link_device *dev, u
 492:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+1 +2 /* msg hea
 493:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1 +2 /* msg header overhead
 494:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1 +2 /* msg header overhead */);
 495:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 496:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CALIBRATION, "CALIBR
 497:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _climb_sum_err);
 498:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _climb_gaz_submo
 499:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 500:/home/dino/paparazzi/var/include/messages.h **** 	} else
 501:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 502:/home/dino/paparazzi/var/include/messages.h **** }
 503:/home/dino/paparazzi/var/include/messages.h **** 
 504:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SETTINGS(_trans, _dev, slider_1_val, slider_2_val) pprz_msg_send_SETTINGS(&((
 505:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SETTINGS(struct transport_tx *trans, struct link_device *dev, uint
 506:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
 507:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
 508:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
 509:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 510:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SETTINGS, "SETTINGS"
 511:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _slider_1_val);
 512:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _slider_2_val);
 513:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 514:/home/dino/paparazzi/var/include/messages.h **** 	} else
 515:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 516:/home/dino/paparazzi/var/include/messages.h **** }
 517:/home/dino/paparazzi/var/include/messages.h **** 
 518:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DESIRED(_trans, _dev, roll, pitch, course, x, y, altitude, climb, airspeed) p
 519:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DESIRED(struct transport_tx *trans, struct link_device *dev, uint8
 520:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +
 521:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
 522:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
 523:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 524:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DESIRED, "DESIRED");
 525:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll);
 526:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch);
 527:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _course);
 528:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _x);
 529:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _y);
 530:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _altitude);
 531:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _climb);
 532:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
 533:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 534:/home/dino/paparazzi/var/include/messages.h **** 	} else
 535:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 536:/home/dino/paparazzi/var/include/messages.h **** }
 537:/home/dino/paparazzi/var/include/messages.h **** 
 538:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS_SOL(_trans, _dev, Pacc, Sacc, PDOP, numSV) pprz_msg_send_GPS_SOL(&((_tran
 539:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS_SOL(struct transport_tx *trans, struct link_device *dev, uint8
 540:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+1 +2 /* msg
 541:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+1 +2 /* msg header over
 542:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+2+1 +2 /* msg header overhead */);
 543:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 544:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS_SOL, "GPS_SOL");
 545:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _Pacc);
 546:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _Sacc);
 547:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _PDOP);
 548:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _numSV);
 549:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 550:/home/dino/paparazzi/var/include/messages.h **** 	} else
 551:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 552:/home/dino/paparazzi/var/include/messages.h **** }
 553:/home/dino/paparazzi/var/include/messages.h **** 
 554:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ADC_GENERIC(_trans, _dev, val1, val2) pprz_msg_send_ADC_GENERIC(&((_trans).tr
 555:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ADC_GENERIC(struct transport_tx *trans, struct link_device *dev, u
 556:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2 +2 /* msg hea
 557:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2 +2 /* msg header overhead
 558:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2 +2 /* msg header overhead */);
 559:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 560:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ADC_GENERIC, "ADC_GE
 561:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val1);
 562:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val2);
 563:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 564:/home/dino/paparazzi/var/include/messages.h **** 	} else
 565:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 566:/home/dino/paparazzi/var/include/messages.h **** }
 567:/home/dino/paparazzi/var/include/messages.h **** 
 568:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TEST_FORMAT(_trans, _dev, val1, val2) pprz_msg_send_TEST_FORMAT(&((_trans).tr
 569:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TEST_FORMAT(struct transport_tx *trans, struct link_device *dev, u
 570:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+8+4 +2 /* msg hea
 571:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+8+4 +2 /* msg header overhead
 572:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+8+4 +2 /* msg header overhead */);
 573:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 574:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TEST_FORMAT, "TEST_F
 575:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_DOUBLE, DL_FORMAT_SCALAR, 8, (void *) _val1);
 576:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _val2);
 577:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 578:/home/dino/paparazzi/var/include/messages.h **** 	} else
 579:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 580:/home/dino/paparazzi/var/include/messages.h **** }
 581:/home/dino/paparazzi/var/include/messages.h **** 
 582:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CAM(_trans, _dev, phi, theta, target_x, target_y) pprz_msg_send_CAM(&((_trans
 583:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CAM(struct transport_tx *trans, struct link_device *dev, uint8_t a
 584:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg
 585:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg header over
 586:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2 +2 /* msg header overhead */);
 587:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 588:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CAM, "CAM");
 589:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _phi);
 590:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _theta);
 591:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _target_x);
 592:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _target_y);
 593:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 594:/home/dino/paparazzi/var/include/messages.h **** 	} else
 595:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 596:/home/dino/paparazzi/var/include/messages.h **** }
 597:/home/dino/paparazzi/var/include/messages.h **** 
 598:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CIRCLE(_trans, _dev, center_east, center_north, radius) pprz_msg_send_CIRCLE(
 599:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CIRCLE(struct transport_tx *trans, struct link_device *dev, uint8_
 600:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
 601:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 602:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 603:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 604:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CIRCLE, "CIRCLE");
 605:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _center_east);
 606:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _center_north);
 607:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _radius);
 608:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 609:/home/dino/paparazzi/var/include/messages.h **** 	} else
 610:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 611:/home/dino/paparazzi/var/include/messages.h **** }
 612:/home/dino/paparazzi/var/include/messages.h **** 
 613:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SEGMENT(_trans, _dev, segment_east_1, segment_north_1, segment_east_2, segmen
 614:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SEGMENT(struct transport_tx *trans, struct link_device *dev, uint8
 615:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 616:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 617:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 618:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 619:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SEGMENT, "SEGMENT");
 620:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_east_1)
 621:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_north_1
 622:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_east_2)
 623:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_north_2
 624:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 625:/home/dino/paparazzi/var/include/messages.h **** 	} else
 626:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 627:/home/dino/paparazzi/var/include/messages.h **** }
 628:/home/dino/paparazzi/var/include/messages.h **** 
 629:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SVINFO(_trans, _dev, chn, SVID, Flags, QI, CNO, Elev, Azim) pprz_msg_send_SVI
 630:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SVINFO(struct transport_tx *trans, struct link_device *dev, uint8_
 631:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1+2 +2 
 632:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1+2 +2 /* msg heade
 633:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+1+2 +2 /* msg header overhead */);
 634:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 635:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SVINFO, "SVINFO");
 636:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _chn);
 637:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _SVID);
 638:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _Flags);
 639:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _QI);
 640:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _CNO);
 641:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _Elev);
 642:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _Azim);
 643:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 644:/home/dino/paparazzi/var/include/messages.h **** 	} else
 645:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 646:/home/dino/paparazzi/var/include/messages.h **** }
 647:/home/dino/paparazzi/var/include/messages.h **** 
 648:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DEBUG(_trans, _dev, nb_msg, msg) pprz_msg_send_DEBUG(&((_trans).trans_tx), &(
 649:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DEBUG(struct transport_tx *trans, struct link_device *dev, uint8_t
 650:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_msg*1 +2 /* 
 651:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_msg*1 +2 /* msg header o
 652:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_msg*1 +2 /* msg header overhead */);
 653:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 654:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DEBUG, "DEBUG");
 655:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_msg);
 656:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_msg, (void *) _msg);
 657:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 658:/home/dino/paparazzi/var/include/messages.h **** 	} else
 659:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 660:/home/dino/paparazzi/var/include/messages.h **** }
 661:/home/dino/paparazzi/var/include/messages.h **** 
 662:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SURVEY(_trans, _dev, east, north, west, south) pprz_msg_send_SURVEY(&((_trans
 663:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SURVEY(struct transport_tx *trans, struct link_device *dev, uint8_
 664:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 665:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 666:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 667:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 668:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SURVEY, "SURVEY");
 669:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _east);
 670:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _north);
 671:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _west);
 672:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _south);
 673:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 674:/home/dino/paparazzi/var/include/messages.h **** 	} else
 675:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 676:/home/dino/paparazzi/var/include/messages.h **** }
 677:/home/dino/paparazzi/var/include/messages.h **** 
 678:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WC_RSSI(_trans, _dev, raw_level) pprz_msg_send_WC_RSSI(&((_trans).trans_tx), 
 679:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WC_RSSI(struct transport_tx *trans, struct link_device *dev, uint8
 680:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg heade
 681:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead *
 682:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1 +2 /* msg header overhead */);
 683:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 684:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WC_RSSI, "WC_RSSI");
 685:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _raw_level);
 686:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 687:/home/dino/paparazzi/var/include/messages.h **** 	} else
 688:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 689:/home/dino/paparazzi/var/include/messages.h **** }
 690:/home/dino/paparazzi/var/include/messages.h **** 
 691:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_RANGEFINDER(_trans, _dev, range, z_dot, z_dot_sum_err, z_dot_setpoint, z_sum_
 692:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_RANGEFINDER(struct transport_tx *trans, struct link_device *dev, u
 693:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+1 +2 
 694:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+1 +2 /* msg heade
 695:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4+4+4+4+1 +2 /* msg header overhead */);
 696:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 697:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_RANGEFINDER, "RANGEF
 698:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _range);
 699:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot);
 700:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot_sum_err);
 701:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot_setpoint)
 702:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_sum_err);
 703:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_setpoint);
 704:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _flying);
 705:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 706:/home/dino/paparazzi/var/include/messages.h **** 	} else
 707:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 708:/home/dino/paparazzi/var/include/messages.h **** }
 709:/home/dino/paparazzi/var/include/messages.h **** 
 710:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DATALINK_REPORT(_trans, _dev, uplink_lost_time, uplink_nb_msgs, downlink_nb_m
 711:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DATALINK_REPORT(struct transport_tx *trans, struct link_device *de
 712:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1 +2 /* m
 713:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1 +2 /* msg header ov
 714:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+1 +2 /* msg header overhead */);
 715:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 716:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DATALINK_REPORT, "DA
 717:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _uplink_lost_ti
 718:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _uplink_nb_msgs
 719:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _downlink_nb_ms
 720:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _downlink_rate)
 721:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _downlink_ovrn);
 722:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 723:/home/dino/paparazzi/var/include/messages.h **** 	} else
 724:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 725:/home/dino/paparazzi/var/include/messages.h **** }
 726:/home/dino/paparazzi/var/include/messages.h **** 
 727:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DL_VALUE(_trans, _dev, index, value) pprz_msg_send_DL_VALUE(&((_trans).trans_
 728:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DL_VALUE(struct transport_tx *trans, struct link_device *dev, uint
 729:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg hea
 730:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg header overhead
 731:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4 +2 /* msg header overhead */);
 732:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 733:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DL_VALUE, "DL_VALUE"
 734:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _index);
 735:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _value);
 736:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 737:/home/dino/paparazzi/var/include/messages.h **** 	} else
 738:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 739:/home/dino/paparazzi/var/include/messages.h **** }
 740:/home/dino/paparazzi/var/include/messages.h **** 
 741:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MARK(_trans, _dev, ac_id, lat, long) pprz_msg_send_MARK(&((_trans).trans_tx),
 742:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MARK(struct transport_tx *trans, struct link_device *dev, uint8_t 
 743:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4 +2 /* msg h
 744:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4 +2 /* msg header overhe
 745:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4 +2 /* msg header overhead */);
 746:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 747:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MARK, "MARK");
 748:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
 749:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _lat);
 750:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _long);
 751:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 752:/home/dino/paparazzi/var/include/messages.h **** 	} else
 753:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 754:/home/dino/paparazzi/var/include/messages.h **** }
 755:/home/dino/paparazzi/var/include/messages.h **** 
 756:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SYS_MON(_trans, _dev, periodic_time, periodic_time_min, periodic_time_max, pe
 757:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SYS_MON(struct transport_tx *trans, struct link_device *dev, uint8
 758:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+1 +
 759:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+1 +2 /* msg hea
 760:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+1 +2 /* msg header overhead */);
 761:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 762:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SYS_MON, "SYS_MON");
 763:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_time)
 764:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_time_
 765:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_time_
 766:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_cycle
 767:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_cycle
 768:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_cycle
 769:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _event_number);
 770:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cpu_load);
 771:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 772:/home/dino/paparazzi/var/include/messages.h **** 	} else
 773:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 774:/home/dino/paparazzi/var/include/messages.h **** }
 775:/home/dino/paparazzi/var/include/messages.h **** 
 776:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MOTOR(_trans, _dev, rpm, current) pprz_msg_send_MOTOR(&((_trans).trans_tx), &
 777:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MOTOR(struct transport_tx *trans, struct link_device *dev, uint8_t
 778:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg hea
 779:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg header overhead
 780:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4 +2 /* msg header overhead */);
 781:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 782:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MOTOR, "MOTOR");
 783:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _rpm);
 784:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _current);
 785:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 786:/home/dino/paparazzi/var/include/messages.h **** 	} else
 787:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 788:/home/dino/paparazzi/var/include/messages.h **** }
 789:/home/dino/paparazzi/var/include/messages.h **** 
 790:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WP_MOVED(_trans, _dev, wp_id, utm_east, utm_north, alt, utm_zone) pprz_msg_se
 791:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WP_MOVED(struct transport_tx *trans, struct link_device *dev, uint
 792:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4+1 +2 /* m
 793:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4+1 +2 /* msg header ov
 794:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+4+1 +2 /* msg header overhead */);
 795:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 796:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WP_MOVED, "WP_MOVED"
 797:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_id);
 798:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 799:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 800:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alt);
 801:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 802:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 803:/home/dino/paparazzi/var/include/messages.h **** 	} else
 804:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 805:/home/dino/paparazzi/var/include/messages.h **** }
 806:/home/dino/paparazzi/var/include/messages.h **** 
 807:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MKK(_trans, _dev, nr, rpm, current, temp) pprz_msg_send_MKK(&((_trans).trans_
 808:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MKK(struct transport_tx *trans, struct link_device *dev, uint8_t a
 809:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1 +2 /* msg
 810:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1 +2 /* msg header over
 811:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1 +2 /* msg header overhead */);
 812:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 813:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MKK, "MKK");
 814:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _nr);
 815:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _rpm);
 816:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _current);
 817:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _temp);
 818:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 819:/home/dino/paparazzi/var/include/messages.h **** 	} else
 820:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 821:/home/dino/paparazzi/var/include/messages.h **** }
 822:/home/dino/paparazzi/var/include/messages.h **** 
 823:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ENERGY(_trans, _dev, bat, amp, energy, power) pprz_msg_send_ENERGY(&((_trans)
 824:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ENERGY(struct transport_tx *trans, struct link_device *dev, uint8_
 825:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg
 826:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg header over
 827:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+2+4 +2 /* msg header overhead */);
 828:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 829:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ENERGY, "ENERGY");
 830:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bat);
 831:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _amp);
 832:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _energy);
 833:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _power);
 834:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 835:/home/dino/paparazzi/var/include/messages.h **** 	} else
 836:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 837:/home/dino/paparazzi/var/include/messages.h **** }
 838:/home/dino/paparazzi/var/include/messages.h **** 
 839:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_BMP85_CALIB(_trans, _dev, a1, a2, a3, a4, a5, a6, b1, b2, mb, mc, md) pp
 840:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_BMP85_CALIB(struct transport_tx *trans, struct link_device *d
 841:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2
 842:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2+2+2 +2 /* m
 843:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+2+2+2+2 +2 /* msg header overhead */);
 844:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 845:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_BMP85_CALIB, "B
 846:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _a1);
 847:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _a2);
 848:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _a3);
 849:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _a4);
 850:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _a5);
 851:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _a6);
 852:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _b1);
 853:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _b2);
 854:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mb);
 855:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mc);
 856:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _md);
 857:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 858:/home/dino/paparazzi/var/include/messages.h **** 	} else
 859:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 860:/home/dino/paparazzi/var/include/messages.h **** }
 861:/home/dino/paparazzi/var/include/messages.h **** 
 862:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_BMP85(_trans, _dev, UT, UP, P, T, MSL) pprz_msg_send_BARO_BMP85(&((_tran
 863:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_BMP85(struct transport_tx *trans, struct link_device *dev, ui
 864:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4 +2 /* m
 865:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4 +2 /* msg header ov
 866:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4 +2 /* msg header overhead */);
 867:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 868:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_BMP85, "BARO_BM
 869:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _UT);
 870:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _UP);
 871:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _P);
 872:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _T);
 873:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _MSL);
 874:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 875:/home/dino/paparazzi/var/include/messages.h **** 	} else
 876:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 877:/home/dino/paparazzi/var/include/messages.h **** }
 878:/home/dino/paparazzi/var/include/messages.h **** 
 879:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SPEED_LOOP(_trans, _dev, ve_set_point, ve, vn_set_point, vn, north_sp, east_s
 880:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SPEED_LOOP(struct transport_tx *trans, struct link_device *dev, ui
 881:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /*
 882:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /* msg header 
 883:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4 +2 /* msg header overhead */);
 884:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 885:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SPEED_LOOP, "SPEED_L
 886:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ve_set_point);
 887:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ve);
 888:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _vn_set_point);
 889:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _vn);
 890:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _north_sp);
 891:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _east_sp);
 892:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 893:/home/dino/paparazzi/var/include/messages.h **** 	} else
 894:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 895:/home/dino/paparazzi/var/include/messages.h **** }
 896:/home/dino/paparazzi/var/include/messages.h **** 
 897:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ALT_KALMAN(_trans, _dev, p00, p01, p10, p11) pprz_msg_send_ALT_KALMAN(&((_tra
 898:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ALT_KALMAN(struct transport_tx *trans, struct link_device *dev, ui
 899:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 900:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 901:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 902:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 903:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ALT_KALMAN, "ALT_KAL
 904:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p00);
 905:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p01);
 906:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p10);
 907:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p11);
 908:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 909:/home/dino/paparazzi/var/include/messages.h **** 	} else
 910:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 911:/home/dino/paparazzi/var/include/messages.h **** }
 912:/home/dino/paparazzi/var/include/messages.h **** 
 913:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ESTIMATOR(_trans, _dev, z, z_dot) pprz_msg_send_ESTIMATOR(&((_trans).trans_tx
 914:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ESTIMATOR(struct transport_tx *trans, struct link_device *dev, uin
 915:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
 916:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
 917:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
 918:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 919:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ESTIMATOR, "ESTIMATO
 920:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z);
 921:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot);
 922:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 923:/home/dino/paparazzi/var/include/messages.h **** 	} else
 924:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 925:/home/dino/paparazzi/var/include/messages.h **** }
 926:/home/dino/paparazzi/var/include/messages.h **** 
 927:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TUNE_ROLL(_trans, _dev, p, phi, phi_sp) pprz_msg_send_TUNE_ROLL(&((_trans).tr
 928:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TUNE_ROLL(struct transport_tx *trans, struct link_device *dev, uin
 929:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
 930:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 931:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 932:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 933:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TUNE_ROLL, "TUNE_ROL
 934:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p);
 935:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
 936:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi_sp);
 937:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 938:/home/dino/paparazzi/var/include/messages.h **** 	} else
 939:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 940:/home/dino/paparazzi/var/include/messages.h **** }
 941:/home/dino/paparazzi/var/include/messages.h **** 
 942:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_MS5534A(_trans, _dev, pressure, temp, alt) pprz_msg_send_BARO_MS5534A(&(
 943:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_MS5534A(struct transport_tx *trans, struct link_device *dev, 
 944:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+4 +2 /* msg h
 945:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+4 +2 /* msg header overhe
 946:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+2+4 +2 /* msg header overhead */);
 947:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 948:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_MS5534A, "BARO_
 949:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _pressure);
 950:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temp);
 951:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alt);
 952:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 953:/home/dino/paparazzi/var/include/messages.h **** 	} else
 954:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 955:/home/dino/paparazzi/var/include/messages.h **** }
 956:/home/dino/paparazzi/var/include/messages.h **** 
 957:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PRESSURE(_trans, _dev, airspeed_adc, airspeed, altitude_adc, altitude) pprz_m
 958:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PRESSURE(struct transport_tx *trans, struct link_device *dev, uint
 959:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 960:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 961:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 962:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 963:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PRESSURE, "PRESSURE"
 964:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed_adc);
 965:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
 966:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _altitude_adc);
 967:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _altitude);
 968:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 969:/home/dino/paparazzi/var/include/messages.h **** 	} else
 970:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 971:/home/dino/paparazzi/var/include/messages.h **** }
 972:/home/dino/paparazzi/var/include/messages.h **** 
 973:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_WORDS(_trans, _dev, w1, w2, w3, w4) pprz_msg_send_BARO_WORDS(&((_trans).
 974:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_WORDS(struct transport_tx *trans, struct link_device *dev, ui
 975:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg
 976:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg header over
 977:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2 +2 /* msg header overhead */);
 978:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 979:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_WORDS, "BARO_WO
 980:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _w1);
 981:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _w2);
 982:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _w3);
 983:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _w4);
 984:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 985:/home/dino/paparazzi/var/include/messages.h **** 	} else
 986:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 987:/home/dino/paparazzi/var/include/messages.h **** }
 988:/home/dino/paparazzi/var/include/messages.h **** 
 989:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WP_MOVED_LLA(_trans, _dev, wp_id, lat, lon, alt) pprz_msg_send_WP_MOVED_LLA(&
 990:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WP_MOVED_LLA(struct transport_tx *trans, struct link_device *dev, 
 991:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4 +2 /* msg
 992:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4 +2 /* msg header over
 993:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+4 +2 /* msg header overhead */);
 994:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 995:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WP_MOVED_LLA, "WP_MO
 996:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_id);
 997:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lat);
 998:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lon);
 999:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
1000:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1001:/home/dino/paparazzi/var/include/messages.h **** 	} else
1002:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1003:/home/dino/paparazzi/var/include/messages.h **** }
1004:/home/dino/paparazzi/var/include/messages.h **** 
1005:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CHRONO(_trans, _dev, tag, time) pprz_msg_send_CHRONO(&((_trans).trans_tx), &(
1006:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CHRONO(struct transport_tx *trans, struct link_device *dev, uint8_
1007:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg hea
1008:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg header overhead
1009:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4 +2 /* msg header overhead */);
1010:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1011:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CHRONO, "CHRONO");
1012:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _tag);
1013:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _time);
1014:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1015:/home/dino/paparazzi/var/include/messages.h **** 	} else
1016:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1017:/home/dino/paparazzi/var/include/messages.h **** }
1018:/home/dino/paparazzi/var/include/messages.h **** 
1019:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WP_MOVED_ENU(_trans, _dev, wp_id, east, north, up) pprz_msg_send_WP_MOVED_ENU
1020:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WP_MOVED_ENU(struct transport_tx *trans, struct link_device *dev, 
1021:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4 +2 /* msg
1022:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4 +2 /* msg header over
1023:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+4 +2 /* msg header overhead */);
1024:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1025:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WP_MOVED_ENU, "WP_MO
1026:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_id);
1027:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _east);
1028:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _north);
1029:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _up);
1030:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1031:/home/dino/paparazzi/var/include/messages.h **** 	} else
1032:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1033:/home/dino/paparazzi/var/include/messages.h **** }
1034:/home/dino/paparazzi/var/include/messages.h **** 
1035:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WINDTURBINE_STATUS_(_trans, _dev, ac_id, tb_id, sync_itow, cycle_time) pprz_m
1036:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WINDTURBINE_STATUS_(struct transport_tx *trans, struct link_device
1037:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4 +2 /* msg
1038:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4 +2 /* msg header over
1039:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4 +2 /* msg header overhead */);
1040:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1041:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WINDTURBINE_STATUS_,
1042:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
1043:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _tb_id);
1044:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _sync_itow);
1045:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _cycle_time);
1046:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1047:/home/dino/paparazzi/var/include/messages.h **** 	} else
1048:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1049:/home/dino/paparazzi/var/include/messages.h **** }
1050:/home/dino/paparazzi/var/include/messages.h **** 
1051:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_RC_3CH_(_trans, _dev, throttle_mode, roll, pitch) pprz_msg_send_RC_3CH_(&((_t
1052:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_RC_3CH_(struct transport_tx *trans, struct link_device *dev, uint8
1053:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg h
1054:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhe
1055:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
1056:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1057:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_RC_3CH_, "RC_3CH_");
1058:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _throttle_mode);
1059:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _roll);
1060:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _pitch);
1061:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1062:/home/dino/paparazzi/var/include/messages.h **** 	} else
1063:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1064:/home/dino/paparazzi/var/include/messages.h **** }
1065:/home/dino/paparazzi/var/include/messages.h **** 
1066:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MPPT(_trans, _dev, nb_values, values) pprz_msg_send_MPPT(&((_trans).trans_tx)
1067:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MPPT(struct transport_tx *trans, struct link_device *dev, uint8_t 
1068:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 
1069:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 /* msg heade
1070:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_values*2 +2 /* msg header overhead */);
1071:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1072:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MPPT, "MPPT");
1073:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_value
1074:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_ARRAY, 2 * nb_values, (void *) _valu
1075:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1076:/home/dino/paparazzi/var/include/messages.h **** 	} else
1077:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1078:/home/dino/paparazzi/var/include/messages.h **** }
1079:/home/dino/paparazzi/var/include/messages.h **** 
1080:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DEBUG_IR_I2C(_trans, _dev, ir1, ir2, top) pprz_msg_send_DEBUG_IR_I2C(&((_tran
1081:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DEBUG_IR_I2C(struct transport_tx *trans, struct link_device *dev, 
1082:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2 +2 /* msg h
1083:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2 +2 /* msg header overhe
1084:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2 +2 /* msg header overhead */);
1085:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1086:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DEBUG_IR_I2C, "DEBUG
1087:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir1);
1088:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir2);
1089:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _top);
1090:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1091:/home/dino/paparazzi/var/include/messages.h **** 	} else
1092:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1093:/home/dino/paparazzi/var/include/messages.h **** }
1094:/home/dino/paparazzi/var/include/messages.h **** 
1095:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AIRSPEED(_trans, _dev, airspeed, airspeed_sp, airspeed_cnt, groundspeed_sp) p
1096:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AIRSPEED(struct transport_tx *trans, struct link_device *dev, uint
1097:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
  68              		.loc 3 1097 0
  69 001a 276A     		ldr	r7, [r4, #32]
  70 001c 2368     		ldr	r3, [r4]
  71 001e D4F80480 		ldr	r8, [r4, #4]
  72 0022 0126     		movs	r6, #1
  73 0024 1221     		movs	r1, #18
  74 0026 8DF80B60 		strb	r6, [sp, #11]
  75              	.LVL2:
  76 002a 3846     		mov	r0, r7
  77 002c 9847     		blx	r3
  78              	.LVL3:
  79 002e 2946     		mov	r1, r5
  80 0030 0246     		mov	r2, r0
  81 0032 3846     		mov	r0, r7
  82 0034 C047     		blx	r8
  83              	.LVL4:
  84 0036 0028     		cmp	r0, #0
  85 0038 4DD0     		beq	.L3
1098:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
  86              		.loc 3 1098 0
  87 003a 276A     		ldr	r7, [r4, #32]
  88 003c 2368     		ldr	r3, [r4]
  89 003e D4F81C80 		ldr	r8, [r4, #28]
  90 0042 3846     		mov	r0, r7
  91 0044 1221     		movs	r1, #18
  92 0046 9847     		blx	r3
  93              	.LVL5:
  94 0048 2946     		mov	r1, r5
  95 004a 0246     		mov	r2, r0
  96 004c 3846     		mov	r0, r7
  97 004e C047     		blx	r8
  98              	.LVL6:
1099:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
  99              		.loc 3 1099 0
 100 0050 2369     		ldr	r3, [r4, #16]
 101 0052 206A     		ldr	r0, [r4, #32]
 102 0054 2946     		mov	r1, r5
 103 0056 1222     		movs	r2, #18
 104 0058 9847     		blx	r3
 105              	.LVL7:
1100:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 106              		.loc 3 1100 0
 107 005a 0DF10B03 		add	r3, sp, #11
 108 005e 0096     		str	r6, [sp]
 109 0060 0193     		str	r3, [sp, #4]
 110 0062 A668     		ldr	r6, [r4, #8]
 111              	.LVL8:
 112 0064 206A     		ldr	r0, [r4, #32]
 113 0066 2946     		mov	r1, r5
 114 0068 0222     		movs	r2, #2
 115 006a 0023     		movs	r3, #0
 116              	.LVL9:
 117 006c B047     		blx	r6
 118              	.LVL10:
1101:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AIRSPEED, "AIRSPEED"
 119              		.loc 3 1101 0
 120 006e 3623     		movs	r3, #54
 121 0070 0093     		str	r3, [sp]
 122 0072 1D4B     		ldr	r3, .L7+4
 123 0074 0193     		str	r3, [sp, #4]
 124 0076 E668     		ldr	r6, [r4, #12]
 125 0078 206A     		ldr	r0, [r4, #32]
 126 007a 2946     		mov	r1, r5
 127 007c 0222     		movs	r2, #2
 128 007e 0023     		movs	r3, #0
 129 0080 B047     		blx	r6
 130              	.LVL11:
1102:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
 131              		.loc 3 1102 0
 132 0082 4FF00408 		mov	r8, #4
 133 0086 194B     		ldr	r3, .L7+8
 134              	.LVL12:
 135 0088 0193     		str	r3, [sp, #4]
 136 008a A768     		ldr	r7, [r4, #8]
 137 008c 206A     		ldr	r0, [r4, #32]
 138 008e CDF80080 		str	r8, [sp]
 139 0092 2946     		mov	r1, r5
 140 0094 0A22     		movs	r2, #10
 141 0096 0023     		movs	r3, #0
 142              	.LVL13:
 143 0098 B847     		blx	r7
 144              	.LVL14:
1103:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed_sp);
 145              		.loc 3 1103 0
 146 009a 03AF     		add	r7, sp, #12
 147              	.LVL15:
 148 009c 206A     		ldr	r0, [r4, #32]
 149 009e A668     		ldr	r6, [r4, #8]
 150 00a0 CDF80080 		str	r8, [sp]
 151 00a4 2946     		mov	r1, r5
 152 00a6 0A22     		movs	r2, #10
 153 00a8 0023     		movs	r3, #0
 154 00aa 0197     		str	r7, [sp, #4]
 155 00ac B047     		blx	r6
 156              	.LVL16:
1104:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed_cnt);
 157              		.loc 3 1104 0
 158 00ae 206A     		ldr	r0, [r4, #32]
 159 00b0 A668     		ldr	r6, [r4, #8]
 160 00b2 CDF80080 		str	r8, [sp]
 161 00b6 2946     		mov	r1, r5
 162 00b8 0A22     		movs	r2, #10
 163 00ba 0023     		movs	r3, #0
 164 00bc 0197     		str	r7, [sp, #4]
 165 00be B047     		blx	r6
 166              	.LVL17:
1105:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _groundspeed_sp)
 167              		.loc 3 1105 0
 168 00c0 0023     		movs	r3, #0
 169 00c2 CDF80080 		str	r8, [sp]
 170 00c6 0197     		str	r7, [sp, #4]
 171 00c8 A668     		ldr	r6, [r4, #8]
 172 00ca 206A     		ldr	r0, [r4, #32]
 173 00cc 2946     		mov	r1, r5
 174 00ce 0A22     		movs	r2, #10
 175 00d0 B047     		blx	r6
 176              	.LVL18:
1106:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 177              		.loc 3 1106 0
 178 00d2 6369     		ldr	r3, [r4, #20]
 179 00d4 00E0     		b	.L5
 180              	.LVL19:
 181              	.L3:
1107:/home/dino/paparazzi/var/include/messages.h **** 	} else
1108:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 182              		.loc 3 1108 0
 183 00d6 A369     		ldr	r3, [r4, #24]
 184              	.L5:
 185 00d8 206A     		ldr	r0, [r4, #32]
 186 00da 2946     		mov	r1, r5
 187 00dc 9847     		blx	r3
 188              	.LVL20:
 189              	.LBE11:
 190              	.LBE10:
 153:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_AIRSPEED(trans, dev, AC_ID, stateGetAirspeed_f(), &zero, &zero, &zero);
 154:firmwares/fixedwing/autopilot.c **** #endif
 155:firmwares/fixedwing/autopilot.c **** }
 191              		.loc 1 155 0
 192 00de 04B0     		add	sp, sp, #16
 193              		.cfi_def_cfa_offset 24
 194              		@ sp needed
 195 00e0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 196              	.LVL21:
 197              	.L8:
 198              		.align	2
 199              	.L7:
 200 00e4 00000000 		.word	state
 201 00e8 00000000 		.word	.LC0
 202 00ec 5C020000 		.word	state+604
 203              		.cfi_endproc
 204              	.LFE469:
 206              		.section	.text.send_estimator,"ax",%progbits
 207              		.align	1
 208              		.thumb
 209              		.thumb_func
 211              	send_estimator:
 212              	.LFB464:
 101:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ESTIMATOR(trans, dev, AC_ID,
 213              		.loc 1 101 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 8
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              	.LVL22:
 218 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 219              		.cfi_def_cfa_offset 40
 220              		.cfi_offset 4, -24
 221              		.cfi_offset 5, -20
 222              		.cfi_offset 6, -16
 223              		.cfi_offset 7, -12
 224              		.cfi_offset 8, -8
 225              		.cfi_offset 14, -4
 226              	.LBB18:
 227              	.LBB19:
 677:./state.h     ****     stateCalcPositionUtm_f();
 228              		.loc 2 677 0
 229 0004 314B     		ldr	r3, .L15
 230 0006 1A88     		ldrh	r2, [r3]
 231 0008 12F4007F 		tst	r2, #512
 232              	.LBE19:
 233              	.LBE18:
 101:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ESTIMATOR(trans, dev, AC_ID,
 234              		.loc 1 101 0
 235 000c 0446     		mov	r4, r0
 236 000e 0D46     		mov	r5, r1
 237 0010 1E46     		mov	r6, r3
 238              	.LBB21:
 239              	.LBB20:
 677:./state.h     ****     stateCalcPositionUtm_f();
 240              		.loc 2 677 0
 241 0012 01D1     		bne	.L10
 678:./state.h     ****   }
 242              		.loc 2 678 0
 243 0014 FFF7FEFF 		bl	stateCalcPositionUtm_f
 244              	.LVL23:
 245              	.L10:
 246              	.LBE20:
 247              	.LBE21:
 248              	.LBB22:
 249              	.LBB23:
 896:./state.h     ****     stateCalcSpeedEnu_f();
 250              		.loc 2 896 0
 251 0018 B6F81431 		ldrh	r3, [r6, #276]
 252 001c 1B06     		lsls	r3, r3, #24
 253 001e 01D4     		bmi	.L11
 897:./state.h     ****   }
 254              		.loc 2 897 0
 255 0020 FFF7FEFF 		bl	stateCalcSpeedEnu_f
 256              	.LVL24:
 257              	.L11:
 258              	.LBE23:
 259              	.LBE22:
 260              	.LBB24:
 261              	.LBB25:
 915:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
 262              		.loc 3 915 0
 263 0024 276A     		ldr	r7, [r4, #32]
 264 0026 2368     		ldr	r3, [r4]
 265 0028 D4F80480 		ldr	r8, [r4, #4]
 266 002c 0126     		movs	r6, #1
 267 002e 0A21     		movs	r1, #10
 268 0030 8DF80F60 		strb	r6, [sp, #15]
 269              	.LVL25:
 270 0034 3846     		mov	r0, r7
 271 0036 9847     		blx	r3
 272              	.LVL26:
 273 0038 2946     		mov	r1, r5
 274 003a 0246     		mov	r2, r0
 275 003c 3846     		mov	r0, r7
 276 003e C047     		blx	r8
 277              	.LVL27:
 278 0040 0028     		cmp	r0, #0
 279 0042 3BD0     		beq	.L12
 916:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
 280              		.loc 3 916 0
 281 0044 276A     		ldr	r7, [r4, #32]
 282 0046 2368     		ldr	r3, [r4]
 283 0048 D4F81C80 		ldr	r8, [r4, #28]
 284 004c 3846     		mov	r0, r7
 285 004e 0A21     		movs	r1, #10
 286 0050 9847     		blx	r3
 287              	.LVL28:
 288 0052 2946     		mov	r1, r5
 289 0054 0246     		mov	r2, r0
 290 0056 3846     		mov	r0, r7
 291 0058 C047     		blx	r8
 292              	.LVL29:
 917:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 293              		.loc 3 917 0
 294 005a 2369     		ldr	r3, [r4, #16]
 295 005c 206A     		ldr	r0, [r4, #32]
 920:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot);
 296              		.loc 3 920 0
 297 005e DFF87480 		ldr	r8, .L15+8
 298              	.LVL30:
 917:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 299              		.loc 3 917 0
 300 0062 2946     		mov	r1, r5
 301 0064 0A22     		movs	r2, #10
 302 0066 9847     		blx	r3
 303              	.LVL31:
 918:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ESTIMATOR, "ESTIMATO
 304              		.loc 3 918 0
 305 0068 0DF10F03 		add	r3, sp, #15
 306 006c 0096     		str	r6, [sp]
 307 006e 0193     		str	r3, [sp, #4]
 308 0070 A668     		ldr	r6, [r4, #8]
 309              	.LVL32:
 310 0072 206A     		ldr	r0, [r4, #32]
 311 0074 2946     		mov	r1, r5
 312 0076 0222     		movs	r2, #2
 313 0078 0023     		movs	r3, #0
 314              	.LVL33:
 315 007a B047     		blx	r6
 316              	.LVL34:
 919:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z);
 317              		.loc 3 919 0
 318 007c 2A23     		movs	r3, #42
 319 007e 0093     		str	r3, [sp]
 320 0080 134B     		ldr	r3, .L15+4
 321 0082 0193     		str	r3, [sp, #4]
 322 0084 E668     		ldr	r6, [r4, #12]
 323 0086 206A     		ldr	r0, [r4, #32]
 324 0088 2946     		mov	r1, r5
 325 008a 0222     		movs	r2, #2
 326 008c 0023     		movs	r3, #0
 920:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot);
 327              		.loc 3 920 0
 328 008e 0427     		movs	r7, #4
 919:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z);
 329              		.loc 3 919 0
 330 0090 B047     		blx	r6
 331              	.LVL35:
 920:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot);
 332              		.loc 3 920 0
 333 0092 206A     		ldr	r0, [r4, #32]
 334 0094 A668     		ldr	r6, [r4, #8]
 335 0096 0097     		str	r7, [sp]
 336 0098 2946     		mov	r1, r5
 337 009a 0A22     		movs	r2, #10
 338 009c 0023     		movs	r3, #0
 339 009e CDF80480 		str	r8, [sp, #4]
 340 00a2 B047     		blx	r6
 341              	.LVL36:
 921:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 342              		.loc 3 921 0
 343 00a4 08F1E406 		add	r6, r8, #228
 344 00a8 0196     		str	r6, [sp, #4]
 345 00aa 0023     		movs	r3, #0
 346 00ac 0097     		str	r7, [sp]
 347 00ae A668     		ldr	r6, [r4, #8]
 348 00b0 206A     		ldr	r0, [r4, #32]
 349 00b2 2946     		mov	r1, r5
 350 00b4 0A22     		movs	r2, #10
 351 00b6 B047     		blx	r6
 352              	.LVL37:
 922:/home/dino/paparazzi/var/include/messages.h **** 	} else
 353              		.loc 3 922 0
 354 00b8 6369     		ldr	r3, [r4, #20]
 355 00ba 00E0     		b	.L14
 356              	.LVL38:
 357              	.L12:
 924:/home/dino/paparazzi/var/include/messages.h **** }
 358              		.loc 3 924 0
 359 00bc A369     		ldr	r3, [r4, #24]
 360              	.L14:
 361 00be 206A     		ldr	r0, [r4, #32]
 362 00c0 2946     		mov	r1, r5
 363 00c2 9847     		blx	r3
 364              	.LVL39:
 365              	.LBE25:
 366              	.LBE24:
 104:firmwares/fixedwing/autopilot.c **** 
 367              		.loc 1 104 0
 368 00c4 04B0     		add	sp, sp, #16
 369              		.cfi_def_cfa_offset 24
 370              		@ sp needed
 371 00c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 372              	.LVL40:
 373              	.L16:
 374 00ca 00BF     		.align	2
 375              	.L15:
 376 00cc 00000000 		.word	state
 377 00d0 09000000 		.word	.LC1
 378 00d4 80000000 		.word	state+128
 379              		.cfi_endproc
 380              	.LFE464:
 382              		.section	.text.send_energy,"ax",%progbits
 383              		.align	1
 384              		.thumb
 385              		.thumb_func
 387              	send_energy:
 388              	.LFB466:
 117:firmwares/fixedwing/autopilot.c ****   uint16_t e = energy;
 389              		.loc 1 117 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 16
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393              	.LVL41:
 118:firmwares/fixedwing/autopilot.c ****   float vsup = ((float)vsupply) / 10.0f;
 394              		.loc 1 118 0
 395 0000 464B     		ldr	r3, .L21
 120:firmwares/fixedwing/autopilot.c ****   float power = vsup * curs;
 396              		.loc 1 120 0
 397 0002 DFED476A 		flds	s13, .L21+4
 118:firmwares/fixedwing/autopilot.c ****   float vsup = ((float)vsupply) / 10.0f;
 398              		.loc 1 118 0
 399 0006 D3ED007A 		flds	s15, [r3]
 117:firmwares/fixedwing/autopilot.c ****   uint16_t e = energy;
 400              		.loc 1 117 0
 401 000a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 402              		.cfi_def_cfa_offset 24
 403              		.cfi_offset 4, -24
 404              		.cfi_offset 5, -20
 405              		.cfi_offset 6, -16
 406              		.cfi_offset 7, -12
 407              		.cfi_offset 8, -8
 408              		.cfi_offset 14, -4
 118:firmwares/fixedwing/autopilot.c ****   float vsup = ((float)vsupply) / 10.0f;
 409              		.loc 1 118 0
 410 000e FCEEE77A 		ftouizs	s15, s15
 117:firmwares/fixedwing/autopilot.c ****   uint16_t e = energy;
 411              		.loc 1 117 0
 412 0012 86B0     		sub	sp, sp, #24
 413              		.cfi_def_cfa_offset 48
 118:firmwares/fixedwing/autopilot.c ****   float vsup = ((float)vsupply) / 10.0f;
 414              		.loc 1 118 0
 415 0014 17EE903A 		fmrs	r3, s15	@ int
 416 0018 ADF80A30 		strh	r3, [sp, #10]	@ movhi
 119:firmwares/fixedwing/autopilot.c ****   float curs = ((float)current) / 1000.0f;
 417              		.loc 1 119 0
 418 001c 414B     		ldr	r3, .L21+8
 419              	.LBB28:
 420              	.LBB29:
 825:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg header over
 421              		.loc 3 825 0
 422 001e 076A     		ldr	r7, [r0, #32]
 423              	.LBE29:
 424              	.LBE28:
 119:firmwares/fixedwing/autopilot.c ****   float curs = ((float)current) / 1000.0f;
 425              		.loc 1 119 0
 426 0020 1B88     		ldrh	r3, [r3]
 427              	.LBB35:
 428              	.LBB30:
 825:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg header over
 429              		.loc 3 825 0
 430 0022 D0F80480 		ldr	r8, [r0, #4]
 431              	.LBE30:
 432              	.LBE35:
 119:firmwares/fixedwing/autopilot.c ****   float curs = ((float)current) / 1000.0f;
 433              		.loc 1 119 0
 434 0026 07EE903A 		fmsr	s15, r3	@ int
 120:firmwares/fixedwing/autopilot.c ****   float power = vsup * curs;
 435              		.loc 1 120 0
 436 002a 3F4B     		ldr	r3, .L21+12
 119:firmwares/fixedwing/autopilot.c ****   float curs = ((float)current) / 1000.0f;
 437              		.loc 1 119 0
 438 002c F8EE677A 		fuitos	s15, s15
 439 0030 B2EE047A 		fconsts	s14, #36
 440 0034 C7EE877A 		fdivs	s15, s15, s14
 441 0038 0126     		movs	r6, #1
 117:firmwares/fixedwing/autopilot.c ****   uint16_t e = energy;
 442              		.loc 1 117 0
 443 003a 0D46     		mov	r5, r1
 444 003c 0446     		mov	r4, r0
 445              	.LBB36:
 446              	.LBB31:
 825:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg header over
 447              		.loc 3 825 0
 448 003e 1021     		movs	r1, #16
 449              	.LVL42:
 450 0040 8DF80960 		strb	r6, [sp, #9]
 451              	.LBE31:
 452              	.LBE36:
 120:firmwares/fixedwing/autopilot.c ****   float power = vsup * curs;
 453              		.loc 1 120 0
 454 0044 93ED007A 		flds	s14, [r3]	@ int
 119:firmwares/fixedwing/autopilot.c ****   float curs = ((float)current) / 1000.0f;
 455              		.loc 1 119 0
 456 0048 CDED037A 		fsts	s15, [sp, #12]
 120:firmwares/fixedwing/autopilot.c ****   float power = vsup * curs;
 457              		.loc 1 120 0
 458 004c B8EEC77A 		fsitos	s14, s14
 459              	.LBB37:
 460              	.LBB32:
 825:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg header over
 461              		.loc 3 825 0
 462 0050 0368     		ldr	r3, [r0]
 463              	.LBE32:
 464              	.LBE37:
 120:firmwares/fixedwing/autopilot.c ****   float power = vsup * curs;
 465              		.loc 1 120 0
 466 0052 87EE267A 		fdivs	s14, s14, s13
 467              	.LBB38:
 468              	.LBB33:
 825:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg header over
 469              		.loc 3 825 0
 470 0056 3846     		mov	r0, r7
 471              	.LVL43:
 472              	.LBE33:
 473              	.LBE38:
 121:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ENERGY(trans, dev, AC_ID, &vsup, &curs, &e, &power);
 474              		.loc 1 121 0
 475 0058 67EE877A 		fmuls	s15, s15, s14
 120:firmwares/fixedwing/autopilot.c ****   float power = vsup * curs;
 476              		.loc 1 120 0
 477 005c 8DED047A 		fsts	s14, [sp, #16]
 121:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ENERGY(trans, dev, AC_ID, &vsup, &curs, &e, &power);
 478              		.loc 1 121 0
 479 0060 CDED057A 		fsts	s15, [sp, #20]
 480              	.LVL44:
 481              	.LBB39:
 482              	.LBB34:
 825:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg header over
 483              		.loc 3 825 0
 484 0064 9847     		blx	r3
 485              	.LVL45:
 486 0066 2946     		mov	r1, r5
 487 0068 0246     		mov	r2, r0
 488 006a 3846     		mov	r0, r7
 489 006c C047     		blx	r8
 490              	.LVL46:
 491 006e 0028     		cmp	r0, #0
 492 0070 4CD0     		beq	.L18
 826:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+2+4 +2 /* msg header overhead */);
 493              		.loc 3 826 0
 494 0072 276A     		ldr	r7, [r4, #32]
 495 0074 2368     		ldr	r3, [r4]
 496 0076 D4F81C80 		ldr	r8, [r4, #28]
 497 007a 3846     		mov	r0, r7
 498 007c 1021     		movs	r1, #16
 499 007e 9847     		blx	r3
 500              	.LVL47:
 501 0080 2946     		mov	r1, r5
 502 0082 0246     		mov	r2, r0
 503 0084 3846     		mov	r0, r7
 504 0086 C047     		blx	r8
 505              	.LVL48:
 827:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 506              		.loc 3 827 0
 507 0088 2369     		ldr	r3, [r4, #16]
 508 008a 206A     		ldr	r0, [r4, #32]
 509 008c 2946     		mov	r1, r5
 510 008e 1022     		movs	r2, #16
 511 0090 9847     		blx	r3
 512              	.LVL49:
 828:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ENERGY, "ENERGY");
 513              		.loc 3 828 0
 514 0092 0DF10903 		add	r3, sp, #9
 515 0096 0096     		str	r6, [sp]
 516 0098 0193     		str	r3, [sp, #4]
 517 009a A668     		ldr	r6, [r4, #8]
 518              	.LVL50:
 519 009c 206A     		ldr	r0, [r4, #32]
 520 009e 2946     		mov	r1, r5
 521 00a0 0222     		movs	r2, #2
 522 00a2 0023     		movs	r3, #0
 523              	.LVL51:
 524 00a4 B047     		blx	r6
 525              	.LVL52:
 829:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bat);
 526              		.loc 3 829 0
 527 00a6 2523     		movs	r3, #37
 528 00a8 0093     		str	r3, [sp]
 529 00aa 204B     		ldr	r3, .L21+16
 530 00ac 0193     		str	r3, [sp, #4]
 531 00ae E668     		ldr	r6, [r4, #12]
 532 00b0 206A     		ldr	r0, [r4, #32]
 533 00b2 2946     		mov	r1, r5
 534 00b4 0222     		movs	r2, #2
 535 00b6 0023     		movs	r3, #0
 536 00b8 B047     		blx	r6
 537              	.LVL53:
 830:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _amp);
 538              		.loc 3 830 0
 539 00ba 0426     		movs	r6, #4
 540 00bc 03AB     		add	r3, sp, #12
 541              	.LVL54:
 542 00be 0096     		str	r6, [sp]
 543 00c0 0193     		str	r3, [sp, #4]
 544 00c2 A768     		ldr	r7, [r4, #8]
 545 00c4 206A     		ldr	r0, [r4, #32]
 546 00c6 2946     		mov	r1, r5
 547 00c8 0A22     		movs	r2, #10
 548 00ca 0023     		movs	r3, #0
 549              	.LVL55:
 550 00cc B847     		blx	r7
 551              	.LVL56:
 831:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _energy);
 552              		.loc 3 831 0
 553 00ce 04AB     		add	r3, sp, #16
 554              	.LVL57:
 555 00d0 0096     		str	r6, [sp]
 556 00d2 0193     		str	r3, [sp, #4]
 557 00d4 A768     		ldr	r7, [r4, #8]
 558 00d6 206A     		ldr	r0, [r4, #32]
 559 00d8 2946     		mov	r1, r5
 560 00da 0A22     		movs	r2, #10
 561 00dc 0023     		movs	r3, #0
 562              	.LVL58:
 563 00de B847     		blx	r7
 564              	.LVL59:
 832:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _power);
 565              		.loc 3 832 0
 566 00e0 0223     		movs	r3, #2
 567 00e2 0093     		str	r3, [sp]
 568 00e4 0DF10A03 		add	r3, sp, #10
 569              	.LVL60:
 570 00e8 3246     		mov	r2, r6
 571 00ea 0193     		str	r3, [sp, #4]
 572 00ec 206A     		ldr	r0, [r4, #32]
 573 00ee A768     		ldr	r7, [r4, #8]
 574 00f0 2946     		mov	r1, r5
 575 00f2 0023     		movs	r3, #0
 576              	.LVL61:
 577 00f4 B847     		blx	r7
 578              	.LVL62:
 833:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 579              		.loc 3 833 0
 580 00f6 05AB     		add	r3, sp, #20
 581              	.LVL63:
 582 00f8 0096     		str	r6, [sp]
 583 00fa 0193     		str	r3, [sp, #4]
 584 00fc A668     		ldr	r6, [r4, #8]
 585 00fe 206A     		ldr	r0, [r4, #32]
 586 0100 0023     		movs	r3, #0
 587              	.LVL64:
 588 0102 2946     		mov	r1, r5
 589 0104 0A22     		movs	r2, #10
 590 0106 B047     		blx	r6
 591              	.LVL65:
 834:/home/dino/paparazzi/var/include/messages.h **** 	} else
 592              		.loc 3 834 0
 593 0108 6369     		ldr	r3, [r4, #20]
 594 010a 00E0     		b	.L20
 595              	.L18:
 836:/home/dino/paparazzi/var/include/messages.h **** }
 596              		.loc 3 836 0
 597 010c A369     		ldr	r3, [r4, #24]
 598              	.L20:
 599 010e 206A     		ldr	r0, [r4, #32]
 600 0110 2946     		mov	r1, r5
 601 0112 9847     		blx	r3
 602              	.LVL66:
 603              	.LBE34:
 604              	.LBE39:
 123:firmwares/fixedwing/autopilot.c **** 
 605              		.loc 1 123 0
 606 0114 06B0     		add	sp, sp, #24
 607              		.cfi_def_cfa_offset 24
 608              		@ sp needed
 609 0116 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 610              	.LVL67:
 611              	.L22:
 612 011a 00BF     		.align	2
 613              	.L21:
 614 011c 00000000 		.word	.LANCHOR0
 615 0120 00007A44 		.word	1148846080
 616 0124 00000000 		.word	.LANCHOR1
 617 0128 00000000 		.word	.LANCHOR2
 618 012c 13000000 		.word	.LC2
 619              		.cfi_endproc
 620              	.LFE466:
 622              		.section	.text.send_dl_value,"ax",%progbits
 623              		.align	1
 624              		.thumb
 625              		.thumb_func
 627              	send_dl_value:
 628              	.LFB467:
 126:firmwares/fixedwing/autopilot.c ****   PeriodicSendDlValue(trans, dev);
 629              		.loc 1 126 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 8
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              	.LVL68:
 634 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 635              		.cfi_def_cfa_offset 28
 636              		.cfi_offset 4, -28
 637              		.cfi_offset 5, -24
 638              		.cfi_offset 6, -20
 639              		.cfi_offset 7, -16
 640              		.cfi_offset 8, -12
 641              		.cfi_offset 9, -8
 642              		.cfi_offset 14, -4
 643              	.LBB43:
 127:firmwares/fixedwing/autopilot.c **** }
 644              		.loc 1 127 0
 645 0004 464E     		ldr	r6, .L47
 646 0006 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 647 0008 0B2B     		cmp	r3, #11
 648 000a 84BF     		itt	hi
 649 000c 0023     		movhi	r3, #0
 650 000e 3370     		strbhi	r3, [r6]
 651 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 652              	.LBE43:
 126:firmwares/fixedwing/autopilot.c ****   PeriodicSendDlValue(trans, dev);
 653              		.loc 1 126 0
 654 0012 85B0     		sub	sp, sp, #20
 655              		.cfi_def_cfa_offset 48
 126:firmwares/fixedwing/autopilot.c ****   PeriodicSendDlValue(trans, dev);
 656              		.loc 1 126 0
 657 0014 0446     		mov	r4, r0
 658 0016 0D46     		mov	r5, r1
 659              	.LBB46:
 127:firmwares/fixedwing/autopilot.c **** }
 660              		.loc 1 127 0
 661 0018 0B2B     		cmp	r3, #11
 662 001a 2AD8     		bhi	.L25
 663 001c DFE803F0 		tbb	[pc, r3]
 664              	.L27:
 665 0020 06       		.byte	(.L26-.L27)/2
 666 0021 08       		.byte	(.L28-.L27)/2
 667 0022 11       		.byte	(.L29-.L27)/2
 668 0023 13       		.byte	(.L30-.L27)/2
 669 0024 15       		.byte	(.L31-.L27)/2
 670 0025 17       		.byte	(.L32-.L27)/2
 671 0026 1A       		.byte	(.L33-.L27)/2
 672 0027 1D       		.byte	(.L34-.L27)/2
 673 0028 1F       		.byte	(.L35-.L27)/2
 674 0029 21       		.byte	(.L36-.L27)/2
 675 002a 23       		.byte	(.L37-.L27)/2
 676 002b 27       		.byte	(.L38-.L27)/2
 677              		.p2align 1
 678              	.L26:
 127:firmwares/fixedwing/autopilot.c **** }
 679              		.loc 1 127 0 is_stmt 0 discriminator 5
 680 002c 3D4B     		ldr	r3, .L47+4
 681 002e 00E0     		b	.L42
 682              	.L28:
 127:firmwares/fixedwing/autopilot.c **** }
 683              		.loc 1 127 0 discriminator 6
 684 0030 3D4B     		ldr	r3, .L47+8
 685              	.L42:
 686 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 687              	.L43:
 688 0034 07EE903A 		fmsr	s15, r3	@ int
 689 0038 F8EE677A 		fuitos	s15, s15
 690 003c CDED037A 		fsts	s15, [sp, #12]
 691 0040 19E0     		b	.L39
 692              	.L29:
 127:firmwares/fixedwing/autopilot.c **** }
 693              		.loc 1 127 0 discriminator 7
 694 0042 3A4B     		ldr	r3, .L47+12
 695 0044 07E0     		b	.L46
 696              	.L30:
 127:firmwares/fixedwing/autopilot.c **** }
 697              		.loc 1 127 0 discriminator 8
 698 0046 3A4B     		ldr	r3, .L47+16
 699 0048 05E0     		b	.L46
 700              	.L31:
 127:firmwares/fixedwing/autopilot.c **** }
 701              		.loc 1 127 0 discriminator 9
 702 004a 3A4B     		ldr	r3, .L47+20
 703 004c 03E0     		b	.L46
 704              	.L32:
 127:firmwares/fixedwing/autopilot.c **** }
 705              		.loc 1 127 0 discriminator 10
 706 004e 3A4B     		ldr	r3, .L47+24
 707 0050 1B88     		ldrh	r3, [r3]
 708 0052 EFE7     		b	.L43
 709              	.L33:
 127:firmwares/fixedwing/autopilot.c **** }
 710              		.loc 1 127 0 discriminator 11
 711 0054 394B     		ldr	r3, .L47+28
 712              	.L46:
 713 0056 1B68     		ldr	r3, [r3]	@ float
 714 0058 0CE0     		b	.L44
 715              	.L34:
 127:firmwares/fixedwing/autopilot.c **** }
 716              		.loc 1 127 0 discriminator 12
 717 005a 394B     		ldr	r3, .L47+32
 718 005c E9E7     		b	.L42
 719              	.L35:
 127:firmwares/fixedwing/autopilot.c **** }
 720              		.loc 1 127 0 discriminator 13
 721 005e 394B     		ldr	r3, .L47+36
 722 0060 E7E7     		b	.L42
 723              	.L36:
 127:firmwares/fixedwing/autopilot.c **** }
 724              		.loc 1 127 0 discriminator 14
 725 0062 394B     		ldr	r3, .L47+40
 726 0064 E5E7     		b	.L42
 727              	.L37:
 127:firmwares/fixedwing/autopilot.c **** }
 728              		.loc 1 127 0 discriminator 15
 729 0066 394B     		ldr	r3, .L47+44
 730 0068 B3F8F830 		ldrh	r3, [r3, #248]
 731 006c E2E7     		b	.L43
 732              	.L38:
 127:firmwares/fixedwing/autopilot.c **** }
 733              		.loc 1 127 0 discriminator 16
 734 006e 384B     		ldr	r3, .L47+48
 735 0070 DFE7     		b	.L42
 736              	.L25:
 127:firmwares/fixedwing/autopilot.c **** }
 737              		.loc 1 127 0 discriminator 4
 738 0072 0023     		movs	r3, #0
 739              	.L44:
 740 0074 0393     		str	r3, [sp, #12]	@ float
 741              	.L39:
 742              	.LVL69:
 743              	.LBB44:
 744              	.LBB45:
 729:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg header overhead
 745              		.loc 3 729 0 is_stmt 1 discriminator 29
 746 0076 276A     		ldr	r7, [r4, #32]
 747 0078 2368     		ldr	r3, [r4]
 748 007a D4F80490 		ldr	r9, [r4, #4]
 749 007e 4FF00108 		mov	r8, #1
 750 0082 0721     		movs	r1, #7
 751              	.LVL70:
 752 0084 8DF80B80 		strb	r8, [sp, #11]
 753              	.LVL71:
 754 0088 3846     		mov	r0, r7
 755              	.LVL72:
 756 008a 9847     		blx	r3
 757              	.LVL73:
 758 008c 2946     		mov	r1, r5
 759 008e 0246     		mov	r2, r0
 760 0090 3846     		mov	r0, r7
 761 0092 C847     		blx	r9
 762              	.LVL74:
 763 0094 0028     		cmp	r0, #0
 764 0096 39D0     		beq	.L40
 730:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4 +2 /* msg header overhead */);
 765              		.loc 3 730 0
 766 0098 276A     		ldr	r7, [r4, #32]
 767 009a 2368     		ldr	r3, [r4]
 768 009c D4F81C90 		ldr	r9, [r4, #28]
 769 00a0 3846     		mov	r0, r7
 770 00a2 0721     		movs	r1, #7
 771 00a4 9847     		blx	r3
 772              	.LVL75:
 773 00a6 2946     		mov	r1, r5
 774 00a8 0246     		mov	r2, r0
 775 00aa 3846     		mov	r0, r7
 776 00ac C847     		blx	r9
 777              	.LVL76:
 731:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 778              		.loc 3 731 0
 779 00ae 2369     		ldr	r3, [r4, #16]
 780 00b0 206A     		ldr	r0, [r4, #32]
 781 00b2 2946     		mov	r1, r5
 782 00b4 0722     		movs	r2, #7
 783 00b6 9847     		blx	r3
 784              	.LVL77:
 732:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DL_VALUE, "DL_VALUE"
 785              		.loc 3 732 0
 786 00b8 0DF10B03 		add	r3, sp, #11
 787 00bc 0193     		str	r3, [sp, #4]
 788 00be A768     		ldr	r7, [r4, #8]
 789 00c0 206A     		ldr	r0, [r4, #32]
 790 00c2 CDF80080 		str	r8, [sp]
 791 00c6 2946     		mov	r1, r5
 792 00c8 0222     		movs	r2, #2
 793 00ca 0023     		movs	r3, #0
 794 00cc B847     		blx	r7
 795              	.LVL78:
 733:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _index);
 796              		.loc 3 733 0
 797 00ce 1F23     		movs	r3, #31
 798 00d0 0093     		str	r3, [sp]
 799 00d2 204B     		ldr	r3, .L47+52
 800 00d4 0193     		str	r3, [sp, #4]
 801 00d6 E768     		ldr	r7, [r4, #12]
 802 00d8 206A     		ldr	r0, [r4, #32]
 803 00da 2946     		mov	r1, r5
 804 00dc 0222     		movs	r2, #2
 805 00de 0023     		movs	r3, #0
 806 00e0 B847     		blx	r7
 807              	.LVL79:
 734:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _value);
 808              		.loc 3 734 0
 809 00e2 A768     		ldr	r7, [r4, #8]
 810 00e4 206A     		ldr	r0, [r4, #32]
 811 00e6 CDF80080 		str	r8, [sp]
 812 00ea 2946     		mov	r1, r5
 813 00ec 0222     		movs	r2, #2
 814 00ee 0023     		movs	r3, #0
 815 00f0 0196     		str	r6, [sp, #4]
 816 00f2 B847     		blx	r7
 817              	.LVL80:
 735:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 818              		.loc 3 735 0
 819 00f4 0423     		movs	r3, #4
 820 00f6 0093     		str	r3, [sp]
 821 00f8 03AB     		add	r3, sp, #12
 822              	.LVL81:
 823 00fa 0193     		str	r3, [sp, #4]
 824 00fc A768     		ldr	r7, [r4, #8]
 825 00fe 206A     		ldr	r0, [r4, #32]
 826 0100 0023     		movs	r3, #0
 827              	.LVL82:
 828 0102 2946     		mov	r1, r5
 829 0104 0A22     		movs	r2, #10
 830 0106 B847     		blx	r7
 831              	.LVL83:
 736:/home/dino/paparazzi/var/include/messages.h **** 	} else
 832              		.loc 3 736 0
 833 0108 6369     		ldr	r3, [r4, #20]
 834 010a 00E0     		b	.L45
 835              	.L40:
 738:/home/dino/paparazzi/var/include/messages.h **** }
 836              		.loc 3 738 0
 837 010c A369     		ldr	r3, [r4, #24]
 838              	.L45:
 839 010e 206A     		ldr	r0, [r4, #32]
 840 0110 2946     		mov	r1, r5
 841 0112 9847     		blx	r3
 842              	.LVL84:
 843              	.LBE45:
 844              	.LBE44:
 127:firmwares/fixedwing/autopilot.c **** }
 845              		.loc 1 127 0
 846 0114 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 847 0116 0133     		adds	r3, r3, #1
 848 0118 3370     		strb	r3, [r6]
 849              	.LBE46:
 128:firmwares/fixedwing/autopilot.c **** 
 850              		.loc 1 128 0
 851 011a 05B0     		add	sp, sp, #20
 852              		.cfi_def_cfa_offset 28
 853              		@ sp needed
 854 011c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 855              	.LVL85:
 856              	.L48:
 857              		.align	2
 858              	.L47:
 859 0120 00000000 		.word	.LANCHOR3
 860 0124 00000000 		.word	telemetry_mode_Ap
 861 0128 00000000 		.word	telemetry_mode_Fbw
 862 012c 00000000 		.word	flight_altitude
 863 0130 00000000 		.word	nav_course
 864 0134 00000000 		.word	nav_shift
 865 0138 00000000 		.word	.LANCHOR4
 866 013c 00000000 		.word	nav_radius
 867 0140 00000000 		.word	.LANCHOR5
 868 0144 00000000 		.word	.LANCHOR6
 869 0148 00000000 		.word	.LANCHOR7
 870 014c 00000000 		.word	gps
 871 0150 00000000 		.word	gps_ubx_gps_ubx_ucenter_periodic_status
 872 0154 1A000000 		.word	.LC3
 873              		.cfi_endproc
 874              	.LFE467:
 876              		.section	.text.send_desired,"ax",%progbits
 877              		.align	1
 878              		.thumb
 879              		.thumb_func
 881              	send_desired:
 882              	.LFB468:
 134:firmwares/fixedwing/autopilot.c **** #ifndef USE_AIRSPEED
 883              		.loc 1 134 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 8
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 887              	.LVL86:
 888 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 889              		.cfi_def_cfa_offset 40
 890              		.cfi_offset 4, -24
 891              		.cfi_offset 5, -20
 892              		.cfi_offset 6, -16
 893              		.cfi_offset 7, -12
 894              		.cfi_offset 8, -8
 895              		.cfi_offset 14, -4
 896              	.LBB49:
 897              	.LBB50:
 520:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
 898              		.loc 3 520 0
 899 0004 076A     		ldr	r7, [r0, #32]
 900              	.LBE50:
 901              	.LBE49:
 136:firmwares/fixedwing/autopilot.c **** #endif
 902              		.loc 1 136 0
 903 0006 444B     		ldr	r3, .L53
 904 0008 0393     		str	r3, [sp, #12]	@ float
 905              	.LVL87:
 906 000a 0126     		movs	r6, #1
 134:firmwares/fixedwing/autopilot.c **** #ifndef USE_AIRSPEED
 907              		.loc 1 134 0
 908 000c 0D46     		mov	r5, r1
 909              	.LVL88:
 910              	.LBB53:
 911              	.LBB51:
 520:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
 912              		.loc 3 520 0
 913 000e D0F80480 		ldr	r8, [r0, #4]
 914 0012 0368     		ldr	r3, [r0]
 915 0014 8DF80B60 		strb	r6, [sp, #11]
 916              	.LVL89:
 917 0018 2221     		movs	r1, #34
 918              	.LVL90:
 919              	.LBE51:
 920              	.LBE53:
 134:firmwares/fixedwing/autopilot.c **** #ifndef USE_AIRSPEED
 921              		.loc 1 134 0
 922 001a 0446     		mov	r4, r0
 923              	.LBB54:
 924              	.LBB52:
 520:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
 925              		.loc 3 520 0
 926 001c 3846     		mov	r0, r7
 927              	.LVL91:
 928 001e 9847     		blx	r3
 929              	.LVL92:
 930 0020 2946     		mov	r1, r5
 931 0022 0246     		mov	r2, r0
 932 0024 3846     		mov	r0, r7
 933 0026 C047     		blx	r8
 934              	.LVL93:
 935 0028 0028     		cmp	r0, #0
 936 002a 6ED0     		beq	.L50
 521:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
 937              		.loc 3 521 0
 938 002c 276A     		ldr	r7, [r4, #32]
 939 002e 2368     		ldr	r3, [r4]
 940 0030 D4F81C80 		ldr	r8, [r4, #28]
 941 0034 3846     		mov	r0, r7
 942 0036 2221     		movs	r1, #34
 943 0038 9847     		blx	r3
 944              	.LVL94:
 945 003a 2946     		mov	r1, r5
 946 003c 0246     		mov	r2, r0
 947 003e 3846     		mov	r0, r7
 948 0040 C047     		blx	r8
 949              	.LVL95:
 522:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 950              		.loc 3 522 0
 951 0042 2369     		ldr	r3, [r4, #16]
 952 0044 206A     		ldr	r0, [r4, #32]
 953 0046 2946     		mov	r1, r5
 954 0048 2222     		movs	r2, #34
 955 004a 9847     		blx	r3
 956              	.LVL96:
 523:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DESIRED, "DESIRED");
 957              		.loc 3 523 0
 958 004c 0DF10B03 		add	r3, sp, #11
 959 0050 0096     		str	r6, [sp]
 960 0052 0193     		str	r3, [sp, #4]
 961 0054 A668     		ldr	r6, [r4, #8]
 962              	.LVL97:
 963 0056 206A     		ldr	r0, [r4, #32]
 964 0058 2946     		mov	r1, r5
 965 005a 0222     		movs	r2, #2
 966 005c 0023     		movs	r3, #0
 967              	.LVL98:
 968 005e B047     		blx	r6
 969              	.LVL99:
 524:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll);
 970              		.loc 3 524 0
 971 0060 1023     		movs	r3, #16
 972 0062 0093     		str	r3, [sp]
 973 0064 2D4B     		ldr	r3, .L53+4
 974 0066 0193     		str	r3, [sp, #4]
 975 0068 E668     		ldr	r6, [r4, #12]
 976 006a 206A     		ldr	r0, [r4, #32]
 977 006c 2946     		mov	r1, r5
 978 006e 0222     		movs	r2, #2
 979 0070 0023     		movs	r3, #0
 980 0072 B047     		blx	r6
 981              	.LVL100:
 525:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch);
 982              		.loc 3 525 0
 983 0074 0426     		movs	r6, #4
 984 0076 2A4B     		ldr	r3, .L53+8
 985 0078 0096     		str	r6, [sp]
 986 007a 0193     		str	r3, [sp, #4]
 987 007c A768     		ldr	r7, [r4, #8]
 988 007e 206A     		ldr	r0, [r4, #32]
 989 0080 2946     		mov	r1, r5
 990 0082 0A22     		movs	r2, #10
 991 0084 0023     		movs	r3, #0
 992 0086 B847     		blx	r7
 993              	.LVL101:
 526:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _course);
 994              		.loc 3 526 0
 995 0088 264B     		ldr	r3, .L53+12
 996 008a 0096     		str	r6, [sp]
 997 008c 0193     		str	r3, [sp, #4]
 998 008e A768     		ldr	r7, [r4, #8]
 999 0090 206A     		ldr	r0, [r4, #32]
 1000 0092 2946     		mov	r1, r5
 1001 0094 0A22     		movs	r2, #10
 1002 0096 0023     		movs	r3, #0
 1003 0098 B847     		blx	r7
 1004              	.LVL102:
 527:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _x);
 1005              		.loc 3 527 0
 1006 009a 234B     		ldr	r3, .L53+16
 1007 009c 0096     		str	r6, [sp]
 1008 009e 0193     		str	r3, [sp, #4]
 1009 00a0 A768     		ldr	r7, [r4, #8]
 1010 00a2 206A     		ldr	r0, [r4, #32]
 1011 00a4 2946     		mov	r1, r5
 1012 00a6 0A22     		movs	r2, #10
 1013 00a8 0023     		movs	r3, #0
 1014 00aa B847     		blx	r7
 1015              	.LVL103:
 528:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _y);
 1016              		.loc 3 528 0
 1017 00ac 1F4B     		ldr	r3, .L53+20
 1018 00ae 0096     		str	r6, [sp]
 1019 00b0 0193     		str	r3, [sp, #4]
 1020 00b2 A768     		ldr	r7, [r4, #8]
 1021 00b4 206A     		ldr	r0, [r4, #32]
 1022 00b6 2946     		mov	r1, r5
 1023 00b8 0A22     		movs	r2, #10
 1024 00ba 0023     		movs	r3, #0
 1025 00bc B847     		blx	r7
 1026              	.LVL104:
 529:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _altitude);
 1027              		.loc 3 529 0
 1028 00be 1C4B     		ldr	r3, .L53+24
 1029 00c0 0096     		str	r6, [sp]
 1030 00c2 0193     		str	r3, [sp, #4]
 1031 00c4 A768     		ldr	r7, [r4, #8]
 1032 00c6 206A     		ldr	r0, [r4, #32]
 1033 00c8 2946     		mov	r1, r5
 1034 00ca 0A22     		movs	r2, #10
 1035 00cc 0023     		movs	r3, #0
 1036 00ce B847     		blx	r7
 1037              	.LVL105:
 530:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _climb);
 1038              		.loc 3 530 0
 1039 00d0 184B     		ldr	r3, .L53+28
 1040 00d2 0096     		str	r6, [sp]
 1041 00d4 0193     		str	r3, [sp, #4]
 1042 00d6 A768     		ldr	r7, [r4, #8]
 1043 00d8 206A     		ldr	r0, [r4, #32]
 1044 00da 2946     		mov	r1, r5
 1045 00dc 0A22     		movs	r2, #10
 1046 00de 0023     		movs	r3, #0
 1047 00e0 B847     		blx	r7
 1048              	.LVL106:
 531:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
 1049              		.loc 3 531 0
 1050 00e2 154B     		ldr	r3, .L53+32
 1051 00e4 0096     		str	r6, [sp]
 1052 00e6 0193     		str	r3, [sp, #4]
 1053 00e8 206A     		ldr	r0, [r4, #32]
 1054 00ea A768     		ldr	r7, [r4, #8]
 1055 00ec 2946     		mov	r1, r5
 1056 00ee 0A22     		movs	r2, #10
 1057 00f0 0023     		movs	r3, #0
 1058 00f2 B847     		blx	r7
 1059              	.LVL107:
 532:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1060              		.loc 3 532 0
 1061 00f4 03AB     		add	r3, sp, #12
 1062              	.LVL108:
 1063 00f6 0096     		str	r6, [sp]
 1064 00f8 0193     		str	r3, [sp, #4]
 1065 00fa A668     		ldr	r6, [r4, #8]
 1066 00fc 206A     		ldr	r0, [r4, #32]
 1067 00fe 0023     		movs	r3, #0
 1068              	.LVL109:
 1069 0100 2946     		mov	r1, r5
 1070 0102 0A22     		movs	r2, #10
 1071 0104 B047     		blx	r6
 1072              	.LVL110:
 533:/home/dino/paparazzi/var/include/messages.h **** 	} else
 1073              		.loc 3 533 0
 1074 0106 6369     		ldr	r3, [r4, #20]
 1075 0108 00E0     		b	.L52
 1076              	.L50:
 535:/home/dino/paparazzi/var/include/messages.h **** }
 1077              		.loc 3 535 0
 1078 010a A369     		ldr	r3, [r4, #24]
 1079              	.L52:
 1080 010c 206A     		ldr	r0, [r4, #32]
 1081 010e 2946     		mov	r1, r5
 1082 0110 9847     		blx	r3
 1083              	.LVL111:
 1084              	.LBE52:
 1085              	.LBE54:
 142:firmwares/fixedwing/autopilot.c **** 
 1086              		.loc 1 142 0
 1087 0112 04B0     		add	sp, sp, #16
 1088              		.cfi_def_cfa_offset 24
 1089              		@ sp needed
 1090 0114 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1091              	.LVL112:
 1092              	.L54:
 1093              		.align	2
 1094              	.L53:
 1095 0118 00007041 		.word	1097859072
 1096 011c 23000000 		.word	.LC4
 1097 0120 00000000 		.word	h_ctl_roll_setpoint
 1098 0124 00000000 		.word	h_ctl_pitch_loop_setpoint
 1099 0128 00000000 		.word	h_ctl_course_setpoint
 1100 012c 00000000 		.word	desired_x
 1101 0130 00000000 		.word	desired_y
 1102 0134 00000000 		.word	v_ctl_altitude_setpoint
 1103 0138 00000000 		.word	v_ctl_climb_setpoint
 1104              		.cfi_endproc
 1105              	.LFE468:
 1107              		.section	.text.send_bat,"ax",%progbits
 1108              		.align	1
 1109              		.thumb
 1110              		.thumb_func
 1112              	send_bat:
 1113              	.LFB465:
 107:firmwares/fixedwing/autopilot.c ****   int16_t amps = (int16_t)(current / 10);
 1114              		.loc 1 107 0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 8
 1117              		@ frame_needed = 0, uses_anonymous_args = 0
 1118              	.LVL113:
 1119 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1120              		.cfi_def_cfa_offset 40
 1121              		.cfi_offset 4, -24
 1122              		.cfi_offset 5, -20
 1123              		.cfi_offset 6, -16
 1124              		.cfi_offset 7, -12
 1125              		.cfi_offset 8, -8
 1126              		.cfi_offset 14, -4
 108:firmwares/fixedwing/autopilot.c ****   int16_t e = energy;
 1127              		.loc 1 108 0
 1128 0004 4C4B     		ldr	r3, .L59
 1129              	.LBB57:
 1130              	.LBB58:
 457:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +2 /* msg hea
 1131              		.loc 3 457 0
 1132 0006 066A     		ldr	r6, [r0, #32]
 1133              	.LBE58:
 1134              	.LBE57:
 108:firmwares/fixedwing/autopilot.c ****   int16_t e = energy;
 1135              		.loc 1 108 0
 1136 0008 1B68     		ldr	r3, [r3]
 1137              	.LBB62:
 1138              	.LBB59:
 457:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +2 /* msg hea
 1139              		.loc 3 457 0
 1140 000a 4768     		ldr	r7, [r0, #4]
 1141              	.LBE59:
 1142              	.LBE62:
 108:firmwares/fixedwing/autopilot.c ****   int16_t e = energy;
 1143              		.loc 1 108 0
 1144 000c 0A22     		movs	r2, #10
 1145 000e 93FBF2F3 		sdiv	r3, r3, r2
 1146 0012 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 109:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_BAT(trans, dev, AC_ID,
 1147              		.loc 1 109 0
 1148 0016 494B     		ldr	r3, .L59+4
 1149 0018 D3ED007A 		flds	s15, [r3]
 1150 001c FDEEE77A 		ftosizs	s15, s15
 1151 0020 4FF00108 		mov	r8, #1
 1152 0024 17EE903A 		fmrs	r3, s15	@ int
 107:firmwares/fixedwing/autopilot.c ****   int16_t amps = (int16_t)(current / 10);
 1153              		.loc 1 107 0
 1154 0028 0D46     		mov	r5, r1
 109:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_BAT(trans, dev, AC_ID,
 1155              		.loc 1 109 0
 1156 002a ADF80E30 		strh	r3, [sp, #14]	@ movhi
 1157              	.LVL114:
 1158              	.LBB63:
 1159              	.LBB60:
 457:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +2 /* msg hea
 1160              		.loc 3 457 0
 1161 002e 1121     		movs	r1, #17
 1162              	.LVL115:
 1163 0030 0368     		ldr	r3, [r0]
 1164 0032 8DF80B80 		strb	r8, [sp, #11]
 1165              	.LVL116:
 1166              	.LBE60:
 1167              	.LBE63:
 107:firmwares/fixedwing/autopilot.c ****   int16_t amps = (int16_t)(current / 10);
 1168              		.loc 1 107 0
 1169 0036 0446     		mov	r4, r0
 1170              	.LBB64:
 1171              	.LBB61:
 457:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +2 /* msg hea
 1172              		.loc 3 457 0
 1173 0038 3046     		mov	r0, r6
 1174              	.LVL117:
 1175 003a 9847     		blx	r3
 1176              	.LVL118:
 1177 003c 2946     		mov	r1, r5
 1178 003e 0246     		mov	r2, r0
 1179 0040 3046     		mov	r0, r6
 1180 0042 B847     		blx	r7
 1181              	.LVL119:
 1182 0044 0028     		cmp	r0, #0
 1183 0046 70D0     		beq	.L56
 458:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+1+2+2+2 +2 /* msg header overhead */);
 1184              		.loc 3 458 0
 1185 0048 266A     		ldr	r6, [r4, #32]
 1186 004a 2368     		ldr	r3, [r4]
 1187 004c E769     		ldr	r7, [r4, #28]
 1188 004e 3046     		mov	r0, r6
 1189 0050 1121     		movs	r1, #17
 1190 0052 9847     		blx	r3
 1191              	.LVL120:
 1192 0054 2946     		mov	r1, r5
 1193 0056 0246     		mov	r2, r0
 1194 0058 3046     		mov	r0, r6
 1195 005a B847     		blx	r7
 1196              	.LVL121:
 459:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1197              		.loc 3 459 0
 1198 005c 2369     		ldr	r3, [r4, #16]
 1199 005e 206A     		ldr	r0, [r4, #32]
 1200 0060 2946     		mov	r1, r5
 1201 0062 1122     		movs	r2, #17
 1202 0064 9847     		blx	r3
 1203              	.LVL122:
 460:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BAT, "BAT");
 1204              		.loc 3 460 0
 1205 0066 0DF10B03 		add	r3, sp, #11
 1206 006a 0193     		str	r3, [sp, #4]
 1207 006c A668     		ldr	r6, [r4, #8]
 1208 006e 206A     		ldr	r0, [r4, #32]
 1209 0070 CDF80080 		str	r8, [sp]
 1210 0074 2946     		mov	r1, r5
 1211 0076 0222     		movs	r2, #2
 1212 0078 0023     		movs	r3, #0
 1213 007a B047     		blx	r6
 1214              	.LVL123:
 461:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _throttle);
 1215              		.loc 3 461 0
 1216 007c 0C23     		movs	r3, #12
 1217 007e 0093     		str	r3, [sp]
 1218 0080 2F4B     		ldr	r3, .L59+8
 1219 0082 0193     		str	r3, [sp, #4]
 1220 0084 E668     		ldr	r6, [r4, #12]
 1221 0086 206A     		ldr	r0, [r4, #32]
 1222 0088 2946     		mov	r1, r5
 1223 008a 0222     		movs	r2, #2
 1224 008c 0023     		movs	r3, #0
 1225 008e B047     		blx	r6
 1226              	.LVL124:
 462:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _voltage);
 1227              		.loc 3 462 0
 1228 0090 0226     		movs	r6, #2
 1229 0092 2C4B     		ldr	r3, .L59+12
 1230 0094 0096     		str	r6, [sp]
 1231 0096 0193     		str	r3, [sp, #4]
 1232 0098 A768     		ldr	r7, [r4, #8]
 1233 009a 206A     		ldr	r0, [r4, #32]
 1234 009c 2946     		mov	r1, r5
 1235 009e 0522     		movs	r2, #5
 1236 00a0 0023     		movs	r3, #0
 1237 00a2 B847     		blx	r7
 1238              	.LVL125:
 463:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _amps);
 1239              		.loc 3 463 0
 1240 00a4 284B     		ldr	r3, .L59+16
 1241 00a6 0096     		str	r6, [sp]
 1242 00a8 0193     		str	r3, [sp, #4]
 1243 00aa A768     		ldr	r7, [r4, #8]
 1244 00ac 206A     		ldr	r0, [r4, #32]
 1245 00ae 2946     		mov	r1, r5
 1246 00b0 0422     		movs	r2, #4
 1247 00b2 0023     		movs	r3, #0
 1248 00b4 B847     		blx	r7
 1249              	.LVL126:
 464:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flight_time);
 1250              		.loc 3 464 0
 1251 00b6 03AB     		add	r3, sp, #12
 1252              	.LVL127:
 1253 00b8 0096     		str	r6, [sp]
 1254 00ba 0193     		str	r3, [sp, #4]
 1255 00bc A768     		ldr	r7, [r4, #8]
 1256 00be 206A     		ldr	r0, [r4, #32]
 1257 00c0 2946     		mov	r1, r5
 1258 00c2 0522     		movs	r2, #5
 1259 00c4 0023     		movs	r3, #0
 1260              	.LVL128:
 1261 00c6 B847     		blx	r7
 1262              	.LVL129:
 465:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _kill_auto_throt
 1263              		.loc 3 465 0
 1264 00c8 204B     		ldr	r3, .L59+20
 1265 00ca 0096     		str	r6, [sp]
 1266 00cc 0193     		str	r3, [sp, #4]
 1267 00ce A768     		ldr	r7, [r4, #8]
 1268 00d0 206A     		ldr	r0, [r4, #32]
 1269 00d2 2946     		mov	r1, r5
 1270 00d4 0422     		movs	r2, #4
 1271 00d6 0023     		movs	r3, #0
 1272 00d8 B847     		blx	r7
 1273              	.LVL130:
 466:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _block_time);
 1274              		.loc 3 466 0
 1275 00da 1D4B     		ldr	r3, .L59+24
 1276 00dc 0193     		str	r3, [sp, #4]
 1277 00de 3246     		mov	r2, r6
 1278 00e0 A768     		ldr	r7, [r4, #8]
 1279 00e2 206A     		ldr	r0, [r4, #32]
 1280 00e4 CDF80080 		str	r8, [sp]
 1281 00e8 2946     		mov	r1, r5
 1282 00ea 0023     		movs	r3, #0
 1283 00ec B847     		blx	r7
 1284              	.LVL131:
 467:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _stage_time);
 1285              		.loc 3 467 0
 1286 00ee 194B     		ldr	r3, .L59+28
 1287 00f0 0096     		str	r6, [sp]
 1288 00f2 0193     		str	r3, [sp, #4]
 1289 00f4 A768     		ldr	r7, [r4, #8]
 1290 00f6 206A     		ldr	r0, [r4, #32]
 1291 00f8 2946     		mov	r1, r5
 1292 00fa 0422     		movs	r2, #4
 1293 00fc 0023     		movs	r3, #0
 1294 00fe B847     		blx	r7
 1295              	.LVL132:
 468:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _energy);
 1296              		.loc 3 468 0
 1297 0100 154B     		ldr	r3, .L59+32
 1298 0102 0096     		str	r6, [sp]
 1299 0104 0193     		str	r3, [sp, #4]
 1300 0106 206A     		ldr	r0, [r4, #32]
 1301 0108 A768     		ldr	r7, [r4, #8]
 1302 010a 2946     		mov	r1, r5
 1303 010c 0422     		movs	r2, #4
 1304 010e 0023     		movs	r3, #0
 1305 0110 B847     		blx	r7
 1306              	.LVL133:
 469:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1307              		.loc 3 469 0
 1308 0112 0DF10E03 		add	r3, sp, #14
 1309              	.LVL134:
 1310 0116 0096     		str	r6, [sp]
 1311 0118 0193     		str	r3, [sp, #4]
 1312 011a A668     		ldr	r6, [r4, #8]
 1313 011c 206A     		ldr	r0, [r4, #32]
 1314 011e 0023     		movs	r3, #0
 1315              	.LVL135:
 1316 0120 2946     		mov	r1, r5
 1317 0122 0522     		movs	r2, #5
 1318 0124 B047     		blx	r6
 1319              	.LVL136:
 470:/home/dino/paparazzi/var/include/messages.h **** 	} else
 1320              		.loc 3 470 0
 1321 0126 6369     		ldr	r3, [r4, #20]
 1322 0128 00E0     		b	.L58
 1323              	.L56:
 472:/home/dino/paparazzi/var/include/messages.h **** }
 1324              		.loc 3 472 0
 1325 012a A369     		ldr	r3, [r4, #24]
 1326              	.L58:
 1327 012c 206A     		ldr	r0, [r4, #32]
 1328 012e 2946     		mov	r1, r5
 1329 0130 9847     		blx	r3
 1330              	.LVL137:
 1331              	.LBE61:
 1332              	.LBE64:
 114:firmwares/fixedwing/autopilot.c **** 
 1333              		.loc 1 114 0
 1334 0132 04B0     		add	sp, sp, #16
 1335              		.cfi_def_cfa_offset 24
 1336              		@ sp needed
 1337 0134 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1338              	.LVL138:
 1339              	.L60:
 1340              		.align	2
 1341              	.L59:
 1342 0138 00000000 		.word	.LANCHOR2
 1343 013c 00000000 		.word	.LANCHOR0
 1344 0140 2B000000 		.word	.LC5
 1345 0144 00000000 		.word	v_ctl_throttle_slewed
 1346 0148 00000000 		.word	.LANCHOR1
 1347 014c 00000000 		.word	.LANCHOR4
 1348 0150 00000000 		.word	.LANCHOR7
 1349 0154 00000000 		.word	block_time
 1350 0158 00000000 		.word	stage_time
 1351              		.cfi_endproc
 1352              	.LFE465:
 1354              		.section	.text.send_mode,"ax",%progbits
 1355              		.align	1
 1356              		.thumb
 1357              		.thumb_func
 1359              	send_mode:
 1360              	.LFB462:
  88:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_PPRZ_MODE(trans, dev, AC_ID,
 1361              		.loc 1 88 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 8
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              	.LVL139:
 1366 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1367              		.cfi_def_cfa_offset 40
 1368              		.cfi_offset 4, -24
 1369              		.cfi_offset 5, -20
 1370              		.cfi_offset 6, -16
 1371              		.cfi_offset 7, -12
 1372              		.cfi_offset 8, -8
 1373              		.cfi_offset 14, -4
 1374              	.LBB67:
 1375              	.LBB68:
 439:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /* msg header 
 1376              		.loc 3 439 0
 1377 0004 076A     		ldr	r7, [r0, #32]
 1378 0006 D0F80480 		ldr	r8, [r0, #4]
 1379 000a 0368     		ldr	r3, [r0]
 1380 000c 0126     		movs	r6, #1
 1381              	.LBE68:
 1382              	.LBE67:
  88:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_PPRZ_MODE(trans, dev, AC_ID,
 1383              		.loc 1 88 0
 1384 000e 0D46     		mov	r5, r1
 1385              	.LVL140:
 1386 0010 0446     		mov	r4, r0
 1387              	.LBB70:
 1388              	.LBB69:
 439:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /* msg header 
 1389              		.loc 3 439 0
 1390 0012 0821     		movs	r1, #8
 1391              	.LVL141:
 1392 0014 8DF80F60 		strb	r6, [sp, #15]
 1393              	.LVL142:
 1394 0018 3846     		mov	r0, r7
 1395              	.LVL143:
 1396 001a 9847     		blx	r3
 1397              	.LVL144:
 1398 001c 2946     		mov	r1, r5
 1399 001e 0246     		mov	r2, r0
 1400 0020 3846     		mov	r0, r7
 1401 0022 C047     		blx	r8
 1402              	.LVL145:
 1403 0024 0028     		cmp	r0, #0
 1404 0026 5BD0     		beq	.L62
 440:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+1 +2 /* msg header overhead */);
 1405              		.loc 3 440 0
 1406 0028 276A     		ldr	r7, [r4, #32]
 1407 002a 2368     		ldr	r3, [r4]
 1408 002c D4F81C80 		ldr	r8, [r4, #28]
 1409 0030 3846     		mov	r0, r7
 1410 0032 0821     		movs	r1, #8
 1411 0034 9847     		blx	r3
 1412              	.LVL146:
 1413 0036 2946     		mov	r1, r5
 1414 0038 0246     		mov	r2, r0
 1415 003a 3846     		mov	r0, r7
 1416 003c C047     		blx	r8
 1417              	.LVL147:
 441:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1418              		.loc 3 441 0
 1419 003e 2369     		ldr	r3, [r4, #16]
 1420 0040 206A     		ldr	r0, [r4, #32]
 1421 0042 2946     		mov	r1, r5
 1422 0044 0822     		movs	r2, #8
 1423 0046 9847     		blx	r3
 1424              	.LVL148:
 442:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PPRZ_MODE, "PPRZ_MOD
 1425              		.loc 3 442 0
 1426 0048 0DF10F03 		add	r3, sp, #15
 1427 004c 0096     		str	r6, [sp]
 1428 004e 0193     		str	r3, [sp, #4]
 1429 0050 A768     		ldr	r7, [r4, #8]
 1430 0052 206A     		ldr	r0, [r4, #32]
 1431 0054 2946     		mov	r1, r5
 1432 0056 0222     		movs	r2, #2
 1433 0058 0023     		movs	r3, #0
 1434 005a B847     		blx	r7
 1435              	.LVL149:
 443:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_mode);
 1436              		.loc 3 443 0
 1437 005c 0B23     		movs	r3, #11
 1438 005e 0093     		str	r3, [sp]
 1439 0060 234B     		ldr	r3, .L65
 1440 0062 0193     		str	r3, [sp, #4]
 1441 0064 E768     		ldr	r7, [r4, #12]
 1442 0066 206A     		ldr	r0, [r4, #32]
 1443 0068 2946     		mov	r1, r5
 1444 006a 0222     		movs	r2, #2
 1445 006c 0023     		movs	r3, #0
 1446 006e B847     		blx	r7
 1447              	.LVL150:
 444:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_gaz);
 1448              		.loc 3 444 0
 1449 0070 204B     		ldr	r3, .L65+4
 1450 0072 0096     		str	r6, [sp]
 1451 0074 0193     		str	r3, [sp, #4]
 1452 0076 A768     		ldr	r7, [r4, #8]
 1453 0078 206A     		ldr	r0, [r4, #32]
 1454 007a 2946     		mov	r1, r5
 1455 007c 0222     		movs	r2, #2
 1456 007e 0023     		movs	r3, #0
 1457 0080 B847     		blx	r7
 1458              	.LVL151:
 445:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_lateral);
 1459              		.loc 3 445 0
 1460 0082 1D4B     		ldr	r3, .L65+8
 1461 0084 0096     		str	r6, [sp]
 1462 0086 0193     		str	r3, [sp, #4]
 1463 0088 A768     		ldr	r7, [r4, #8]
 1464 008a 206A     		ldr	r0, [r4, #32]
 1465 008c 2946     		mov	r1, r5
 1466 008e 0222     		movs	r2, #2
 1467 0090 0023     		movs	r3, #0
 1468 0092 B847     		blx	r7
 1469              	.LVL152:
 446:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_horizontal);
 1470              		.loc 3 446 0
 1471 0094 194B     		ldr	r3, .L65+12
 1472 0096 0096     		str	r6, [sp]
 1473 0098 0193     		str	r3, [sp, #4]
 1474 009a A768     		ldr	r7, [r4, #8]
 1475 009c 206A     		ldr	r0, [r4, #32]
 1476 009e 2946     		mov	r1, r5
 1477 00a0 0222     		movs	r2, #2
 1478 00a2 0023     		movs	r3, #0
 1479 00a4 B847     		blx	r7
 1480              	.LVL153:
 447:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _if_calib_mode);
 1481              		.loc 3 447 0
 1482 00a6 164B     		ldr	r3, .L65+16
 1483 00a8 0096     		str	r6, [sp]
 1484 00aa 0193     		str	r3, [sp, #4]
 1485 00ac A768     		ldr	r7, [r4, #8]
 1486 00ae 206A     		ldr	r0, [r4, #32]
 1487 00b0 2946     		mov	r1, r5
 1488 00b2 0222     		movs	r2, #2
 1489 00b4 0023     		movs	r3, #0
 1490 00b6 B847     		blx	r7
 1491              	.LVL154:
 448:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mcu1_status);
 1492              		.loc 3 448 0
 1493 00b8 124B     		ldr	r3, .L65+20
 1494 00ba 0096     		str	r6, [sp]
 1495 00bc 0193     		str	r3, [sp, #4]
 1496 00be 206A     		ldr	r0, [r4, #32]
 1497 00c0 A768     		ldr	r7, [r4, #8]
 1498 00c2 2946     		mov	r1, r5
 1499 00c4 0222     		movs	r2, #2
 1500 00c6 0023     		movs	r3, #0
 1501 00c8 B847     		blx	r7
 1502              	.LVL155:
 449:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1503              		.loc 3 449 0
 1504 00ca 0F4B     		ldr	r3, .L65+24
 1505 00cc 0096     		str	r6, [sp]
 1506 00ce 0193     		str	r3, [sp, #4]
 1507 00d0 A668     		ldr	r6, [r4, #8]
 1508              	.LVL156:
 1509 00d2 206A     		ldr	r0, [r4, #32]
 1510 00d4 0023     		movs	r3, #0
 1511 00d6 2946     		mov	r1, r5
 1512 00d8 0222     		movs	r2, #2
 1513 00da B047     		blx	r6
 1514              	.LVL157:
 450:/home/dino/paparazzi/var/include/messages.h **** 	} else
 1515              		.loc 3 450 0
 1516 00dc 6369     		ldr	r3, [r4, #20]
 1517 00de 00E0     		b	.L64
 1518              	.L62:
 452:/home/dino/paparazzi/var/include/messages.h **** }
 1519              		.loc 3 452 0
 1520 00e0 A369     		ldr	r3, [r4, #24]
 1521              	.L64:
 1522 00e2 206A     		ldr	r0, [r4, #32]
 1523 00e4 2946     		mov	r1, r5
 1524 00e6 9847     		blx	r3
 1525              	.LVL158:
 1526              	.LBE69:
 1527              	.LBE70:
  91:firmwares/fixedwing/autopilot.c **** 
 1528              		.loc 1 91 0
 1529 00e8 04B0     		add	sp, sp, #16
 1530              		.cfi_def_cfa_offset 24
 1531              		@ sp needed
 1532 00ea BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1533              	.LVL159:
 1534              	.L66:
 1535 00ee 00BF     		.align	2
 1536              	.L65:
 1537 00f0 2F000000 		.word	.LC6
 1538 00f4 00000000 		.word	.LANCHOR5
 1539 00f8 00000000 		.word	v_ctl_mode
 1540 00fc 00000000 		.word	.LANCHOR8
 1541 0100 00000000 		.word	horizontal_mode
 1542 0104 00000000 		.word	.LANCHOR9
 1543 0108 00000000 		.word	.LANCHOR10
 1544              		.cfi_endproc
 1545              	.LFE462:
 1547              		.section	.text.send_alive,"ax",%progbits
 1548              		.align	1
 1549              		.thumb
 1550              		.thumb_func
 1552              	send_alive:
 1553              	.LFB461:
  71:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ALIVE(trans, dev, AC_ID, 16, MD5SUM);
 1554              		.loc 1 71 0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 8
 1557              		@ frame_needed = 0, uses_anonymous_args = 0
 1558              	.LVL160:
 1559 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1560              		.cfi_def_cfa_offset 40
 1561              		.cfi_offset 4, -24
 1562              		.cfi_offset 5, -20
 1563              		.cfi_offset 6, -16
 1564              		.cfi_offset 7, -12
 1565              		.cfi_offset 8, -8
 1566              		.cfi_offset 14, -4
 1567              	.LBB73:
 1568              	.LBB74:
 268:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 /* msg heade
 1569              		.loc 3 268 0
 1570 0004 076A     		ldr	r7, [r0, #32]
 1571 0006 D0F80480 		ldr	r8, [r0, #4]
 1572 000a 1023     		movs	r3, #16
 1573 000c 0126     		movs	r6, #1
 1574              	.LBE74:
 1575              	.LBE73:
  71:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ALIVE(trans, dev, AC_ID, 16, MD5SUM);
 1576              		.loc 1 71 0
 1577 000e 0D46     		mov	r5, r1
 1578              	.LVL161:
 1579 0010 8DF80E30 		strb	r3, [sp, #14]
 1580              	.LVL162:
 1581              	.LBB77:
 1582              	.LBB75:
 268:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 /* msg heade
 1583              		.loc 3 268 0
 1584 0014 1321     		movs	r1, #19
 1585              	.LVL163:
 1586 0016 0368     		ldr	r3, [r0]
 1587              	.LVL164:
 1588 0018 8DF80F60 		strb	r6, [sp, #15]
 1589              	.LVL165:
 1590              	.LBE75:
 1591              	.LBE77:
  71:firmwares/fixedwing/autopilot.c ****   pprz_msg_send_ALIVE(trans, dev, AC_ID, 16, MD5SUM);
 1592              		.loc 1 71 0
 1593 001c 0446     		mov	r4, r0
 1594              	.LBB78:
 1595              	.LBB76:
 268:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 /* msg heade
 1596              		.loc 3 268 0
 1597 001e 3846     		mov	r0, r7
 1598              	.LVL166:
 1599 0020 9847     		blx	r3
 1600              	.LVL167:
 1601 0022 2946     		mov	r1, r5
 1602 0024 0246     		mov	r2, r0
 1603 0026 3846     		mov	r0, r7
 1604 0028 C047     		blx	r8
 1605              	.LVL168:
 1606 002a 0028     		cmp	r0, #0
 1607 002c 42D0     		beq	.L68
 269:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_md5sum*1 +2 /* msg header overhead */);
 1608              		.loc 3 269 0
 1609 002e 9DF80E10 		ldrb	r1, [sp, #14]	@ zero_extendqisi2
 1610 0032 276A     		ldr	r7, [r4, #32]
 1611 0034 2368     		ldr	r3, [r4]
 1612 0036 D4F81C80 		ldr	r8, [r4, #28]
 1613 003a 0331     		adds	r1, r1, #3
 1614 003c 3846     		mov	r0, r7
 1615 003e C9B2     		uxtb	r1, r1
 1616 0040 9847     		blx	r3
 1617              	.LVL169:
 1618 0042 2946     		mov	r1, r5
 1619 0044 0246     		mov	r2, r0
 1620 0046 3846     		mov	r0, r7
 1621 0048 C047     		blx	r8
 1622              	.LVL170:
 270:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1623              		.loc 3 270 0
 1624 004a 9DF80E20 		ldrb	r2, [sp, #14]	@ zero_extendqisi2
 1625 004e 2369     		ldr	r3, [r4, #16]
 1626 0050 206A     		ldr	r0, [r4, #32]
 1627 0052 0332     		adds	r2, r2, #3
 1628 0054 2946     		mov	r1, r5
 1629 0056 D2B2     		uxtb	r2, r2
 1630 0058 9847     		blx	r3
 1631              	.LVL171:
 271:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ALIVE, "ALIVE");
 1632              		.loc 3 271 0
 1633 005a 0DF10F03 		add	r3, sp, #15
 1634 005e 0096     		str	r6, [sp]
 1635 0060 0193     		str	r3, [sp, #4]
 1636 0062 A768     		ldr	r7, [r4, #8]
 1637 0064 206A     		ldr	r0, [r4, #32]
 1638 0066 2946     		mov	r1, r5
 1639 0068 0222     		movs	r2, #2
 1640 006a 0023     		movs	r3, #0
 1641 006c B847     		blx	r7
 1642              	.LVL172:
 272:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_md5su
 1643              		.loc 3 272 0
 1644 006e 4FF00208 		mov	r8, #2
 1645 0072 144B     		ldr	r3, .L71
 1646 0074 0193     		str	r3, [sp, #4]
 1647 0076 206A     		ldr	r0, [r4, #32]
 1648 0078 E768     		ldr	r7, [r4, #12]
 1649 007a CDF80080 		str	r8, [sp]
 1650 007e 2946     		mov	r1, r5
 1651 0080 4246     		mov	r2, r8
 1652 0082 0023     		movs	r3, #0
 1653 0084 B847     		blx	r7
 1654              	.LVL173:
 273:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_md5sum, (void *) _md5s
 1655              		.loc 3 273 0
 1656 0086 0022     		movs	r2, #0
 1657 0088 0DF10E03 		add	r3, sp, #14
 1658              	.LVL174:
 1659 008c 0096     		str	r6, [sp]
 1660 008e 0193     		str	r3, [sp, #4]
 1661 0090 206A     		ldr	r0, [r4, #32]
 1662 0092 A768     		ldr	r7, [r4, #8]
 1663 0094 1346     		mov	r3, r2
 1664              	.LVL175:
 1665 0096 2946     		mov	r1, r5
 1666 0098 B847     		blx	r7
 1667              	.LVL176:
 274:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1668              		.loc 3 274 0
 1669 009a 9DF80E30 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 1670 009e 0093     		str	r3, [sp]
 1671 00a0 094B     		ldr	r3, .L71+4
 1672 00a2 0193     		str	r3, [sp, #4]
 1673 00a4 206A     		ldr	r0, [r4, #32]
 1674 00a6 3346     		mov	r3, r6
 1675 00a8 2946     		mov	r1, r5
 1676 00aa 4246     		mov	r2, r8
 1677 00ac A668     		ldr	r6, [r4, #8]
 1678              	.LVL177:
 1679 00ae B047     		blx	r6
 1680              	.LVL178:
 275:/home/dino/paparazzi/var/include/messages.h **** 	} else
 1681              		.loc 3 275 0
 1682 00b0 6369     		ldr	r3, [r4, #20]
 1683 00b2 00E0     		b	.L70
 1684              	.L68:
 277:/home/dino/paparazzi/var/include/messages.h **** }
 1685              		.loc 3 277 0
 1686 00b4 A369     		ldr	r3, [r4, #24]
 1687              	.L70:
 1688 00b6 206A     		ldr	r0, [r4, #32]
 1689 00b8 2946     		mov	r1, r5
 1690 00ba 9847     		blx	r3
 1691              	.LVL179:
 1692              	.LBE76:
 1693              	.LBE78:
  73:firmwares/fixedwing/autopilot.c **** 
 1694              		.loc 1 73 0
 1695 00bc 04B0     		add	sp, sp, #16
 1696              		.cfi_def_cfa_offset 24
 1697              		@ sp needed
 1698 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1699              	.LVL180:
 1700              	.L72:
 1701 00c2 00BF     		.align	2
 1702              	.L71:
 1703 00c4 39000000 		.word	.LC7
 1704 00c8 3F000000 		.word	.LC8
 1705              		.cfi_endproc
 1706              	.LFE461:
 1708              		.section	.text.send_autopilot_version,"ax",%progbits
 1709              		.align	1
 1710              		.global	send_autopilot_version
 1711              		.thumb
 1712              		.thumb_func
 1714              	send_autopilot_version:
 1715              	.LFB460:
  64:firmwares/fixedwing/autopilot.c ****   static uint32_t ap_version = PPRZ_VERSION_INT;
 1716              		.loc 1 64 0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 8
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 1720              	.LVL181:
 1721 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1722              		.cfi_def_cfa_offset 40
 1723              		.cfi_offset 4, -24
 1724              		.cfi_offset 5, -20
 1725              		.cfi_offset 6, -16
 1726              		.cfi_offset 7, -12
 1727              		.cfi_offset 8, -8
 1728              		.cfi_offset 14, -4
 1729              	.LBB81:
 1730              	.LBB82:
 253:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 /* msg heade
 1731              		.loc 3 253 0
 1732 0004 076A     		ldr	r7, [r0, #32]
 1733 0006 D0F80480 		ldr	r8, [r0, #4]
 1734 000a 1723     		movs	r3, #23
 1735 000c 0126     		movs	r6, #1
 1736              	.LBE82:
 1737              	.LBE81:
  64:firmwares/fixedwing/autopilot.c ****   static uint32_t ap_version = PPRZ_VERSION_INT;
 1738              		.loc 1 64 0
 1739 000e 0D46     		mov	r5, r1
 1740              	.LVL182:
 1741 0010 8DF80E30 		strb	r3, [sp, #14]
 1742              	.LVL183:
 1743              	.LBB85:
 1744              	.LBB83:
 253:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 /* msg heade
 1745              		.loc 3 253 0
 1746 0014 1E21     		movs	r1, #30
 1747              	.LVL184:
 1748 0016 0368     		ldr	r3, [r0]
 1749              	.LVL185:
 1750 0018 8DF80F60 		strb	r6, [sp, #15]
 1751              	.LVL186:
 1752              	.LBE83:
 1753              	.LBE85:
  64:firmwares/fixedwing/autopilot.c ****   static uint32_t ap_version = PPRZ_VERSION_INT;
 1754              		.loc 1 64 0
 1755 001c 0446     		mov	r4, r0
 1756              	.LBB86:
 1757              	.LBB84:
 253:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 /* msg heade
 1758              		.loc 3 253 0
 1759 001e 3846     		mov	r0, r7
 1760              	.LVL187:
 1761 0020 9847     		blx	r3
 1762              	.LVL188:
 1763 0022 2946     		mov	r1, r5
 1764 0024 0246     		mov	r2, r0
 1765 0026 3846     		mov	r0, r7
 1766 0028 C047     		blx	r8
 1767              	.LVL189:
 1768 002a 0028     		cmp	r0, #0
 1769 002c 49D0     		beq	.L74
 254:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1+nb_desc*1 +2 /* msg header overhead */);
 1770              		.loc 3 254 0
 1771 002e 9DF80E10 		ldrb	r1, [sp, #14]	@ zero_extendqisi2
 1772 0032 276A     		ldr	r7, [r4, #32]
 1773 0034 2368     		ldr	r3, [r4]
 1774 0036 D4F81C80 		ldr	r8, [r4, #28]
 1775 003a 0731     		adds	r1, r1, #7
 1776 003c 3846     		mov	r0, r7
 1777 003e C9B2     		uxtb	r1, r1
 1778 0040 9847     		blx	r3
 1779              	.LVL190:
 1780 0042 2946     		mov	r1, r5
 1781 0044 0246     		mov	r2, r0
 1782 0046 3846     		mov	r0, r7
 1783 0048 C047     		blx	r8
 1784              	.LVL191:
 255:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1785              		.loc 3 255 0
 1786 004a 9DF80E20 		ldrb	r2, [sp, #14]	@ zero_extendqisi2
 1787 004e 2369     		ldr	r3, [r4, #16]
 1788 0050 206A     		ldr	r0, [r4, #32]
 1789 0052 0732     		adds	r2, r2, #7
 1790 0054 2946     		mov	r1, r5
 1791 0056 D2B2     		uxtb	r2, r2
 1792 0058 9847     		blx	r3
 1793              	.LVL192:
 256:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AUTOPILOT_VERSION, "
 1794              		.loc 3 256 0
 1795 005a 0DF10F03 		add	r3, sp, #15
 1796 005e 0193     		str	r3, [sp, #4]
 1797 0060 A768     		ldr	r7, [r4, #8]
 1798 0062 206A     		ldr	r0, [r4, #32]
 1799 0064 0096     		str	r6, [sp]
 1800 0066 2946     		mov	r1, r5
 1801 0068 0222     		movs	r2, #2
 1802 006a 0023     		movs	r3, #0
 1803 006c B847     		blx	r7
 1804              	.LVL193:
 257:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _version);
 1805              		.loc 3 257 0
 1806 006e 184B     		ldr	r3, .L77
 1807 0070 0193     		str	r3, [sp, #4]
 1808 0072 E768     		ldr	r7, [r4, #12]
 1809 0074 206A     		ldr	r0, [r4, #32]
 1810 0076 0096     		str	r6, [sp]
 1811 0078 2946     		mov	r1, r5
 1812 007a 0222     		movs	r2, #2
 1813 007c 0023     		movs	r3, #0
 1814 007e B847     		blx	r7
 1815              	.LVL194:
 258:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_desc)
 1816              		.loc 3 258 0
 1817 0080 0423     		movs	r3, #4
 1818 0082 0093     		str	r3, [sp]
 1819 0084 134B     		ldr	r3, .L77+4
 1820 0086 0193     		str	r3, [sp, #4]
 1821 0088 A768     		ldr	r7, [r4, #8]
 1822 008a 206A     		ldr	r0, [r4, #32]
 1823 008c 2946     		mov	r1, r5
 1824 008e 0622     		movs	r2, #6
 1825 0090 0023     		movs	r3, #0
 1826 0092 B847     		blx	r7
 1827              	.LVL195:
 259:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * nb_desc, (void *) _desc);
 1828              		.loc 3 259 0
 1829 0094 0022     		movs	r2, #0
 1830 0096 0DF10E03 		add	r3, sp, #14
 1831              	.LVL196:
 1832 009a 0193     		str	r3, [sp, #4]
 1833 009c A768     		ldr	r7, [r4, #8]
 1834 009e 206A     		ldr	r0, [r4, #32]
 1835 00a0 0096     		str	r6, [sp]
 1836 00a2 1346     		mov	r3, r2
 1837              	.LVL197:
 1838 00a4 2946     		mov	r1, r5
 1839 00a6 B847     		blx	r7
 1840              	.LVL198:
 260:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1841              		.loc 3 260 0
 1842 00a8 9DF80E30 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 1843 00ac 0093     		str	r3, [sp]
 1844 00ae 0A4B     		ldr	r3, .L77+8
 1845 00b0 0193     		str	r3, [sp, #4]
 1846 00b2 A768     		ldr	r7, [r4, #8]
 1847 00b4 206A     		ldr	r0, [r4, #32]
 1848 00b6 3346     		mov	r3, r6
 1849 00b8 2946     		mov	r1, r5
 1850 00ba 3246     		mov	r2, r6
 1851 00bc B847     		blx	r7
 1852              	.LVL199:
 261:/home/dino/paparazzi/var/include/messages.h **** 	} else
 1853              		.loc 3 261 0
 1854 00be 6369     		ldr	r3, [r4, #20]
 1855 00c0 00E0     		b	.L76
 1856              	.L74:
 263:/home/dino/paparazzi/var/include/messages.h **** }
 1857              		.loc 3 263 0
 1858 00c2 A369     		ldr	r3, [r4, #24]
 1859              	.L76:
 1860 00c4 206A     		ldr	r0, [r4, #32]
 1861 00c6 2946     		mov	r1, r5
 1862 00c8 9847     		blx	r3
 1863              	.LVL200:
 1864              	.LBE84:
 1865              	.LBE86:
  68:firmwares/fixedwing/autopilot.c **** 
 1866              		.loc 1 68 0
 1867 00ca 04B0     		add	sp, sp, #16
 1868              		.cfi_def_cfa_offset 24
 1869              		@ sp needed
 1870 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1871              	.LVL201:
 1872              	.L78:
 1873              		.align	2
 1874              	.L77:
 1875 00d0 50000000 		.word	.LC9
 1876 00d4 00000000 		.word	.LANCHOR11
 1877 00d8 62000000 		.word	.LC10
 1878              		.cfi_endproc
 1879              	.LFE460:
 1881              		.section	.text.send_attitude,"ax",%progbits
 1882              		.align	1
 1883              		.thumb
 1884              		.thumb_func
 1886              	send_attitude:
 1887              	.LFB463:
  94:firmwares/fixedwing/autopilot.c ****   struct FloatEulers *att = stateGetNedToBodyEulers_f();
 1888              		.loc 1 94 0
 1889              		.cfi_startproc
 1890              		@ args = 0, pretend = 0, frame = 8
 1891              		@ frame_needed = 0, uses_anonymous_args = 0
 1892              	.LVL202:
 1893 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1894              		.cfi_def_cfa_offset 40
 1895              		.cfi_offset 4, -24
 1896              		.cfi_offset 5, -20
 1897              		.cfi_offset 6, -16
 1898              		.cfi_offset 7, -12
 1899              		.cfi_offset 8, -8
 1900              		.cfi_offset 14, -4
  94:firmwares/fixedwing/autopilot.c ****   struct FloatEulers *att = stateGetNedToBodyEulers_f();
 1901              		.loc 1 94 0
 1902 0004 0446     		mov	r4, r0
 1903              	.LBB93:
 1904              	.LBB94:
 1905              	.LBB95:
 1906              		.file 4 "./math/pprz_orientation_conversion.h"
   1:./math/pprz_orientation_conversion.h **** /*
   2:./math/pprz_orientation_conversion.h ****  * Copyright (C) 2011-2012 The Paparazzi Team
   3:./math/pprz_orientation_conversion.h ****  *
   4:./math/pprz_orientation_conversion.h ****  * This file is part of paparazzi.
   5:./math/pprz_orientation_conversion.h ****  *
   6:./math/pprz_orientation_conversion.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./math/pprz_orientation_conversion.h ****  * it under the terms of the GNU General Public License as published by
   8:./math/pprz_orientation_conversion.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./math/pprz_orientation_conversion.h ****  * any later version.
  10:./math/pprz_orientation_conversion.h ****  *
  11:./math/pprz_orientation_conversion.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:./math/pprz_orientation_conversion.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./math/pprz_orientation_conversion.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./math/pprz_orientation_conversion.h ****  * GNU General Public License for more details.
  15:./math/pprz_orientation_conversion.h ****  *
  16:./math/pprz_orientation_conversion.h ****  * You should have received a copy of the GNU General Public License
  17:./math/pprz_orientation_conversion.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./math/pprz_orientation_conversion.h ****  * <http://www.gnu.org/licenses/>.
  19:./math/pprz_orientation_conversion.h ****  */
  20:./math/pprz_orientation_conversion.h **** 
  21:./math/pprz_orientation_conversion.h **** /**
  22:./math/pprz_orientation_conversion.h ****  * @file math/pprz_orientation_conversion.h
  23:./math/pprz_orientation_conversion.h ****  * Generic orientation representation and conversions.
  24:./math/pprz_orientation_conversion.h ****  *
  25:./math/pprz_orientation_conversion.h ****  * This file contains the functions to automatically convert between
  26:./math/pprz_orientation_conversion.h ****  * the different representations. They should normally not be used
  27:./math/pprz_orientation_conversion.h ****  * directly and instead the stateGet/Set interfaces used.
  28:./math/pprz_orientation_conversion.h ****  * Also see the @ref math_orientation_representation "Generic Orientation Representation" page.
  29:./math/pprz_orientation_conversion.h ****  *
  30:./math/pprz_orientation_conversion.h ****  * @author Felix Ruess <felix.ruess@gmail.com>
  31:./math/pprz_orientation_conversion.h ****  */
  32:./math/pprz_orientation_conversion.h **** 
  33:./math/pprz_orientation_conversion.h **** /**
  34:./math/pprz_orientation_conversion.h ****  * @addtogroup math
  35:./math/pprz_orientation_conversion.h ****  * @{
  36:./math/pprz_orientation_conversion.h ****  */
  37:./math/pprz_orientation_conversion.h **** 
  38:./math/pprz_orientation_conversion.h **** /**
  39:./math/pprz_orientation_conversion.h ****  * This generic orientation representation consists of a struct, containing the 6 orientation
  40:./math/pprz_orientation_conversion.h ****  * representations, and a status variable. The bits in the status variable indicate  which
  41:./math/pprz_orientation_conversion.h ****  * representations of the orientation are up-to-date.
  42:./math/pprz_orientation_conversion.h ****  *
  43:./math/pprz_orientation_conversion.h ****  * When a getter is used to get a certain representation, the status bit is checked to see if
  44:./math/pprz_orientation_conversion.h ****  * the current value is already available in the desired orientation representation.
  45:./math/pprz_orientation_conversion.h ****  * If the desired representation is not available, it will be calculated.
  46:./math/pprz_orientation_conversion.h ****  *
  47:./math/pprz_orientation_conversion.h ****  * When a setter is used to set a representation, all status bits are cleared, and only the
  48:./math/pprz_orientation_conversion.h ****  * status bit for the set representation is set to one.
  49:./math/pprz_orientation_conversion.h ****  */
  50:./math/pprz_orientation_conversion.h **** 
  51:./math/pprz_orientation_conversion.h **** /**
  52:./math/pprz_orientation_conversion.h ****  * @defgroup math_orientation_representation Generic Orientation Representations
  53:./math/pprz_orientation_conversion.h ****  * @{
  54:./math/pprz_orientation_conversion.h ****  */
  55:./math/pprz_orientation_conversion.h **** 
  56:./math/pprz_orientation_conversion.h **** #ifndef PPRZ_ORIENTATION_CONVERSION_H
  57:./math/pprz_orientation_conversion.h **** #define PPRZ_ORIENTATION_CONVERSION_H
  58:./math/pprz_orientation_conversion.h **** 
  59:./math/pprz_orientation_conversion.h **** #ifdef __cplusplus
  60:./math/pprz_orientation_conversion.h **** extern "C" {
  61:./math/pprz_orientation_conversion.h **** #endif
  62:./math/pprz_orientation_conversion.h **** 
  63:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_int.h"
  64:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_float.h"
  65:./math/pprz_orientation_conversion.h **** 
  66:./math/pprz_orientation_conversion.h **** #include "std.h"
  67:./math/pprz_orientation_conversion.h **** 
  68:./math/pprz_orientation_conversion.h **** 
  69:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_I  0  ///< Quaternion (BFP int)
  70:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_I 1  ///< zyx Euler (BFP int)
  71:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_I  2  ///< Rotation Matrix (BFP int)
  72:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_F  3  ///< Quaternion (float)
  73:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_F 4  ///< zyx Euler (float)
  74:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_F  5  ///< Rotation Matrix (float)
  75:./math/pprz_orientation_conversion.h **** 
  76:./math/pprz_orientation_conversion.h **** /*
  77:./math/pprz_orientation_conversion.h ****  * @brief Struct with euler/rmat/quaternion orientation representations in BFP int and float
  78:./math/pprz_orientation_conversion.h ****  */
  79:./math/pprz_orientation_conversion.h **** struct OrientationReps {
  80:./math/pprz_orientation_conversion.h ****   /**
  81:./math/pprz_orientation_conversion.h ****    * Holds the status bits for all orientation representations.
  82:./math/pprz_orientation_conversion.h ****    * When the corresponding bit is set, the representation
  83:./math/pprz_orientation_conversion.h ****    * is already computed.
  84:./math/pprz_orientation_conversion.h ****    */
  85:./math/pprz_orientation_conversion.h ****   uint8_t status;
  86:./math/pprz_orientation_conversion.h **** 
  87:./math/pprz_orientation_conversion.h ****   /**
  88:./math/pprz_orientation_conversion.h ****    * Orientation quaternion.
  89:./math/pprz_orientation_conversion.h ****    * Units: #INT32_QUAT_FRAC
  90:./math/pprz_orientation_conversion.h ****    */
  91:./math/pprz_orientation_conversion.h ****   struct Int32Quat quat_i;
  92:./math/pprz_orientation_conversion.h **** 
  93:./math/pprz_orientation_conversion.h ****   /**
  94:./math/pprz_orientation_conversion.h ****    * Orientation in zyx euler angles.
  95:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_ANGLE_FRAC
  96:./math/pprz_orientation_conversion.h ****    */
  97:./math/pprz_orientation_conversion.h ****   struct Int32Eulers eulers_i;
  98:./math/pprz_orientation_conversion.h **** 
  99:./math/pprz_orientation_conversion.h ****   /**
 100:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
 101:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_TRIG_FRAC
 102:./math/pprz_orientation_conversion.h ****    */
 103:./math/pprz_orientation_conversion.h ****   struct Int32RMat rmat_i;
 104:./math/pprz_orientation_conversion.h **** 
 105:./math/pprz_orientation_conversion.h ****   /**
 106:./math/pprz_orientation_conversion.h ****    * Orientation as quaternion.
 107:./math/pprz_orientation_conversion.h ****    * Units: unit length quaternion
 108:./math/pprz_orientation_conversion.h ****    */
 109:./math/pprz_orientation_conversion.h ****   struct FloatQuat quat_f;
 110:./math/pprz_orientation_conversion.h **** 
 111:./math/pprz_orientation_conversion.h ****   /**
 112:./math/pprz_orientation_conversion.h ****    * Orienation in zyx euler angles.
 113:./math/pprz_orientation_conversion.h ****    * Units: rad
 114:./math/pprz_orientation_conversion.h ****    */
 115:./math/pprz_orientation_conversion.h ****   struct FloatEulers eulers_f;
 116:./math/pprz_orientation_conversion.h **** 
 117:./math/pprz_orientation_conversion.h ****   /**
 118:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
 119:./math/pprz_orientation_conversion.h ****    * Units: rad
 120:./math/pprz_orientation_conversion.h ****    */
 121:./math/pprz_orientation_conversion.h ****   struct FloatRMat   rmat_f;
 122:./math/pprz_orientation_conversion.h **** };
 123:./math/pprz_orientation_conversion.h **** 
 124:./math/pprz_orientation_conversion.h **** /************* declaration of transformation functions ************/
 125:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_i(struct OrientationReps *orientation);
 126:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_i(struct OrientationReps *orientation);
 127:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_i(struct OrientationReps *orientation);
 128:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_f(struct OrientationReps *orientation);
 129:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_f(struct OrientationReps *orientation);
 130:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_f(struct OrientationReps *orientation);
 131:./math/pprz_orientation_conversion.h **** 
 132:./math/pprz_orientation_conversion.h **** 
 133:./math/pprz_orientation_conversion.h **** /*********************** validity test functions ******************/
 134:./math/pprz_orientation_conversion.h **** /// Test if orientations are valid.
 135:./math/pprz_orientation_conversion.h **** static inline bool_t orienationCheckValid(struct OrientationReps *orientation)
 136:./math/pprz_orientation_conversion.h **** {
 137:./math/pprz_orientation_conversion.h ****   return (orientation->status);
 138:./math/pprz_orientation_conversion.h **** }
 139:./math/pprz_orientation_conversion.h **** 
 140:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (int).
 141:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_i(struct OrientationReps *orientation, struct Int32Quat *quat
 142:./math/pprz_orientation_conversion.h **** {
 143:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 144:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 145:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_I);
 146:./math/pprz_orientation_conversion.h **** }
 147:./math/pprz_orientation_conversion.h **** 
 148:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (int).
 149:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_i(struct OrientationReps *orientation, struct Int32RMat *rmat
 150:./math/pprz_orientation_conversion.h **** {
 151:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_i, *rmat);
 152:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 153:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_I);
 154:./math/pprz_orientation_conversion.h **** }
 155:./math/pprz_orientation_conversion.h **** 
 156:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (int).
 157:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_i(struct OrientationReps *orientation, struct Int32Eulers *
 158:./math/pprz_orientation_conversion.h **** {
 159:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_i, *eulers);
 160:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 161:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_I);
 162:./math/pprz_orientation_conversion.h **** }
 163:./math/pprz_orientation_conversion.h **** 
 164:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (float).
 165:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_f(struct OrientationReps *orientation, struct FloatQuat *quat
 166:./math/pprz_orientation_conversion.h **** {
 167:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_f, *quat);
 168:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 169:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_F);
 170:./math/pprz_orientation_conversion.h **** }
 171:./math/pprz_orientation_conversion.h **** 
 172:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (float).
 173:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_f(struct OrientationReps *orientation, struct FloatRMat *rmat
 174:./math/pprz_orientation_conversion.h **** {
 175:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_f, *rmat);
 176:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 177:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_F);
 178:./math/pprz_orientation_conversion.h **** }
 179:./math/pprz_orientation_conversion.h **** 
 180:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (float).
 181:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_f(struct OrientationReps *orientation, struct FloatEulers *
 182:./math/pprz_orientation_conversion.h **** {
 183:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_f, *eulers);
 184:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 185:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_F);
 186:./math/pprz_orientation_conversion.h **** }
 187:./math/pprz_orientation_conversion.h **** 
 188:./math/pprz_orientation_conversion.h **** 
 189:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (int).
 190:./math/pprz_orientation_conversion.h **** static inline struct Int32Quat *orientationGetQuat_i(struct OrientationReps *orientation)
 191:./math/pprz_orientation_conversion.h **** {
 192:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_I)) {
 193:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_i(orientation);
 194:./math/pprz_orientation_conversion.h ****   }
 195:./math/pprz_orientation_conversion.h ****   return &orientation->quat_i;
 196:./math/pprz_orientation_conversion.h **** }
 197:./math/pprz_orientation_conversion.h **** 
 198:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (int).
 199:./math/pprz_orientation_conversion.h **** static inline struct Int32RMat *orientationGetRMat_i(struct OrientationReps *orientation)
 200:./math/pprz_orientation_conversion.h **** {
 201:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_I)) {
 202:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_i(orientation);
 203:./math/pprz_orientation_conversion.h ****   }
 204:./math/pprz_orientation_conversion.h ****   return &orientation->rmat_i;
 205:./math/pprz_orientation_conversion.h **** }
 206:./math/pprz_orientation_conversion.h **** 
 207:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude euler angles (int).
 208:./math/pprz_orientation_conversion.h **** static inline struct Int32Eulers *orientationGetEulers_i(struct OrientationReps *orientation)
 209:./math/pprz_orientation_conversion.h **** {
 210:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_I)) {
 211:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_i(orientation);
 212:./math/pprz_orientation_conversion.h ****   }
 213:./math/pprz_orientation_conversion.h ****   return &orientation->eulers_i;
 214:./math/pprz_orientation_conversion.h **** }
 215:./math/pprz_orientation_conversion.h **** 
 216:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (float).
 217:./math/pprz_orientation_conversion.h **** static inline struct FloatQuat *orientationGetQuat_f(struct OrientationReps *orientation)
 218:./math/pprz_orientation_conversion.h **** {
 219:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_F)) {
 220:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_f(orientation);
 221:./math/pprz_orientation_conversion.h ****   }
 222:./math/pprz_orientation_conversion.h ****   return &orientation->quat_f;
 223:./math/pprz_orientation_conversion.h **** }
 224:./math/pprz_orientation_conversion.h **** 
 225:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (float).
 226:./math/pprz_orientation_conversion.h **** static inline struct FloatRMat *orientationGetRMat_f(struct OrientationReps *orientation)
 227:./math/pprz_orientation_conversion.h **** {
 228:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_F)) {
 229:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_f(orientation);
 230:./math/pprz_orientation_conversion.h ****   }
 231:./math/pprz_orientation_conversion.h ****   return &orientation->rmat_f;
 232:./math/pprz_orientation_conversion.h **** }
 233:./math/pprz_orientation_conversion.h **** 
 234:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude euler angles (float).
 235:./math/pprz_orientation_conversion.h **** static inline struct FloatEulers *orientationGetEulers_f(struct OrientationReps *orientation)
 236:./math/pprz_orientation_conversion.h **** {
 237:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_F)) {
 1907              		.loc 4 237 0
 1908 0006 3348     		ldr	r0, .L84
 1909              	.LVL203:
 1910 0008 90F8A431 		ldrb	r3, [r0, #420]	@ zero_extendqisi2
 1911 000c DB06     		lsls	r3, r3, #27
 1912              	.LBE95:
 1913              	.LBE94:
 1914              	.LBE93:
  94:firmwares/fixedwing/autopilot.c ****   struct FloatEulers *att = stateGetNedToBodyEulers_f();
 1915              		.loc 1 94 0
 1916 000e 0D46     		mov	r5, r1
 1917              	.LBB98:
 1918              	.LBB97:
 1919              	.LBB96:
 1920              		.loc 4 237 0
 1921 0010 03D4     		bmi	.L80
 238:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_f(orientation);
 1922              		.loc 4 238 0
 1923 0012 00F5D270 		add	r0, r0, #420
 1924 0016 FFF7FEFF 		bl	orientationCalcEulers_f
 1925              	.LVL204:
 1926              	.L80:
 1927              	.LBE96:
 1928              	.LBE97:
 1929              	.LBE98:
 1930              	.LBB99:
 1931              	.LBB100:
 348:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 1932              		.loc 3 348 0
 1933 001a 276A     		ldr	r7, [r4, #32]
 1934 001c 2368     		ldr	r3, [r4]
 1935 001e D4F80480 		ldr	r8, [r4, #4]
 1936 0022 0126     		movs	r6, #1
 1937 0024 0E21     		movs	r1, #14
 1938 0026 8DF80F60 		strb	r6, [sp, #15]
 1939              	.LVL205:
 1940 002a 3846     		mov	r0, r7
 1941 002c 9847     		blx	r3
 1942              	.LVL206:
 1943 002e 2946     		mov	r1, r5
 1944 0030 0246     		mov	r2, r0
 1945 0032 3846     		mov	r0, r7
 1946 0034 C047     		blx	r8
 1947              	.LVL207:
 1948 0036 0028     		cmp	r0, #0
 1949 0038 45D0     		beq	.L81
 349:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 1950              		.loc 3 349 0
 1951 003a 276A     		ldr	r7, [r4, #32]
 1952 003c 2368     		ldr	r3, [r4]
 1953 003e D4F81C80 		ldr	r8, [r4, #28]
 1954 0042 3846     		mov	r0, r7
 1955 0044 0E21     		movs	r1, #14
 1956 0046 9847     		blx	r3
 1957              	.LVL208:
 1958 0048 2946     		mov	r1, r5
 1959 004a 0246     		mov	r2, r0
 1960 004c 3846     		mov	r0, r7
 1961 004e C047     		blx	r8
 1962              	.LVL209:
 350:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1963              		.loc 3 350 0
 1964 0050 2369     		ldr	r3, [r4, #16]
 1965 0052 206A     		ldr	r0, [r4, #32]
 353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
 1966              		.loc 3 353 0
 1967 0054 DFF88480 		ldr	r8, .L84+8
 1968              	.LVL210:
 350:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1969              		.loc 3 350 0
 1970 0058 2946     		mov	r1, r5
 1971 005a 0E22     		movs	r2, #14
 1972 005c 9847     		blx	r3
 1973              	.LVL211:
 351:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ATTITUDE, "ATTITUDE"
 1974              		.loc 3 351 0
 1975 005e 0DF10F03 		add	r3, sp, #15
 1976 0062 0096     		str	r6, [sp]
 1977 0064 0193     		str	r3, [sp, #4]
 1978 0066 A668     		ldr	r6, [r4, #8]
 1979              	.LVL212:
 1980 0068 206A     		ldr	r0, [r4, #32]
 1981 006a 2946     		mov	r1, r5
 1982 006c 0222     		movs	r2, #2
 1983 006e 0023     		movs	r3, #0
 1984              	.LVL213:
 1985 0070 B047     		blx	r6
 1986              	.LVL214:
 352:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
 1987              		.loc 3 352 0
 1988 0072 0623     		movs	r3, #6
 1989 0074 0093     		str	r3, [sp]
 1990 0076 184B     		ldr	r3, .L84+4
 1991 0078 0193     		str	r3, [sp, #4]
 353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
 1992              		.loc 3 353 0
 1993 007a 0427     		movs	r7, #4
 352:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
 1994              		.loc 3 352 0
 1995 007c E668     		ldr	r6, [r4, #12]
 1996 007e 206A     		ldr	r0, [r4, #32]
 1997 0080 2946     		mov	r1, r5
 1998 0082 0222     		movs	r2, #2
 1999 0084 0023     		movs	r3, #0
 2000 0086 B047     		blx	r6
 2001              	.LVL215:
 353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
 2002              		.loc 3 353 0
 2003 0088 206A     		ldr	r0, [r4, #32]
 2004 008a A668     		ldr	r6, [r4, #8]
 2005 008c 0097     		str	r7, [sp]
 2006 008e 2946     		mov	r1, r5
 2007 0090 0A22     		movs	r2, #10
 2008 0092 0023     		movs	r3, #0
 2009 0094 CDF80480 		str	r8, [sp, #4]
 2010 0098 B047     		blx	r6
 2011              	.LVL216:
 354:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
 2012              		.loc 3 354 0
 2013 009a 08F10803 		add	r3, r8, #8
 2014 009e 0193     		str	r3, [sp, #4]
 2015 00a0 206A     		ldr	r0, [r4, #32]
 2016 00a2 A668     		ldr	r6, [r4, #8]
 2017 00a4 0097     		str	r7, [sp]
 2018 00a6 2946     		mov	r1, r5
 2019 00a8 0A22     		movs	r2, #10
 2020 00aa 0023     		movs	r3, #0
 2021 00ac B047     		blx	r6
 2022              	.LVL217:
 355:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 2023              		.loc 3 355 0
 2024 00ae 08EB0706 		add	r6, r8, r7
 2025 00b2 0196     		str	r6, [sp, #4]
 2026 00b4 0023     		movs	r3, #0
 2027 00b6 0097     		str	r7, [sp]
 2028 00b8 A668     		ldr	r6, [r4, #8]
 2029 00ba 206A     		ldr	r0, [r4, #32]
 2030 00bc 2946     		mov	r1, r5
 2031 00be 0A22     		movs	r2, #10
 2032 00c0 B047     		blx	r6
 2033              	.LVL218:
 356:/home/dino/paparazzi/var/include/messages.h **** 	} else
 2034              		.loc 3 356 0
 2035 00c2 6369     		ldr	r3, [r4, #20]
 2036 00c4 00E0     		b	.L83
 2037              	.LVL219:
 2038              	.L81:
 358:/home/dino/paparazzi/var/include/messages.h **** }
 2039              		.loc 3 358 0
 2040 00c6 A369     		ldr	r3, [r4, #24]
 2041              	.L83:
 2042 00c8 206A     		ldr	r0, [r4, #32]
 2043 00ca 2946     		mov	r1, r5
 2044 00cc 9847     		blx	r3
 2045              	.LVL220:
 2046              	.LBE100:
 2047              	.LBE99:
  98:firmwares/fixedwing/autopilot.c **** 
 2048              		.loc 1 98 0
 2049 00ce 04B0     		add	sp, sp, #16
 2050              		.cfi_def_cfa_offset 24
 2051              		@ sp needed
 2052 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2053              	.LVL221:
 2054              	.L85:
 2055              		.align	2
 2056              	.L84:
 2057 00d4 00000000 		.word	state
 2058 00d8 7A000000 		.word	.LC11
 2059 00dc F8010000 		.word	state+504
 2060              		.cfi_endproc
 2061              	.LFE463:
 2063              		.section	.text.autopilot_send_mode,"ax",%progbits
 2064              		.align	1
 2065              		.global	autopilot_send_mode
 2066              		.thumb
 2067              		.thumb_func
 2069              	autopilot_send_mode:
 2070              	.LFB470:
 156:firmwares/fixedwing/autopilot.c **** #endif /* PERIODIC_TELEMETRY */
 157:firmwares/fixedwing/autopilot.c **** 
 158:firmwares/fixedwing/autopilot.c **** void autopilot_send_mode(void)
 159:firmwares/fixedwing/autopilot.c **** {
 2071              		.loc 1 159 0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 160:firmwares/fixedwing/autopilot.c ****   // use default telemetry here
 161:firmwares/fixedwing/autopilot.c **** #if DOWNLINK
 162:firmwares/fixedwing/autopilot.c ****   send_mode(&(DefaultChannel).trans_tx, &(DefaultDevice).device);
 2076              		.loc 1 162 0
 2077 0000 0148     		ldr	r0, .L87
 2078 0002 0249     		ldr	r1, .L87+4
 2079 0004 FFF7FEBF 		b	send_mode
 2080              	.LVL222:
 2081              	.L88:
 2082              		.align	2
 2083              	.L87:
 2084 0008 08010000 		.word	pprz_tp+264
 2085 000c 2C010000 		.word	uart1+300
 2086              		.cfi_endproc
 2087              	.LFE470:
 2089              		.section	.text.autopilot_init,"ax",%progbits
 2090              		.align	1
 2091              		.global	autopilot_init
 2092              		.thumb
 2093              		.thumb_func
 2095              	autopilot_init:
 2096              	.LFB471:
 163:firmwares/fixedwing/autopilot.c **** #endif
 164:firmwares/fixedwing/autopilot.c **** }
 165:firmwares/fixedwing/autopilot.c **** 
 166:firmwares/fixedwing/autopilot.c **** void autopilot_init(void)
 167:firmwares/fixedwing/autopilot.c **** {
 2097              		.loc 1 167 0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 0
 2100              		@ frame_needed = 0, uses_anonymous_args = 0
 168:firmwares/fixedwing/autopilot.c ****   pprz_mode = PPRZ_MODE_AUTO2;
 2101              		.loc 1 168 0
 2102 0000 284B     		ldr	r3, .L90
 2103 0002 0222     		movs	r2, #2
 167:firmwares/fixedwing/autopilot.c ****   pprz_mode = PPRZ_MODE_AUTO2;
 2104              		.loc 1 167 0
 2105 0004 10B5     		push	{r4, lr}
 2106              		.cfi_def_cfa_offset 8
 2107              		.cfi_offset 4, -8
 2108              		.cfi_offset 14, -4
 2109              		.loc 1 168 0
 2110 0006 1A70     		strb	r2, [r3]
 169:firmwares/fixedwing/autopilot.c ****   kill_throttle = FALSE;
 2111              		.loc 1 169 0
 2112 0008 274A     		ldr	r2, .L90+4
 170:firmwares/fixedwing/autopilot.c ****   launch = FALSE;
 171:firmwares/fixedwing/autopilot.c ****   autopilot_flight_time = 0;
 172:firmwares/fixedwing/autopilot.c **** 
 173:firmwares/fixedwing/autopilot.c ****   lateral_mode = LATERAL_MODE_MANUAL;
 174:firmwares/fixedwing/autopilot.c **** 
 175:firmwares/fixedwing/autopilot.c ****   gps_lost = FALSE;
 176:firmwares/fixedwing/autopilot.c **** 
 177:firmwares/fixedwing/autopilot.c ****   power_switch = FALSE;
 178:firmwares/fixedwing/autopilot.c **** #ifdef POWER_SWITCH_GPIO
 179:firmwares/fixedwing/autopilot.c ****   gpio_setup_output(POWER_SWITCH_GPIO);
 2113              		.loc 1 179 0
 2114 000a 284C     		ldr	r4, .L90+8
 169:firmwares/fixedwing/autopilot.c ****   kill_throttle = FALSE;
 2115              		.loc 1 169 0
 2116 000c 0023     		movs	r3, #0
 2117 000e 1370     		strb	r3, [r2]
 170:firmwares/fixedwing/autopilot.c ****   launch = FALSE;
 2118              		.loc 1 170 0
 2119 0010 274A     		ldr	r2, .L90+12
 2120 0012 1370     		strb	r3, [r2]
 171:firmwares/fixedwing/autopilot.c **** 
 2121              		.loc 1 171 0
 2122 0014 274A     		ldr	r2, .L90+16
 2123 0016 1380     		strh	r3, [r2]	@ movhi
 173:firmwares/fixedwing/autopilot.c **** 
 2124              		.loc 1 173 0
 2125 0018 274A     		ldr	r2, .L90+20
 2126 001a 1370     		strb	r3, [r2]
 175:firmwares/fixedwing/autopilot.c **** 
 2127              		.loc 1 175 0
 2128 001c 274A     		ldr	r2, .L90+24
 2129 001e 1370     		strb	r3, [r2]
 177:firmwares/fixedwing/autopilot.c **** #ifdef POWER_SWITCH_GPIO
 2130              		.loc 1 177 0
 2131 0020 274A     		ldr	r2, .L90+28
 2132              		.loc 1 179 0
 2133 0022 2046     		mov	r0, r4
 2134 0024 4FF48051 		mov	r1, #4096
 177:firmwares/fixedwing/autopilot.c **** #ifdef POWER_SWITCH_GPIO
 2135              		.loc 1 177 0
 2136 0028 1370     		strb	r3, [r2]
 2137              		.loc 1 179 0
 2138 002a FFF7FEFF 		bl	gpio_setup_output
 2139              	.LVL223:
 180:firmwares/fixedwing/autopilot.c ****   gpio_clear(POWER_SWITCH_GPIO);
 2140              		.loc 1 180 0
 2141 002e 2046     		mov	r0, r4
 181:firmwares/fixedwing/autopilot.c **** #endif
 182:firmwares/fixedwing/autopilot.c **** 
 183:firmwares/fixedwing/autopilot.c **** #if PERIODIC_TELEMETRY
 184:firmwares/fixedwing/autopilot.c ****   /* register some periodic message */
 185:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "AUTOPILOT_VERSION", send_autopilot_version);
 2142              		.loc 1 185 0
 2143 0030 244C     		ldr	r4, .L90+32
 180:firmwares/fixedwing/autopilot.c ****   gpio_clear(POWER_SWITCH_GPIO);
 2144              		.loc 1 180 0
 2145 0032 4FF48051 		mov	r1, #4096
 2146 0036 FFF7FEFF 		bl	gpio_clear
 2147              	.LVL224:
 2148              		.loc 1 185 0
 2149 003a 2046     		mov	r0, r4
 2150 003c 2249     		ldr	r1, .L90+36
 2151 003e 234A     		ldr	r2, .L90+40
 2152 0040 FFF7FEFF 		bl	register_periodic_telemetry
 2153              	.LVL225:
 186:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "ALIVE", send_alive);
 2154              		.loc 1 186 0
 2155 0044 2046     		mov	r0, r4
 2156 0046 2249     		ldr	r1, .L90+44
 2157 0048 224A     		ldr	r2, .L90+48
 2158 004a FFF7FEFF 		bl	register_periodic_telemetry
 2159              	.LVL226:
 187:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "PPRZ_MODE", send_mode);
 2160              		.loc 1 187 0
 2161 004e 2046     		mov	r0, r4
 2162 0050 2149     		ldr	r1, .L90+52
 2163 0052 224A     		ldr	r2, .L90+56
 2164 0054 FFF7FEFF 		bl	register_periodic_telemetry
 2165              	.LVL227:
 188:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "ATTITUDE", send_attitude);
 2166              		.loc 1 188 0
 2167 0058 2046     		mov	r0, r4
 2168 005a 2149     		ldr	r1, .L90+60
 2169 005c 214A     		ldr	r2, .L90+64
 2170 005e FFF7FEFF 		bl	register_periodic_telemetry
 2171              	.LVL228:
 189:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "ESTIMATOR", send_estimator);
 2172              		.loc 1 189 0
 2173 0062 2046     		mov	r0, r4
 2174 0064 2049     		ldr	r1, .L90+68
 2175 0066 214A     		ldr	r2, .L90+72
 2176 0068 FFF7FEFF 		bl	register_periodic_telemetry
 2177              	.LVL229:
 190:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "AIRSPEED", send_airspeed);
 2178              		.loc 1 190 0
 2179 006c 2046     		mov	r0, r4
 2180 006e 2049     		ldr	r1, .L90+76
 2181 0070 204A     		ldr	r2, .L90+80
 2182 0072 FFF7FEFF 		bl	register_periodic_telemetry
 2183              	.LVL230:
 191:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "BAT", send_bat);
 2184              		.loc 1 191 0
 2185 0076 2046     		mov	r0, r4
 2186 0078 1F49     		ldr	r1, .L90+84
 2187 007a 204A     		ldr	r2, .L90+88
 2188 007c FFF7FEFF 		bl	register_periodic_telemetry
 2189              	.LVL231:
 192:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "ENERGY", send_energy);
 2190              		.loc 1 192 0
 2191 0080 2046     		mov	r0, r4
 2192 0082 1F49     		ldr	r1, .L90+92
 2193 0084 1F4A     		ldr	r2, .L90+96
 2194 0086 FFF7FEFF 		bl	register_periodic_telemetry
 2195              	.LVL232:
 193:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "DL_VALUE", send_dl_value);
 2196              		.loc 1 193 0
 2197 008a 2046     		mov	r0, r4
 2198 008c 1E49     		ldr	r1, .L90+100
 2199 008e 1F4A     		ldr	r2, .L90+104
 2200 0090 FFF7FEFF 		bl	register_periodic_telemetry
 2201              	.LVL233:
 194:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "DESIRED", send_desired);
 2202              		.loc 1 194 0
 2203 0094 2046     		mov	r0, r4
 2204 0096 1E49     		ldr	r1, .L90+108
 2205 0098 1E4A     		ldr	r2, .L90+112
 195:firmwares/fixedwing/autopilot.c **** #if defined RADIO_CALIB && defined RADIO_CONTROL_SETTINGS
 196:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "RC_SETTINGS", send_rc_settings);
 197:firmwares/fixedwing/autopilot.c **** #endif
 198:firmwares/fixedwing/autopilot.c **** #endif
 199:firmwares/fixedwing/autopilot.c **** }
 2206              		.loc 1 199 0
 2207 009a BDE81040 		pop	{r4, lr}
 2208              		.cfi_restore 14
 2209              		.cfi_restore 4
 2210              		.cfi_def_cfa_offset 0
 194:firmwares/fixedwing/autopilot.c ****   register_periodic_telemetry(DefaultPeriodic, "DESIRED", send_desired);
 2211              		.loc 1 194 0
 2212 009e FFF7FEBF 		b	register_periodic_telemetry
 2213              	.LVL234:
 2214              	.L91:
 2215 00a2 00BF     		.align	2
 2216              	.L90:
 2217 00a4 00000000 		.word	.LANCHOR5
 2218 00a8 00000000 		.word	.LANCHOR7
 2219 00ac 00040240 		.word	1073873920
 2220 00b0 00000000 		.word	.LANCHOR6
 2221 00b4 00000000 		.word	.LANCHOR4
 2222 00b8 00000000 		.word	.LANCHOR8
 2223 00bc 00000000 		.word	.LANCHOR12
 2224 00c0 00000000 		.word	.LANCHOR13
 2225 00c4 00000000 		.word	pprz_telemetry
 2226 00c8 50000000 		.word	.LC9
 2227 00cc 00000000 		.word	send_autopilot_version
 2228 00d0 39000000 		.word	.LC7
 2229 00d4 00000000 		.word	send_alive
 2230 00d8 2F000000 		.word	.LC6
 2231 00dc 00000000 		.word	send_mode
 2232 00e0 7A000000 		.word	.LC11
 2233 00e4 00000000 		.word	send_attitude
 2234 00e8 09000000 		.word	.LC1
 2235 00ec 00000000 		.word	send_estimator
 2236 00f0 00000000 		.word	.LC0
 2237 00f4 00000000 		.word	send_airspeed
 2238 00f8 2B000000 		.word	.LC5
 2239 00fc 00000000 		.word	send_bat
 2240 0100 13000000 		.word	.LC2
 2241 0104 00000000 		.word	send_energy
 2242 0108 1A000000 		.word	.LC3
 2243 010c 00000000 		.word	send_dl_value
 2244 0110 23000000 		.word	.LC4
 2245 0114 00000000 		.word	send_desired
 2246              		.cfi_endproc
 2247              	.LFE471:
 2249              		.global	rc_settings_mode
 2250              		.global	power_switch
 2251              		.global	gps_lost
 2252              		.global	energy
 2253              		.global	current
 2254              		.global	vsupply
 2255              		.global	lateral_mode
 2256              		.global	autopilot_flight_time
 2257              		.global	launch
 2258              		.global	mcu1_status
 2259              		.global	kill_throttle
 2260              		.global	pprz_mode
 2261              		.section	.bss.gps_lost,"aw",%nobits
 2262              		.set	.LANCHOR12,. + 0
 2265              	gps_lost:
 2266 0000 00       		.space	1
 2267              		.section	.bss.i.11015,"aw",%nobits
 2268              		.set	.LANCHOR3,. + 0
 2271              	i.11015:
 2272 0000 00       		.space	1
 2273              		.section	.bss.power_switch,"aw",%nobits
 2274              		.set	.LANCHOR13,. + 0
 2277              	power_switch:
 2278 0000 00       		.space	1
 2279              		.section	.bss.launch,"aw",%nobits
 2280              		.set	.LANCHOR6,. + 0
 2283              	launch:
 2284 0000 00       		.space	1
 2285              		.section	.bss.vsupply,"aw",%nobits
 2286              		.align	1
 2287              		.set	.LANCHOR1,. + 0
 2290              	vsupply:
 2291 0000 0000     		.space	2
 2292              		.section	.bss.mcu1_status,"aw",%nobits
 2293              		.set	.LANCHOR10,. + 0
 2296              	mcu1_status:
 2297 0000 00       		.space	1
 2298              		.section	.rodata.str1.1,"aMS",%progbits,1
 2299              	.LC0:
 2300 0000 41495253 		.ascii	"AIRSPEED\000"
 2300      50454544 
 2300      00
 2301              	.LC1:
 2302 0009 45535449 		.ascii	"ESTIMATOR\000"
 2302      4D41544F 
 2302      5200
 2303              	.LC2:
 2304 0013 454E4552 		.ascii	"ENERGY\000"
 2304      475900
 2305              	.LC3:
 2306 001a 444C5F56 		.ascii	"DL_VALUE\000"
 2306      414C5545 
 2306      00
 2307              	.LC4:
 2308 0023 44455349 		.ascii	"DESIRED\000"
 2308      52454400 
 2309              	.LC5:
 2310 002b 42415400 		.ascii	"BAT\000"
 2311              	.LC6:
 2312 002f 5050525A 		.ascii	"PPRZ_MODE\000"
 2312      5F4D4F44 
 2312      4500
 2313              	.LC7:
 2314 0039 414C4956 		.ascii	"ALIVE\000"
 2314      4500
 2315              	.LC8:
 2316 003f B0F1AFEC 		.ascii	"\260\361\257\354\366NU\353\252D\204\373\375a\353\240"
 2316      F64E55EB 
 2316      AA4484FB 
 2316      FD61EBA0 
 2317 004f 00       		.ascii	"\000"
 2318              	.LC9:
 2319 0050 4155544F 		.ascii	"AUTOPILOT_VERSION\000"
 2319      50494C4F 
 2319      545F5645 
 2319      5253494F 
 2319      4E00
 2320              	.LC10:
 2321 0062 76352E35 		.ascii	"v5.5_devel-686-gdd5dddf\000"
 2321      5F646576 
 2321      656C2D36 
 2321      38362D67 
 2321      64643564 
 2322              	.LC11:
 2323 007a 41545449 		.ascii	"ATTITUDE\000"
 2323      54554445 
 2323      00
 2324              		.section	.bss.kill_throttle,"aw",%nobits
 2325              		.set	.LANCHOR7,. + 0
 2328              	kill_throttle:
 2329 0000 00       		.space	1
 2330              		.section	.bss.pprz_mode,"aw",%nobits
 2331              		.set	.LANCHOR5,. + 0
 2334              	pprz_mode:
 2335 0000 00       		.space	1
 2336              		.section	.bss.autopilot_flight_time,"aw",%nobits
 2337              		.align	1
 2338              		.set	.LANCHOR4,. + 0
 2341              	autopilot_flight_time:
 2342 0000 0000     		.space	2
 2343              		.section	.bss.current,"aw",%nobits
 2344              		.align	2
 2345              		.set	.LANCHOR2,. + 0
 2348              	current:
 2349 0000 00000000 		.space	4
 2350              		.section	.data.ap_version.10977,"aw",%progbits
 2351              		.align	2
 2352              		.set	.LANCHOR11,. + 0
 2355              	ap_version.10977:
 2356 0000 44C50000 		.word	50500
 2357              		.section	.bss.energy,"aw",%nobits
 2358              		.align	2
 2359              		.set	.LANCHOR0,. + 0
 2362              	energy:
 2363 0000 00000000 		.space	4
 2364              		.section	.bss.rc_settings_mode,"aw",%nobits
 2365              		.set	.LANCHOR9,. + 0
 2368              	rc_settings_mode:
 2369 0000 00       		.space	1
 2370              		.section	.bss.lateral_mode,"aw",%nobits
 2371              		.set	.LANCHOR8,. + 0
 2374              	lateral_mode:
 2375 0000 00       		.space	1
 2376              		.text
 2377              	.Letext0:
 2378              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2379              		.file 6 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2380              		.file 7 "/home/dino/paparazzi/sw/include/std.h"
 2381              		.file 8 "./paparazzi.h"
 2382              		.file 9 "./mcu_periph/link_device.h"
 2383              		.file 10 "./subsystems/datalink/transport.h"
 2384              		.file 11 "./math/pprz_algebra_int.h"
 2385              		.file 12 "./math/pprz_algebra_float.h"
 2386              		.file 13 "./math/pprz_geodetic_int.h"
 2387              		.file 14 "./math/pprz_geodetic_float.h"
 2388              		.file 15 "./mcu_periph/uart.h"
 2389              		.file 16 "./subsystems/datalink/pprz_transport.h"
 2390              		.file 17 "./mcu_periph/sys_time.h"
 2391              		.file 18 "./subsystems/datalink/xbee.h"
 2392              		.file 19 "./subsystems/datalink/telemetry_common.h"
 2393              		.file 20 "./subsystems/gps/gps_ubx.h"
 2394              		.file 21 "./subsystems/gps.h"
 2395              		.file 22 "./subsystems/settings.h"
 2396              		.file 23 "./firmwares/fixedwing/guidance/guidance_common.h"
 2397              		.file 24 "./firmwares/fixedwing/guidance/guidance_v.h"
 2398              		.file 25 "./subsystems/navigation/common_flight_plan.h"
 2399              		.file 26 "./firmwares/fixedwing/nav.h"
 2400              		.file 27 "/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/modules.h"
 2401              		.file 28 "./subsystems/datalink/datalink.h"
 2402              		.file 29 "./subsystems/datalink/w5100.h"
 2403              		.file 30 "/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/periodic_telemetry.h"
 2404              		.file 31 "./subsystems/datalink/telemetry.h"
 2405              		.file 32 "./firmwares/fixedwing/stabilization/stabilization_attitude.h"
 2406              		.file 33 "/home/dino/paparazzi/sw/airborne/arch/stm32/mcu_periph/gpio_arch.h"
 2407              		.file 34 "../ext/libopencm3/include/libopencm3/stm32/common/gpio_common_all.h"
 2408              		.file 35 "../ext/libopencm3/include/libopencm3/stm32/f4/rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 autopilot.c
     /tmp/cchVPDv8.s:20     .text.send_airspeed:00000000 $t
     /tmp/cchVPDv8.s:24     .text.send_airspeed:00000000 send_airspeed
     /tmp/cchVPDv8.s:200    .text.send_airspeed:000000e4 $d
     /tmp/cchVPDv8.s:207    .text.send_estimator:00000000 $t
     /tmp/cchVPDv8.s:211    .text.send_estimator:00000000 send_estimator
     /tmp/cchVPDv8.s:376    .text.send_estimator:000000cc $d
     /tmp/cchVPDv8.s:383    .text.send_energy:00000000 $t
     /tmp/cchVPDv8.s:387    .text.send_energy:00000000 send_energy
     /tmp/cchVPDv8.s:614    .text.send_energy:0000011c $d
     /tmp/cchVPDv8.s:623    .text.send_dl_value:00000000 $t
     /tmp/cchVPDv8.s:627    .text.send_dl_value:00000000 send_dl_value
     /tmp/cchVPDv8.s:665    .text.send_dl_value:00000020 $d
     /tmp/cchVPDv8.s:677    .text.send_dl_value:0000002c $t
     /tmp/cchVPDv8.s:859    .text.send_dl_value:00000120 $d
     /tmp/cchVPDv8.s:877    .text.send_desired:00000000 $t
     /tmp/cchVPDv8.s:881    .text.send_desired:00000000 send_desired
     /tmp/cchVPDv8.s:1095   .text.send_desired:00000118 $d
     /tmp/cchVPDv8.s:1108   .text.send_bat:00000000 $t
     /tmp/cchVPDv8.s:1112   .text.send_bat:00000000 send_bat
     /tmp/cchVPDv8.s:1342   .text.send_bat:00000138 $d
     /tmp/cchVPDv8.s:1355   .text.send_mode:00000000 $t
     /tmp/cchVPDv8.s:1359   .text.send_mode:00000000 send_mode
     /tmp/cchVPDv8.s:1537   .text.send_mode:000000f0 $d
     /tmp/cchVPDv8.s:1548   .text.send_alive:00000000 $t
     /tmp/cchVPDv8.s:1552   .text.send_alive:00000000 send_alive
     /tmp/cchVPDv8.s:1703   .text.send_alive:000000c4 $d
     /tmp/cchVPDv8.s:1709   .text.send_autopilot_version:00000000 $t
     /tmp/cchVPDv8.s:1714   .text.send_autopilot_version:00000000 send_autopilot_version
     /tmp/cchVPDv8.s:1875   .text.send_autopilot_version:000000d0 $d
     /tmp/cchVPDv8.s:1882   .text.send_attitude:00000000 $t
     /tmp/cchVPDv8.s:1886   .text.send_attitude:00000000 send_attitude
     /tmp/cchVPDv8.s:2057   .text.send_attitude:000000d4 $d
     /tmp/cchVPDv8.s:2064   .text.autopilot_send_mode:00000000 $t
     /tmp/cchVPDv8.s:2069   .text.autopilot_send_mode:00000000 autopilot_send_mode
     /tmp/cchVPDv8.s:2084   .text.autopilot_send_mode:00000008 $d
     /tmp/cchVPDv8.s:2090   .text.autopilot_init:00000000 $t
     /tmp/cchVPDv8.s:2095   .text.autopilot_init:00000000 autopilot_init
     /tmp/cchVPDv8.s:2217   .text.autopilot_init:000000a4 $d
     /tmp/cchVPDv8.s:2368   .bss.rc_settings_mode:00000000 rc_settings_mode
     /tmp/cchVPDv8.s:2277   .bss.power_switch:00000000 power_switch
     /tmp/cchVPDv8.s:2265   .bss.gps_lost:00000000 gps_lost
     /tmp/cchVPDv8.s:2362   .bss.energy:00000000 energy
     /tmp/cchVPDv8.s:2348   .bss.current:00000000 current
     /tmp/cchVPDv8.s:2290   .bss.vsupply:00000000 vsupply
     /tmp/cchVPDv8.s:2374   .bss.lateral_mode:00000000 lateral_mode
     /tmp/cchVPDv8.s:2341   .bss.autopilot_flight_time:00000000 autopilot_flight_time
     /tmp/cchVPDv8.s:2283   .bss.launch:00000000 launch
     /tmp/cchVPDv8.s:2296   .bss.mcu1_status:00000000 mcu1_status
     /tmp/cchVPDv8.s:2328   .bss.kill_throttle:00000000 kill_throttle
     /tmp/cchVPDv8.s:2334   .bss.pprz_mode:00000000 pprz_mode
     /tmp/cchVPDv8.s:2266   .bss.gps_lost:00000000 $d
     /tmp/cchVPDv8.s:2271   .bss.i.11015:00000000 i.11015
     /tmp/cchVPDv8.s:2272   .bss.i.11015:00000000 $d
     /tmp/cchVPDv8.s:2278   .bss.power_switch:00000000 $d
     /tmp/cchVPDv8.s:2284   .bss.launch:00000000 $d
     /tmp/cchVPDv8.s:2286   .bss.vsupply:00000000 $d
     /tmp/cchVPDv8.s:2297   .bss.mcu1_status:00000000 $d
     /tmp/cchVPDv8.s:2329   .bss.kill_throttle:00000000 $d
     /tmp/cchVPDv8.s:2335   .bss.pprz_mode:00000000 $d
     /tmp/cchVPDv8.s:2337   .bss.autopilot_flight_time:00000000 $d
     /tmp/cchVPDv8.s:2344   .bss.current:00000000 $d
     /tmp/cchVPDv8.s:2351   .data.ap_version.10977:00000000 $d
     /tmp/cchVPDv8.s:2355   .data.ap_version.10977:00000000 ap_version.10977
     /tmp/cchVPDv8.s:2358   .bss.energy:00000000 $d
     /tmp/cchVPDv8.s:2369   .bss.rc_settings_mode:00000000 $d
     /tmp/cchVPDv8.s:2375   .bss.lateral_mode:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.7f506cdee5614e5fae524d20989ad8c8
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.stddef.h.263.49e44f5ee9cdd8820580fc4aa239e32a
                           .group:00000000 wm4.inttypes.h.23.a096771aacee9aba4b33c2d04aacc9b1
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4._ansi.h.13.1b5575dc7921a4c0cff7dbaa2f33e670
                           .group:00000000 wm4.stddef.h.39.2b75ea897b59bf67f50e970d678806e4
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.math.h.35.ad242c9287d2217c7d2035216e5d04ca
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.paparazzi.h.2.eeb1c9dc8e5acded3c1d3014b2b23af3
                           .group:00000000 wm4.airframe.h.5.55ffe79377b235d0a97162ed16ec170d
                           .group:00000000 wm4.apogee_1.0.h.2.34ab7bb688056eecb54e2e3ffff48ca6
                           .group:00000000 wm4.actuators_pwm_arch.h.27.5a737f85d71223e6481c4ba4068c062a
                           .group:00000000 wm4.airframe.h.14.814d9a421a57ec2d434c7b6efc262c4b
                           .group:00000000 wm4.autopilot.h.44.1886a4306ec3e17d615acd8287156eb3
                           .group:00000000 wm4.common.h.21.22efaac882611267214d0a36f6f15e74
                           .group:00000000 wm4.memorymap.h.21.0c01d18fc5814f65c6ceb1822d4030fa
                           .group:00000000 wm4.memorymap.h.28.85f6f5de65b1d4294c70f79052a0b8c0
                           .group:00000000 wm4.gpio_common_all.h.37.fedbbcb9179f773c905aa3c3e4b7dbdd
                           .group:00000000 wm4.gpio_common_f234.h.48.ee30692f386eaf6801df27cae93943b1
                           .group:00000000 wm4.gpio_common_f24.h.48.4e4be5e3ebe26aee10d604e2d0fecde8
                           .group:00000000 wm4.autopilot.h.122.a7c58c4b7871349616be315a4b094581
                           .group:00000000 wm4.settings.h.29.dff4b7c685fcd0dfb04f9f8de0a69e75
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_trig_int.h.28.b756be608c9d9f3092a41321446e5fa2
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.pprz_algebra_int.h.68.04ac162ae1e1d94f716d0bb402062624
                           .group:00000000 wm4.pprz_algebra_float.h.98.bb035bcbfa66bb186e7ea81143fd64bc
                           .group:00000000 wm4.pprz_geodetic.h.35.f7fdb5d11659b92d11c7ce67b6317005
                           .group:00000000 wm4.pprz_geodetic_int.h.127.8e737bed5ba4468e470311184b1fca7f
                           .group:00000000 wm4.pprz_orientation_conversion.h.69.5cce798fefad8bb761767fd414e61db5
                           .group:00000000 wm4.state.h.65.b18954aacb3801ec3e27b4e857d620d3
                           .group:00000000 wm4.guidance_common.h.29.1bf3aadf5e973d07dcbb9e181585cee6
                           .group:00000000 wm4.nav_survey_rectangle.h.40.be8d41ad6903a05cab94fc858d7a6899
                           .group:00000000 wm4.common_flight_plan.h.28.998f628cac1ef266b3e88de20c1aaea2
                           .group:00000000 wm4.common_nav.h.28.8e6fb87079f62fdfc188e60962e671bb
                           .group:00000000 wm4.nav.h.44.3eb88fcdae84be242ba32ecd12ce1b48
                           .group:00000000 wm4.pprz_version.h.42.373008f51c7620a27d52c6a44b471efa
                           .group:00000000 wm4.messages.h.5.f850659c40a03ab37f86f316388d85a9
                           .group:00000000 wm4.uart_arch.h.30.cb8e70feae0b6afe250750f6c1439671
                           .group:00000000 wm4.uart.h.35.4345324d45fae43faace58e743d48e42
                           .group:00000000 wm4.modules.h.5.3647ee45f49511088e2f33d88288be64
                           .group:00000000 wm4.gps_ubx_ucenter.h.29.30a3f1ed020dbc7085e412c29746d829
                           .group:00000000 wm4.modules.h.23.3d04ad9f740a156fcd476d18714df592
                           .group:00000000 wm4.datalink.h.28.0d234a7c203533b2ec538be3e18eddf4
                           .group:00000000 wm4.dl_protocol.h.5.a12fe27a4b4a3cbb46fbca8acf33e3dd
                           .group:00000000 wm4.datalink.h.46.36a5e0f36fb7d0784f1e7af767537c84
                           .group:00000000 wm4.pprz_transport.h.57.167db0ee96032e142f5d6e570b3339aa
                           .group:00000000 wm4.sys_time.h.31.454ffebb4f6baf6e87ab8a60104a5808
                           .group:00000000 wm4.rcc.h.46.c4bbaa886b7ca1bd1829424ae12e70af
                           .group:00000000 wm4.systick.h.44.34e759e1f218a187b07e9a617cb1d556
                           .group:00000000 wm4.sys_time.h.213.4ee43452c5934214134db56488f53299
                           .group:00000000 wm4.xbee24.h.29.a6677f8bcb71d3b07e11290a2de0e179
                           .group:00000000 wm4.xbee.h.41.f36be817f95b74f883aef9324b53817b
                           .group:00000000 wm4.w5100.h.29.d3529bed8de657ab3944b343be960f10
                           .group:00000000 wm4.downlink.h.76.41034157e32fc9012166fd95ec7418fc
                           .group:00000000 wm4.periodic_telemetry.h.11.f25aadf344a171d516cf4756f716329b
                           .group:00000000 wm4.settings.h.5.5877f558a7c62e845a89616ec72f9a96
                           .group:00000000 wm4.gps_ubx.h.28.f1dd84082101e59e5bfcf9e6a60e0e57
                           .group:00000000 wm4.gps.h.41.79d1c69e44dd427f855100ff8e932fbe
                           .group:00000000 wm4.settings.h.16.cc7af4a027d854e072de07f1d1f20417

UNDEFINED SYMBOLS
stateCalcAirspeed_f
state
stateCalcPositionUtm_f
stateCalcSpeedEnu_f
telemetry_mode_Ap
telemetry_mode_Fbw
flight_altitude
nav_course
nav_shift
nav_radius
gps
gps_ubx_gps_ubx_ucenter_periodic_status
h_ctl_roll_setpoint
h_ctl_pitch_loop_setpoint
h_ctl_course_setpoint
desired_x
desired_y
v_ctl_altitude_setpoint
v_ctl_climb_setpoint
v_ctl_throttle_slewed
block_time
stage_time
v_ctl_mode
horizontal_mode
orientationCalcEulers_f
pprz_tp
uart1
gpio_setup_output
gpio_clear
register_periodic_telemetry
pprz_telemetry
