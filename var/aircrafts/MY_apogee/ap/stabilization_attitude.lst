   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stabilization_attitude.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.stateGetHorizontalSpeedNorm_f,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	stateGetHorizontalSpeedNorm_f:
  25              	.LFB99:
  26              		.file 1 "./state.h"
   1:./state.h     **** /*
   2:./state.h     ****  * Copyright (C) 2011-2012 Felix Ruess <felix.ruess@gmail.com>
   3:./state.h     ****  *
   4:./state.h     ****  * This file is part of paparazzi.
   5:./state.h     ****  *
   6:./state.h     ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./state.h     ****  * it under the terms of the GNU General Public License as published by
   8:./state.h     ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./state.h     ****  * any later version.
  10:./state.h     ****  *
  11:./state.h     ****  * paparazzi is distributed in the hope that it will be useful,
  12:./state.h     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./state.h     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./state.h     ****  * GNU General Public License for more details.
  15:./state.h     ****  *
  16:./state.h     ****  * You should have received a copy of the GNU General Public License
  17:./state.h     ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./state.h     ****  * <http://www.gnu.org/licenses/>.
  19:./state.h     ****  */
  20:./state.h     **** 
  21:./state.h     **** /**
  22:./state.h     ****  * @file state.h
  23:./state.h     ****  *
  24:./state.h     ****  * API to get/set the generic vehicle states.
  25:./state.h     ****  *
  26:./state.h     ****  * Also see the @ref state_interface "State Interface" page.
  27:./state.h     ****  *
  28:./state.h     ****  * @author Felix Ruess <felix.ruess@gmail.com>
  29:./state.h     ****  */
  30:./state.h     **** 
  31:./state.h     **** #ifndef STATE_H
  32:./state.h     **** #define STATE_H
  33:./state.h     **** 
  34:./state.h     **** #include "math/pprz_algebra_int.h"
  35:./state.h     **** #include "math/pprz_algebra_float.h"
  36:./state.h     **** #include "math/pprz_geodetic_int.h"
  37:./state.h     **** #include "math/pprz_geodetic_float.h"
  38:./state.h     **** #include "math/pprz_orientation_conversion.h"
  39:./state.h     **** 
  40:./state.h     **** #include "std.h"
  41:./state.h     **** #include <string.h>
  42:./state.h     **** 
  43:./state.h     **** /**
  44:./state.h     ****  * This general state interface holds all the most important vehicle states like
  45:./state.h     ****  * position, velocity, attitude, etc. It handles coordinate system and
  46:./state.h     ****  * fixed-/floating-point conversion on the fly when needed.
  47:./state.h     ****  *
  48:./state.h     ****  * You can set e.g. the position in any coordinate system you wish:
  49:./state.h     ****  * stateSetPositionNed_i() to set the position in fixed-point NED coordinates.
  50:./state.h     ****  * If you need to read the position somewhere else in a different representation,
  51:./state.h     ****  * call: stateGetPositionLla_f() and only then the LLA float position representation
  52:./state.h     ****  * is calculated on the fly and returned. It's also only calculated once,
  53:./state.h     ****  * until a new position is set which invalidates all the other representations again.
  54:./state.h     ****  */
  55:./state.h     **** 
  56:./state.h     **** /**
  57:./state.h     ****  * @defgroup state_interface State interface
  58:./state.h     ****  * @{
  59:./state.h     ****  */
  60:./state.h     **** 
  61:./state.h     **** /**
  62:./state.h     ****  * @defgroup state_position Position representations
  63:./state.h     ****  * @{
  64:./state.h     ****  */
  65:./state.h     **** #define POS_ECEF_I 0
  66:./state.h     **** #define POS_NED_I  1
  67:./state.h     **** #define POS_ENU_I  2
  68:./state.h     **** #define POS_LLA_I  3
  69:./state.h     **** #define POS_UTM_I  4
  70:./state.h     **** #define POS_ECEF_F 5
  71:./state.h     **** #define POS_NED_F  6
  72:./state.h     **** #define POS_ENU_F  7
  73:./state.h     **** #define POS_LLA_F  8
  74:./state.h     **** #define POS_UTM_F  9
  75:./state.h     **** #define POS_LOCAL_COORD ((1<<POS_NED_I)|(1<<POS_NED_F)|(1<<POS_ENU_I)|(1<<POS_ENU_F))
  76:./state.h     **** #define POS_GLOBAL_COORD ((1<<POS_ECEF_I)|(1<<POS_ECEF_F)|(1<<POS_LLA_I)|(1<<POS_LLA_F)|(1<<POS_UTM
  77:./state.h     **** /**@}*/
  78:./state.h     **** 
  79:./state.h     **** /**
  80:./state.h     ****  * @defgroup state_velocity Speed representations
  81:./state.h     ****  * @{
  82:./state.h     ****  */
  83:./state.h     **** #define SPEED_ECEF_I  0
  84:./state.h     **** #define SPEED_NED_I   1
  85:./state.h     **** #define SPEED_ENU_I   2
  86:./state.h     **** #define SPEED_HNORM_I 3
  87:./state.h     **** #define SPEED_HDIR_I  4
  88:./state.h     **** #define SPEED_ECEF_F  5
  89:./state.h     **** #define SPEED_NED_F   6
  90:./state.h     **** #define SPEED_ENU_F   7
  91:./state.h     **** #define SPEED_HNORM_F 8
  92:./state.h     **** #define SPEED_HDIR_F  9
  93:./state.h     **** #define SPEED_LOCAL_COORD ((1<<SPEED_NED_I)|(1<<SPEED_ENU_I)|(1<<SPEED_NED_F)|(1<<SPEED_ENU_F))
  94:./state.h     **** /**@}*/
  95:./state.h     **** 
  96:./state.h     **** /**
  97:./state.h     ****  * @defgroup state_acceleration Acceleration representations
  98:./state.h     ****  * @{
  99:./state.h     ****  */
 100:./state.h     **** #define ACCEL_ECEF_I 0
 101:./state.h     **** #define ACCEL_NED_I  1
 102:./state.h     **** #define ACCEL_ECEF_F 2
 103:./state.h     **** #define ACCEL_NED_F  3
 104:./state.h     **** /**@}*/
 105:./state.h     **** 
 106:./state.h     **** /**
 107:./state.h     ****  * @defgroup state_rate Angular rate representations
 108:./state.h     ****  * @{
 109:./state.h     ****  */
 110:./state.h     **** #define RATE_I 0
 111:./state.h     **** #define RATE_F 1
 112:./state.h     **** /**@}*/
 113:./state.h     **** 
 114:./state.h     **** /**
 115:./state.h     ****  * @defgroup state_wind_airspeed Wind- and airspeed representations
 116:./state.h     ****  * @{
 117:./state.h     ****  */
 118:./state.h     **** #define WINDSPEED_I 0
 119:./state.h     **** #define AIRSPEED_I  1
 120:./state.h     **** #define WINDSPEED_F 2
 121:./state.h     **** #define AIRSPEED_F  3
 122:./state.h     **** #define AOA_F       4
 123:./state.h     **** #define SIDESLIP_F  5
 124:./state.h     **** /**@}*/
 125:./state.h     **** 
 126:./state.h     **** 
 127:./state.h     **** /**
 128:./state.h     ****  * Structure holding vehicle state data.
 129:./state.h     ****  */
 130:./state.h     **** struct State {
 131:./state.h     **** 
 132:./state.h     ****   /** @addtogroup state_position
 133:./state.h     ****    *  @{ */
 134:./state.h     **** 
 135:./state.h     ****   /**
 136:./state.h     ****    * Holds the status bits for all position representations.
 137:./state.h     ****    * When the corresponding bit is set the representation
 138:./state.h     ****    * is already computed.
 139:./state.h     ****    */
 140:./state.h     ****   uint16_t pos_status;
 141:./state.h     **** 
 142:./state.h     ****   /**
 143:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 144:./state.h     ****    * Units: centimeters
 145:./state.h     ****    */
 146:./state.h     ****   struct EcefCoor_i ecef_pos_i;
 147:./state.h     **** 
 148:./state.h     ****   /**
 149:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 150:./state.h     ****    * Units lat,lon: degrees*1e7
 151:./state.h     ****    * Units alt: milimeters above reference ellipsoid
 152:./state.h     ****    */
 153:./state.h     ****   struct LlaCoor_i lla_pos_i;
 154:./state.h     **** 
 155:./state.h     ****   /**
 156:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 157:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 158:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 159:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 160:./state.h     ****    * (int version)
 161:./state.h     ****    */
 162:./state.h     ****   struct LtpDef_i ned_origin_i;
 163:./state.h     **** 
 164:./state.h     ****   /**
 165:./state.h     ****    * true if local int coordinate frame is initialsed
 166:./state.h     ****    */
 167:./state.h     ****   bool_t ned_initialized_i;
 168:./state.h     **** 
 169:./state.h     ****   /**
 170:./state.h     ****    * Position in North East Down coordinates.
 171:./state.h     ****    * with respect to ned_origin_i (flat earth)
 172:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 173:./state.h     ****    */
 174:./state.h     ****   struct NedCoor_i ned_pos_i;
 175:./state.h     **** 
 176:./state.h     ****   /**
 177:./state.h     ****    * Position in East North Up coordinates.
 178:./state.h     ****    * with respect to ned_origin_i (flat earth)
 179:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 180:./state.h     ****    */
 181:./state.h     ****   struct EnuCoor_i enu_pos_i;
 182:./state.h     **** 
 183:./state.h     ****   /**
 184:./state.h     ****    * Position in UTM coordinates.
 185:./state.h     ****    * Units x,y: meters.
 186:./state.h     ****    * Units z: meters above MSL
 187:./state.h     ****    */
 188:./state.h     ****   struct UtmCoor_f utm_pos_f;
 189:./state.h     **** 
 190:./state.h     ****   /**
 191:./state.h     ****    * Altitude above ground level.
 192:./state.h     ****    * Unit: meters
 193:./state.h     ****    */
 194:./state.h     ****   float alt_agl_f;
 195:./state.h     **** 
 196:./state.h     ****   /**
 197:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 198:./state.h     ****    * Units lat,lon: radians
 199:./state.h     ****    * Units alt: meters above reference ellipsoid
 200:./state.h     ****    */
 201:./state.h     ****   struct LlaCoor_f lla_pos_f;
 202:./state.h     **** 
 203:./state.h     ****   /**
 204:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 205:./state.h     ****    * Units: meters
 206:./state.h     ****    */
 207:./state.h     ****   struct EcefCoor_f ecef_pos_f;
 208:./state.h     **** 
 209:./state.h     ****   /**
 210:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 211:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 212:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 213:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 214:./state.h     ****    * (float version)
 215:./state.h     ****    */
 216:./state.h     ****   struct LtpDef_f ned_origin_f;
 217:./state.h     **** 
 218:./state.h     ****   /// True if local float coordinate frame is initialsed
 219:./state.h     ****   bool_t ned_initialized_f;
 220:./state.h     **** 
 221:./state.h     ****   /**
 222:./state.h     ****    * Definition of the origin of Utm coordinate system.
 223:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 224:./state.h     ****    * in UTM coordinates, used as a reference when ned_origin is not
 225:./state.h     ****    * initialized.
 226:./state.h     ****    * (float version)
 227:./state.h     ****    */
 228:./state.h     ****   struct UtmCoor_f utm_origin_f;
 229:./state.h     **** 
 230:./state.h     ****   /// True if utm origin (float) coordinate frame is initialsed
 231:./state.h     ****   bool_t utm_initialized_f;
 232:./state.h     **** 
 233:./state.h     ****   /**
 234:./state.h     ****    * Position in North East Down coordinates.
 235:./state.h     ****    * with respect to ned_origin_i (flat earth)
 236:./state.h     ****    * Units: meters
 237:./state.h     ****    */
 238:./state.h     ****   struct NedCoor_f ned_pos_f;
 239:./state.h     **** 
 240:./state.h     ****   /**
 241:./state.h     ****    * Position in East North Up coordinates.
 242:./state.h     ****    * with respect to ned_origin_i (flat earth)
 243:./state.h     ****    * Units: meters
 244:./state.h     ****    */
 245:./state.h     ****   struct EnuCoor_f enu_pos_f;
 246:./state.h     ****   /** @}*/
 247:./state.h     **** 
 248:./state.h     **** 
 249:./state.h     ****   /** @addtogroup state_velocity
 250:./state.h     ****    *  @{ */
 251:./state.h     ****   /**
 252:./state.h     ****    * Holds the status bits for all ground speed representations.
 253:./state.h     ****    * When the corresponding bit is one the representation
 254:./state.h     ****    * is already computed.
 255:./state.h     ****    */
 256:./state.h     ****   uint16_t speed_status;
 257:./state.h     **** 
 258:./state.h     ****   /**
 259:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 260:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 261:./state.h     ****    */
 262:./state.h     ****   struct EcefCoor_i ecef_speed_i;
 263:./state.h     **** 
 264:./state.h     ****   /**
 265:./state.h     ****    * Velocity in North East Down coordinates.
 266:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 267:./state.h     ****    */
 268:./state.h     ****   struct NedCoor_i ned_speed_i;
 269:./state.h     **** 
 270:./state.h     ****   /**
 271:./state.h     ****    * Velocity in East North Up coordinates.
 272:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 273:./state.h     ****    */
 274:./state.h     ****   struct EnuCoor_i enu_speed_i;
 275:./state.h     **** 
 276:./state.h     ****   /**
 277:./state.h     ****    * Norm of horizontal ground speed.
 278:./state.h     ****    * Unit: m/s in BFP with #INT32_SPEED_FRAC
 279:./state.h     ****    */
 280:./state.h     ****   uint32_t h_speed_norm_i;
 281:./state.h     **** 
 282:./state.h     ****   /**
 283:./state.h     ****    * Direction of horizontal ground speed.
 284:./state.h     ****    * Unit: rad in BFP with #INT32_ANGLE_FRAC
 285:./state.h     ****    * (clockwise, zero=north)
 286:./state.h     ****    */
 287:./state.h     ****   int32_t h_speed_dir_i;
 288:./state.h     **** 
 289:./state.h     ****   /**
 290:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 291:./state.h     ****    * Units: m/s
 292:./state.h     ****    */
 293:./state.h     ****   struct EcefCoor_f ecef_speed_f;
 294:./state.h     **** 
 295:./state.h     ****   /**
 296:./state.h     ****    * @brief speed in North East Down coordinates
 297:./state.h     ****    * @details Units: m/s */
 298:./state.h     ****   struct NedCoor_f ned_speed_f;
 299:./state.h     **** 
 300:./state.h     ****   /**
 301:./state.h     ****    * Velocity in East North Up coordinates.
 302:./state.h     ****    * Units: m/s
 303:./state.h     ****    */
 304:./state.h     ****   struct EnuCoor_f enu_speed_f;
 305:./state.h     **** 
 306:./state.h     ****   /**
 307:./state.h     ****    * Norm of horizontal ground speed.
 308:./state.h     ****    * Unit: m/s
 309:./state.h     ****    */
 310:./state.h     ****   float h_speed_norm_f;
 311:./state.h     **** 
 312:./state.h     ****   /**
 313:./state.h     ****    * Direction of horizontal ground speed.
 314:./state.h     ****    * Unit: rad (clockwise, zero=north)
 315:./state.h     ****    */
 316:./state.h     ****   float h_speed_dir_f;
 317:./state.h     ****   /** @}*/
 318:./state.h     **** 
 319:./state.h     **** 
 320:./state.h     ****   /** @addtogroup state_acceleration
 321:./state.h     ****    *  @{ */
 322:./state.h     ****   /**
 323:./state.h     ****    * Holds the status bits for all acceleration representations.
 324:./state.h     ****    * When the corresponding bit is one the representation
 325:./state.h     ****    * is already computed.
 326:./state.h     ****    */
 327:./state.h     ****   uint8_t accel_status;
 328:./state.h     **** 
 329:./state.h     ****   /**
 330:./state.h     ****    * Acceleration in North East Down coordinates.
 331:./state.h     ****    * Units: m/s^2 in BFP with #INT32_ACCEL_FRAC
 332:./state.h     ****    */
 333:./state.h     ****   struct NedCoor_i ned_accel_i;
 334:./state.h     **** 
 335:./state.h     ****   /**
 336:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 337:./state.h     ****    * Units: m/s^2 in BFP with INT32_ACCEL_FRAC
 338:./state.h     ****    */
 339:./state.h     ****   struct EcefCoor_i ecef_accel_i;
 340:./state.h     **** 
 341:./state.h     ****   /**
 342:./state.h     ****    * Acceleration in North East Down coordinates.
 343:./state.h     ****    * Units: m/s^2
 344:./state.h     ****    */
 345:./state.h     ****   struct NedCoor_f ned_accel_f;
 346:./state.h     **** 
 347:./state.h     ****   /**
 348:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 349:./state.h     ****    * Units: m/s^2
 350:./state.h     ****    */
 351:./state.h     ****   struct EcefCoor_f ecef_accel_f;
 352:./state.h     ****   /** @}*/
 353:./state.h     **** 
 354:./state.h     **** 
 355:./state.h     ****   /** @defgroup state_attitude Attitude representations
 356:./state.h     ****    */
 357:./state.h     ****   struct OrientationReps ned_to_body_orientation;
 358:./state.h     **** 
 359:./state.h     **** 
 360:./state.h     ****   /** @addtogroup state_rate
 361:./state.h     ****    *  @{ */
 362:./state.h     ****   /**
 363:./state.h     ****    * Holds the status bits for all angular rate representations.
 364:./state.h     ****    * When the corresponding bit is one the representation
 365:./state.h     ****    * is already computed.
 366:./state.h     ****    */
 367:./state.h     ****   uint8_t rate_status;
 368:./state.h     **** 
 369:./state.h     ****   /**
 370:./state.h     ****    * Angular rates in body frame.
 371:./state.h     ****    * Units: rad/s in BFP with #INT32_RATE_FRAC
 372:./state.h     ****    */
 373:./state.h     ****   struct Int32Rates  body_rates_i;
 374:./state.h     **** 
 375:./state.h     ****   /**
 376:./state.h     ****    * Angular rates in body frame.
 377:./state.h     ****    * Units: rad/s
 378:./state.h     ****    */
 379:./state.h     ****   struct FloatRates  body_rates_f;
 380:./state.h     ****   /** @}*/
 381:./state.h     **** 
 382:./state.h     **** 
 383:./state.h     ****   /** @addtogroup state_wind_airspeed
 384:./state.h     ****    *  @{ */
 385:./state.h     ****   /**
 386:./state.h     ****    * Holds the status bits for all wind- and airspeed representations.
 387:./state.h     ****    * When the corresponding bit is one the representation
 388:./state.h     ****    * is already computed.
 389:./state.h     ****    */
 390:./state.h     ****   uint8_t wind_air_status;
 391:./state.h     **** 
 392:./state.h     ****   /**
 393:./state.h     ****    * Horizontal windspeed in north/east.
 394:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 395:./state.h     ****    */
 396:./state.h     ****   struct Int32Vect2 h_windspeed_i;
 397:./state.h     **** 
 398:./state.h     ****   /**
 399:./state.h     ****    * Norm of horizontal ground speed.
 400:./state.h     ****    * @details Unit: m/s in BFP with #INT32_SPEED_FRAC
 401:./state.h     ****    */
 402:./state.h     ****   int32_t airspeed_i;
 403:./state.h     **** 
 404:./state.h     ****   /**
 405:./state.h     ****    * Horizontal windspeed.
 406:./state.h     ****    * Units: m/s with x=north, y=east
 407:./state.h     ****    */
 408:./state.h     ****   struct FloatVect2 h_windspeed_f;
 409:./state.h     **** 
 410:./state.h     ****   /**
 411:./state.h     ****    * Norm of relative air speed.
 412:./state.h     ****    * Unit: m/s
 413:./state.h     ****    */
 414:./state.h     ****   float airspeed_f;
 415:./state.h     **** 
 416:./state.h     ****   /**
 417:./state.h     ****    * Angle of attack
 418:./state.h     ****    * Unit: rad
 419:./state.h     ****    */
 420:./state.h     ****   float angle_of_attack_f;
 421:./state.h     **** 
 422:./state.h     ****   /**
 423:./state.h     ****    * Sideslip angle
 424:./state.h     ****    * Unit: rad
 425:./state.h     ****    */
 426:./state.h     ****   float sideslip_f;
 427:./state.h     **** 
 428:./state.h     ****   /** @}*/
 429:./state.h     **** 
 430:./state.h     **** };
 431:./state.h     **** 
 432:./state.h     **** extern struct State state;
 433:./state.h     **** 
 434:./state.h     **** extern void stateInit(void);
 435:./state.h     **** 
 436:./state.h     **** /** @addtogroup state_position
 437:./state.h     ****  *  @{ */
 438:./state.h     **** 
 439:./state.h     **** /// Set the local (flat earth) coordinate frame origin (int).
 440:./state.h     **** static inline void stateSetLocalOrigin_i(struct LtpDef_i *ltp_def)
 441:./state.h     **** {
 442:./state.h     ****   memcpy(&state.ned_origin_i, ltp_def, sizeof(struct LtpDef_i));
 443:./state.h     ****   /* convert to float */
 444:./state.h     ****   ECEF_FLOAT_OF_BFP(state.ned_origin_f.ecef, state.ned_origin_i.ecef);
 445:./state.h     ****   LLA_FLOAT_OF_BFP(state.ned_origin_f.lla, state.ned_origin_i.lla);
 446:./state.h     ****   HIGH_RES_RMAT_FLOAT_OF_BFP(state.ned_origin_f.ltp_of_ecef, state.ned_origin_i.ltp_of_ecef);
 447:./state.h     ****   state.ned_origin_f.hmsl = M_OF_MM(state.ned_origin_i.hmsl);
 448:./state.h     **** 
 449:./state.h     ****   /* clear bits for all local frame representations */
 450:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 451:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 452:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 453:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 454:./state.h     **** 
 455:./state.h     ****   state.ned_initialized_i = TRUE;
 456:./state.h     ****   state.ned_initialized_f = TRUE;
 457:./state.h     **** }
 458:./state.h     **** 
 459:./state.h     **** /// Set the local (flat earth) coordinate frame origin from UTM (float).
 460:./state.h     **** static inline void stateSetLocalUtmOrigin_f(struct UtmCoor_f *utm_def)
 461:./state.h     **** {
 462:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
 463:./state.h     ****   state.utm_initialized_f = TRUE;
 464:./state.h     **** 
 465:./state.h     ****   /* clear bits for all local frame representations */
 466:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 467:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 468:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 469:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 470:./state.h     **** }
 471:./state.h     **** /*******************************************************************************
 472:./state.h     ****  *                                                                             *
 473:./state.h     ****  * Set and Get functions for the POSITION representations                      *
 474:./state.h     ****  *                                                                             *
 475:./state.h     ****  ******************************************************************************/
 476:./state.h     **** 
 477:./state.h     **** /************* declaration of transformation functions ************/
 478:./state.h     **** extern void stateCalcPositionEcef_i(void);
 479:./state.h     **** extern void stateCalcPositionNed_i(void);
 480:./state.h     **** extern void stateCalcPositionEnu_i(void);
 481:./state.h     **** extern void stateCalcPositionLla_i(void);
 482:./state.h     **** extern void stateCalcPositionUtm_f(void);
 483:./state.h     **** extern void stateCalcPositionEcef_f(void);
 484:./state.h     **** extern void stateCalcPositionNed_f(void);
 485:./state.h     **** extern void stateCalcPositionEnu_f(void);
 486:./state.h     **** extern void stateCalcPositionLla_f(void);
 487:./state.h     **** 
 488:./state.h     **** /*********************** validity test functions ******************/
 489:./state.h     **** 
 490:./state.h     **** /// Test if local coordinates are valid.
 491:./state.h     **** static inline bool_t stateIsLocalCoordinateValid(void)
 492:./state.h     **** {
 493:./state.h     ****   return ((state.ned_initialized_i || state.ned_initialized_f || state.utm_initialized_f)
 494:./state.h     ****           && (state.pos_status & (POS_LOCAL_COORD)));
 495:./state.h     **** }
 496:./state.h     **** 
 497:./state.h     **** /// Test if global coordinates are valid.
 498:./state.h     **** static inline bool_t stateIsGlobalCoordinateValid(void)
 499:./state.h     **** {
 500:./state.h     ****   return ((state.pos_status & (POS_GLOBAL_COORD)) || stateIsLocalCoordinateValid());
 501:./state.h     **** }
 502:./state.h     **** 
 503:./state.h     **** /************************ Set functions ****************************/
 504:./state.h     **** 
 505:./state.h     **** /// Set position from ECEF coordinates (int).
 506:./state.h     **** static inline void stateSetPositionEcef_i(struct EcefCoor_i *ecef_pos)
 507:./state.h     **** {
 508:./state.h     ****   VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 509:./state.h     ****   /* clear bits for all position representations and only set the new one */
 510:./state.h     ****   state.pos_status = (1 << POS_ECEF_I);
 511:./state.h     **** }
 512:./state.h     **** 
 513:./state.h     **** /// Set position from local NED coordinates (int).
 514:./state.h     **** static inline void stateSetPositionNed_i(struct NedCoor_i *ned_pos)
 515:./state.h     **** {
 516:./state.h     ****   VECT3_COPY(state.ned_pos_i, *ned_pos);
 517:./state.h     ****   /* clear bits for all position representations and only set the new one */
 518:./state.h     ****   state.pos_status = (1 << POS_NED_I);
 519:./state.h     **** }
 520:./state.h     **** 
 521:./state.h     **** /// Set position from local ENU coordinates (int).
 522:./state.h     **** static inline void stateSetPositionEnu_i(struct EnuCoor_i *enu_pos)
 523:./state.h     **** {
 524:./state.h     ****   VECT3_COPY(state.enu_pos_i, *enu_pos);
 525:./state.h     ****   /* clear bits for all position representations and only set the new one */
 526:./state.h     ****   state.pos_status = (1 << POS_ENU_I);
 527:./state.h     **** }
 528:./state.h     **** 
 529:./state.h     **** /// Set position from LLA coordinates (int).
 530:./state.h     **** static inline void stateSetPositionLla_i(struct LlaCoor_i *lla_pos)
 531:./state.h     **** {
 532:./state.h     ****   LLA_COPY(state.lla_pos_i, *lla_pos);
 533:./state.h     ****   /* clear bits for all position representations and only set the new one */
 534:./state.h     ****   state.pos_status = (1 << POS_LLA_I);
 535:./state.h     **** }
 536:./state.h     **** 
 537:./state.h     **** /// Set multiple position coordinates (int).
 538:./state.h     **** static inline void stateSetPosition_i(
 539:./state.h     ****   struct EcefCoor_i *ecef_pos,
 540:./state.h     ****   struct NedCoor_i *ned_pos,
 541:./state.h     ****   struct EnuCoor_i *enu_pos,
 542:./state.h     ****   struct LlaCoor_i *lla_pos)
 543:./state.h     **** {
 544:./state.h     ****   /* clear all status bit */
 545:./state.h     ****   state.pos_status = 0;
 546:./state.h     ****   if (ecef_pos != NULL) {
 547:./state.h     ****     VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 548:./state.h     ****     state.pos_status |= (1 << POS_ECEF_I);
 549:./state.h     ****   }
 550:./state.h     ****   if (ned_pos != NULL) {
 551:./state.h     ****     VECT3_COPY(state.ned_pos_i, *ned_pos);
 552:./state.h     ****     state.pos_status |= (1 << POS_NED_I);
 553:./state.h     ****   }
 554:./state.h     ****   if (enu_pos != NULL) {
 555:./state.h     ****     VECT3_COPY(state.enu_pos_i, *enu_pos);
 556:./state.h     ****     state.pos_status |= (1 << POS_ENU_I);
 557:./state.h     ****   }
 558:./state.h     ****   if (lla_pos != NULL) {
 559:./state.h     ****     LLA_COPY(state.lla_pos_i, *lla_pos);
 560:./state.h     ****     state.pos_status |= (1 << POS_LLA_I);
 561:./state.h     ****   }
 562:./state.h     **** }
 563:./state.h     **** 
 564:./state.h     **** /// Set position from UTM coordinates (float).
 565:./state.h     **** static inline void stateSetPositionUtm_f(struct UtmCoor_f *utm_pos)
 566:./state.h     **** {
 567:./state.h     ****   memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 568:./state.h     ****   /* clear bits for all position representations and only set the new one */
 569:./state.h     ****   state.pos_status = (1 << POS_UTM_F);
 570:./state.h     **** }
 571:./state.h     **** 
 572:./state.h     **** /// Set position from ECEF coordinates (float).
 573:./state.h     **** static inline void stateSetPositionEcef_f(struct EcefCoor_f *ecef_pos)
 574:./state.h     **** {
 575:./state.h     ****   VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 576:./state.h     ****   /* clear bits for all position representations and only set the new one */
 577:./state.h     ****   state.pos_status = (1 << POS_ECEF_F);
 578:./state.h     **** }
 579:./state.h     **** 
 580:./state.h     **** /// Set position from local NED coordinates (float).
 581:./state.h     **** static inline void stateSetPositionNed_f(struct NedCoor_f *ned_pos)
 582:./state.h     **** {
 583:./state.h     ****   VECT3_COPY(state.ned_pos_f, *ned_pos);
 584:./state.h     ****   /* clear bits for all position representations and only set the new one */
 585:./state.h     ****   state.pos_status = (1 << POS_NED_F);
 586:./state.h     **** }
 587:./state.h     **** 
 588:./state.h     **** /// Set position from local ENU coordinates (float).
 589:./state.h     **** static inline void stateSetPositionEnu_f(struct EnuCoor_f *enu_pos)
 590:./state.h     **** {
 591:./state.h     ****   VECT3_COPY(state.enu_pos_f, *enu_pos);
 592:./state.h     ****   /* clear bits for all position representations and only set the new one */
 593:./state.h     ****   state.pos_status = (1 << POS_ENU_F);
 594:./state.h     **** }
 595:./state.h     **** 
 596:./state.h     **** /// Set position from LLA coordinates (float).
 597:./state.h     **** static inline void stateSetPositionLla_f(struct LlaCoor_f *lla_pos)
 598:./state.h     **** {
 599:./state.h     ****   LLA_COPY(state.lla_pos_f, *lla_pos);
 600:./state.h     ****   /* clear bits for all position representations and only set the new one */
 601:./state.h     ****   state.pos_status = (1 << POS_LLA_F);
 602:./state.h     **** }
 603:./state.h     **** 
 604:./state.h     **** /// Set multiple position coordinates (float).
 605:./state.h     **** static inline void stateSetPosition_f(
 606:./state.h     ****   struct EcefCoor_f *ecef_pos,
 607:./state.h     ****   struct NedCoor_f *ned_pos,
 608:./state.h     ****   struct EnuCoor_f *enu_pos,
 609:./state.h     ****   struct LlaCoor_f *lla_pos,
 610:./state.h     ****   struct UtmCoor_f *utm_pos)
 611:./state.h     **** {
 612:./state.h     ****   /* clear all status bit */
 613:./state.h     ****   state.pos_status = 0;
 614:./state.h     ****   if (ecef_pos != NULL) {
 615:./state.h     ****     VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 616:./state.h     ****     state.pos_status |= (1 << POS_ECEF_F);
 617:./state.h     ****   }
 618:./state.h     ****   if (ned_pos != NULL) {
 619:./state.h     ****     VECT3_COPY(state.ned_pos_f, *ned_pos);
 620:./state.h     ****     state.pos_status |= (1 << POS_NED_F);
 621:./state.h     ****   }
 622:./state.h     ****   if (enu_pos != NULL) {
 623:./state.h     ****     VECT3_COPY(state.enu_pos_f, *enu_pos);
 624:./state.h     ****     state.pos_status |= (1 << POS_ENU_F);
 625:./state.h     ****   }
 626:./state.h     ****   if (lla_pos != NULL) {
 627:./state.h     ****     LLA_COPY(state.lla_pos_f, *lla_pos);
 628:./state.h     ****     state.pos_status |= (1 << POS_LLA_F);
 629:./state.h     ****   }
 630:./state.h     ****   if (utm_pos != NULL) {
 631:./state.h     ****     memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 632:./state.h     ****     state.pos_status |= (1 << POS_UTM_F);
 633:./state.h     ****   }
 634:./state.h     **** }
 635:./state.h     **** 
 636:./state.h     **** /************************ Get functions ****************************/
 637:./state.h     **** 
 638:./state.h     **** /// Get position in ECEF coordinates (int).
 639:./state.h     **** static inline struct EcefCoor_i *stateGetPositionEcef_i(void)
 640:./state.h     **** {
 641:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_I)) {
 642:./state.h     ****     stateCalcPositionEcef_i();
 643:./state.h     ****   }
 644:./state.h     ****   return &state.ecef_pos_i;
 645:./state.h     **** }
 646:./state.h     **** 
 647:./state.h     **** /// Get position in local NED coordinates (int).
 648:./state.h     **** static inline struct NedCoor_i *stateGetPositionNed_i(void)
 649:./state.h     **** {
 650:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_I)) {
 651:./state.h     ****     stateCalcPositionNed_i();
 652:./state.h     ****   }
 653:./state.h     ****   return &state.ned_pos_i;
 654:./state.h     **** }
 655:./state.h     **** 
 656:./state.h     **** /// Get position in local ENU coordinates (int).
 657:./state.h     **** static inline struct EnuCoor_i *stateGetPositionEnu_i(void)
 658:./state.h     **** {
 659:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_I)) {
 660:./state.h     ****     stateCalcPositionEnu_i();
 661:./state.h     ****   }
 662:./state.h     ****   return &state.enu_pos_i;
 663:./state.h     **** }
 664:./state.h     **** 
 665:./state.h     **** /// Get position in LLA coordinates (int).
 666:./state.h     **** static inline struct LlaCoor_i *stateGetPositionLla_i(void)
 667:./state.h     **** {
 668:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_I)) {
 669:./state.h     ****     stateCalcPositionLla_i();
 670:./state.h     ****   }
 671:./state.h     ****   return &state.lla_pos_i;
 672:./state.h     **** }
 673:./state.h     **** 
 674:./state.h     **** /// Get position in UTM coordinates (float).
 675:./state.h     **** static inline struct UtmCoor_f *stateGetPositionUtm_f(void)
 676:./state.h     **** {
 677:./state.h     ****   if (!bit_is_set(state.pos_status, POS_UTM_F)) {
 678:./state.h     ****     stateCalcPositionUtm_f();
 679:./state.h     ****   }
 680:./state.h     ****   return &state.utm_pos_f;
 681:./state.h     **** }
 682:./state.h     **** 
 683:./state.h     **** /// Get position in ECEF coordinates (float).
 684:./state.h     **** static inline struct EcefCoor_f *stateGetPositionEcef_f(void)
 685:./state.h     **** {
 686:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_F)) {
 687:./state.h     ****     stateCalcPositionEcef_f();
 688:./state.h     ****   }
 689:./state.h     ****   return &state.ecef_pos_f;
 690:./state.h     **** }
 691:./state.h     **** 
 692:./state.h     **** /// Get position in local NED coordinates (float).
 693:./state.h     **** static inline struct NedCoor_f *stateGetPositionNed_f(void)
 694:./state.h     **** {
 695:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_F)) {
 696:./state.h     ****     stateCalcPositionNed_f();
 697:./state.h     ****   }
 698:./state.h     ****   return &state.ned_pos_f;
 699:./state.h     **** }
 700:./state.h     **** 
 701:./state.h     **** /// Get position in local ENU coordinates (float).
 702:./state.h     **** static inline struct EnuCoor_f *stateGetPositionEnu_f(void)
 703:./state.h     **** {
 704:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_F)) {
 705:./state.h     ****     stateCalcPositionEnu_f();
 706:./state.h     ****   }
 707:./state.h     ****   return &state.enu_pos_f;
 708:./state.h     **** }
 709:./state.h     **** 
 710:./state.h     **** /// Get position in LLA coordinates (float).
 711:./state.h     **** static inline struct LlaCoor_f *stateGetPositionLla_f(void)
 712:./state.h     **** {
 713:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_F)) {
 714:./state.h     ****     stateCalcPositionLla_f();
 715:./state.h     ****   }
 716:./state.h     ****   return &state.lla_pos_f;
 717:./state.h     **** }
 718:./state.h     **** 
 719:./state.h     **** /** @}*/
 720:./state.h     **** 
 721:./state.h     **** 
 722:./state.h     **** 
 723:./state.h     **** /******************************************************************************
 724:./state.h     ****  *                                                                            *
 725:./state.h     ****  * Set and Get functions for the SPEED representations                        *
 726:./state.h     ****  *                                                                            *
 727:./state.h     ****  *****************************************************************************/
 728:./state.h     **** /** @addtogroup state_velocity
 729:./state.h     ****  *  @{ */
 730:./state.h     **** 
 731:./state.h     **** /************* declaration of transformation functions ************/
 732:./state.h     **** extern void stateCalcSpeedNed_i(void);
 733:./state.h     **** extern void stateCalcSpeedEnu_i(void);
 734:./state.h     **** extern void stateCalcSpeedEcef_i(void);
 735:./state.h     **** extern void stateCalcHorizontalSpeedNorm_i(void);
 736:./state.h     **** extern void stateCalcHorizontalSpeedDir_i(void);
 737:./state.h     **** extern void stateCalcSpeedNed_f(void);
 738:./state.h     **** extern void stateCalcSpeedEnu_f(void);
 739:./state.h     **** extern void stateCalcSpeedEcef_f(void);
 740:./state.h     **** extern void stateCalcHorizontalSpeedNorm_f(void);
 741:./state.h     **** extern void stateCalcHorizontalSpeedDir_f(void);
 742:./state.h     **** 
 743:./state.h     **** /************************ Set functions ****************************/
 744:./state.h     **** 
 745:./state.h     **** /// Set ground speed in local NED coordinates (int).
 746:./state.h     **** static inline void stateSetSpeedNed_i(struct NedCoor_i *ned_speed)
 747:./state.h     **** {
 748:./state.h     ****   VECT3_COPY(state.ned_speed_i, *ned_speed);
 749:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 750:./state.h     ****   state.speed_status = (1 << SPEED_NED_I);
 751:./state.h     **** }
 752:./state.h     **** 
 753:./state.h     **** /// Set ground speed in local ENU coordinates (int).
 754:./state.h     **** static inline void stateSetSpeedEnu_i(struct EnuCoor_i *enu_speed)
 755:./state.h     **** {
 756:./state.h     ****   VECT3_COPY(state.enu_speed_i, *enu_speed);
 757:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 758:./state.h     ****   state.speed_status = (1 << SPEED_ENU_I);
 759:./state.h     **** }
 760:./state.h     **** 
 761:./state.h     **** /// Set ground speed in ECEF coordinates (int).
 762:./state.h     **** static inline void stateSetSpeedEcef_i(struct EcefCoor_i *ecef_speed)
 763:./state.h     **** {
 764:./state.h     ****   VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 765:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 766:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_I);
 767:./state.h     **** }
 768:./state.h     **** 
 769:./state.h     **** /// Set multiple speed coordinates (int).
 770:./state.h     **** static inline void stateSetSpeed_i(
 771:./state.h     ****   struct EcefCoor_i *ecef_speed,
 772:./state.h     ****   struct NedCoor_i *ned_speed,
 773:./state.h     ****   struct EnuCoor_i *enu_speed)
 774:./state.h     **** {
 775:./state.h     ****   /* clear all status bit */
 776:./state.h     ****   state.speed_status = 0;
 777:./state.h     ****   if (ecef_speed != NULL) {
 778:./state.h     ****     VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 779:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_I);
 780:./state.h     ****   }
 781:./state.h     ****   if (ned_speed != NULL) {
 782:./state.h     ****     VECT3_COPY(state.ned_speed_i, *ned_speed);
 783:./state.h     ****     state.speed_status |= (1 << SPEED_NED_I);
 784:./state.h     ****   }
 785:./state.h     ****   if (enu_speed != NULL) {
 786:./state.h     ****     VECT3_COPY(state.enu_speed_i, *enu_speed);
 787:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_I);
 788:./state.h     ****   }
 789:./state.h     **** }
 790:./state.h     **** 
 791:./state.h     **** /// Set ground speed in local NED coordinates (float).
 792:./state.h     **** static inline void stateSetSpeedNed_f(struct NedCoor_f *ned_speed)
 793:./state.h     **** {
 794:./state.h     ****   VECT3_COPY(state.ned_speed_f, *ned_speed);
 795:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 796:./state.h     ****   state.speed_status = (1 << SPEED_NED_F);
 797:./state.h     **** }
 798:./state.h     **** 
 799:./state.h     **** /// Set ground speed in local ENU coordinates (float).
 800:./state.h     **** static inline void stateSetSpeedEnu_f(struct EnuCoor_f *enu_speed)
 801:./state.h     **** {
 802:./state.h     ****   VECT3_COPY(state.enu_speed_f, *enu_speed);
 803:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 804:./state.h     ****   state.speed_status = (1 << SPEED_ENU_F);
 805:./state.h     **** }
 806:./state.h     **** 
 807:./state.h     **** /// Set ground speed in ECEF coordinates (float).
 808:./state.h     **** static inline void stateSetSpeedEcef_f(struct EcefCoor_f *ecef_speed)
 809:./state.h     **** {
 810:./state.h     ****   VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 811:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 812:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_F);
 813:./state.h     **** }
 814:./state.h     **** 
 815:./state.h     **** /// Set multiple speed coordinates (float).
 816:./state.h     **** static inline void stateSetSpeed_f(
 817:./state.h     ****   struct EcefCoor_f *ecef_speed,
 818:./state.h     ****   struct NedCoor_f *ned_speed,
 819:./state.h     ****   struct EnuCoor_f *enu_speed)
 820:./state.h     **** {
 821:./state.h     ****   /* clear all status bit */
 822:./state.h     ****   state.speed_status = 0;
 823:./state.h     ****   if (ecef_speed != NULL) {
 824:./state.h     ****     VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 825:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_F);
 826:./state.h     ****   }
 827:./state.h     ****   if (ned_speed != NULL) {
 828:./state.h     ****     VECT3_COPY(state.ned_speed_f, *ned_speed);
 829:./state.h     ****     state.speed_status |= (1 << SPEED_NED_F);
 830:./state.h     ****   }
 831:./state.h     ****   if (enu_speed != NULL) {
 832:./state.h     ****     VECT3_COPY(state.enu_speed_f, *enu_speed);
 833:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_F);
 834:./state.h     ****   }
 835:./state.h     **** }
 836:./state.h     **** 
 837:./state.h     **** /************************ Get functions ****************************/
 838:./state.h     **** 
 839:./state.h     **** /// Get ground speed in local NED coordinates (int).
 840:./state.h     **** static inline struct NedCoor_i *stateGetSpeedNed_i(void)
 841:./state.h     **** {
 842:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_I)) {
 843:./state.h     ****     stateCalcSpeedNed_i();
 844:./state.h     ****   }
 845:./state.h     ****   return &state.ned_speed_i;
 846:./state.h     **** }
 847:./state.h     **** 
 848:./state.h     **** /// Get ground speed in local ENU coordinates (int).
 849:./state.h     **** static inline struct EnuCoor_i *stateGetSpeedEnu_i(void)
 850:./state.h     **** {
 851:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_I)) {
 852:./state.h     ****     stateCalcSpeedEnu_i();
 853:./state.h     ****   }
 854:./state.h     ****   return &state.enu_speed_i;
 855:./state.h     **** }
 856:./state.h     **** 
 857:./state.h     **** /// Get ground speed in ECEF coordinates (int).
 858:./state.h     **** static inline struct EcefCoor_i *stateGetSpeedEcef_i(void)
 859:./state.h     **** {
 860:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_I)) {
 861:./state.h     ****     stateCalcSpeedEcef_i();
 862:./state.h     ****   }
 863:./state.h     ****   return &state.ecef_speed_i;
 864:./state.h     **** }
 865:./state.h     **** 
 866:./state.h     **** /// Get norm of horizontal ground speed (int).
 867:./state.h     **** static inline uint32_t *stateGetHorizontalSpeedNorm_i(void)
 868:./state.h     **** {
 869:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_I)) {
 870:./state.h     ****     stateCalcHorizontalSpeedNorm_i();
 871:./state.h     ****   }
 872:./state.h     ****   return &state.h_speed_norm_i;
 873:./state.h     **** }
 874:./state.h     **** 
 875:./state.h     **** /// Get dir of horizontal ground speed (int).
 876:./state.h     **** static inline int32_t *stateGetHorizontalSpeedDir_i(void)
 877:./state.h     **** {
 878:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_I)) {
 879:./state.h     ****     stateCalcHorizontalSpeedDir_i();
 880:./state.h     ****   }
 881:./state.h     ****   return &state.h_speed_dir_i;
 882:./state.h     **** }
 883:./state.h     **** 
 884:./state.h     **** /// Get ground speed in local NED coordinates (float).
 885:./state.h     **** static inline struct NedCoor_f *stateGetSpeedNed_f(void)
 886:./state.h     **** {
 887:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_F)) {
 888:./state.h     ****     stateCalcSpeedNed_f();
 889:./state.h     ****   }
 890:./state.h     ****   return &state.ned_speed_f;
 891:./state.h     **** }
 892:./state.h     **** 
 893:./state.h     **** /// Get ground speed in local ENU coordinates (float).
 894:./state.h     **** static inline struct EnuCoor_f *stateGetSpeedEnu_f(void)
 895:./state.h     **** {
 896:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_F)) {
 897:./state.h     ****     stateCalcSpeedEnu_f();
 898:./state.h     ****   }
 899:./state.h     ****   return &state.enu_speed_f;
 900:./state.h     **** }
 901:./state.h     **** 
 902:./state.h     **** /// Get ground speed in ECEF coordinates (float).
 903:./state.h     **** static inline struct EcefCoor_f *stateGetSpeedEcef_f(void)
 904:./state.h     **** {
 905:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_F)) {
 906:./state.h     ****     stateCalcSpeedEcef_f();
 907:./state.h     ****   }
 908:./state.h     ****   return &state.ecef_speed_f;
 909:./state.h     **** }
 910:./state.h     **** 
 911:./state.h     **** /// Get norm of horizontal ground speed (float).
 912:./state.h     **** static inline float *stateGetHorizontalSpeedNorm_f(void)
 913:./state.h     **** {
  27              		.loc 1 913 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
 914:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_F)) {
  35              		.loc 1 914 0
  36 0002 044B     		ldr	r3, .L4
  37 0004 B3F81431 		ldrh	r3, [r3, #276]
  38 0008 DB05     		lsls	r3, r3, #23
  39 000a 01D4     		bmi	.L2
 915:./state.h     ****     stateCalcHorizontalSpeedNorm_f();
  40              		.loc 1 915 0
  41 000c FFF7FEFF 		bl	stateCalcHorizontalSpeedNorm_f
  42              	.LVL0:
  43              	.L2:
 916:./state.h     ****   }
 917:./state.h     ****   return &state.h_speed_norm_f;
 918:./state.h     **** }
  44              		.loc 1 918 0
  45 0010 0148     		ldr	r0, .L4+4
  46 0012 08BD     		pop	{r3, pc}
  47              	.L5:
  48              		.align	2
  49              	.L4:
  50 0014 00000000 		.word	state
  51 0018 68010000 		.word	state+360
  52              		.cfi_endproc
  53              	.LFE99:
  55              		.section	.text.send_calibration,"ax",%progbits
  56              		.align	1
  57              		.thumb
  58              		.thumb_func
  60              	send_calibration:
  61              	.LFB453:
  62              		.file 2 "firmwares/fixedwing/stabilization/stabilization_attitude.c"
   1:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /*
   2:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * Copyright (C) 2006  Pascal Brisset, Antoine Drouin, Michel Gorraz
   3:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  *
   4:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * This file is part of paparazzi.
   5:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  *
   6:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * it under the terms of the GNU General Public License as published by
   8:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * any later version.
  10:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  *
  11:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * GNU General Public License for more details.
  15:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  *
  16:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * You should have received a copy of the GNU General Public License
  17:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * Boston, MA 02111-1307, USA.
  20:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  */
  21:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  22:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /**
  23:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * @file firmwares/fixedwing/stabilization/stabilization_attitude.c
  24:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  *
  25:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * Fixed wing horizontal control.
  26:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  *
  27:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  */
  28:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  29:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #include "firmwares/fixedwing/stabilization/stabilization_attitude.h"
  30:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #include "std.h"
  31:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #include "led.h"
  32:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #include "state.h"
  33:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #include "firmwares/fixedwing/nav.h"
  34:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #include "generated/airframe.h"
  35:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #include CTRL_TYPE_H
  36:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #include "firmwares/fixedwing/autopilot.h"
  37:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  38:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /* outer loop parameters */
  39:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_course_setpoint; /* rad, CW/north */
  40:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_course_pre_bank;
  41:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_course_pre_bank_correction;
  42:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_course_pgain;
  43:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_course_dgain;
  44:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_roll_max_setpoint;
  45:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  46:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /* roll and pitch disabling */
  47:firmwares/fixedwing/stabilization/stabilization_attitude.c **** bool_t h_ctl_disabled;
  48:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  49:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /* AUTO1 rate mode */
  50:firmwares/fixedwing/stabilization/stabilization_attitude.c **** bool_t h_ctl_auto1_rate;
  51:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  52:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  53:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /* inner roll loop parameters */
  54:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float  h_ctl_roll_setpoint;
  55:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float  h_ctl_roll_pgain;
  56:firmwares/fixedwing/stabilization/stabilization_attitude.c **** pprz_t h_ctl_aileron_setpoint;
  57:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float  h_ctl_roll_slew;
  58:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  59:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /* inner pitch loop parameters */
  60:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float  h_ctl_pitch_setpoint;
  61:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float  h_ctl_pitch_loop_setpoint;
  62:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float  h_ctl_pitch_pgain;
  63:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float  h_ctl_pitch_dgain;
  64:firmwares/fixedwing/stabilization/stabilization_attitude.c **** pprz_t h_ctl_elevator_setpoint;
  65:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  66:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /* inner yaw loop parameters */
  67:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #if H_CTL_YAW_LOOP
  68:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float  h_ctl_yaw_rate_setpoint;
  69:firmwares/fixedwing/stabilization/stabilization_attitude.c **** pprz_t h_ctl_rudder_setpoint;
  70:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
  71:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  72:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /* inner CL loop parameters */
  73:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #if H_CTL_CL_LOOP
  74:firmwares/fixedwing/stabilization/stabilization_attitude.c **** pprz_t h_ctl_flaps_setpoint;
  75:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
  76:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  77:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef USE_AOA
  78:firmwares/fixedwing/stabilization/stabilization_attitude.c **** uint8_t h_ctl_pitch_mode;
  79:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
  80:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  81:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /* inner loop pre-command */
  82:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_aileron_of_throttle;
  83:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_elevator_of_roll;
  84:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  85:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /* rate loop */
  86:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_RATE_LOOP
  87:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_roll_rate_setpoint;
  88:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_roll_rate_mode;
  89:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_roll_rate_setpoint_pgain;
  90:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_hi_throttle_roll_rate_pgain;
  91:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_lo_throttle_roll_rate_pgain;
  92:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_roll_rate_igain;
  93:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_roll_rate_dgain;
  94:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
  95:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
  96:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_COURSE_SLEW_INCREMENT
  97:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_course_slew_increment;
  98:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
  99:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 100:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 101:firmwares/fixedwing/stabilization/stabilization_attitude.c **** inline static void h_ctl_roll_loop(void);
 102:firmwares/fixedwing/stabilization/stabilization_attitude.c **** inline static void h_ctl_pitch_loop(void);
 103:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_RATE_LOOP
 104:firmwares/fixedwing/stabilization/stabilization_attitude.c **** static inline void h_ctl_roll_rate_loop(void);
 105:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 106:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 107:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifndef H_CTL_COURSE_PRE_BANK_CORRECTION
 108:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #define H_CTL_COURSE_PRE_BANK_CORRECTION 1.
 109:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 110:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 111:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifndef H_CTL_COURSE_DGAIN
 112:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #define H_CTL_COURSE_DGAIN 0.
 113:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 114:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 115:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifndef H_CTL_ROLL_RATE_GAIN
 116:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #define H_CTL_ROLL_RATE_GAIN 0.
 117:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 118:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 119:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_roll_attitude_gain;
 120:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float h_ctl_roll_rate_gain;
 121:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 122:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef AGR_CLIMB
 123:firmwares/fixedwing/stabilization/stabilization_attitude.c **** static float nav_ratio;
 124:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 125:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 126:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #if PERIODIC_TELEMETRY
 127:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #include "subsystems/datalink/telemetry.h"
 128:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 129:firmwares/fixedwing/stabilization/stabilization_attitude.c **** static void send_calibration(struct transport_tx *trans, struct link_device *dev)
 130:firmwares/fixedwing/stabilization/stabilization_attitude.c **** {
  63              		.loc 2 130 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 8
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              	.LVL1:
  68 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  69              		.cfi_def_cfa_offset 40
  70              		.cfi_offset 4, -24
  71              		.cfi_offset 5, -20
  72              		.cfi_offset 6, -16
  73              		.cfi_offset 7, -12
  74              		.cfi_offset 8, -8
  75              		.cfi_offset 14, -4
  76              	.LBB4:
  77              	.LBB5:
  78              		.file 3 "/home/dino/paparazzi/var/include/messages.h"
   1:/home/dino/paparazzi/var/include/messages.h **** /* Automatically generated by gen_messages from /home/dino/paparazzi/conf/messages.xml */
   2:/home/dino/paparazzi/var/include/messages.h **** /* Please DO NOT EDIT */
   3:/home/dino/paparazzi/var/include/messages.h **** /* Macros to send and receive messages of class telemetry */
   4:/home/dino/paparazzi/var/include/messages.h **** #ifndef _VAR_MESSAGES_telemetry_H_
   5:/home/dino/paparazzi/var/include/messages.h **** #define _VAR_MESSAGES_telemetry_H_
   6:/home/dino/paparazzi/var/include/messages.h **** #include "subsystems/datalink/transport.h"
   7:/home/dino/paparazzi/var/include/messages.h **** #include "mcu_periph/link_device.h"
   8:/home/dino/paparazzi/var/include/messages.h **** #if DOWNLINK
   9:/home/dino/paparazzi/var/include/messages.h **** #define DL_AUTOPILOT_VERSION 1
  10:/home/dino/paparazzi/var/include/messages.h **** #define DL_ALIVE 2
  11:/home/dino/paparazzi/var/include/messages.h **** #define DL_PONG 3
  12:/home/dino/paparazzi/var/include/messages.h **** #define DL_TAKEOFF 4
  13:/home/dino/paparazzi/var/include/messages.h **** #define DL_ARDRONE_NAVDATA 5
  14:/home/dino/paparazzi/var/include/messages.h **** #define DL_ATTITUDE 6
  15:/home/dino/paparazzi/var/include/messages.h **** #define DL_IR_SENSORS 7
  16:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS 8
  17:/home/dino/paparazzi/var/include/messages.h **** #define DL_NAVIGATION_REF 9
  18:/home/dino/paparazzi/var/include/messages.h **** #define DL_NAVIGATION 10
  19:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPRZ_MODE 11
  20:/home/dino/paparazzi/var/include/messages.h **** #define DL_BAT 12
  21:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG_MCU_LINK 13
  22:/home/dino/paparazzi/var/include/messages.h **** #define DL_CALIBRATION 14
  23:/home/dino/paparazzi/var/include/messages.h **** #define DL_SETTINGS 15
  24:/home/dino/paparazzi/var/include/messages.h **** #define DL_DESIRED 16
  25:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_SOL 17
  26:/home/dino/paparazzi/var/include/messages.h **** #define DL_ADC_GENERIC 18
  27:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_FORMAT 19
  28:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAM 20
  29:/home/dino/paparazzi/var/include/messages.h **** #define DL_CIRCLE 21
  30:/home/dino/paparazzi/var/include/messages.h **** #define DL_SEGMENT 22
  31:/home/dino/paparazzi/var/include/messages.h **** #define DL_SVINFO 25
  32:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG 26
  33:/home/dino/paparazzi/var/include/messages.h **** #define DL_SURVEY 27
  34:/home/dino/paparazzi/var/include/messages.h **** #define DL_WC_RSSI 28
  35:/home/dino/paparazzi/var/include/messages.h **** #define DL_RANGEFINDER 29
  36:/home/dino/paparazzi/var/include/messages.h **** #define DL_DATALINK_REPORT 30
  37:/home/dino/paparazzi/var/include/messages.h **** #define DL_DL_VALUE 31
  38:/home/dino/paparazzi/var/include/messages.h **** #define DL_MARK 32
  39:/home/dino/paparazzi/var/include/messages.h **** #define DL_SYS_MON 33
  40:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR 34
  41:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED 35
  42:/home/dino/paparazzi/var/include/messages.h **** #define DL_MKK 36
  43:/home/dino/paparazzi/var/include/messages.h **** #define DL_ENERGY 37
  44:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_BMP85_CALIB 38
  45:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_BMP85 39
  46:/home/dino/paparazzi/var/include/messages.h **** #define DL_SPEED_LOOP 40
  47:/home/dino/paparazzi/var/include/messages.h **** #define DL_ALT_KALMAN 41
  48:/home/dino/paparazzi/var/include/messages.h **** #define DL_ESTIMATOR 42
  49:/home/dino/paparazzi/var/include/messages.h **** #define DL_TUNE_ROLL 43
  50:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_MS5534A 44
  51:/home/dino/paparazzi/var/include/messages.h **** #define DL_PRESSURE 45
  52:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_WORDS 46
  53:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED_LLA 47
  54:/home/dino/paparazzi/var/include/messages.h **** #define DL_CHRONO 48
  55:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED_ENU 49
  56:/home/dino/paparazzi/var/include/messages.h **** #define DL_WINDTURBINE_STATUS_ 50
  57:/home/dino/paparazzi/var/include/messages.h **** #define DL_RC_3CH_ 51
  58:/home/dino/paparazzi/var/include/messages.h **** #define DL_MPPT 52
  59:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG_IR_I2C 53
  60:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED 54
  61:/home/dino/paparazzi/var/include/messages.h **** #define DL_XSENS 55
  62:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_ETS 56
  63:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED_ETS 57
  64:/home/dino/paparazzi/var/include/messages.h **** #define DL_PBN 58
  65:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_LLA 59
  66:/home/dino/paparazzi/var/include/messages.h **** #define DL_H_CTL_A 60
  67:/home/dino/paparazzi/var/include/messages.h **** #define DL_TURB_PRESSURE_RAW 61
  68:/home/dino/paparazzi/var/include/messages.h **** #define DL_TURB_PRESSURE_VOLTAGE 62
  69:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAM_POINT 63
  70:/home/dino/paparazzi/var/include/messages.h **** #define DL_DC_INFO 64
  71:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSYS_BARO 65
  72:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSYS_AIRSPEED 66
  73:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLIGHT_BENCHMARK 67
  74:/home/dino/paparazzi/var/include/messages.h **** #define DL_MPL3115_BARO 68
  75:/home/dino/paparazzi/var/include/messages.h **** #define DL_AOA_ADC 69
  76:/home/dino/paparazzi/var/include/messages.h **** #define DL_XTEND_RSSI 70
  77:/home/dino/paparazzi/var/include/messages.h **** #define DL_SUPERBITRF 72
  78:/home/dino/paparazzi/var/include/messages.h **** #define DL_GX3_INFO 73
  79:/home/dino/paparazzi/var/include/messages.h **** #define DL_EXPLAIN 74
  80:/home/dino/paparazzi/var/include/messages.h **** #define DL_VIDEO_TELEMETRY 75
  81:/home/dino/paparazzi/var/include/messages.h **** #define DL_VF_UPDATE 76
  82:/home/dino/paparazzi/var/include/messages.h **** #define DL_VF_PREDICT 77
  83:/home/dino/paparazzi/var/include/messages.h **** #define DL_INV_FILTER 78
  84:/home/dino/paparazzi/var/include/messages.h **** #define DL_MISSION_STATUS 79
  85:/home/dino/paparazzi/var/include/messages.h **** #define DL_CROSS_TRACK_ERROR 80
  86:/home/dino/paparazzi/var/include/messages.h **** #define DL_GENERIC_COM 81
  87:/home/dino/paparazzi/var/include/messages.h **** #define DL_FORMATION_SLOT_TM 82
  88:/home/dino/paparazzi/var/include/messages.h **** #define DL_FORMATION_STATUS_TM 83
  89:/home/dino/paparazzi/var/include/messages.h **** #define DL_BMP_STATUS 84
  90:/home/dino/paparazzi/var/include/messages.h **** #define DL_MLX_STATUS 85
  91:/home/dino/paparazzi/var/include/messages.h **** #define DL_TMP_STATUS 86
  92:/home/dino/paparazzi/var/include/messages.h **** #define DL_WIND_INFO_RET 87
  93:/home/dino/paparazzi/var/include/messages.h **** #define DL_SCP_STATUS 88
  94:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_STATUS 89
  95:/home/dino/paparazzi/var/include/messages.h **** #define DL_ENOSE_STATUS 90
  96:/home/dino/paparazzi/var/include/messages.h **** #define DL_DPICCO_STATUS 91
  97:/home/dino/paparazzi/var/include/messages.h **** #define DL_ANTENNA_DEBUG 92
  98:/home/dino/paparazzi/var/include/messages.h **** #define DL_ANTENNA_STATUS 93
  99:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR_BENCH_STATUS 94
 100:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR_BENCH_STATIC 95
 101:/home/dino/paparazzi/var/include/messages.h **** #define DL_HIH_STATUS 96
 102:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMT_STATUS 97
 103:/home/dino/paparazzi/var/include/messages.h **** #define DL_GP2Y_STATUS 98
 104:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_I2C_SERIAL 99
 105:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPM 100
 106:/home/dino/paparazzi/var/include/messages.h **** #define DL_RC 101
 107:/home/dino/paparazzi/var/include/messages.h **** #define DL_COMMANDS 102
 108:/home/dino/paparazzi/var/include/messages.h **** #define DL_FBW_STATUS 103
 109:/home/dino/paparazzi/var/include/messages.h **** #define DL_ADC 104
 110:/home/dino/paparazzi/var/include/messages.h **** #define DL_ACTUATORS 105
 111:/home/dino/paparazzi/var/include/messages.h **** #define DL_DC_SHOT 110
 112:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_BOARD_RESULTS 111
 113:/home/dino/paparazzi/var/include/messages.h **** #define DL_MLX_SERIAL 113
 114:/home/dino/paparazzi/var/include/messages.h **** #define DL_PAYLOAD 114
 115:/home/dino/paparazzi/var/include/messages.h **** #define DL_HTM_STATUS 115
 116:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_MS5611 116
 117:/home/dino/paparazzi/var/include/messages.h **** #define DL_MS5611_COEFF 117
 118:/home/dino/paparazzi/var/include/messages.h **** #define DL_ATMOSPHERE_CHARGE 118
 119:/home/dino/paparazzi/var/include/messages.h **** #define DL_SOLAR_RADIATION 119
 120:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_TA 120
 121:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_RA 121
 122:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_RESOLVED 122
 123:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_DEBUG 123
 124:/home/dino/paparazzi/var/include/messages.h **** #define DL_POTENTIAL 124
 125:/home/dino/paparazzi/var/include/messages.h **** #define DL_VERTICAL_ENERGY 125
 126:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMP_TCOUPLE 126
 127:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_I2C_STATUS 127
 128:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAMERA_SNAPSHOT 128
 129:/home/dino/paparazzi/var/include/messages.h **** #define DL_TIMESTAMP 129
 130:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_FLOAT 130
 131:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_SCALED 131
 132:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL_SCALED 132
 133:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_SCALED 133
 134:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER 134
 135:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER2 135
 136:/home/dino/paparazzi/var/include/messages.h **** #define DL_RATE_LOOP 136
 137:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER_ALIGNER 137
 138:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED_MS45XX 138
 139:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER_COR 139
 140:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_INT 140
 141:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_REF_INT 141
 142:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_REF_FLOAT 142
 143:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_CMD 143
 144:/home/dino/paparazzi/var/include/messages.h **** #define DL_GUIDANCE_H_INT 144
 145:/home/dino/paparazzi/var/include/messages.h **** #define DL_VERT_LOOP 145
 146:/home/dino/paparazzi/var/include/messages.h **** #define DL_HOVER_LOOP 146
 147:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_FP 147
 148:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMP_ADC 148
 149:/home/dino/paparazzi/var/include/messages.h **** #define DL_GUIDANCE_H_REF_INT 149
 150:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_TUNE_HOVER 150
 151:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_Z 151
 152:/home/dino/paparazzi/var/include/messages.h **** #define DL_PCAP01_STATUS 152
 153:/home/dino/paparazzi/var/include/messages.h **** #define DL_GEIGER_COUNTER 153
 154:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_REF 154
 155:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_INT 155
 156:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_EULER_INT 156
 157:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_QUAT_INT 157
 158:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_RMAT_INT 158
 159:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_NAV_STATUS 159
 160:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_RADIO_CONTROL 160
 161:/home/dino/paparazzi/var/include/messages.h **** #define DL_VFF_EXTENDED 161
 162:/home/dino/paparazzi/var/include/messages.h **** #define DL_VFF 162
 163:/home/dino/paparazzi/var/include/messages.h **** #define DL_GEO_MAG 163
 164:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF 164
 165:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF_DBG 165
 166:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF_GPS 166
 167:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_SONAR 167
 168:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_CAM 168
 169:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_REF_QUAT 169
 170:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_XHAT 170
 171:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_Y 171
 172:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_P_DIAG 172
 173:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_EULER 173
 174:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_MEASUREMENT_EULER 174
 175:/home/dino/paparazzi/var/include/messages.h **** #define DL_WT 175
 176:/home/dino/paparazzi/var/include/messages.h **** #define DL_CSC_CAN_DEBUG 176
 177:/home/dino/paparazzi/var/include/messages.h **** #define DL_CSC_CAN_MSG 177
 178:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_GYRO_BIAS_INT 178
 179:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLOW_AP_OTF 179
 180:/home/dino/paparazzi/var/include/messages.h **** #define DL_FMS_TIME 180
 181:/home/dino/paparazzi/var/include/messages.h **** #define DL_LOADCELL 181
 182:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLA_DEBUG 182
 183:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_FAULT_STATUS 183
 184:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_SPEEDS 184
 185:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_DEBUG_QUAT 185
 186:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_BUSVOLTS 186
 187:/home/dino/paparazzi/var/include/messages.h **** #define DL_SYSTEM_STATUS 187
 188:/home/dino/paparazzi/var/include/messages.h **** #define DL_DYNAMIXEL 188
 189:/home/dino/paparazzi/var/include/messages.h **** #define DL_RMAT_DEBUG 189
 190:/home/dino/paparazzi/var/include/messages.h **** #define DL_SIMPLE_COMMANDS 190
 191:/home/dino/paparazzi/var/include/messages.h **** #define DL_VANE_SENSOR 191
 192:/home/dino/paparazzi/var/include/messages.h **** #define DL_CONTROLLER_GAINS 192
 193:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF 193
 194:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_DEBUG 194
 195:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_ACC_DBG 195
 196:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_MAG_DBG 196
 197:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_SENSORS_SCALED 197
 198:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS 198
 199:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_ERROR 199
 200:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO 200
 201:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG 201
 202:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL 202
 203:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_RAW 203
 204:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL_RAW 204
 205:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_RAW 205
 206:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_SETTINGS 206
 207:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_CURRENT_CALIBRATION 207
 208:/home/dino/paparazzi/var/include/messages.h **** #define DL_UART_ERRORS 208
 209:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_LP 209
 210:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_PRESSURE 210
 211:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_HS_GYRO 211
 212:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_PASSTHROUGH_STATUS 212
 213:/home/dino/paparazzi/var/include/messages.h **** #define DL_TUNE_VERT 213
 214:/home/dino/paparazzi/var/include/messages.h **** #define DL_MF_DAQ_STATE 214
 215:/home/dino/paparazzi/var/include/messages.h **** #define DL_INFO_MSG 215
 216:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_INDI 216
 217:/home/dino/paparazzi/var/include/messages.h **** #define DL_BEBOP_ACTUATORS 218
 218:/home/dino/paparazzi/var/include/messages.h **** #define DL_WEATHER 219
 219:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_TURNTABLE 220
 220:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_RAW 221
 221:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIR_DATA 222
 222:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSL 223
 223:/home/dino/paparazzi/var/include/messages.h **** #define DL_VIDEO_SYNC 225
 224:/home/dino/paparazzi/var/include/messages.h **** #define DL_PERIODIC_TELEMETRY_ERR 226
 225:/home/dino/paparazzi/var/include/messages.h **** #define DL_TIME 227
 226:/home/dino/paparazzi/var/include/messages.h **** #define DL_OPTIC_FLOW_EST 228
 227:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_ARDRONE2 230
 228:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_STATUS 231
 229:/home/dino/paparazzi/var/include/messages.h **** #define DL_STATE_FILTER_STATUS 232
 230:/home/dino/paparazzi/var/include/messages.h **** #define DL_PX4FLOW 233
 231:/home/dino/paparazzi/var/include/messages.h **** #define DL_OPTICFLOW 234
 232:/home/dino/paparazzi/var/include/messages.h **** #define DL_VISUALTARGET 235
 233:/home/dino/paparazzi/var/include/messages.h **** #define DL_SONAR 236
 234:/home/dino/paparazzi/var/include/messages.h **** #define DL_PAYLOAD_FLOAT 237
 235:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_POS_LLH 238
 236:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RPMS 239
 237:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_SPEED_POS 240
 238:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RATE_ATTITUDE 241
 239:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_GYRO_BIAS 242
 240:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RANGE_METER 243
 241:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_WIND 244
 242:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPRZ_DEBUG 247
 243:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_ACCEL_LTP 248
 244:/home/dino/paparazzi/var/include/messages.h **** #define DL_LOOSE_INS_GPS 249
 245:/home/dino/paparazzi/var/include/messages.h **** #define DL_AFL_COEFFS 250
 246:/home/dino/paparazzi/var/include/messages.h **** #define DL_I2C_ERRORS 253
 247:/home/dino/paparazzi/var/include/messages.h **** #define DL_RDYB_TRAJECTORY 254
 248:/home/dino/paparazzi/var/include/messages.h **** #define DL_HENRY_GNSS 255
 249:/home/dino/paparazzi/var/include/messages.h **** #define DL_MSG_telemetry_NB 240
 250:/home/dino/paparazzi/var/include/messages.h **** 
 251:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AUTOPILOT_VERSION(_trans, _dev, version, nb_desc, desc) pprz_msg_send_AUTOPIL
 252:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AUTOPILOT_VERSION(struct transport_tx *trans, struct link_device *
 253:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 
 254:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 /* msg heade
 255:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1+nb_desc*1 +2 /* msg header overhead */);
 256:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 257:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AUTOPILOT_VERSION, "
 258:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _version);
 259:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_desc)
 260:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * nb_desc, (void *) _desc);
 261:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 262:/home/dino/paparazzi/var/include/messages.h **** 	} else
 263:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 264:/home/dino/paparazzi/var/include/messages.h **** }
 265:/home/dino/paparazzi/var/include/messages.h **** 
 266:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ALIVE(_trans, _dev, nb_md5sum, md5sum) pprz_msg_send_ALIVE(&((_trans).trans_t
 267:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ALIVE(struct transport_tx *trans, struct link_device *dev, uint8_t
 268:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 
 269:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 /* msg heade
 270:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_md5sum*1 +2 /* msg header overhead */);
 271:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 272:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ALIVE, "ALIVE");
 273:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_md5su
 274:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_md5sum, (void *) _md5s
 275:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 276:/home/dino/paparazzi/var/include/messages.h **** 	} else
 277:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 278:/home/dino/paparazzi/var/include/messages.h **** }
 279:/home/dino/paparazzi/var/include/messages.h **** 
 280:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PONG(_trans, _dev) pprz_msg_send_PONG(&((_trans).trans_tx), &((_dev).device),
 281:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PONG(struct transport_tx *trans, struct link_device *dev, uint8_t 
 282:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0 +2 /* msg header 
 283:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0 +2 /* msg header overhead */)
 284:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0 +2 /* msg header overhead */);
 285:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 286:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PONG, "PONG");
 287:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 288:/home/dino/paparazzi/var/include/messages.h **** 	} else
 289:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 290:/home/dino/paparazzi/var/include/messages.h **** }
 291:/home/dino/paparazzi/var/include/messages.h **** 
 292:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TAKEOFF(_trans, _dev, cpu_time) pprz_msg_send_TAKEOFF(&((_trans).trans_tx), &
 293:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TAKEOFF(struct transport_tx *trans, struct link_device *dev, uint8
 294:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg heade
 295:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg header overhead *
 296:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2 +2 /* msg header overhead */);
 297:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 298:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TAKEOFF, "TAKEOFF");
 299:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _cpu_time);
 300:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 301:/home/dino/paparazzi/var/include/messages.h **** 	} else
 302:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 303:/home/dino/paparazzi/var/include/messages.h **** }
 304:/home/dino/paparazzi/var/include/messages.h **** 
 305:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ARDRONE_NAVDATA(_trans, _dev, taille, nu_trame, ax, ay, az, vx, vy, vz, tempe
 306:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ARDRONE_NAVDATA(struct transport_tx *trans, struct link_device *de
 307:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2
 308:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2
 309:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+4+2+2+4+2+2+2+2+2
 310:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 311:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ARDRONE_NAVDATA, "AR
 312:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _taille);
 313:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _nu_trame);
 314:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ax);
 315:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ay);
 316:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _az);
 317:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vx);
 318:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vy);
 319:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vz);
 320:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_ac
 321:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_gy
 322:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ultrasound);
 323:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_debut_echo)
 324:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_fin_echo);
 325:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_association
 326:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_distance_ec
 327:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_time)
 328:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_value
 329:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_ref);
 330:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _nb_echo);
 331:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _sum_echo);
 332:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _gradient);
 333:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flag_echo_ini)
 334:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _pressure);
 335:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_pr
 336:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mx);
 337:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _my);
 338:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mz);
 339:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _chksum);
 340:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _checksum_error
 341:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 342:/home/dino/paparazzi/var/include/messages.h **** 	} else
 343:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 344:/home/dino/paparazzi/var/include/messages.h **** }
 345:/home/dino/paparazzi/var/include/messages.h **** 
 346:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ATTITUDE(_trans, _dev, phi, psi, theta) pprz_msg_send_ATTITUDE(&((_trans).tra
 347:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ATTITUDE(struct transport_tx *trans, struct link_device *dev, uint
 348:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
 349:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 350:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 351:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 352:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ATTITUDE, "ATTITUDE"
 353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
 354:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
 355:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
 356:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 357:/home/dino/paparazzi/var/include/messages.h **** 	} else
 358:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 359:/home/dino/paparazzi/var/include/messages.h **** }
 360:/home/dino/paparazzi/var/include/messages.h **** 
 361:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IR_SENSORS(_trans, _dev, ir1, ir2, longitudinal, lateral, vertical) pprz_msg_
 362:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IR_SENSORS(struct transport_tx *trans, struct link_device *dev, ui
 363:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2 +2 /* m
 364:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2 +2 /* msg header ov
 365:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2 +2 /* msg header overhead */);
 366:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 367:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IR_SENSORS, "IR_SENS
 368:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir1);
 369:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir2);
 370:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _longitudinal);
 371:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _lateral);
 372:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vertical);
 373:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 374:/home/dino/paparazzi/var/include/messages.h **** 	} else
 375:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 376:/home/dino/paparazzi/var/include/messages.h **** }
 377:/home/dino/paparazzi/var/include/messages.h **** 
 378:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS(_trans, _dev, mode, utm_east, utm_north, course, alt, speed, climb, week,
 379:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS(struct transport_tx *trans, struct link_device *dev, uint8_t a
 380:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+2+4+2+2+2+4
 381:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+2+4+2+2+2+4+1+1 +2 /* m
 382:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+2+4+2+2+2+4+1+1 +2 /* msg header overhead */);
 383:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 384:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS, "GPS");
 385:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mode);
 386:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 387:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 388:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _course);
 389:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
 390:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _speed);
 391:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _climb);
 392:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _week);
 393:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _itow);
 394:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 395:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _gps_nb_err);
 396:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 397:/home/dino/paparazzi/var/include/messages.h **** 	} else
 398:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 399:/home/dino/paparazzi/var/include/messages.h **** }
 400:/home/dino/paparazzi/var/include/messages.h **** 
 401:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_NAVIGATION_REF(_trans, _dev, utm_east, utm_north, utm_zone, ground_alt) pprz_
 402:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_NAVIGATION_REF(struct transport_tx *trans, struct link_device *dev
 403:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+4 +2 /* msg
 404:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+4 +2 /* msg header over
 405:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+1+4 +2 /* msg header overhead */);
 406:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 407:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NAVIGATION_REF, "NAV
 408:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 409:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 410:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 411:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ground_alt);
 412:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 413:/home/dino/paparazzi/var/include/messages.h **** 	} else
 414:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 415:/home/dino/paparazzi/var/include/messages.h **** }
 416:/home/dino/paparazzi/var/include/messages.h **** 
 417:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_NAVIGATION(_trans, _dev, cur_block, cur_stage, pos_x, pos_y, dist_wp, dist_ho
 418:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_NAVIGATION(struct transport_tx *trans, struct link_device *dev, ui
 419:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +
 420:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +2 /* msg hea
 421:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4+4+4+1+1 +2 /* msg header overhead */);
 422:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 423:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NAVIGATION, "NAVIGAT
 424:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_block);
 425:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_stage);
 426:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_x);
 427:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_y);
 428:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_wp);
 429:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_home);
 430:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _circle_count);
 431:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _oval_count);
 432:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 433:/home/dino/paparazzi/var/include/messages.h **** 	} else
 434:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 435:/home/dino/paparazzi/var/include/messages.h **** }
 436:/home/dino/paparazzi/var/include/messages.h **** 
 437:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PPRZ_MODE(_trans, _dev, ap_mode, ap_gaz, ap_lateral, ap_horizontal, if_calib_
 438:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PPRZ_MODE(struct transport_tx *trans, struct link_device *dev, uin
 439:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /*
 440:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /* msg header 
 441:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+1 +2 /* msg header overhead */);
 442:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 443:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PPRZ_MODE, "PPRZ_MOD
 444:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_mode);
 445:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_gaz);
 446:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_lateral);
 447:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_horizontal);
 448:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _if_calib_mode);
 449:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mcu1_status);
 450:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 451:/home/dino/paparazzi/var/include/messages.h **** 	} else
 452:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 453:/home/dino/paparazzi/var/include/messages.h **** }
 454:/home/dino/paparazzi/var/include/messages.h **** 
 455:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BAT(_trans, _dev, throttle, voltage, amps, flight_time, kill_auto_throttle, b
 456:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BAT(struct transport_tx *trans, struct link_device *dev, uint8_t a
 457:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +
 458:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +2 /* msg hea
 459:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+1+2+2+2 +2 /* msg header overhead */);
 460:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 461:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BAT, "BAT");
 462:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _throttle);
 463:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _voltage);
 464:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _amps);
 465:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flight_time);
 466:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _kill_auto_throt
 467:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _block_time);
 468:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _stage_time);
 469:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _energy);
 470:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 471:/home/dino/paparazzi/var/include/messages.h **** 	} else
 472:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 473:/home/dino/paparazzi/var/include/messages.h **** }
 474:/home/dino/paparazzi/var/include/messages.h **** 
 475:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DEBUG_MCU_LINK(_trans, _dev, i2c_nb_err, i2c_mcu1_nb_err, ppm_rate) pprz_msg_
 476:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DEBUG_MCU_LINK(struct transport_tx *trans, struct link_device *dev
 477:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg h
 478:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhe
 479:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
 480:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 481:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DEBUG_MCU_LINK, "DEB
 482:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _i2c_nb_err);
 483:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _i2c_mcu1_nb_err
 484:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ppm_rate);
 485:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 486:/home/dino/paparazzi/var/include/messages.h **** 	} else
 487:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 488:/home/dino/paparazzi/var/include/messages.h **** }
 489:/home/dino/paparazzi/var/include/messages.h **** 
 490:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CALIBRATION(_trans, _dev, climb_sum_err, climb_gaz_submode) pprz_msg_send_CAL
 491:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CALIBRATION(struct transport_tx *trans, struct link_device *dev, u
 492:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+1 +2 /* msg hea
  79              		.loc 3 492 0
  80 0004 076A     		ldr	r7, [r0, #32]
  81 0006 D0F80480 		ldr	r8, [r0, #4]
  82 000a 0368     		ldr	r3, [r0]
  83 000c 0126     		movs	r6, #1
  84              	.LBE5:
  85              	.LBE4:
  86              		.loc 2 130 0
  87 000e 0D46     		mov	r5, r1
  88              	.LVL2:
  89 0010 0446     		mov	r4, r0
  90              	.LBB7:
  91              	.LBB6:
  92              		.loc 3 492 0
  93 0012 0721     		movs	r1, #7
  94              	.LVL3:
  95 0014 8DF80F60 		strb	r6, [sp, #15]
  96              	.LVL4:
  97 0018 3846     		mov	r0, r7
  98              	.LVL5:
  99 001a 9847     		blx	r3
 100              	.LVL6:
 101 001c 2946     		mov	r1, r5
 102 001e 0246     		mov	r2, r0
 103 0020 3846     		mov	r0, r7
 104 0022 C047     		blx	r8
 105              	.LVL7:
 106 0024 0028     		cmp	r0, #0
 107 0026 38D0     		beq	.L7
 493:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1 +2 /* msg header overhead
 108              		.loc 3 493 0
 109 0028 276A     		ldr	r7, [r4, #32]
 110 002a 2368     		ldr	r3, [r4]
 111 002c D4F81C80 		ldr	r8, [r4, #28]
 112 0030 3846     		mov	r0, r7
 113 0032 0721     		movs	r1, #7
 114 0034 9847     		blx	r3
 115              	.LVL8:
 116 0036 2946     		mov	r1, r5
 117 0038 0246     		mov	r2, r0
 118 003a 3846     		mov	r0, r7
 119 003c C047     		blx	r8
 120              	.LVL9:
 494:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1 +2 /* msg header overhead */);
 121              		.loc 3 494 0
 122 003e 2369     		ldr	r3, [r4, #16]
 123 0040 206A     		ldr	r0, [r4, #32]
 124 0042 2946     		mov	r1, r5
 125 0044 0722     		movs	r2, #7
 126 0046 9847     		blx	r3
 127              	.LVL10:
 495:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 128              		.loc 3 495 0
 129 0048 0DF10F03 		add	r3, sp, #15
 130 004c 0096     		str	r6, [sp]
 131 004e 0193     		str	r3, [sp, #4]
 132 0050 A768     		ldr	r7, [r4, #8]
 133 0052 206A     		ldr	r0, [r4, #32]
 134 0054 2946     		mov	r1, r5
 135 0056 0222     		movs	r2, #2
 136 0058 0023     		movs	r3, #0
 137 005a B847     		blx	r7
 138              	.LVL11:
 496:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CALIBRATION, "CALIBR
 139              		.loc 3 496 0
 140 005c 0E23     		movs	r3, #14
 141 005e 0093     		str	r3, [sp]
 142 0060 114B     		ldr	r3, .L10
 143 0062 0193     		str	r3, [sp, #4]
 144 0064 E768     		ldr	r7, [r4, #12]
 145 0066 206A     		ldr	r0, [r4, #32]
 146 0068 2946     		mov	r1, r5
 147 006a 0222     		movs	r2, #2
 148 006c 0023     		movs	r3, #0
 149 006e B847     		blx	r7
 150              	.LVL12:
 497:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _climb_sum_err);
 151              		.loc 3 497 0
 152 0070 0423     		movs	r3, #4
 153 0072 0093     		str	r3, [sp]
 154 0074 0D4B     		ldr	r3, .L10+4
 155 0076 0193     		str	r3, [sp, #4]
 156 0078 206A     		ldr	r0, [r4, #32]
 157 007a A768     		ldr	r7, [r4, #8]
 158 007c 2946     		mov	r1, r5
 159 007e 0A22     		movs	r2, #10
 160 0080 0023     		movs	r3, #0
 161 0082 B847     		blx	r7
 162              	.LVL13:
 498:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _climb_gaz_submo
 163              		.loc 3 498 0
 164 0084 0A4B     		ldr	r3, .L10+8
 165 0086 0096     		str	r6, [sp]
 166 0088 0193     		str	r3, [sp, #4]
 167 008a A668     		ldr	r6, [r4, #8]
 168              	.LVL14:
 169 008c 206A     		ldr	r0, [r4, #32]
 170 008e 0023     		movs	r3, #0
 171 0090 2946     		mov	r1, r5
 172 0092 0222     		movs	r2, #2
 173 0094 B047     		blx	r6
 174              	.LVL15:
 499:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 175              		.loc 3 499 0
 176 0096 6369     		ldr	r3, [r4, #20]
 177 0098 00E0     		b	.L9
 178              	.L7:
 500:/home/dino/paparazzi/var/include/messages.h **** 	} else
 501:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 179              		.loc 3 501 0
 180 009a A369     		ldr	r3, [r4, #24]
 181              	.L9:
 182 009c 206A     		ldr	r0, [r4, #32]
 183 009e 2946     		mov	r1, r5
 184 00a0 9847     		blx	r3
 185              	.LVL16:
 186              	.LBE6:
 187              	.LBE7:
 131:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   pprz_msg_send_CALIBRATION(trans, dev, AC_ID,  &v_ctl_auto_throttle_sum_err, &v_ctl_auto_throttle_
 132:firmwares/fixedwing/stabilization/stabilization_attitude.c **** }
 188              		.loc 2 132 0
 189 00a2 04B0     		add	sp, sp, #16
 190              		.cfi_def_cfa_offset 24
 191              		@ sp needed
 192 00a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 193              	.LVL17:
 194              	.L11:
 195              		.align	2
 196              	.L10:
 197 00a8 00000000 		.word	.LC0
 198 00ac 00000000 		.word	v_ctl_auto_throttle_sum_err
 199 00b0 00000000 		.word	v_ctl_auto_throttle_submode
 200              		.cfi_endproc
 201              	.LFE453:
 203              		.section	.text.orientationGetEulers_f.constprop.1,"ax",%progbits
 204              		.align	1
 205              		.thumb
 206              		.thumb_func
 208              	orientationGetEulers_f.constprop.1:
 209              	.LFB459:
 210              		.file 4 "./math/pprz_orientation_conversion.h"
   1:./math/pprz_orientation_conversion.h **** /*
   2:./math/pprz_orientation_conversion.h ****  * Copyright (C) 2011-2012 The Paparazzi Team
   3:./math/pprz_orientation_conversion.h ****  *
   4:./math/pprz_orientation_conversion.h ****  * This file is part of paparazzi.
   5:./math/pprz_orientation_conversion.h ****  *
   6:./math/pprz_orientation_conversion.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./math/pprz_orientation_conversion.h ****  * it under the terms of the GNU General Public License as published by
   8:./math/pprz_orientation_conversion.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./math/pprz_orientation_conversion.h ****  * any later version.
  10:./math/pprz_orientation_conversion.h ****  *
  11:./math/pprz_orientation_conversion.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:./math/pprz_orientation_conversion.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./math/pprz_orientation_conversion.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./math/pprz_orientation_conversion.h ****  * GNU General Public License for more details.
  15:./math/pprz_orientation_conversion.h ****  *
  16:./math/pprz_orientation_conversion.h ****  * You should have received a copy of the GNU General Public License
  17:./math/pprz_orientation_conversion.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./math/pprz_orientation_conversion.h ****  * <http://www.gnu.org/licenses/>.
  19:./math/pprz_orientation_conversion.h ****  */
  20:./math/pprz_orientation_conversion.h **** 
  21:./math/pprz_orientation_conversion.h **** /**
  22:./math/pprz_orientation_conversion.h ****  * @file math/pprz_orientation_conversion.h
  23:./math/pprz_orientation_conversion.h ****  * Generic orientation representation and conversions.
  24:./math/pprz_orientation_conversion.h ****  *
  25:./math/pprz_orientation_conversion.h ****  * This file contains the functions to automatically convert between
  26:./math/pprz_orientation_conversion.h ****  * the different representations. They should normally not be used
  27:./math/pprz_orientation_conversion.h ****  * directly and instead the stateGet/Set interfaces used.
  28:./math/pprz_orientation_conversion.h ****  * Also see the @ref math_orientation_representation "Generic Orientation Representation" page.
  29:./math/pprz_orientation_conversion.h ****  *
  30:./math/pprz_orientation_conversion.h ****  * @author Felix Ruess <felix.ruess@gmail.com>
  31:./math/pprz_orientation_conversion.h ****  */
  32:./math/pprz_orientation_conversion.h **** 
  33:./math/pprz_orientation_conversion.h **** /**
  34:./math/pprz_orientation_conversion.h ****  * @addtogroup math
  35:./math/pprz_orientation_conversion.h ****  * @{
  36:./math/pprz_orientation_conversion.h ****  */
  37:./math/pprz_orientation_conversion.h **** 
  38:./math/pprz_orientation_conversion.h **** /**
  39:./math/pprz_orientation_conversion.h ****  * This generic orientation representation consists of a struct, containing the 6 orientation
  40:./math/pprz_orientation_conversion.h ****  * representations, and a status variable. The bits in the status variable indicate  which
  41:./math/pprz_orientation_conversion.h ****  * representations of the orientation are up-to-date.
  42:./math/pprz_orientation_conversion.h ****  *
  43:./math/pprz_orientation_conversion.h ****  * When a getter is used to get a certain representation, the status bit is checked to see if
  44:./math/pprz_orientation_conversion.h ****  * the current value is already available in the desired orientation representation.
  45:./math/pprz_orientation_conversion.h ****  * If the desired representation is not available, it will be calculated.
  46:./math/pprz_orientation_conversion.h ****  *
  47:./math/pprz_orientation_conversion.h ****  * When a setter is used to set a representation, all status bits are cleared, and only the
  48:./math/pprz_orientation_conversion.h ****  * status bit for the set representation is set to one.
  49:./math/pprz_orientation_conversion.h ****  */
  50:./math/pprz_orientation_conversion.h **** 
  51:./math/pprz_orientation_conversion.h **** /**
  52:./math/pprz_orientation_conversion.h ****  * @defgroup math_orientation_representation Generic Orientation Representations
  53:./math/pprz_orientation_conversion.h ****  * @{
  54:./math/pprz_orientation_conversion.h ****  */
  55:./math/pprz_orientation_conversion.h **** 
  56:./math/pprz_orientation_conversion.h **** #ifndef PPRZ_ORIENTATION_CONVERSION_H
  57:./math/pprz_orientation_conversion.h **** #define PPRZ_ORIENTATION_CONVERSION_H
  58:./math/pprz_orientation_conversion.h **** 
  59:./math/pprz_orientation_conversion.h **** #ifdef __cplusplus
  60:./math/pprz_orientation_conversion.h **** extern "C" {
  61:./math/pprz_orientation_conversion.h **** #endif
  62:./math/pprz_orientation_conversion.h **** 
  63:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_int.h"
  64:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_float.h"
  65:./math/pprz_orientation_conversion.h **** 
  66:./math/pprz_orientation_conversion.h **** #include "std.h"
  67:./math/pprz_orientation_conversion.h **** 
  68:./math/pprz_orientation_conversion.h **** 
  69:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_I  0  ///< Quaternion (BFP int)
  70:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_I 1  ///< zyx Euler (BFP int)
  71:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_I  2  ///< Rotation Matrix (BFP int)
  72:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_F  3  ///< Quaternion (float)
  73:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_F 4  ///< zyx Euler (float)
  74:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_F  5  ///< Rotation Matrix (float)
  75:./math/pprz_orientation_conversion.h **** 
  76:./math/pprz_orientation_conversion.h **** /*
  77:./math/pprz_orientation_conversion.h ****  * @brief Struct with euler/rmat/quaternion orientation representations in BFP int and float
  78:./math/pprz_orientation_conversion.h ****  */
  79:./math/pprz_orientation_conversion.h **** struct OrientationReps {
  80:./math/pprz_orientation_conversion.h ****   /**
  81:./math/pprz_orientation_conversion.h ****    * Holds the status bits for all orientation representations.
  82:./math/pprz_orientation_conversion.h ****    * When the corresponding bit is set, the representation
  83:./math/pprz_orientation_conversion.h ****    * is already computed.
  84:./math/pprz_orientation_conversion.h ****    */
  85:./math/pprz_orientation_conversion.h ****   uint8_t status;
  86:./math/pprz_orientation_conversion.h **** 
  87:./math/pprz_orientation_conversion.h ****   /**
  88:./math/pprz_orientation_conversion.h ****    * Orientation quaternion.
  89:./math/pprz_orientation_conversion.h ****    * Units: #INT32_QUAT_FRAC
  90:./math/pprz_orientation_conversion.h ****    */
  91:./math/pprz_orientation_conversion.h ****   struct Int32Quat quat_i;
  92:./math/pprz_orientation_conversion.h **** 
  93:./math/pprz_orientation_conversion.h ****   /**
  94:./math/pprz_orientation_conversion.h ****    * Orientation in zyx euler angles.
  95:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_ANGLE_FRAC
  96:./math/pprz_orientation_conversion.h ****    */
  97:./math/pprz_orientation_conversion.h ****   struct Int32Eulers eulers_i;
  98:./math/pprz_orientation_conversion.h **** 
  99:./math/pprz_orientation_conversion.h ****   /**
 100:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
 101:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_TRIG_FRAC
 102:./math/pprz_orientation_conversion.h ****    */
 103:./math/pprz_orientation_conversion.h ****   struct Int32RMat rmat_i;
 104:./math/pprz_orientation_conversion.h **** 
 105:./math/pprz_orientation_conversion.h ****   /**
 106:./math/pprz_orientation_conversion.h ****    * Orientation as quaternion.
 107:./math/pprz_orientation_conversion.h ****    * Units: unit length quaternion
 108:./math/pprz_orientation_conversion.h ****    */
 109:./math/pprz_orientation_conversion.h ****   struct FloatQuat quat_f;
 110:./math/pprz_orientation_conversion.h **** 
 111:./math/pprz_orientation_conversion.h ****   /**
 112:./math/pprz_orientation_conversion.h ****    * Orienation in zyx euler angles.
 113:./math/pprz_orientation_conversion.h ****    * Units: rad
 114:./math/pprz_orientation_conversion.h ****    */
 115:./math/pprz_orientation_conversion.h ****   struct FloatEulers eulers_f;
 116:./math/pprz_orientation_conversion.h **** 
 117:./math/pprz_orientation_conversion.h ****   /**
 118:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
 119:./math/pprz_orientation_conversion.h ****    * Units: rad
 120:./math/pprz_orientation_conversion.h ****    */
 121:./math/pprz_orientation_conversion.h ****   struct FloatRMat   rmat_f;
 122:./math/pprz_orientation_conversion.h **** };
 123:./math/pprz_orientation_conversion.h **** 
 124:./math/pprz_orientation_conversion.h **** /************* declaration of transformation functions ************/
 125:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_i(struct OrientationReps *orientation);
 126:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_i(struct OrientationReps *orientation);
 127:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_i(struct OrientationReps *orientation);
 128:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_f(struct OrientationReps *orientation);
 129:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_f(struct OrientationReps *orientation);
 130:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_f(struct OrientationReps *orientation);
 131:./math/pprz_orientation_conversion.h **** 
 132:./math/pprz_orientation_conversion.h **** 
 133:./math/pprz_orientation_conversion.h **** /*********************** validity test functions ******************/
 134:./math/pprz_orientation_conversion.h **** /// Test if orientations are valid.
 135:./math/pprz_orientation_conversion.h **** static inline bool_t orienationCheckValid(struct OrientationReps *orientation)
 136:./math/pprz_orientation_conversion.h **** {
 137:./math/pprz_orientation_conversion.h ****   return (orientation->status);
 138:./math/pprz_orientation_conversion.h **** }
 139:./math/pprz_orientation_conversion.h **** 
 140:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (int).
 141:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_i(struct OrientationReps *orientation, struct Int32Quat *quat
 142:./math/pprz_orientation_conversion.h **** {
 143:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 144:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 145:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_I);
 146:./math/pprz_orientation_conversion.h **** }
 147:./math/pprz_orientation_conversion.h **** 
 148:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (int).
 149:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_i(struct OrientationReps *orientation, struct Int32RMat *rmat
 150:./math/pprz_orientation_conversion.h **** {
 151:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_i, *rmat);
 152:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 153:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_I);
 154:./math/pprz_orientation_conversion.h **** }
 155:./math/pprz_orientation_conversion.h **** 
 156:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (int).
 157:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_i(struct OrientationReps *orientation, struct Int32Eulers *
 158:./math/pprz_orientation_conversion.h **** {
 159:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_i, *eulers);
 160:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 161:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_I);
 162:./math/pprz_orientation_conversion.h **** }
 163:./math/pprz_orientation_conversion.h **** 
 164:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (float).
 165:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_f(struct OrientationReps *orientation, struct FloatQuat *quat
 166:./math/pprz_orientation_conversion.h **** {
 167:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_f, *quat);
 168:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 169:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_F);
 170:./math/pprz_orientation_conversion.h **** }
 171:./math/pprz_orientation_conversion.h **** 
 172:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (float).
 173:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_f(struct OrientationReps *orientation, struct FloatRMat *rmat
 174:./math/pprz_orientation_conversion.h **** {
 175:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_f, *rmat);
 176:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 177:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_F);
 178:./math/pprz_orientation_conversion.h **** }
 179:./math/pprz_orientation_conversion.h **** 
 180:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (float).
 181:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_f(struct OrientationReps *orientation, struct FloatEulers *
 182:./math/pprz_orientation_conversion.h **** {
 183:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_f, *eulers);
 184:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 185:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_F);
 186:./math/pprz_orientation_conversion.h **** }
 187:./math/pprz_orientation_conversion.h **** 
 188:./math/pprz_orientation_conversion.h **** 
 189:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (int).
 190:./math/pprz_orientation_conversion.h **** static inline struct Int32Quat *orientationGetQuat_i(struct OrientationReps *orientation)
 191:./math/pprz_orientation_conversion.h **** {
 192:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_I)) {
 193:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_i(orientation);
 194:./math/pprz_orientation_conversion.h ****   }
 195:./math/pprz_orientation_conversion.h ****   return &orientation->quat_i;
 196:./math/pprz_orientation_conversion.h **** }
 197:./math/pprz_orientation_conversion.h **** 
 198:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (int).
 199:./math/pprz_orientation_conversion.h **** static inline struct Int32RMat *orientationGetRMat_i(struct OrientationReps *orientation)
 200:./math/pprz_orientation_conversion.h **** {
 201:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_I)) {
 202:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_i(orientation);
 203:./math/pprz_orientation_conversion.h ****   }
 204:./math/pprz_orientation_conversion.h ****   return &orientation->rmat_i;
 205:./math/pprz_orientation_conversion.h **** }
 206:./math/pprz_orientation_conversion.h **** 
 207:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude euler angles (int).
 208:./math/pprz_orientation_conversion.h **** static inline struct Int32Eulers *orientationGetEulers_i(struct OrientationReps *orientation)
 209:./math/pprz_orientation_conversion.h **** {
 210:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_I)) {
 211:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_i(orientation);
 212:./math/pprz_orientation_conversion.h ****   }
 213:./math/pprz_orientation_conversion.h ****   return &orientation->eulers_i;
 214:./math/pprz_orientation_conversion.h **** }
 215:./math/pprz_orientation_conversion.h **** 
 216:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (float).
 217:./math/pprz_orientation_conversion.h **** static inline struct FloatQuat *orientationGetQuat_f(struct OrientationReps *orientation)
 218:./math/pprz_orientation_conversion.h **** {
 219:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_F)) {
 220:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_f(orientation);
 221:./math/pprz_orientation_conversion.h ****   }
 222:./math/pprz_orientation_conversion.h ****   return &orientation->quat_f;
 223:./math/pprz_orientation_conversion.h **** }
 224:./math/pprz_orientation_conversion.h **** 
 225:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (float).
 226:./math/pprz_orientation_conversion.h **** static inline struct FloatRMat *orientationGetRMat_f(struct OrientationReps *orientation)
 227:./math/pprz_orientation_conversion.h **** {
 228:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_F)) {
 229:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_f(orientation);
 230:./math/pprz_orientation_conversion.h ****   }
 231:./math/pprz_orientation_conversion.h ****   return &orientation->rmat_f;
 232:./math/pprz_orientation_conversion.h **** }
 233:./math/pprz_orientation_conversion.h **** 
 234:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude euler angles (float).
 235:./math/pprz_orientation_conversion.h **** static inline struct FloatEulers *orientationGetEulers_f(struct OrientationReps *orientation)
 211              		.loc 4 235 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              	.LVL18:
 216 0000 08B5     		push	{r3, lr}
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 3, -8
 219              		.cfi_offset 14, -4
 236:./math/pprz_orientation_conversion.h **** {
 237:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_F)) {
 220              		.loc 4 237 0
 221 0002 0548     		ldr	r0, .L14
 222 0004 90F8A431 		ldrb	r3, [r0, #420]	@ zero_extendqisi2
 223 0008 DB06     		lsls	r3, r3, #27
 224 000a 03D4     		bmi	.L13
 238:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_f(orientation);
 225              		.loc 4 238 0
 226 000c 00F5D270 		add	r0, r0, #420
 227 0010 FFF7FEFF 		bl	orientationCalcEulers_f
 228              	.LVL19:
 229              	.L13:
 239:./math/pprz_orientation_conversion.h ****   }
 240:./math/pprz_orientation_conversion.h ****   return &orientation->eulers_f;
 241:./math/pprz_orientation_conversion.h **** }
 230              		.loc 4 241 0
 231 0014 0148     		ldr	r0, .L14+4
 232 0016 08BD     		pop	{r3, pc}
 233              	.L15:
 234              		.align	2
 235              	.L14:
 236 0018 00000000 		.word	state
 237 001c F8010000 		.word	state+504
 238              		.cfi_endproc
 239              	.LFE459:
 241              		.section	.text.h_ctl_init,"ax",%progbits
 242              		.align	1
 243              		.global	h_ctl_init
 244              		.thumb
 245              		.thumb_func
 247              	h_ctl_init:
 248              	.LFB454:
 133:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 134:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 135:firmwares/fixedwing/stabilization/stabilization_attitude.c **** void h_ctl_init(void)
 136:firmwares/fixedwing/stabilization/stabilization_attitude.c **** {
 249              		.loc 2 136 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 137:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_setpoint = 0.;
 254              		.loc 2 137 0
 255 0000 1B4A     		ldr	r2, .L17
 138:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_pre_bank = 0.;
 139:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_pre_bank_correction = H_CTL_COURSE_PRE_BANK_CORRECTION;
 256              		.loc 2 139 0
 257 0002 1C49     		ldr	r1, .L17+4
 140:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_pgain = H_CTL_COURSE_PGAIN;
 141:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_dgain = H_CTL_COURSE_DGAIN;
 142:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_max_setpoint = H_CTL_ROLL_MAX_SETPOINT;
 143:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 144:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef USE_AOA
 145:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_pitch_mode = 0;
 146:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 147:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 148:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_disabled = FALSE;
 149:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 150:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_setpoint = 0.;
 151:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_ROLL_PGAIN
 152:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_pgain = H_CTL_ROLL_PGAIN;
 153:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 154:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_aileron_setpoint = 0;
 155:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_AILERON_OF_THROTTLE
 156:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_aileron_of_throttle = H_CTL_AILERON_OF_THROTTLE;
 157:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 158:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 159:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_pitch_setpoint = 0.;
 160:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_pitch_loop_setpoint = 0.;
 161:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_pitch_pgain = H_CTL_PITCH_PGAIN;
 258              		.loc 2 161 0
 259 0004 1C48     		ldr	r0, .L17+8
 137:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_pre_bank = 0.;
 260              		.loc 2 137 0
 261 0006 0023     		movs	r3, #0
 262 0008 1360     		str	r3, [r2]	@ float
 138:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_pre_bank = 0.;
 263              		.loc 2 138 0
 264 000a 1C4A     		ldr	r2, .L17+12
 265 000c 1360     		str	r3, [r2]	@ float
 139:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_pgain = H_CTL_COURSE_PGAIN;
 266              		.loc 2 139 0
 267 000e 4FF07E52 		mov	r2, #1065353216
 268 0012 0A60     		str	r2, [r1]	@ float
 140:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_pgain = H_CTL_COURSE_PGAIN;
 269              		.loc 2 140 0
 270 0014 1A49     		ldr	r1, .L17+16
 271 0016 0A60     		str	r2, [r1]	@ float
 141:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_max_setpoint = H_CTL_ROLL_MAX_SETPOINT;
 272              		.loc 2 141 0
 273 0018 1A4A     		ldr	r2, .L17+20
 274 001a 1B49     		ldr	r1, .L17+24
 275 001c 1160     		str	r1, [r2]	@ float
 142:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 276              		.loc 2 142 0
 277 001e 1B4A     		ldr	r2, .L17+28
 278 0020 1B49     		ldr	r1, .L17+32
 279 0022 1160     		str	r1, [r2]	@ float
 148:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 280              		.loc 2 148 0
 281 0024 1B49     		ldr	r1, .L17+36
 282 0026 0022     		movs	r2, #0
 283 0028 0A70     		strb	r2, [r1]
 150:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_ROLL_PGAIN
 284              		.loc 2 150 0
 285 002a 1B49     		ldr	r1, .L17+40
 286 002c 0B60     		str	r3, [r1]	@ float
 154:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_AILERON_OF_THROTTLE
 287              		.loc 2 154 0
 288 002e 1B49     		ldr	r1, .L17+44
 289 0030 0A80     		strh	r2, [r1]	@ movhi
 159:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_pitch_loop_setpoint = 0.;
 290              		.loc 2 159 0
 291 0032 1B49     		ldr	r1, .L17+48
 292 0034 0B60     		str	r3, [r1]	@ float
 160:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_pitch_pgain = H_CTL_PITCH_PGAIN;
 293              		.loc 2 160 0
 294 0036 1B49     		ldr	r1, .L17+52
 295 0038 0B60     		str	r3, [r1]	@ float
 296              		.loc 2 161 0
 297 003a 1B49     		ldr	r1, .L17+56
 298 003c 0860     		str	r0, [r1]	@ float
 162:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_pitch_dgain = H_CTL_PITCH_DGAIN;
 299              		.loc 2 162 0
 300 003e 1B49     		ldr	r1, .L17+60
 301 0040 4FF07F50 		mov	r0, #1069547520
 302 0044 0860     		str	r0, [r1]	@ float
 163:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_elevator_setpoint = 0;
 303              		.loc 2 163 0
 304 0046 1A49     		ldr	r1, .L17+64
 164:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_elevator_of_roll = H_CTL_ELEVATOR_OF_ROLL;
 165:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 166:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_RATE_LOOP
 167:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_rate_mode = H_CTL_ROLL_RATE_MODE_DEFAULT;
 168:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_rate_setpoint_pgain = H_CTL_ROLL_RATE_SETPOINT_PGAIN;
 169:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_hi_throttle_roll_rate_pgain = H_CTL_HI_THROTTLE_ROLL_RATE_PGAIN;
 170:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_lo_throttle_roll_rate_pgain = H_CTL_LO_THROTTLE_ROLL_RATE_PGAIN;
 171:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_rate_igain = H_CTL_ROLL_RATE_IGAIN;
 172:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_rate_dgain = H_CTL_ROLL_RATE_DGAIN;
 173:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 174:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 175:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_ROLL_SLEW
 176:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_slew = H_CTL_ROLL_SLEW;
 177:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 178:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 179:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_COURSE_SLEW_INCREMENT
 180:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_course_slew_increment = H_CTL_COURSE_SLEW_INCREMENT;
 181:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 182:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 183:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_ROLL_ATTITUDE_GAIN
 184:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_attitude_gain = H_CTL_ROLL_ATTITUDE_GAIN;
 185:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_rate_gain = H_CTL_ROLL_RATE_GAIN;
 186:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 187:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 188:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef AGR_CLIMB
 189:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   nav_ratio = 0;
 190:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 191:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 192:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #if PERIODIC_TELEMETRY
 193:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   register_periodic_telemetry(DefaultPeriodic, "CALIBRATION", send_calibration);
 305              		.loc 2 193 0
 306 0048 1A48     		ldr	r0, .L17+68
 163:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_elevator_setpoint = 0;
 307              		.loc 2 163 0
 308 004a 0A80     		strh	r2, [r1]	@ movhi
 164:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_elevator_of_roll = H_CTL_ELEVATOR_OF_ROLL;
 309              		.loc 2 164 0
 310 004c 1A4A     		ldr	r2, .L17+72
 311 004e 1B49     		ldr	r1, .L17+76
 312 0050 1160     		str	r1, [r2]	@ float
 176:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 313              		.loc 2 176 0
 314 0052 1B4A     		ldr	r2, .L17+80
 315 0054 1B49     		ldr	r1, .L17+84
 316 0056 1160     		str	r1, [r2]	@ float
 184:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_rate_gain = H_CTL_ROLL_RATE_GAIN;
 317              		.loc 2 184 0
 318 0058 1B4A     		ldr	r2, .L17+88
 319 005a 1C49     		ldr	r1, .L17+92
 320 005c 1160     		str	r1, [r2]	@ float
 185:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 321              		.loc 2 185 0
 322 005e 1C4A     		ldr	r2, .L17+96
 323 0060 1C49     		ldr	r1, .L17+100
 324 0062 1160     		str	r1, [r2]	@ float
 189:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 325              		.loc 2 189 0
 326 0064 1C4A     		ldr	r2, .L17+104
 327              		.loc 2 193 0
 328 0066 1D49     		ldr	r1, .L17+108
 189:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 329              		.loc 2 189 0
 330 0068 1360     		str	r3, [r2]	@ float
 331              		.loc 2 193 0
 332 006a 1D4A     		ldr	r2, .L17+112
 333 006c FFF7FEBF 		b	register_periodic_telemetry
 334              	.LVL20:
 335              	.L18:
 336              		.align	2
 337              	.L17:
 338 0070 00000000 		.word	.LANCHOR0
 339 0074 00000000 		.word	.LANCHOR2
 340 0078 00803B46 		.word	1178304512
 341 007c 00000000 		.word	.LANCHOR1
 342 0080 00000000 		.word	.LANCHOR3
 343 0084 00000000 		.word	.LANCHOR4
 344 0088 9A99993E 		.word	1050253722
 345 008c 00000000 		.word	.LANCHOR5
 346 0090 AA611C3F 		.word	1058824618
 347 0094 00000000 		.word	.LANCHOR6
 348 0098 00000000 		.word	.LANCHOR7
 349 009c 00000000 		.word	.LANCHOR8
 350 00a0 00000000 		.word	.LANCHOR9
 351 00a4 00000000 		.word	.LANCHOR10
 352 00a8 00000000 		.word	.LANCHOR11
 353 00ac 00000000 		.word	.LANCHOR12
 354 00b0 00000000 		.word	.LANCHOR13
 355 00b4 00000000 		.word	pprz_telemetry
 356 00b8 00000000 		.word	.LANCHOR14
 357 00bc 00409C44 		.word	1151090688
 358 00c0 00000000 		.word	.LANCHOR15
 359 00c4 CDCCCC3D 		.word	1036831949
 360 00c8 00000000 		.word	.LANCHOR16
 361 00cc 0060EA45 		.word	1172987904
 362 00d0 00000000 		.word	.LANCHOR17
 363 00d4 0080BB44 		.word	1153138688
 364 00d8 00000000 		.word	.LANCHOR18
 365 00dc 00000000 		.word	.LC0
 366 00e0 00000000 		.word	send_calibration
 367              		.cfi_endproc
 368              	.LFE454:
 370              		.global	__aeabi_dsub
 371              		.global	__aeabi_d2f
 372              		.global	__aeabi_f2d
 373              		.global	__aeabi_dcmpgt
 374              		.global	__aeabi_dadd
 375              		.global	__aeabi_dcmplt
 376              		.global	__aeabi_dmul
 377              		.global	__aeabi_ddiv
 378              		.section	.text.h_ctl_course_loop,"ax",%progbits
 379              		.align	1
 380              		.global	h_ctl_course_loop
 381              		.thumb
 382              		.thumb_func
 384              	h_ctl_course_loop:
 385              	.LFB455:
 194:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 195:firmwares/fixedwing/stabilization/stabilization_attitude.c **** }
 196:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 197:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /**
 198:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  * \brief
 199:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  *
 200:firmwares/fixedwing/stabilization/stabilization_attitude.c ****  */
 201:firmwares/fixedwing/stabilization/stabilization_attitude.c **** void h_ctl_course_loop(void)
 202:firmwares/fixedwing/stabilization/stabilization_attitude.c **** {
 386              		.loc 2 202 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390 0000 70B5     		push	{r4, r5, r6, lr}
 391              		.cfi_def_cfa_offset 16
 392              		.cfi_offset 4, -16
 393              		.cfi_offset 5, -12
 394              		.cfi_offset 6, -8
 395              		.cfi_offset 14, -4
 396              	.LBB13:
 397              	.LBB14:
 919:./state.h     **** 
 920:./state.h     **** /// Get dir of horizontal ground speed (float).
 921:./state.h     **** static inline float *stateGetHorizontalSpeedDir_f(void)
 922:./state.h     **** {
 923:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_F)) {
 398              		.loc 1 923 0
 399 0002 CF4B     		ldr	r3, .L77+48
 400 0004 B3F81421 		ldrh	r2, [r3, #276]
 401 0008 12F4007F 		tst	r2, #512
 402              	.LBE14:
 403              	.LBE13:
 404              		.loc 2 202 0
 405 000c 2DED048B 		fstmfdd	sp!, {d8, d9}
 406              		.cfi_def_cfa_offset 32
 407              		.cfi_offset 80, -32
 408              		.cfi_offset 81, -28
 409              		.cfi_offset 82, -24
 410              		.cfi_offset 83, -20
 411 0010 1C46     		mov	r4, r3
 412              	.LBB16:
 413              	.LBB15:
 414              		.loc 1 923 0
 415 0012 01D1     		bne	.L20
 924:./state.h     ****     stateCalcHorizontalSpeedDir_f();
 416              		.loc 1 924 0
 417 0014 FFF7FEFF 		bl	stateCalcHorizontalSpeedDir_f
 418              	.LVL21:
 419              	.L20:
 420              	.LBE15:
 421              	.LBE16:
 203:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   static float last_err;
 204:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 205:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   // Ground path error
 206:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float err = *stateGetHorizontalSpeedDir_f() - h_ctl_course_setpoint;
 422              		.loc 2 206 0
 423 0018 CA4B     		ldr	r3, .L77+52
 424 001a D4ED5B7A 		flds	s15, [r4, #364]
 425 001e D3ED008A 		flds	s17, [r3]
 426 0022 77EEE88A 		fsubs	s17, s15, s17
 427              	.LVL22:
 428 0026 1E46     		mov	r6, r3
 429              	.L21:
 207:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   NormRadAngle(err);
 430              		.loc 2 207 0 discriminator 1
 431 0028 18EE900A 		fmrs	r0, s17
 432 002c FFF7FEFF 		bl	__aeabi_f2d
 433              	.LVL23:
 434 0030 B7A3     		adr	r3, .L77
 435 0032 D3E90023 		ldrd	r2, [r3]
 436 0036 0446     		mov	r4, r0
 437 0038 0D46     		mov	r5, r1
 438 003a FFF7FEFF 		bl	__aeabi_dcmpgt
 439              	.LVL24:
 440 003e 58B1     		cbz	r0, .L23
 441              		.loc 2 207 0 is_stmt 0 discriminator 2
 442 0040 B5A3     		adr	r3, .L77+8
 443 0042 D3E90023 		ldrd	r2, [r3]
 444 0046 2046     		mov	r0, r4
 445 0048 2946     		mov	r1, r5
 446 004a FFF7FEFF 		bl	__aeabi_dsub
 447              	.LVL25:
 448 004e FFF7FEFF 		bl	__aeabi_d2f
 449              	.LVL26:
 450 0052 08EE900A 		fmsr	s17, r0
 451              	.LVL27:
 452 0056 E7E7     		b	.L21
 453              	.LVL28:
 454              	.L23:
 455              		.loc 2 207 0 discriminator 3
 456 0058 18EE900A 		fmrs	r0, s17
 457 005c FFF7FEFF 		bl	__aeabi_f2d
 458              	.LVL29:
 459 0060 AFA3     		adr	r3, .L77+16
 460 0062 D3E90023 		ldrd	r2, [r3]
 461 0066 0446     		mov	r4, r0
 462 0068 0D46     		mov	r5, r1
 463 006a FFF7FEFF 		bl	__aeabi_dcmplt
 464              	.LVL30:
 465 006e 58B1     		cbz	r0, .L74
 466              		.loc 2 207 0 discriminator 4
 467 0070 A9A3     		adr	r3, .L77+8
 468 0072 D3E90023 		ldrd	r2, [r3]
 469 0076 2046     		mov	r0, r4
 470 0078 2946     		mov	r1, r5
 471 007a FFF7FEFF 		bl	__aeabi_dadd
 472              	.LVL31:
 473 007e FFF7FEFF 		bl	__aeabi_d2f
 474              	.LVL32:
 475 0082 08EE900A 		fmsr	s17, r0
 476              	.LVL33:
 477 0086 E7E7     		b	.L23
 478              	.LVL34:
 479              	.L74:
 208:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 209:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef STRONG_WIND
 210:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   // Usefull path speed
 211:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   const float reference_advance = (NOMINAL_AIRSPEED / 2.);
 212:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float advance = cos(err) * (*stateGetHorizontalSpeedNorm_f()) / reference_advance;
 480              		.loc 2 212 0 is_stmt 1
 481 0088 2046     		mov	r0, r4
 482 008a 2946     		mov	r1, r5
 483 008c FFF7FEFF 		bl	cos
 484              	.LVL35:
 485 0090 0D46     		mov	r5, r1
 486 0092 0446     		mov	r4, r0
 487 0094 FFF7FEFF 		bl	stateGetHorizontalSpeedNorm_f
 488              	.LVL36:
 489 0098 0068     		ldr	r0, [r0]	@ float
 490 009a FFF7FEFF 		bl	__aeabi_f2d
 491              	.LVL37:
 492 009e 0246     		mov	r2, r0
 493 00a0 0B46     		mov	r3, r1
 494 00a2 2046     		mov	r0, r4
 495 00a4 2946     		mov	r1, r5
 496 00a6 FFF7FEFF 		bl	__aeabi_dmul
 497              	.LVL38:
 498 00aa 0022     		movs	r2, #0
 499 00ac A64B     		ldr	r3, .L77+56
 500 00ae FFF7FEFF 		bl	__aeabi_ddiv
 501              	.LVL39:
 502 00b2 FFF7FEFF 		bl	__aeabi_d2f
 503              	.LVL40:
 504 00b6 09EE100A 		fmsr	s18, r0
 213:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 214:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   if (
 505              		.loc 2 214 0
 506 00ba F7EE009A 		fconsts	s19, #112
 507 00be B4EEE99A 		fcmpes	s18, s19
 508 00c2 F1EE10FA 		fmstat
 509 00c6 B0EE688A 		fcpys	s16, s17
 510              	.LVL41:
 511 00ca 63D5     		bpl	.L25
 512              	.LVL42:
 215:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     (advance < 1.)  &&                          // Path speed is small
 216:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     ((*stateGetHorizontalSpeedNorm_f()) < reference_advance)  // Small path speed is due to wind (s
 513              		.loc 2 216 0
 514 00cc FFF7FEFF 		bl	stateGetHorizontalSpeedNorm_f
 515              	.LVL43:
 215:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     (advance < 1.)  &&                          // Path speed is small
 516              		.loc 2 215 0
 517 00d0 90ED007A 		flds	s14, [r0]
 518 00d4 F1EE0E7A 		fconsts	s15, #30
 519 00d8 B4EEE77A 		fcmpes	s14, s15
 520 00dc F1EE10FA 		fmstat
 521 00e0 58D5     		bpl	.L25
 522              	.LBB17:
 523              	.LBB18:
 524              	.LBB19:
 925:./state.h     ****   }
 926:./state.h     ****   return &state.h_speed_dir_f;
 927:./state.h     **** }
 928:./state.h     **** /** @}*/
 929:./state.h     **** 
 930:./state.h     **** 
 931:./state.h     **** 
 932:./state.h     **** /******************************************************************************
 933:./state.h     ****  *                                                                            *
 934:./state.h     ****  * Set and Get functions for the ACCELERATION representations                 *
 935:./state.h     ****  *                                                                            *
 936:./state.h     ****  *****************************************************************************/
 937:./state.h     **** /** @addtogroup state_acceleration
 938:./state.h     ****  *  @{ */
 939:./state.h     **** 
 940:./state.h     **** /************* declaration of transformation functions ************/
 941:./state.h     **** extern void stateCalcAccelNed_i(void);
 942:./state.h     **** extern void stateCalcAccelEcef_i(void);
 943:./state.h     **** extern void stateCalcAccelNed_f(void);
 944:./state.h     **** extern void stateCalcAccelEcef_f(void);
 945:./state.h     **** 
 946:./state.h     **** /*********************** validity test functions ******************/
 947:./state.h     **** 
 948:./state.h     **** /// Test if accelerations are valid.
 949:./state.h     **** static inline bool_t stateIsAccelValid(void)
 950:./state.h     **** {
 951:./state.h     ****   return (state.accel_status);
 952:./state.h     **** }
 953:./state.h     **** 
 954:./state.h     **** /************************ Set functions ****************************/
 955:./state.h     **** 
 956:./state.h     **** /// Set acceleration in NED coordinates (int).
 957:./state.h     **** static inline void stateSetAccelNed_i(struct NedCoor_i *ned_accel)
 958:./state.h     **** {
 959:./state.h     ****   VECT3_COPY(state.ned_accel_i, *ned_accel);
 960:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 961:./state.h     ****   state.accel_status = (1 << ACCEL_NED_I);
 962:./state.h     **** }
 963:./state.h     **** 
 964:./state.h     **** /// Set acceleration in ECEF coordinates (int).
 965:./state.h     **** static inline void stateSetAccelEcef_i(struct EcefCoor_i *ecef_accel)
 966:./state.h     **** {
 967:./state.h     ****   VECT3_COPY(state.ecef_accel_i, *ecef_accel);
 968:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 969:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_I);
 970:./state.h     **** }
 971:./state.h     **** 
 972:./state.h     **** /// Set acceleration in NED coordinates (float).
 973:./state.h     **** static inline void stateSetAccelNed_f(struct NedCoor_f *ned_accel)
 974:./state.h     **** {
 975:./state.h     ****   VECT3_COPY(state.ned_accel_f, *ned_accel);
 976:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 977:./state.h     ****   state.accel_status = (1 << ACCEL_NED_F);
 978:./state.h     **** }
 979:./state.h     **** 
 980:./state.h     **** /// Set acceleration in ECEF coordinates (float).
 981:./state.h     **** static inline void stateSetAccelEcef_f(struct EcefCoor_f *ecef_accel)
 982:./state.h     **** {
 983:./state.h     ****   VECT3_COPY(state.ecef_accel_f, *ecef_accel);
 984:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 985:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_F);
 986:./state.h     **** }
 987:./state.h     **** 
 988:./state.h     **** /************************ Get functions ****************************/
 989:./state.h     **** 
 990:./state.h     **** /// Get acceleration in NED coordinates (int).
 991:./state.h     **** static inline struct NedCoor_i *stateGetAccelNed_i(void)
 992:./state.h     **** {
 993:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_I)) {
 994:./state.h     ****     stateCalcAccelNed_i();
 995:./state.h     ****   }
 996:./state.h     ****   return &state.ned_accel_i;
 997:./state.h     **** }
 998:./state.h     **** 
 999:./state.h     **** /// Get acceleration in ECEF coordinates (int).
1000:./state.h     **** static inline struct EcefCoor_i *stateGetAccelEcef_i(void)
1001:./state.h     **** {
1002:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_I)) {
1003:./state.h     ****     stateCalcAccelEcef_i();
1004:./state.h     ****   }
1005:./state.h     ****   return &state.ecef_accel_i;
1006:./state.h     **** }
1007:./state.h     **** 
1008:./state.h     **** /// Get acceleration in NED coordinates (float).
1009:./state.h     **** static inline struct NedCoor_f *stateGetAccelNed_f(void)
1010:./state.h     **** {
1011:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_F)) {
1012:./state.h     ****     stateCalcAccelNed_f();
1013:./state.h     ****   }
1014:./state.h     ****   return &state.ned_accel_f;
1015:./state.h     **** }
1016:./state.h     **** 
1017:./state.h     **** /// Get acceleration in ECEF coordinates (float).
1018:./state.h     **** static inline struct EcefCoor_f *stateGetAccelEcef_f(void)
1019:./state.h     **** {
1020:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_F)) {
1021:./state.h     ****     stateCalcAccelEcef_f();
1022:./state.h     ****   }
1023:./state.h     ****   return &state.ecef_accel_f;
1024:./state.h     **** }
1025:./state.h     **** /** @}*/
1026:./state.h     **** 
1027:./state.h     **** /******************************************************************************
1028:./state.h     **** *                                                                             *
1029:./state.h     **** * Set and Get functions for the ATTITUDE representations                      *
1030:./state.h     **** * (Calls the functions in math/pprz_orientation_conversion)                   *
1031:./state.h     **** *                                                                             *
1032:./state.h     **** *****************************************************************************/
1033:./state.h     **** /** @addtogroup state_attitude
1034:./state.h     **** * @{ */
1035:./state.h     **** /*********************** validity test functions ******************/
1036:./state.h     **** 
1037:./state.h     **** /// Test if attitudes are valid.
1038:./state.h     **** static inline bool_t stateIsAttitudeValid(void)
1039:./state.h     **** {
1040:./state.h     ****   return (orienationCheckValid(&state.ned_to_body_orientation));
1041:./state.h     **** }
1042:./state.h     **** 
1043:./state.h     **** /************************ Set functions ****************************/
1044:./state.h     **** 
1045:./state.h     **** /// Set vehicle body attitude from quaternion (int).
1046:./state.h     **** static inline void stateSetNedToBodyQuat_i(struct Int32Quat *ned_to_body_quat)
1047:./state.h     **** {
1048:./state.h     ****   orientationSetQuat_i(&state.ned_to_body_orientation, ned_to_body_quat);
1049:./state.h     **** }
1050:./state.h     **** 
1051:./state.h     **** /// Set vehicle body attitude from rotation matrix (int).
1052:./state.h     **** static inline void stateSetNedToBodyRMat_i(struct Int32RMat *ned_to_body_rmat)
1053:./state.h     **** {
1054:./state.h     ****   orientationSetRMat_i(&state.ned_to_body_orientation, ned_to_body_rmat);
1055:./state.h     **** }
1056:./state.h     **** 
1057:./state.h     **** /// Set vehicle body attitude from euler angles (int).
1058:./state.h     **** static inline void stateSetNedToBodyEulers_i(struct Int32Eulers *ned_to_body_eulers)
1059:./state.h     **** {
1060:./state.h     ****   orientationSetEulers_i(&state.ned_to_body_orientation, ned_to_body_eulers);
1061:./state.h     **** }
1062:./state.h     **** 
1063:./state.h     **** /// Set vehicle body attitude from quaternion (float).
1064:./state.h     **** static inline void stateSetNedToBodyQuat_f(struct FloatQuat *ned_to_body_quat)
1065:./state.h     **** {
1066:./state.h     ****   orientationSetQuat_f(&state.ned_to_body_orientation, ned_to_body_quat);
1067:./state.h     **** }
1068:./state.h     **** 
1069:./state.h     **** /// Set vehicle body attitude from rotation matrix (float).
1070:./state.h     **** static inline void stateSetNedToBodyRMat_f(struct FloatRMat *ned_to_body_rmat)
1071:./state.h     **** {
1072:./state.h     ****   orientationSetRMat_f(&state.ned_to_body_orientation, ned_to_body_rmat);
1073:./state.h     **** }
1074:./state.h     **** 
1075:./state.h     **** /// Set vehicle body attitude from euler angles (float).
1076:./state.h     **** static inline void stateSetNedToBodyEulers_f(struct FloatEulers *ned_to_body_eulers)
1077:./state.h     **** {
1078:./state.h     ****   orientationSetEulers_f(&state.ned_to_body_orientation, ned_to_body_eulers);
1079:./state.h     **** }
1080:./state.h     **** 
1081:./state.h     **** /************************ Get functions ****************************/
1082:./state.h     **** 
1083:./state.h     **** /// Get vehicle body attitude quaternion (int).
1084:./state.h     **** static inline struct Int32Quat *stateGetNedToBodyQuat_i(void)
1085:./state.h     **** {
1086:./state.h     ****   return orientationGetQuat_i(&state.ned_to_body_orientation);
1087:./state.h     **** }
1088:./state.h     **** 
1089:./state.h     **** /// Get vehicle body attitude rotation matrix (int).
1090:./state.h     **** static inline struct Int32RMat *stateGetNedToBodyRMat_i(void)
1091:./state.h     **** {
1092:./state.h     ****   return orientationGetRMat_i(&state.ned_to_body_orientation);
1093:./state.h     **** }
1094:./state.h     **** 
1095:./state.h     **** /// Get vehicle body attitude euler angles (int).
1096:./state.h     **** static inline struct Int32Eulers *stateGetNedToBodyEulers_i(void)
1097:./state.h     **** {
1098:./state.h     ****   return orientationGetEulers_i(&state.ned_to_body_orientation);
1099:./state.h     **** }
1100:./state.h     **** 
1101:./state.h     **** /// Get vehicle body attitude quaternion (float).
1102:./state.h     **** static inline struct FloatQuat *stateGetNedToBodyQuat_f(void)
1103:./state.h     **** {
1104:./state.h     ****   return orientationGetQuat_f(&state.ned_to_body_orientation);
1105:./state.h     **** }
1106:./state.h     **** 
1107:./state.h     **** /// Get vehicle body attitude rotation matrix (float).
1108:./state.h     **** static inline struct FloatRMat *stateGetNedToBodyRMat_f(void)
1109:./state.h     **** {
1110:./state.h     ****   return orientationGetRMat_f(&state.ned_to_body_orientation);
1111:./state.h     **** }
1112:./state.h     **** 
1113:./state.h     **** /// Get vehicle body attitude euler angles (float).
1114:./state.h     **** static inline struct FloatEulers *stateGetNedToBodyEulers_f(void)
1115:./state.h     **** {
1116:./state.h     ****   return orientationGetEulers_f(&state.ned_to_body_orientation);
 525              		.loc 1 1116 0
 526 00e2 FFF7FEFF 		bl	orientationGetEulers_f.constprop.1
 527              	.LVL44:
 528              	.LBE19:
 529              	.LBE18:
 217:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   ) {
 218:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     /*
 219:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     // rough crabangle approximation
 220:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     float wind_mod = sqrt(wind_east*wind_east + wind_north*wind_north);
 221:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     float wind_dir = atan2(wind_east,wind_north);
 222:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 223:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     float wind_course = h_ctl_course_setpoint - wind_dir;
 224:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     NormRadAngle(wind_course);
 225:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 226:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     estimator_hspeed_dir = estimator_psi;
 227:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 228:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     float crab = sin(wind_dir-estimator_psi) * atan2(wind_mod,NOMINAL_AIRSPEED);
 229:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     //crab = estimator_hspeed_mod - estimator_psi;
 230:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     NormRadAngle(crab);
 231:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     */
 232:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 233:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     // Heading error
 234:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     float herr = stateGetNedToBodyEulers_f()->psi - h_ctl_course_setpoint; //+crab);
 530              		.loc 2 234 0
 531 00e6 D6ED007A 		flds	s15, [r6]
 532 00ea 90ED028A 		flds	s16, [r0, #8]
 533              	.LVL45:
 534 00ee 38EE678A 		fsubs	s16, s16, s15
 535              	.LVL46:
 536              	.L28:
 235:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     NormRadAngle(herr);
 537              		.loc 2 235 0 discriminator 1
 538 00f2 18EE100A 		fmrs	r0, s16
 539 00f6 FFF7FEFF 		bl	__aeabi_f2d
 540              	.LVL47:
 541 00fa 85A3     		adr	r3, .L77
 542 00fc D3E90023 		ldrd	r2, [r3]
 543 0100 0446     		mov	r4, r0
 544 0102 0D46     		mov	r5, r1
 545 0104 FFF7FEFF 		bl	__aeabi_dcmpgt
 546              	.LVL48:
 547 0108 58B1     		cbz	r0, .L30
 548              		.loc 2 235 0 is_stmt 0 discriminator 2
 549 010a 83A3     		adr	r3, .L77+8
 550 010c D3E90023 		ldrd	r2, [r3]
 551 0110 2046     		mov	r0, r4
 552 0112 2946     		mov	r1, r5
 553 0114 FFF7FEFF 		bl	__aeabi_dsub
 554              	.LVL49:
 555 0118 FFF7FEFF 		bl	__aeabi_d2f
 556              	.LVL50:
 557 011c 08EE100A 		fmsr	s16, r0
 558              	.LVL51:
 559 0120 E7E7     		b	.L28
 560              	.LVL52:
 561              	.L30:
 562              		.loc 2 235 0 discriminator 3
 563 0122 18EE100A 		fmrs	r0, s16
 564 0126 FFF7FEFF 		bl	__aeabi_f2d
 565              	.LVL53:
 566 012a 7DA3     		adr	r3, .L77+16
 567 012c D3E90023 		ldrd	r2, [r3]
 568 0130 0446     		mov	r4, r0
 569 0132 0D46     		mov	r5, r1
 570 0134 FFF7FEFF 		bl	__aeabi_dcmplt
 571              	.LVL54:
 572 0138 58B1     		cbz	r0, .L75
 573              		.loc 2 235 0 discriminator 4
 574 013a 77A3     		adr	r3, .L77+8
 575 013c D3E90023 		ldrd	r2, [r3]
 576 0140 2046     		mov	r0, r4
 577 0142 2946     		mov	r1, r5
 578 0144 FFF7FEFF 		bl	__aeabi_dadd
 579              	.LVL55:
 580 0148 FFF7FEFF 		bl	__aeabi_d2f
 581              	.LVL56:
 582 014c 08EE100A 		fmsr	s16, r0
 583              	.LVL57:
 584 0150 E7E7     		b	.L30
 585              	.LVL58:
 586              	.L75:
 236:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 237:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     if (advance < -0.5) {            //<! moving in the wrong direction / big > 90 degree turn
 587              		.loc 2 237 0 is_stmt 1
 588 0152 FEEE007A 		fconsts	s15, #224
 589 0156 B4EEE79A 		fcmpes	s18, s15
 590 015a F1EE10FA 		fmstat
 591 015e 19D4     		bmi	.L25
 238:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       err = herr;
 239:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     } else if (advance < 0.) {       //<!
 592              		.loc 2 239 0
 593 0160 B5EEC09A 		fcmpezs	s18
 594 0164 F1EE10FA 		fmstat
 595 0168 12D5     		bpl	.L69
 240:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       err = (-advance) * 2. * herr;
 596              		.loc 2 240 0
 597 016a F1EE497A 		fnegs	s15, s18
 598 016e 17EE900A 		fmrs	r0, s15
 599 0172 FFF7FEFF 		bl	__aeabi_f2d
 600              	.LVL59:
 601 0176 0246     		mov	r2, r0
 602 0178 0B46     		mov	r3, r1
 603 017a FFF7FEFF 		bl	__aeabi_dadd
 604              	.LVL60:
 605 017e 2246     		mov	r2, r4
 606 0180 2B46     		mov	r3, r5
 607 0182 FFF7FEFF 		bl	__aeabi_dmul
 608              	.LVL61:
 609 0186 FFF7FEFF 		bl	__aeabi_d2f
 610              	.LVL62:
 611 018a 08EE100A 		fmsr	s16, r0
 612              	.LVL63:
 613 018e 01E0     		b	.L25
 614              	.LVL64:
 615              	.L69:
 241:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     } else {
 242:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       err = advance * err;
 616              		.loc 2 242 0
 617 0190 29EE288A 		fmuls	s16, s18, s17
 618              	.LVL65:
 619              	.L25:
 620              	.LBE17:
 243:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     }
 244:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 245:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     // Reset differentiator when switching mode
 246:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     //if (h_ctl_course_heading_mode == 0)
 247:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     //  last_err = err;
 248:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     //h_ctl_course_heading_mode = 1;
 249:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   }
 250:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   /*  else
 251:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       {
 252:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       // Reset differentiator when switching mode
 253:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       if (h_ctl_course_heading_mode == 1)
 254:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       last_err = err;
 255:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       h_ctl_course_heading_mode = 0;
 256:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       }
 257:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   */
 258:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif //STRONG_WIND
 259:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 260:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float d_err = err - last_err;
 621              		.loc 2 260 0
 622 0194 6D4B     		ldr	r3, .L77+60
 623 0196 93ED009A 		flds	s18, [r3]
 624              	.LVL66:
 261:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   last_err = err;
 625              		.loc 2 261 0
 626 019a 83ED008A 		fsts	s16, [r3]
 260:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   last_err = err;
 627              		.loc 2 260 0
 628 019e 38EE499A 		fsubs	s18, s16, s18
 629              	.LVL67:
 630              	.L34:
 262:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 263:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   NormRadAngle(d_err);
 631              		.loc 2 263 0 discriminator 1
 632 01a2 19EE100A 		fmrs	r0, s18
 633 01a6 FFF7FEFF 		bl	__aeabi_f2d
 634              	.LVL68:
 635 01aa 59A3     		adr	r3, .L77
 636 01ac D3E90023 		ldrd	r2, [r3]
 637 01b0 0446     		mov	r4, r0
 638 01b2 0D46     		mov	r5, r1
 639 01b4 FFF7FEFF 		bl	__aeabi_dcmpgt
 640              	.LVL69:
 641 01b8 58B1     		cbz	r0, .L36
 642              		.loc 2 263 0 is_stmt 0 discriminator 2
 643 01ba 57A3     		adr	r3, .L77+8
 644 01bc D3E90023 		ldrd	r2, [r3]
 645 01c0 2046     		mov	r0, r4
 646 01c2 2946     		mov	r1, r5
 647 01c4 FFF7FEFF 		bl	__aeabi_dsub
 648              	.LVL70:
 649 01c8 FFF7FEFF 		bl	__aeabi_d2f
 650              	.LVL71:
 651 01cc 09EE100A 		fmsr	s18, r0
 652              	.LVL72:
 653 01d0 E7E7     		b	.L34
 654              	.LVL73:
 655              	.L36:
 656              		.loc 2 263 0 discriminator 3
 657 01d2 19EE100A 		fmrs	r0, s18
 658 01d6 FFF7FEFF 		bl	__aeabi_f2d
 659              	.LVL74:
 660 01da 51A3     		adr	r3, .L77+16
 661 01dc D3E90023 		ldrd	r2, [r3]
 662 01e0 0446     		mov	r4, r0
 663 01e2 0D46     		mov	r5, r1
 664 01e4 FFF7FEFF 		bl	__aeabi_dcmplt
 665              	.LVL75:
 666 01e8 58B1     		cbz	r0, .L76
 667              		.loc 2 263 0 discriminator 4
 668 01ea 4BA3     		adr	r3, .L77+8
 669 01ec D3E90023 		ldrd	r2, [r3]
 670 01f0 2046     		mov	r0, r4
 671 01f2 2946     		mov	r1, r5
 672 01f4 FFF7FEFF 		bl	__aeabi_dadd
 673              	.LVL76:
 674 01f8 FFF7FEFF 		bl	__aeabi_d2f
 675              	.LVL77:
 676 01fc 09EE100A 		fmsr	s18, r0
 677              	.LVL78:
 678 0200 E7E7     		b	.L36
 679              	.LVL79:
 680              	.L76:
 264:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 265:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_COURSE_SLEW_INCREMENT
 266:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   /* slew severe course changes (i.e. waypoint moves, block changes or perpendicular routes) */
 267:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   static float h_ctl_course_slew_rate = 0.;
 268:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float nav_angle_saturation = h_ctl_roll_max_setpoint / h_ctl_course_pgain; /* heading error corre
 269:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float half_nav_angle_saturation = nav_angle_saturation / 2.;
 270:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   if (launch) {  /* prevent accumulator run-up on the ground */
 271:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     if (err > half_nav_angle_saturation) {
 272:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       h_ctl_course_slew_rate = Max(h_ctl_course_slew_rate, 0.);
 273:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       err = Min(err, (half_nav_angle_saturation + h_ctl_course_slew_rate));
 274:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       h_ctl_course_slew_rate += h_ctl_course_slew_increment;
 275:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     } else if (err < -half_nav_angle_saturation) {
 276:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       h_ctl_course_slew_rate = Min(h_ctl_course_slew_rate, 0.);
 277:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       err = Max(err, (-half_nav_angle_saturation + h_ctl_course_slew_rate));
 278:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       h_ctl_course_slew_rate -= h_ctl_course_slew_increment;
 279:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     } else {
 280:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       h_ctl_course_slew_rate = 0.;
 281:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     }
 282:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   }
 283:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 284:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 285:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float speed_depend_nav = (*stateGetHorizontalSpeedNorm_f()) / NOMINAL_AIRSPEED;
 681              		.loc 2 285 0 is_stmt 1
 682 0202 FFF7FEFF 		bl	stateGetHorizontalSpeedNorm_f
 683              	.LVL80:
 684 0206 D0ED007A 		flds	s15, [r0]
 685 020a F2EE0E8A 		fconsts	s17, #46
 686 020e C7EEA88A 		fdivs	s17, s15, s17
 687              	.LVL81:
 286:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   Bound(speed_depend_nav, 0.66, 1.5);
 688              		.loc 2 286 0
 689 0212 F7EE087A 		fconsts	s15, #120
 690 0216 F4EEE78A 		fcmpes	s17, s15
 691 021a F1EE10FA 		fmstat
 692 021e 0FDC     		bgt	.L57
 693              		.loc 2 286 0 is_stmt 0 discriminator 2
 694 0220 18EE900A 		fmrs	r0, s17
 695 0224 FFF7FEFF 		bl	__aeabi_f2d
 696              	.LVL82:
 697 0228 3FA3     		adr	r3, .L77+24
 698 022a D3E90023 		ldrd	r2, [r3]
 699 022e FFF7FEFF 		bl	__aeabi_dcmplt
 700              	.LVL83:
 701 0232 DFED477A 		flds	s15, .L77+64
 702 0236 0028     		cmp	r0, #0
 703 0238 18BF     		it	ne
 704 023a F0EE678A 		fcpysne	s17, s15
 705              	.LVL84:
 706 023e 01E0     		b	.L38
 707              	.LVL85:
 708              	.L57:
 709              		.loc 2 286 0
 710 0240 F0EE678A 		fcpys	s17, s15
 711              	.LVL86:
 712              	.L38:
 287:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 288:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float cmd = -h_ctl_course_pgain * speed_depend_nav * (err + d_err * h_ctl_course_dgain);
 713              		.loc 2 288 0 is_stmt 1
 714 0244 434B     		ldr	r3, .L77+68
 715 0246 444D     		ldr	r5, .L77+72
 716 0248 D3ED007A 		flds	s15, [r3]
 717 024c 434B     		ldr	r3, .L77+76
 718 024e 93ED007A 		flds	s14, [r3]
 289:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 290:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 291:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 292:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #if defined(AGR_CLIMB) && !USE_AIRSPEED
 293:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   /** limit navigation during extreme altitude changes */
 294:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   if (AGR_BLEND_START > AGR_BLEND_END && AGR_BLEND_END > 0) { /* prevent divide by zero, reversed o
 295:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     if (v_ctl_auto_throttle_submode == V_CTL_AUTO_THROTTLE_AGRESSIVE ||
 719              		.loc 2 295 0
 720 0252 434B     		ldr	r3, .L77+80
 288:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 721              		.loc 2 288 0
 722 0254 A9EE078A 		vfma.f32	s16, s18, s14
 723              	.LVL87:
 724              		.loc 2 295 0
 725 0258 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 288:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 726              		.loc 2 288 0
 727 025a 67EEE87A 		fnmuls	s15, s15, s17
 728              		.loc 2 295 0
 729 025e 013B     		subs	r3, r3, #1
 730 0260 012B     		cmp	r3, #1
 288:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 731              		.loc 2 288 0
 732 0262 27EE888A 		fmuls	s16, s15, s16
 733              	.LVL88:
 734              		.loc 2 295 0
 735 0266 00F2AE80 		bhi	.L40
 296:firmwares/fixedwing/stabilization/stabilization_attitude.c ****         v_ctl_auto_throttle_submode == V_CTL_AUTO_THROTTLE_BLENDED) {
 297:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       BoundAbs(cmd, h_ctl_roll_max_setpoint); /* bound cmd before NAV_RATIO and again after */
 736              		.loc 2 297 0
 737 026a D5ED007A 		flds	s15, [r5]
 738 026e B4EEE78A 		fcmpes	s16, s15
 739 0272 F1EE10FA 		fmstat
 740 0276 09DC     		bgt	.L58
 741              		.loc 2 297 0 is_stmt 0 discriminator 2
 742 0278 F1EE677A 		fnegs	s15, s15
 743 027c B4EE678A 		fcmps	s16, s15
 744 0280 F1EE10FA 		fmstat
 745 0284 48BF     		it	mi
 746 0286 B0EE678A 		fcpysmi	s16, s15
 747              	.LVL89:
 748 028a 01E0     		b	.L41
 749              	.LVL90:
 750              	.L58:
 751              		.loc 2 297 0
 752 028c B0EE678A 		fcpys	s16, s15
 753              	.LVL91:
 754              	.L41:
 298:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       /* altitude: z-up is positive -> positive error -> too low */
 299:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       if (v_ctl_altitude_error > 0) {
 755              		.loc 2 299 0 is_stmt 1
 756 0290 344B     		ldr	r3, .L77+84
 757 0292 354C     		ldr	r4, .L77+88
 758 0294 D3ED007A 		flds	s15, [r3]
 759 0298 F5EEC07A 		fcmpezs	s15
 760 029c F1EE10FA 		fmstat
 761 02a0 F0EEE77A 		fabss	s15, s15
 300:firmwares/fixedwing/stabilization/stabilization_attitude.c ****         nav_ratio = AGR_CLIMB_NAV_RATIO + (1 - AGR_CLIMB_NAV_RATIO) * (1 - (fabs(v_ctl_altitude_err
 762              		.loc 2 300 0
 763 02a4 17EE900A 		fmrs	r0, s15
 299:firmwares/fixedwing/stabilization/stabilization_attitude.c ****         nav_ratio = AGR_CLIMB_NAV_RATIO + (1 - AGR_CLIMB_NAV_RATIO) * (1 - (fabs(v_ctl_altitude_err
 764              		.loc 2 299 0
 765 02a8 66DD     		ble	.L70
 766              		.loc 2 300 0
 767 02aa FFF7FEFF 		bl	__aeabi_f2d
 768              	.LVL92:
 769 02ae 0022     		movs	r2, #0
 770 02b0 2E4B     		ldr	r3, .L77+92
 771 02b2 FFF7FEFF 		bl	__aeabi_dsub
 772              	.LVL93:
 773 02b6 0022     		movs	r2, #0
 774 02b8 2C4B     		ldr	r3, .L77+92
 775 02ba FFF7FEFF 		bl	__aeabi_ddiv
 776              	.LVL94:
 777 02be 0246     		mov	r2, r0
 778 02c0 0B46     		mov	r3, r1
 779 02c2 0020     		movs	r0, #0
 780 02c4 2A49     		ldr	r1, .L77+96
 781 02c6 FFF7FEFF 		bl	__aeabi_dsub
 782              	.LVL95:
 783 02ca 19A3     		adr	r3, .L77+32
 784 02cc D3E90023 		ldrd	r2, [r3]
 785 02d0 FFF7FEFF 		bl	__aeabi_dmul
 786              	.LVL96:
 787 02d4 18A3     		adr	r3, .L77+40
 788 02d6 D3E90023 		ldrd	r2, [r3]
 789 02da FFF7FEFF 		bl	__aeabi_dadd
 790              	.LVL97:
 791 02de FFF7FEFF 		bl	__aeabi_d2f
 792              	.LVL98:
 793 02e2 07EE900A 		fmsr	s15, r0
 301:firmwares/fixedwing/stabilization/stabilization_attitude.c ****                     (AGR_BLEND_START - AGR_BLEND_END));
 302:firmwares/fixedwing/stabilization/stabilization_attitude.c ****         Bound(nav_ratio, AGR_CLIMB_NAV_RATIO, 1);
 794              		.loc 2 302 0
 795 02e6 F4EEE97A 		fcmpes	s15, s19
 796 02ea F1EE10FA 		fmstat
 300:firmwares/fixedwing/stabilization/stabilization_attitude.c ****                     (AGR_BLEND_START - AGR_BLEND_END));
 797              		.loc 2 300 0
 798 02ee 2060     		str	r0, [r4]	@ float
 799              		.loc 2 302 0
 800 02f0 02DD     		ble	.L71
 801              	.L49:
 802              		.loc 2 302 0 is_stmt 0 discriminator 1
 803 02f2 C4ED009A 		fsts	s19, [r4]
 804 02f6 62E0     		b	.L47
 805              	.L71:
 806              		.loc 2 302 0 discriminator 2
 807 02f8 FFF7FEFF 		bl	__aeabi_f2d
 808              	.LVL99:
 809 02fc 0EA3     		adr	r3, .L77+40
 810 02fe D3E90023 		ldrd	r2, [r3]
 811 0302 FFF7FEFF 		bl	__aeabi_dcmplt
 812              	.LVL100:
 813 0306 0028     		cmp	r0, #0
 814 0308 59D0     		beq	.L47
 815              		.loc 2 302 0 discriminator 3
 816 030a 1A4B     		ldr	r3, .L77+100
 817 030c 2360     		str	r3, [r4]	@ float
 818 030e 56E0     		b	.L47
 819              	.L78:
 820              		.align	3
 821              	.L77:
 822 0310 182D4454 		.word	1413754136
 823 0314 FB210940 		.word	1074340347
 824 0318 182D4454 		.word	1413754136
 825 031c FB211940 		.word	1075388923
 826 0320 182D4454 		.word	1413754136
 827 0324 FB2109C0 		.word	-1073143301
 828 0328 1F85EB51 		.word	1374389535
 829 032c B81EE53F 		.word	1071980216
 830 0330 98999999 		.word	-1717986920
 831 0334 9999C93F 		.word	1070176665
 832 0338 9A999999 		.word	-1717986918
 833 033c 9999E93F 		.word	1072273817
 834 0340 00000000 		.word	state
 835 0344 00000000 		.word	.LANCHOR0
 836 0348 00001E40 		.word	1075707904
 837 034c 00000000 		.word	.LANCHOR19
 838 0350 C3F5283F 		.word	1059648963
 839 0354 00000000 		.word	.LANCHOR3
 840 0358 00000000 		.word	.LANCHOR5
 841 035c 00000000 		.word	.LANCHOR4
 842 0360 00000000 		.word	v_ctl_auto_throttle_submode
 843 0364 00000000 		.word	v_ctl_altitude_error
 844 0368 00000000 		.word	.LANCHOR18
 845 036c 00002440 		.word	1076101120
 846 0370 0000F03F 		.word	1072693248
 847 0374 CDCC4C3F 		.word	1061997773
 848              	.L70:
 303:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       } else {
 304:firmwares/fixedwing/stabilization/stabilization_attitude.c ****         nav_ratio = AGR_DESCENT_NAV_RATIO + (1 - AGR_DESCENT_NAV_RATIO) * (1 - (fabs(v_ctl_altitude
 849              		.loc 2 304 0 is_stmt 1
 850 0378 FFF7FEFF 		bl	__aeabi_f2d
 851              	.LVL101:
 852 037c 0022     		movs	r2, #0
 853 037e 2E4B     		ldr	r3, .L79
 854 0380 FFF7FEFF 		bl	__aeabi_dsub
 855              	.LVL102:
 856 0384 0022     		movs	r2, #0
 857 0386 2C4B     		ldr	r3, .L79
 858 0388 FFF7FEFF 		bl	__aeabi_ddiv
 859              	.LVL103:
 860 038c 0246     		mov	r2, r0
 861 038e 0B46     		mov	r3, r1
 862 0390 0020     		movs	r0, #0
 863 0392 2A49     		ldr	r1, .L79+4
 864 0394 FFF7FEFF 		bl	__aeabi_dsub
 865              	.LVL104:
 866 0398 0022     		movs	r2, #0
 867 039a 0023     		movs	r3, #0
 868 039c FFF7FEFF 		bl	__aeabi_dmul
 869              	.LVL105:
 870 03a0 0022     		movs	r2, #0
 871 03a2 264B     		ldr	r3, .L79+4
 872 03a4 FFF7FEFF 		bl	__aeabi_dadd
 873              	.LVL106:
 874 03a8 FFF7FEFF 		bl	__aeabi_d2f
 875              	.LVL107:
 876 03ac 07EE900A 		fmsr	s15, r0
 305:firmwares/fixedwing/stabilization/stabilization_attitude.c ****                     (AGR_BLEND_START - AGR_BLEND_END));
 306:firmwares/fixedwing/stabilization/stabilization_attitude.c ****         Bound(nav_ratio, AGR_DESCENT_NAV_RATIO, 1);
 877              		.loc 2 306 0
 878 03b0 F4EEE97A 		fcmpes	s15, s19
 879 03b4 F1EE10FA 		fmstat
 304:firmwares/fixedwing/stabilization/stabilization_attitude.c ****                     (AGR_BLEND_START - AGR_BLEND_END));
 880              		.loc 2 304 0
 881 03b8 2060     		str	r0, [r4]	@ float
 882              		.loc 2 306 0
 883 03ba 9ADC     		bgt	.L49
 884              		.loc 2 306 0 is_stmt 0 discriminator 2
 885 03bc 99D4     		bmi	.L49
 886              	.L47:
 307:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       }
 308:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       cmd *= nav_ratio;
 887              		.loc 2 308 0 is_stmt 1
 888 03be D4ED007A 		flds	s15, [r4]
 889 03c2 28EE278A 		fmuls	s16, s16, s15
 890              	.LVL108:
 891              	.L40:
 309:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     }
 310:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   }
 311:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 312:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 313:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float roll_setpoint = cmd + h_ctl_course_pre_bank_correction * h_ctl_course_pre_bank;
 892              		.loc 2 313 0
 893 03c6 1E4A     		ldr	r2, .L79+8
 314:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 315:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_ROLL_SLEW
 316:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float diff_roll = roll_setpoint - h_ctl_roll_setpoint;
 894              		.loc 2 316 0
 895 03c8 1E4B     		ldr	r3, .L79+12
 313:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 896              		.loc 2 313 0
 897 03ca D2ED006A 		flds	s13, [r2]
 898 03ce 1E4A     		ldr	r2, .L79+16
 899              		.loc 2 316 0
 900 03d0 D3ED007A 		flds	s15, [r3]
 313:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 901              		.loc 2 313 0
 902 03d4 92ED007A 		flds	s14, [r2]
 317:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   BoundAbs(diff_roll, h_ctl_roll_slew);
 903              		.loc 2 317 0
 904 03d8 1C4A     		ldr	r2, .L79+20
 313:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 905              		.loc 2 313 0
 906 03da A6EE878A 		vfma.f32	s16, s13, s14
 907              	.LVL109:
 908              		.loc 2 317 0
 909 03de 92ED007A 		flds	s14, [r2]
 316:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   BoundAbs(diff_roll, h_ctl_roll_slew);
 910              		.loc 2 316 0
 911 03e2 38EE678A 		fsubs	s16, s16, s15
 912              	.LVL110:
 913              		.loc 2 317 0
 914 03e6 B4EEC78A 		fcmpes	s16, s14
 915 03ea F1EE10FA 		fmstat
 916 03ee 09DC     		bgt	.L59
 917              		.loc 2 317 0 is_stmt 0 discriminator 2
 918 03f0 B1EE477A 		fnegs	s14, s14
 919 03f4 B4EE478A 		fcmps	s16, s14
 920 03f8 F1EE10FA 		fmstat
 921 03fc 48BF     		it	mi
 922 03fe B0EE478A 		fcpysmi	s16, s14
 923              	.LVL111:
 924 0402 01E0     		b	.L51
 925              	.LVL112:
 926              	.L59:
 927              		.loc 2 317 0
 928 0404 B0EE478A 		fcpys	s16, s14
 929              	.LVL113:
 930              	.L51:
 318:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_setpoint += diff_roll;
 931              		.loc 2 318 0 is_stmt 1
 932 0408 37EE888A 		fadds	s16, s15, s16
 933              	.LVL114:
 319:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #else
 320:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_setpoint = roll_setpoint;
 321:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 322:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 323:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   BoundAbs(h_ctl_roll_setpoint, h_ctl_roll_max_setpoint);
 934              		.loc 2 323 0
 935 040c D5ED007A 		flds	s15, [r5]
 318:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_roll_setpoint += diff_roll;
 936              		.loc 2 318 0
 937 0410 0C4A     		ldr	r2, .L79+12
 938 0412 83ED008A 		fsts	s16, [r3]
 939              		.loc 2 323 0
 940 0416 B4EEE78A 		fcmpes	s16, s15
 941 041a F1EE10FA 		fmstat
 942 041e 06DC     		bgt	.L73
 943              		.loc 2 323 0 is_stmt 0 discriminator 2
 944 0420 F1EE677A 		fnegs	s15, s15
 945 0424 B4EEE78A 		fcmpes	s16, s15
 946 0428 F1EE10FA 		fmstat
 947 042c 01D5     		bpl	.L19
 948              	.L73:
 949              		.loc 2 323 0 discriminator 3
 950 042e C2ED007A 		fsts	s15, [r2]
 951              	.L19:
 324:firmwares/fixedwing/stabilization/stabilization_attitude.c **** }
 952              		.loc 2 324 0 is_stmt 1
 953 0432 BDEC048B 		fldmfdd	sp!, {d8-d9}
 954              		.cfi_restore 82
 955              		.cfi_restore 83
 956              		.cfi_restore 80
 957              		.cfi_restore 81
 958              		.cfi_def_cfa_offset 16
 959              	.LVL115:
 960 0436 70BD     		pop	{r4, r5, r6, pc}
 961              	.L80:
 962              		.align	2
 963              	.L79:
 964 0438 00002440 		.word	1076101120
 965 043c 0000F03F 		.word	1072693248
 966 0440 00000000 		.word	.LANCHOR2
 967 0444 00000000 		.word	.LANCHOR7
 968 0448 00000000 		.word	.LANCHOR1
 969 044c 00000000 		.word	.LANCHOR15
 970              		.cfi_endproc
 971              	.LFE455:
 973              		.section	.text.h_ctl_attitude_loop,"ax",%progbits
 974              		.align	1
 975              		.global	h_ctl_attitude_loop
 976              		.thumb
 977              		.thumb_func
 979              	h_ctl_attitude_loop:
 980              	.LFB456:
 325:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 326:firmwares/fixedwing/stabilization/stabilization_attitude.c **** void h_ctl_attitude_loop(void)
 327:firmwares/fixedwing/stabilization/stabilization_attitude.c **** {
 981              		.loc 2 327 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 8
 984              		@ frame_needed = 0, uses_anonymous_args = 0
 985 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 986              		.cfi_def_cfa_offset 28
 987              		.cfi_offset 4, -28
 988              		.cfi_offset 5, -24
 989              		.cfi_offset 6, -20
 990              		.cfi_offset 7, -16
 991              		.cfi_offset 8, -12
 992              		.cfi_offset 9, -8
 993              		.cfi_offset 14, -4
 994 0004 2DED028B 		fstmfdd	sp!, {d8}
 995              		.cfi_def_cfa_offset 36
 996              		.cfi_offset 80, -36
 997              		.cfi_offset 81, -32
 328:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   if (!h_ctl_disabled) {
 998              		.loc 2 328 0
 999 0008 5C4B     		ldr	r3, .L93
 1000 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 327:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   if (!h_ctl_disabled) {
 1001              		.loc 2 327 0
 1002 000c 83B0     		sub	sp, sp, #12
 1003              		.cfi_def_cfa_offset 48
 1004              		.loc 2 328 0
 1005 000e 002B     		cmp	r3, #0
 1006 0010 40F0AE80 		bne	.L81
 1007              	.LBB30:
 1008              	.LBB31:
 1009              	.LBB32:
 1010              	.LBB33:
 1011              		.loc 1 1116 0
 1012 0014 FFF7FEFF 		bl	orientationGetEulers_f.constprop.1
 1013              	.LVL116:
 1014              	.LBE33:
 1015              	.LBE32:
 329:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     h_ctl_roll_loop();
 330:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     h_ctl_pitch_loop();
 331:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   }
 332:firmwares/fixedwing/stabilization/stabilization_attitude.c **** }
 333:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 334:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 335:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_ROLL_ATTITUDE_GAIN
 336:firmwares/fixedwing/stabilization/stabilization_attitude.c **** inline static void h_ctl_roll_loop(void)
 337:firmwares/fixedwing/stabilization/stabilization_attitude.c **** {
 338:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float err = stateGetNedToBodyEulers_f()->phi - h_ctl_roll_setpoint;
 1016              		.loc 2 338 0
 1017 0018 594B     		ldr	r3, .L93+4
 1018 001a D0ED007A 		flds	s15, [r0]
 1019 001e 93ED008A 		flds	s16, [r3]
 1020              	.LBB34:
 1021              	.LBB35:
1117:./state.h     **** }
1118:./state.h     **** /** @}*/
1119:./state.h     **** 
1120:./state.h     **** 
1121:./state.h     **** /******************************************************************************
1122:./state.h     ****  *                                                                            *
1123:./state.h     ****  * Set and Get functions for the ANGULAR RATE representations                 *
1124:./state.h     ****  *                                                                            *
1125:./state.h     ****  *****************************************************************************/
1126:./state.h     **** /** @addtogroup state_rate
1127:./state.h     ****  *  @{ */
1128:./state.h     **** 
1129:./state.h     **** /************* declaration of transformation functions ************/
1130:./state.h     **** extern void stateCalcBodyRates_i(void);
1131:./state.h     **** extern void stateCalcBodyRates_f(void);
1132:./state.h     **** 
1133:./state.h     **** /*********************** validity test functions ******************/
1134:./state.h     **** 
1135:./state.h     **** /// Test if rates are valid.
1136:./state.h     **** static inline bool_t stateIsRateValid(void)
1137:./state.h     **** {
1138:./state.h     ****   return (state.rate_status);
1139:./state.h     **** }
1140:./state.h     **** 
1141:./state.h     **** /************************ Set functions ****************************/
1142:./state.h     **** 
1143:./state.h     **** /// Set vehicle body angular rate (int).
1144:./state.h     **** static inline void stateSetBodyRates_i(struct Int32Rates *body_rate)
1145:./state.h     **** {
1146:./state.h     ****   RATES_COPY(state.body_rates_i, *body_rate);
1147:./state.h     ****   /* clear bits for all attitude representations and only set the new one */
1148:./state.h     ****   state.rate_status = (1 << RATE_I);
1149:./state.h     **** }
1150:./state.h     **** 
1151:./state.h     **** /// Set vehicle body angular rate (float).
1152:./state.h     **** static inline void stateSetBodyRates_f(struct FloatRates *body_rate)
1153:./state.h     **** {
1154:./state.h     ****   RATES_COPY(state.body_rates_f, *body_rate);
1155:./state.h     ****   /* clear bits for all attitude representations and only set the new one */
1156:./state.h     ****   state.rate_status = (1 << RATE_F);
1157:./state.h     **** }
1158:./state.h     **** 
1159:./state.h     **** /************************ Get functions ****************************/
1160:./state.h     **** 
1161:./state.h     **** /// Get vehicle body angular rate (int).
1162:./state.h     **** static inline struct Int32Rates *stateGetBodyRates_i(void)
1163:./state.h     **** {
1164:./state.h     ****   if (!bit_is_set(state.rate_status, RATE_I)) {
1165:./state.h     ****     stateCalcBodyRates_i();
1166:./state.h     ****   }
1167:./state.h     ****   return &state.body_rates_i;
1168:./state.h     **** }
1169:./state.h     **** 
1170:./state.h     **** /// Get vehicle body angular rate (float).
1171:./state.h     **** static inline struct FloatRates *stateGetBodyRates_f(void)
1172:./state.h     **** {
1173:./state.h     ****   if (!bit_is_set(state.rate_status, RATE_F)) {
 1022              		.loc 1 1173 0
 1023 0022 584B     		ldr	r3, .L93+8
 1024 0024 93F82822 		ldrb	r2, [r3, #552]	@ zero_extendqisi2
 1025 0028 12F0020F 		tst	r2, #2
 1026              	.LBE35:
 1027              	.LBE34:
 1028              		.loc 2 338 0
 1029 002c 37EEC88A 		fsubs	s16, s15, s16
 1030              	.LVL117:
 1031 0030 1C46     		mov	r4, r3
 1032              	.LBB37:
 1033              	.LBB36:
 1034              		.loc 1 1173 0
 1035 0032 01D1     		bne	.L83
1174:./state.h     ****     stateCalcBodyRates_f();
 1036              		.loc 1 1174 0
 1037 0034 FFF7FEFF 		bl	stateCalcBodyRates_f
 1038              	.LVL118:
 1039              	.L83:
 1040              	.LBE36:
 1041              	.LBE37:
 339:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   struct FloatRates *body_rate = stateGetBodyRates_f();
 340:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef SITL
 341:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   static float last_err = 0;
 342:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   body_rate->p = (err - last_err) / (1 / 60.);
 343:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   last_err = err;
 344:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 345:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float cmd = h_ctl_roll_attitude_gain * err
 346:firmwares/fixedwing/stabilization/stabilization_attitude.c ****               + h_ctl_roll_rate_gain * body_rate->p
 347:firmwares/fixedwing/stabilization/stabilization_attitude.c ****               + v_ctl_throttle_setpoint * h_ctl_aileron_of_throttle;
 1042              		.loc 2 347 0
 1043 0038 534B     		ldr	r3, .L93+12
 346:firmwares/fixedwing/stabilization/stabilization_attitude.c ****               + v_ctl_throttle_setpoint * h_ctl_aileron_of_throttle;
 1044              		.loc 2 346 0
 1045 003a D4ED8E6A 		flds	s13, [r4, #568]
 1046              		.loc 2 347 0
 1047 003e B3F90030 		ldrsh	r3, [r3]
 1048 0042 07EE103A 		fmsr	s14, r3	@ int
 346:firmwares/fixedwing/stabilization/stabilization_attitude.c ****               + v_ctl_throttle_setpoint * h_ctl_aileron_of_throttle;
 1049              		.loc 2 346 0
 1050 0046 514B     		ldr	r3, .L93+16
 1051 0048 D3ED007A 		flds	s15, [r3]
 1052 004c 504B     		ldr	r3, .L93+20
 1053 004e 67EEA67A 		fmuls	s15, s15, s13
 1054 0052 D3ED006A 		flds	s13, [r3]
 1055              		.loc 2 347 0
 1056 0056 4F4B     		ldr	r3, .L93+24
 346:firmwares/fixedwing/stabilization/stabilization_attitude.c ****               + v_ctl_throttle_setpoint * h_ctl_aileron_of_throttle;
 1057              		.loc 2 346 0
 1058 0058 E6EE887A 		vfma.f32	s15, s13, s16
 1059              		.loc 2 347 0
 1060 005c B8EEC77A 		fsitos	s14, s14
 345:firmwares/fixedwing/stabilization/stabilization_attitude.c ****               + h_ctl_roll_rate_gain * body_rate->p
 1061              		.loc 2 345 0
 1062 0060 D3ED006A 		flds	s13, [r3]
 1063 0064 E7EE267A 		vfma.f32	s15, s14, s13
 1064              	.LVL119:
 348:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 349:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_aileron_setpoint = TRIM_PPRZ(cmd);
 1065              		.loc 2 349 0
 1066 0068 9FED4B7A 		flds	s14, .L93+28
 1067 006c F4EEC77A 		fcmpes	s15, s14
 1068 0070 F1EE10FA 		fmstat
 1069 0074 F0EE478A 		fcpys	s17, s14
 1070 0078 0DD4     		bmi	.L88
 1071 007a 9FED487A 		flds	s14, .L93+32
 1072 007e F4EEC77A 		fcmpes	s15, s14
 1073 0082 F1EE10FA 		fmstat
 1074 0086 09DC     		bgt	.L89
 1075 0088 FDEEE77A 		ftosizs	s15, s15
 1076              	.LVL120:
 1077 008c CDED017A 		fsts	s15, [sp, #4]	@ int
 1078 0090 BDF80430 		ldrh	r3, [sp, #4]
 1079 0094 04E0     		b	.L84
 1080              	.LVL121:
 1081              	.L88:
 1082 0096 4DF68023 		movw	r3, #55936
 1083 009a 01E0     		b	.L84
 1084              	.L89:
 1085 009c 4FF41653 		mov	r3, #9600
 1086              	.LVL122:
 1087              	.L84:
 1088 00a0 3F4A     		ldr	r2, .L93+36
 1089              	.LBE31:
 1090              	.LBE30:
 1091              	.LBB39:
 1092              	.LBB40:
 350:firmwares/fixedwing/stabilization/stabilization_attitude.c **** }
 351:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 352:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #else // H_CTL_ROLL_ATTITUDE_GAIN
 353:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 354:firmwares/fixedwing/stabilization/stabilization_attitude.c **** /** Computes h_ctl_aileron_setpoint from h_ctl_roll_setpoint */
 355:firmwares/fixedwing/stabilization/stabilization_attitude.c **** inline static void h_ctl_roll_loop(void)
 356:firmwares/fixedwing/stabilization/stabilization_attitude.c **** {
 357:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float err = stateGetNedToBodyEulers_f()->phi - h_ctl_roll_setpoint;
 358:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float cmd = h_ctl_roll_pgain * err
 359:firmwares/fixedwing/stabilization/stabilization_attitude.c ****               + v_ctl_throttle_setpoint * h_ctl_aileron_of_throttle;
 360:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_aileron_setpoint = TRIM_PPRZ(cmd);
 361:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 362:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_RATE_LOOP
 363:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   if (h_ctl_auto1_rate) {
 364:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     /** Runs only the roll rate loop */
 365:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     h_ctl_roll_rate_setpoint = h_ctl_roll_setpoint * 10.;
 366:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     h_ctl_roll_rate_loop();
 367:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   } else {
 368:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     h_ctl_roll_rate_setpoint = h_ctl_roll_rate_setpoint_pgain * err;
 369:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     BoundAbs(h_ctl_roll_rate_setpoint, H_CTL_ROLL_RATE_MAX_SETPOINT);
 370:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 371:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     float saved_aileron_setpoint = h_ctl_aileron_setpoint;
 372:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     h_ctl_roll_rate_loop();
 373:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     h_ctl_aileron_setpoint = Blend(h_ctl_aileron_setpoint, saved_aileron_setpoint, h_ctl_roll_rate_
 374:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   }
 375:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 376:firmwares/fixedwing/stabilization/stabilization_attitude.c **** }
 377:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 378:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef H_CTL_RATE_LOOP
 379:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 380:firmwares/fixedwing/stabilization/stabilization_attitude.c **** static inline void h_ctl_roll_rate_loop()
 381:firmwares/fixedwing/stabilization/stabilization_attitude.c **** {
 382:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float err = stateGetBodyRates_f()->p - h_ctl_roll_rate_setpoint;
 383:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 384:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   /* I term calculation */
 385:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   static float roll_rate_sum_err = 0.;
 386:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   static uint8_t roll_rate_sum_idx = 0;
 387:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   static float roll_rate_sum_values[H_CTL_ROLL_RATE_SUM_NB_SAMPLES];
 388:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 389:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   roll_rate_sum_err -= roll_rate_sum_values[roll_rate_sum_idx];
 390:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   roll_rate_sum_values[roll_rate_sum_idx] = err;
 391:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   roll_rate_sum_err += err;
 392:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   roll_rate_sum_idx++;
 393:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   if (roll_rate_sum_idx >= H_CTL_ROLL_RATE_SUM_NB_SAMPLES) { roll_rate_sum_idx = 0; }
 394:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 395:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   /* D term calculations */
 396:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   static float last_err = 0;
 397:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float d_err = err - last_err;
 398:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   last_err = err;
 399:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 400:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float throttle_dep_pgain =
 401:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     Blend(h_ctl_hi_throttle_roll_rate_pgain, h_ctl_lo_throttle_roll_rate_pgain,
 402:firmwares/fixedwing/stabilization/stabilization_attitude.c ****           v_ctl_throttle_setpoint / ((float)MAX_PPRZ));
 403:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float cmd = throttle_dep_pgain * (err + h_ctl_roll_rate_igain * roll_rate_sum_err / H_CTL_ROLL_RA
 404:firmwares/fixedwing/stabilization/stabilization_attitude.c ****                                     h_ctl_roll_rate_dgain * d_err);
 405:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 406:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_aileron_setpoint = TRIM_PPRZ(cmd);
 407:firmwares/fixedwing/stabilization/stabilization_attitude.c **** }
 408:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif /* H_CTL_RATE_LOOP */
 409:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 410:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif /* !H_CTL_ROLL_ATTITUDE_GAIN */
 411:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 412:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 413:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 414:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 415:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 416:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 417:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef LOITER_TRIM
 418:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 419:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float v_ctl_auto_throttle_loiter_trim = V_CTL_AUTO_THROTTLE_LOITER_TRIM;
 420:firmwares/fixedwing/stabilization/stabilization_attitude.c **** float v_ctl_auto_throttle_dash_trim = V_CTL_AUTO_THROTTLE_DASH_TRIM;
 421:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 422:firmwares/fixedwing/stabilization/stabilization_attitude.c **** inline static float loiter(void)
 423:firmwares/fixedwing/stabilization/stabilization_attitude.c **** {
 424:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   static float last_elevator_trim;
 425:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float elevator_trim;
 426:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 427:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float throttle_dif = v_ctl_auto_throttle_cruise_throttle - v_ctl_auto_throttle_nominal_cruise_thr
 428:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   if (throttle_dif > 0) {
 429:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     float max_dif = Max(v_ctl_auto_throttle_max_cruise_throttle - v_ctl_auto_throttle_nominal_cruis
 430:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     elevator_trim = throttle_dif / max_dif * v_ctl_auto_throttle_dash_trim;
 431:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   } else {
 432:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     float max_dif = Max(v_ctl_auto_throttle_nominal_cruise_throttle - v_ctl_auto_throttle_min_cruis
 433:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     elevator_trim = - throttle_dif / max_dif * v_ctl_auto_throttle_loiter_trim;
 434:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   }
 435:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 436:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float max_change = (v_ctl_auto_throttle_loiter_trim - v_ctl_auto_throttle_dash_trim) / 80.;
 437:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   Bound(elevator_trim, last_elevator_trim - max_change, last_elevator_trim + max_change);
 438:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 439:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   last_elevator_trim = elevator_trim;
 440:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   return elevator_trim;
 441:firmwares/fixedwing/stabilization/stabilization_attitude.c **** }
 442:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 443:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 444:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 445:firmwares/fixedwing/stabilization/stabilization_attitude.c **** inline static void h_ctl_pitch_loop(void)
 446:firmwares/fixedwing/stabilization/stabilization_attitude.c **** {
 447:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   static float last_err;
 448:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   struct FloatEulers *att = stateGetNedToBodyEulers_f();
 449:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   /* sanity check */
 450:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   if (h_ctl_elevator_of_roll < 0.) {
 1093              		.loc 2 450 0
 1094 00a2 404C     		ldr	r4, .L93+40
 1095              	.LVL123:
 1096              	.LBE40:
 1097              	.LBE39:
 1098              	.LBB46:
 1099              	.LBB38:
 349:firmwares/fixedwing/stabilization/stabilization_attitude.c **** }
 1100              		.loc 2 349 0
 1101 00a4 1380     		strh	r3, [r2]	@ movhi
 1102              	.LBE38:
 1103              	.LBE46:
 1104              	.LBB47:
 1105              	.LBB45:
 1106              	.LBB41:
 1107              	.LBB42:
1116:./state.h     **** }
 1108              		.loc 1 1116 0
 1109 00a6 FFF7FEFF 		bl	orientationGetEulers_f.constprop.1
 1110              	.LVL124:
 1111              	.LBE42:
 1112              	.LBE41:
 1113              		.loc 2 450 0
 1114 00aa D4ED007A 		flds	s15, [r4]
 1115 00ae F5EEC07A 		fcmpezs	s15
 1116 00b2 F1EE10FA 		fmstat
 451:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     h_ctl_elevator_of_roll = 0.;
 1117              		.loc 2 451 0
 1118 00b6 44BF     		itt	mi
 1119 00b8 0023     		movmi	r3, #0
 1120 00ba 2360     		strmi	r3, [r4]	@ float
 452:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   }
 453:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 454:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_pitch_loop_setpoint =  h_ctl_pitch_setpoint + h_ctl_elevator_of_roll / h_ctl_pitch_pgain * 
 1121              		.loc 2 454 0
 1122 00bc 3A4B     		ldr	r3, .L93+44
 1123 00be 93ED008A 		flds	s16, [r3]
 1124              	.LVL125:
 1125 00c2 3A4B     		ldr	r3, .L93+48
 1126              	.LBB44:
 1127              	.LBB43:
1116:./state.h     **** }
 1128              		.loc 1 1116 0
 1129 00c4 0546     		mov	r5, r0
 1130              	.LBE43:
 1131              	.LBE44:
 1132              		.loc 2 454 0
 1133 00c6 1868     		ldr	r0, [r3]	@ float
 1134 00c8 FFF7FEFF 		bl	__aeabi_f2d
 1135              	.LVL126:
 1136 00cc D4ED007A 		flds	s15, [r4]
 1137 00d0 C7EE887A 		fdivs	s15, s15, s16
 1138 00d4 0646     		mov	r6, r0
 1139 00d6 0F46     		mov	r7, r1
 1140 00d8 17EE900A 		fmrs	r0, s15
 1141 00dc FFF7FEFF 		bl	__aeabi_f2d
 1142              	.LVL127:
 1143 00e0 D5ED007A 		flds	s15, [r5]
 1144 00e4 F0EEE77A 		fabss	s15, s15
 1145 00e8 8046     		mov	r8, r0
 1146 00ea 17EE900A 		fmrs	r0, s15
 1147 00ee 8946     		mov	r9, r1
 1148 00f0 FFF7FEFF 		bl	__aeabi_f2d
 1149              	.LVL128:
 1150 00f4 0246     		mov	r2, r0
 1151 00f6 0B46     		mov	r3, r1
 1152 00f8 4046     		mov	r0, r8
 1153 00fa 4946     		mov	r1, r9
 1154 00fc FFF7FEFF 		bl	__aeabi_dmul
 1155              	.LVL129:
 1156 0100 0B46     		mov	r3, r1
 1157 0102 0246     		mov	r2, r0
 1158 0104 3946     		mov	r1, r7
 1159 0106 3046     		mov	r0, r6
 1160 0108 FFF7FEFF 		bl	__aeabi_dadd
 1161              	.LVL130:
 1162 010c FFF7FEFF 		bl	__aeabi_d2f
 1163              	.LVL131:
 1164 0110 274B     		ldr	r3, .L93+52
 455:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 456:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float err = 0;
 457:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 458:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef USE_AOA
 459:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   switch (h_ctl_pitch_mode) {
 460:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     case H_CTL_PITCH_MODE_THETA:
 461:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       err = att->theta - h_ctl_pitch_loop_setpoint;
 462:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       break;
 463:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     case H_CTL_PITCH_MODE_AOA:
 464:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       err = (*stateGetAngleOfAttack_f()) - h_ctl_pitch_loop_setpoint;
 465:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       break;
 466:firmwares/fixedwing/stabilization/stabilization_attitude.c ****     default:
 467:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       err = att->theta - h_ctl_pitch_loop_setpoint;
 468:firmwares/fixedwing/stabilization/stabilization_attitude.c ****       break;
 469:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   }
 470:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #else //NO_AOA
 471:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   err = att->theta - h_ctl_pitch_loop_setpoint;
 1165              		.loc 2 471 0
 1166 0112 D5ED017A 		flds	s15, [r5, #4]
 454:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 1167              		.loc 2 454 0
 1168 0116 1860     		str	r0, [r3]	@ float
 1169              	.LVL132:
 1170 0118 07EE100A 		fmsr	s14, r0
 472:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 473:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 474:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 475:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float d_err = err - last_err;
 1171              		.loc 2 475 0
 1172 011c 254B     		ldr	r3, .L93+56
 471:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 1173              		.loc 2 471 0
 1174 011e 77EEC77A 		fsubs	s15, s15, s14
 1175              	.LVL133:
 1176              		.loc 2 475 0
 1177 0122 93ED007A 		flds	s14, [r3]
 476:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   last_err = err;
 1178              		.loc 2 476 0
 1179 0126 C3ED007A 		fsts	s15, [r3]
 477:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   float cmd = -h_ctl_pitch_pgain * (err + h_ctl_pitch_dgain * d_err);
 1180              		.loc 2 477 0
 1181 012a 234B     		ldr	r3, .L93+60
 475:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   last_err = err;
 1182              		.loc 2 475 0
 1183 012c 37EEC77A 		fsubs	s14, s15, s14
 1184              	.LVL134:
 1185              		.loc 2 477 0
 1186 0130 D3ED006A 		flds	s13, [r3]
 1187 0134 E6EE877A 		vfma.f32	s15, s13, s14
 1188              	.LVL135:
 1189 0138 68EE677A 		fnmuls	s15, s16, s15
 1190              	.LVL136:
 478:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #ifdef LOITER_TRIM
 479:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   cmd += loiter();
 480:firmwares/fixedwing/stabilization/stabilization_attitude.c **** #endif
 481:firmwares/fixedwing/stabilization/stabilization_attitude.c ****   h_ctl_elevator_setpoint = TRIM_PPRZ(cmd);
 1191              		.loc 2 481 0
 1192 013c F4EEE87A 		fcmpes	s15, s17
 1193 0140 F1EE10FA 		fmstat
 1194 0144 0DD4     		bmi	.L90
 1195 0146 9FED157A 		flds	s14, .L93+32
 1196              	.LVL137:
 1197 014a F4EEC77A 		fcmpes	s15, s14
 1198 014e F1EE10FA 		fmstat
 1199 0152 09DC     		bgt	.L91
 1200 0154 FDEEE77A 		ftosizs	s15, s15
 1201              	.LVL138:
 1202 0158 CDED017A 		fsts	s15, [sp, #4]	@ int
 1203 015c BDF80430 		ldrh	r3, [sp, #4]
 1204 0160 04E0     		b	.L87
 1205              	.LVL139:
 1206              	.L90:
 1207 0162 4DF68023 		movw	r3, #55936
 1208 0166 01E0     		b	.L87
 1209              	.LVL140:
 1210              	.L91:
 1211 0168 4FF41653 		mov	r3, #9600
 1212              	.LVL141:
 1213              	.L87:
 1214 016c 134A     		ldr	r2, .L93+64
 1215 016e 1380     		strh	r3, [r2]	@ movhi
 1216              	.LVL142:
 1217              	.L81:
 1218              	.LBE45:
 1219              	.LBE47:
 332:firmwares/fixedwing/stabilization/stabilization_attitude.c **** 
 1220              		.loc 2 332 0
 1221 0170 03B0     		add	sp, sp, #12
 1222              		.cfi_def_cfa_offset 36
 1223              		@ sp needed
 1224 0172 BDEC028B 		fldmfdd	sp!, {d8}
 1225              		.cfi_restore 80
 1226              		.cfi_restore 81
 1227              		.cfi_def_cfa_offset 28
 1228 0176 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1229              	.L94:
 1230 017a 00BF     		.align	2
 1231              	.L93:
 1232 017c 00000000 		.word	.LANCHOR6
 1233 0180 00000000 		.word	.LANCHOR7
 1234 0184 00000000 		.word	state
 1235 0188 00000000 		.word	v_ctl_throttle_setpoint
 1236 018c 00000000 		.word	.LANCHOR17
 1237 0190 00000000 		.word	.LANCHOR16
 1238 0194 00000000 		.word	.LANCHOR20
 1239 0198 000016C6 		.word	-971636736
 1240 019c 00001646 		.word	1175846912
 1241 01a0 00000000 		.word	.LANCHOR8
 1242 01a4 00000000 		.word	.LANCHOR14
 1243 01a8 00000000 		.word	.LANCHOR11
 1244 01ac 00000000 		.word	.LANCHOR9
 1245 01b0 00000000 		.word	.LANCHOR10
 1246 01b4 00000000 		.word	.LANCHOR21
 1247 01b8 00000000 		.word	.LANCHOR12
 1248 01bc 00000000 		.word	.LANCHOR13
 1249              		.cfi_endproc
 1250              	.LFE456:
 1252              		.global	h_ctl_roll_rate_gain
 1253              		.global	h_ctl_roll_attitude_gain
 1254              		.global	h_ctl_elevator_of_roll
 1255              		.global	h_ctl_aileron_of_throttle
 1256              		.global	h_ctl_elevator_setpoint
 1257              		.global	h_ctl_pitch_dgain
 1258              		.global	h_ctl_pitch_pgain
 1259              		.global	h_ctl_pitch_loop_setpoint
 1260              		.global	h_ctl_pitch_setpoint
 1261              		.global	h_ctl_roll_slew
 1262              		.global	h_ctl_aileron_setpoint
 1263              		.global	h_ctl_roll_pgain
 1264              		.global	h_ctl_roll_setpoint
 1265              		.global	h_ctl_auto1_rate
 1266              		.global	h_ctl_disabled
 1267              		.global	h_ctl_roll_max_setpoint
 1268              		.global	h_ctl_course_dgain
 1269              		.global	h_ctl_course_pgain
 1270              		.global	h_ctl_course_pre_bank_correction
 1271              		.global	h_ctl_course_pre_bank
 1272              		.global	h_ctl_course_setpoint
 1273              		.section	.bss.h_ctl_disabled,"aw",%nobits
 1274              		.set	.LANCHOR6,. + 0
 1277              	h_ctl_disabled:
 1278 0000 00       		.space	1
 1279              		.section	.bss.last_err.10893,"aw",%nobits
 1280              		.align	2
 1281              		.set	.LANCHOR19,. + 0
 1284              	last_err.10893:
 1285 0000 00000000 		.space	4
 1286              		.section	.bss.h_ctl_aileron_setpoint,"aw",%nobits
 1287              		.align	1
 1288              		.set	.LANCHOR8,. + 0
 1291              	h_ctl_aileron_setpoint:
 1292 0000 0000     		.space	2
 1293              		.section	.bss.h_ctl_course_pre_bank,"aw",%nobits
 1294              		.align	2
 1295              		.set	.LANCHOR1,. + 0
 1298              	h_ctl_course_pre_bank:
 1299 0000 00000000 		.space	4
 1300              		.section	.bss.h_ctl_roll_slew,"aw",%nobits
 1301              		.align	2
 1302              		.set	.LANCHOR15,. + 0
 1305              	h_ctl_roll_slew:
 1306 0000 00000000 		.space	4
 1307              		.section	.bss.h_ctl_pitch_setpoint,"aw",%nobits
 1308              		.align	2
 1309              		.set	.LANCHOR9,. + 0
 1312              	h_ctl_pitch_setpoint:
 1313 0000 00000000 		.space	4
 1314              		.section	.bss.h_ctl_elevator_setpoint,"aw",%nobits
 1315              		.align	1
 1316              		.set	.LANCHOR13,. + 0
 1319              	h_ctl_elevator_setpoint:
 1320 0000 0000     		.space	2
 1321              		.section	.bss.h_ctl_elevator_of_roll,"aw",%nobits
 1322              		.align	2
 1323              		.set	.LANCHOR14,. + 0
 1326              	h_ctl_elevator_of_roll:
 1327 0000 00000000 		.space	4
 1328              		.section	.bss.last_err.10933,"aw",%nobits
 1329              		.align	2
 1330              		.set	.LANCHOR21,. + 0
 1333              	last_err.10933:
 1334 0000 00000000 		.space	4
 1335              		.section	.bss.h_ctl_auto1_rate,"aw",%nobits
 1338              	h_ctl_auto1_rate:
 1339 0000 00       		.space	1
 1340              		.section	.bss.h_ctl_roll_rate_gain,"aw",%nobits
 1341              		.align	2
 1342              		.set	.LANCHOR17,. + 0
 1345              	h_ctl_roll_rate_gain:
 1346 0000 00000000 		.space	4
 1347              		.section	.bss.h_ctl_roll_setpoint,"aw",%nobits
 1348              		.align	2
 1349              		.set	.LANCHOR7,. + 0
 1352              	h_ctl_roll_setpoint:
 1353 0000 00000000 		.space	4
 1354              		.section	.rodata.str1.1,"aMS",%progbits,1
 1355              	.LC0:
 1356 0000 43414C49 		.ascii	"CALIBRATION\000"
 1356      42524154 
 1356      494F4E00 
 1357              		.section	.bss.h_ctl_course_setpoint,"aw",%nobits
 1358              		.align	2
 1359              		.set	.LANCHOR0,. + 0
 1362              	h_ctl_course_setpoint:
 1363 0000 00000000 		.space	4
 1364              		.section	.bss.h_ctl_pitch_dgain,"aw",%nobits
 1365              		.align	2
 1366              		.set	.LANCHOR12,. + 0
 1369              	h_ctl_pitch_dgain:
 1370 0000 00000000 		.space	4
 1371              		.section	.bss.h_ctl_pitch_pgain,"aw",%nobits
 1372              		.align	2
 1373              		.set	.LANCHOR11,. + 0
 1376              	h_ctl_pitch_pgain:
 1377 0000 00000000 		.space	4
 1378              		.section	.bss.h_ctl_course_pgain,"aw",%nobits
 1379              		.align	2
 1380              		.set	.LANCHOR3,. + 0
 1383              	h_ctl_course_pgain:
 1384 0000 00000000 		.space	4
 1385              		.section	.bss.h_ctl_course_pre_bank_correction,"aw",%nobits
 1386              		.align	2
 1387              		.set	.LANCHOR2,. + 0
 1390              	h_ctl_course_pre_bank_correction:
 1391 0000 00000000 		.space	4
 1392              		.section	.bss.h_ctl_roll_max_setpoint,"aw",%nobits
 1393              		.align	2
 1394              		.set	.LANCHOR5,. + 0
 1397              	h_ctl_roll_max_setpoint:
 1398 0000 00000000 		.space	4
 1399              		.section	.bss.h_ctl_course_dgain,"aw",%nobits
 1400              		.align	2
 1401              		.set	.LANCHOR4,. + 0
 1404              	h_ctl_course_dgain:
 1405 0000 00000000 		.space	4
 1406              		.section	.bss.nav_ratio,"aw",%nobits
 1407              		.align	2
 1408              		.set	.LANCHOR18,. + 0
 1411              	nav_ratio:
 1412 0000 00000000 		.space	4
 1413              		.section	.bss.h_ctl_roll_attitude_gain,"aw",%nobits
 1414              		.align	2
 1415              		.set	.LANCHOR16,. + 0
 1418              	h_ctl_roll_attitude_gain:
 1419 0000 00000000 		.space	4
 1420              		.section	.bss.h_ctl_aileron_of_throttle,"aw",%nobits
 1421              		.align	2
 1422              		.set	.LANCHOR20,. + 0
 1425              	h_ctl_aileron_of_throttle:
 1426 0000 00000000 		.space	4
 1427              		.section	.bss.h_ctl_pitch_loop_setpoint,"aw",%nobits
 1428              		.align	2
 1429              		.set	.LANCHOR10,. + 0
 1432              	h_ctl_pitch_loop_setpoint:
 1433 0000 00000000 		.space	4
 1434              		.section	.bss.h_ctl_roll_pgain,"aw",%nobits
 1435              		.align	2
 1438              	h_ctl_roll_pgain:
 1439 0000 00000000 		.space	4
 1440              		.text
 1441              	.Letext0:
 1442              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1443              		.file 6 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1444              		.file 7 "/home/dino/paparazzi/sw/include/std.h"
 1445              		.file 8 "./paparazzi.h"
 1446              		.file 9 "./math/pprz_algebra_int.h"
 1447              		.file 10 "./math/pprz_algebra_float.h"
 1448              		.file 11 "./math/pprz_geodetic_int.h"
 1449              		.file 12 "./math/pprz_geodetic_float.h"
 1450              		.file 13 "./mcu_periph/link_device.h"
 1451              		.file 14 "./subsystems/datalink/transport.h"
 1452              		.file 15 "./mcu_periph/sys_time.h"
 1453              		.file 16 "./subsystems/datalink/xbee.h"
 1454              		.file 17 "./subsystems/datalink/telemetry_common.h"
 1455              		.file 18 "./firmwares/fixedwing/guidance/guidance_common.h"
 1456              		.file 19 "./firmwares/fixedwing/autopilot.h"
 1457              		.file 20 "./subsystems/settings.h"
 1458              		.file 21 "./subsystems/datalink/datalink.h"
 1459              		.file 22 "./subsystems/datalink/w5100.h"
 1460              		.file 23 "/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/periodic_telemetry.h"
 1461              		.file 24 "./subsystems/datalink/telemetry.h"
 1462              		.file 25 "../ext/libopencm3/include/libopencm3/stm32/f4/rcc.h"
 1463              		.file 26 "/usr/arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stabilization_attitude.c
     /tmp/ccg2O2qV.s:20     .text.stateGetHorizontalSpeedNorm_f:00000000 $t
     /tmp/ccg2O2qV.s:24     .text.stateGetHorizontalSpeedNorm_f:00000000 stateGetHorizontalSpeedNorm_f
     /tmp/ccg2O2qV.s:50     .text.stateGetHorizontalSpeedNorm_f:00000014 $d
     /tmp/ccg2O2qV.s:56     .text.send_calibration:00000000 $t
     /tmp/ccg2O2qV.s:60     .text.send_calibration:00000000 send_calibration
     /tmp/ccg2O2qV.s:197    .text.send_calibration:000000a8 $d
     /tmp/ccg2O2qV.s:204    .text.orientationGetEulers_f.constprop.1:00000000 $t
     /tmp/ccg2O2qV.s:208    .text.orientationGetEulers_f.constprop.1:00000000 orientationGetEulers_f.constprop.1
     /tmp/ccg2O2qV.s:236    .text.orientationGetEulers_f.constprop.1:00000018 $d
     /tmp/ccg2O2qV.s:242    .text.h_ctl_init:00000000 $t
     /tmp/ccg2O2qV.s:247    .text.h_ctl_init:00000000 h_ctl_init
     /tmp/ccg2O2qV.s:338    .text.h_ctl_init:00000070 $d
     /tmp/ccg2O2qV.s:379    .text.h_ctl_course_loop:00000000 $t
     /tmp/ccg2O2qV.s:384    .text.h_ctl_course_loop:00000000 h_ctl_course_loop
     /tmp/ccg2O2qV.s:822    .text.h_ctl_course_loop:00000310 $d
     /tmp/ccg2O2qV.s:850    .text.h_ctl_course_loop:00000378 $t
     /tmp/ccg2O2qV.s:964    .text.h_ctl_course_loop:00000438 $d
     /tmp/ccg2O2qV.s:974    .text.h_ctl_attitude_loop:00000000 $t
     /tmp/ccg2O2qV.s:979    .text.h_ctl_attitude_loop:00000000 h_ctl_attitude_loop
     /tmp/ccg2O2qV.s:1232   .text.h_ctl_attitude_loop:0000017c $d
     /tmp/ccg2O2qV.s:1345   .bss.h_ctl_roll_rate_gain:00000000 h_ctl_roll_rate_gain
     /tmp/ccg2O2qV.s:1418   .bss.h_ctl_roll_attitude_gain:00000000 h_ctl_roll_attitude_gain
     /tmp/ccg2O2qV.s:1326   .bss.h_ctl_elevator_of_roll:00000000 h_ctl_elevator_of_roll
     /tmp/ccg2O2qV.s:1425   .bss.h_ctl_aileron_of_throttle:00000000 h_ctl_aileron_of_throttle
     /tmp/ccg2O2qV.s:1319   .bss.h_ctl_elevator_setpoint:00000000 h_ctl_elevator_setpoint
     /tmp/ccg2O2qV.s:1369   .bss.h_ctl_pitch_dgain:00000000 h_ctl_pitch_dgain
     /tmp/ccg2O2qV.s:1376   .bss.h_ctl_pitch_pgain:00000000 h_ctl_pitch_pgain
     /tmp/ccg2O2qV.s:1432   .bss.h_ctl_pitch_loop_setpoint:00000000 h_ctl_pitch_loop_setpoint
     /tmp/ccg2O2qV.s:1312   .bss.h_ctl_pitch_setpoint:00000000 h_ctl_pitch_setpoint
     /tmp/ccg2O2qV.s:1305   .bss.h_ctl_roll_slew:00000000 h_ctl_roll_slew
     /tmp/ccg2O2qV.s:1291   .bss.h_ctl_aileron_setpoint:00000000 h_ctl_aileron_setpoint
     /tmp/ccg2O2qV.s:1438   .bss.h_ctl_roll_pgain:00000000 h_ctl_roll_pgain
     /tmp/ccg2O2qV.s:1352   .bss.h_ctl_roll_setpoint:00000000 h_ctl_roll_setpoint
     /tmp/ccg2O2qV.s:1338   .bss.h_ctl_auto1_rate:00000000 h_ctl_auto1_rate
     /tmp/ccg2O2qV.s:1277   .bss.h_ctl_disabled:00000000 h_ctl_disabled
     /tmp/ccg2O2qV.s:1397   .bss.h_ctl_roll_max_setpoint:00000000 h_ctl_roll_max_setpoint
     /tmp/ccg2O2qV.s:1404   .bss.h_ctl_course_dgain:00000000 h_ctl_course_dgain
     /tmp/ccg2O2qV.s:1383   .bss.h_ctl_course_pgain:00000000 h_ctl_course_pgain
     /tmp/ccg2O2qV.s:1390   .bss.h_ctl_course_pre_bank_correction:00000000 h_ctl_course_pre_bank_correction
     /tmp/ccg2O2qV.s:1298   .bss.h_ctl_course_pre_bank:00000000 h_ctl_course_pre_bank
     /tmp/ccg2O2qV.s:1362   .bss.h_ctl_course_setpoint:00000000 h_ctl_course_setpoint
     /tmp/ccg2O2qV.s:1278   .bss.h_ctl_disabled:00000000 $d
     /tmp/ccg2O2qV.s:1280   .bss.last_err.10893:00000000 $d
     /tmp/ccg2O2qV.s:1284   .bss.last_err.10893:00000000 last_err.10893
     /tmp/ccg2O2qV.s:1287   .bss.h_ctl_aileron_setpoint:00000000 $d
     /tmp/ccg2O2qV.s:1294   .bss.h_ctl_course_pre_bank:00000000 $d
     /tmp/ccg2O2qV.s:1301   .bss.h_ctl_roll_slew:00000000 $d
     /tmp/ccg2O2qV.s:1308   .bss.h_ctl_pitch_setpoint:00000000 $d
     /tmp/ccg2O2qV.s:1315   .bss.h_ctl_elevator_setpoint:00000000 $d
     /tmp/ccg2O2qV.s:1322   .bss.h_ctl_elevator_of_roll:00000000 $d
     /tmp/ccg2O2qV.s:1329   .bss.last_err.10933:00000000 $d
     /tmp/ccg2O2qV.s:1333   .bss.last_err.10933:00000000 last_err.10933
     /tmp/ccg2O2qV.s:1339   .bss.h_ctl_auto1_rate:00000000 $d
     /tmp/ccg2O2qV.s:1341   .bss.h_ctl_roll_rate_gain:00000000 $d
     /tmp/ccg2O2qV.s:1348   .bss.h_ctl_roll_setpoint:00000000 $d
     /tmp/ccg2O2qV.s:1358   .bss.h_ctl_course_setpoint:00000000 $d
     /tmp/ccg2O2qV.s:1365   .bss.h_ctl_pitch_dgain:00000000 $d
     /tmp/ccg2O2qV.s:1372   .bss.h_ctl_pitch_pgain:00000000 $d
     /tmp/ccg2O2qV.s:1379   .bss.h_ctl_course_pgain:00000000 $d
     /tmp/ccg2O2qV.s:1386   .bss.h_ctl_course_pre_bank_correction:00000000 $d
     /tmp/ccg2O2qV.s:1393   .bss.h_ctl_roll_max_setpoint:00000000 $d
     /tmp/ccg2O2qV.s:1400   .bss.h_ctl_course_dgain:00000000 $d
     /tmp/ccg2O2qV.s:1407   .bss.nav_ratio:00000000 $d
     /tmp/ccg2O2qV.s:1411   .bss.nav_ratio:00000000 nav_ratio
     /tmp/ccg2O2qV.s:1414   .bss.h_ctl_roll_attitude_gain:00000000 $d
     /tmp/ccg2O2qV.s:1421   .bss.h_ctl_aileron_of_throttle:00000000 $d
     /tmp/ccg2O2qV.s:1428   .bss.h_ctl_pitch_loop_setpoint:00000000 $d
     /tmp/ccg2O2qV.s:1435   .bss.h_ctl_roll_pgain:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.7f506cdee5614e5fae524d20989ad8c8
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.stddef.h.263.49e44f5ee9cdd8820580fc4aa239e32a
                           .group:00000000 wm4.inttypes.h.23.a096771aacee9aba4b33c2d04aacc9b1
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4._ansi.h.13.1b5575dc7921a4c0cff7dbaa2f33e670
                           .group:00000000 wm4.stddef.h.39.2b75ea897b59bf67f50e970d678806e4
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.math.h.35.ad242c9287d2217c7d2035216e5d04ca
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.paparazzi.h.2.eeb1c9dc8e5acded3c1d3014b2b23af3
                           .group:00000000 wm4.airframe.h.5.55ffe79377b235d0a97162ed16ec170d
                           .group:00000000 wm4.apogee_1.0.h.2.34ab7bb688056eecb54e2e3ffff48ca6
                           .group:00000000 wm4.actuators_pwm_arch.h.27.5a737f85d71223e6481c4ba4068c062a
                           .group:00000000 wm4.airframe.h.14.814d9a421a57ec2d434c7b6efc262c4b
                           .group:00000000 wm4.common.h.21.22efaac882611267214d0a36f6f15e74
                           .group:00000000 wm4.memorymap.h.21.0c01d18fc5814f65c6ceb1822d4030fa
                           .group:00000000 wm4.memorymap.h.28.85f6f5de65b1d4294c70f79052a0b8c0
                           .group:00000000 wm4.gpio_common_all.h.37.fedbbcb9179f773c905aa3c3e4b7dbdd
                           .group:00000000 wm4.gpio_common_f234.h.48.ee30692f386eaf6801df27cae93943b1
                           .group:00000000 wm4.gpio_common_f24.h.48.4e4be5e3ebe26aee10d604e2d0fecde8
                           .group:00000000 wm4.rcc.h.46.c4bbaa886b7ca1bd1829424ae12e70af
                           .group:00000000 wm4.led_hw.h.40.8014fb3594847a9d275099fc6ed94641
                           .group:00000000 wm4.led.h.99.0116146560b22524df8538874a4f60bf
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_trig_int.h.28.b756be608c9d9f3092a41321446e5fa2
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.pprz_algebra_int.h.68.04ac162ae1e1d94f716d0bb402062624
                           .group:00000000 wm4.pprz_algebra_float.h.98.bb035bcbfa66bb186e7ea81143fd64bc
                           .group:00000000 wm4.pprz_geodetic.h.35.f7fdb5d11659b92d11c7ce67b6317005
                           .group:00000000 wm4.pprz_geodetic_int.h.127.8e737bed5ba4468e470311184b1fca7f
                           .group:00000000 wm4.pprz_orientation_conversion.h.69.5cce798fefad8bb761767fd414e61db5
                           .group:00000000 wm4.state.h.65.b18954aacb3801ec3e27b4e857d620d3
                           .group:00000000 wm4.guidance_common.h.29.1bf3aadf5e973d07dcbb9e181585cee6
                           .group:00000000 wm4.nav_survey_rectangle.h.40.be8d41ad6903a05cab94fc858d7a6899
                           .group:00000000 wm4.common_flight_plan.h.28.998f628cac1ef266b3e88de20c1aaea2
                           .group:00000000 wm4.common_nav.h.28.8e6fb87079f62fdfc188e60962e671bb
                           .group:00000000 wm4.nav.h.44.3eb88fcdae84be242ba32ecd12ce1b48
                           .group:00000000 wm4.autopilot.h.30.ee409bd820c66670b9a54e06be9565ca
                           .group:00000000 wm4.settings.h.29.dff4b7c685fcd0dfb04f9f8de0a69e75
                           .group:00000000 wm4.messages.h.5.f850659c40a03ab37f86f316388d85a9
                           .group:00000000 wm4.uart_arch.h.30.cb8e70feae0b6afe250750f6c1439671
                           .group:00000000 wm4.uart.h.35.4345324d45fae43faace58e743d48e42
                           .group:00000000 wm4.modules.h.5.3647ee45f49511088e2f33d88288be64
                           .group:00000000 wm4.gps_ubx_ucenter.h.29.30a3f1ed020dbc7085e412c29746d829
                           .group:00000000 wm4.modules.h.23.3d04ad9f740a156fcd476d18714df592
                           .group:00000000 wm4.datalink.h.28.0d234a7c203533b2ec538be3e18eddf4
                           .group:00000000 wm4.dl_protocol.h.5.a12fe27a4b4a3cbb46fbca8acf33e3dd
                           .group:00000000 wm4.datalink.h.46.36a5e0f36fb7d0784f1e7af767537c84
                           .group:00000000 wm4.pprz_transport.h.57.167db0ee96032e142f5d6e570b3339aa
                           .group:00000000 wm4.sys_time.h.31.454ffebb4f6baf6e87ab8a60104a5808
                           .group:00000000 wm4.systick.h.44.34e759e1f218a187b07e9a617cb1d556
                           .group:00000000 wm4.sys_time.h.213.4ee43452c5934214134db56488f53299
                           .group:00000000 wm4.xbee24.h.29.a6677f8bcb71d3b07e11290a2de0e179
                           .group:00000000 wm4.xbee.h.41.f36be817f95b74f883aef9324b53817b
                           .group:00000000 wm4.w5100.h.29.d3529bed8de657ab3944b343be960f10
                           .group:00000000 wm4.downlink.h.76.41034157e32fc9012166fd95ec7418fc
                           .group:00000000 wm4.periodic_telemetry.h.11.f25aadf344a171d516cf4756f716329b

UNDEFINED SYMBOLS
stateCalcHorizontalSpeedNorm_f
state
v_ctl_auto_throttle_sum_err
v_ctl_auto_throttle_submode
orientationCalcEulers_f
register_periodic_telemetry
pprz_telemetry
__aeabi_dsub
__aeabi_d2f
__aeabi_f2d
__aeabi_dcmpgt
__aeabi_dadd
__aeabi_dcmplt
__aeabi_dmul
__aeabi_ddiv
stateCalcHorizontalSpeedDir_f
cos
v_ctl_altitude_error
stateCalcBodyRates_f
v_ctl_throttle_setpoint
