   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"imu.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.orientationGetEulers_f,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	orientationGetEulers_f:
  25              	.LFB53:
  26              		.file 1 "./math/pprz_orientation_conversion.h"
   1:./math/pprz_orientation_conversion.h **** /*
   2:./math/pprz_orientation_conversion.h ****  * Copyright (C) 2011-2012 The Paparazzi Team
   3:./math/pprz_orientation_conversion.h ****  *
   4:./math/pprz_orientation_conversion.h ****  * This file is part of paparazzi.
   5:./math/pprz_orientation_conversion.h ****  *
   6:./math/pprz_orientation_conversion.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./math/pprz_orientation_conversion.h ****  * it under the terms of the GNU General Public License as published by
   8:./math/pprz_orientation_conversion.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./math/pprz_orientation_conversion.h ****  * any later version.
  10:./math/pprz_orientation_conversion.h ****  *
  11:./math/pprz_orientation_conversion.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:./math/pprz_orientation_conversion.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./math/pprz_orientation_conversion.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./math/pprz_orientation_conversion.h ****  * GNU General Public License for more details.
  15:./math/pprz_orientation_conversion.h ****  *
  16:./math/pprz_orientation_conversion.h ****  * You should have received a copy of the GNU General Public License
  17:./math/pprz_orientation_conversion.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./math/pprz_orientation_conversion.h ****  * <http://www.gnu.org/licenses/>.
  19:./math/pprz_orientation_conversion.h ****  */
  20:./math/pprz_orientation_conversion.h **** 
  21:./math/pprz_orientation_conversion.h **** /**
  22:./math/pprz_orientation_conversion.h ****  * @file math/pprz_orientation_conversion.h
  23:./math/pprz_orientation_conversion.h ****  * Generic orientation representation and conversions.
  24:./math/pprz_orientation_conversion.h ****  *
  25:./math/pprz_orientation_conversion.h ****  * This file contains the functions to automatically convert between
  26:./math/pprz_orientation_conversion.h ****  * the different representations. They should normally not be used
  27:./math/pprz_orientation_conversion.h ****  * directly and instead the stateGet/Set interfaces used.
  28:./math/pprz_orientation_conversion.h ****  * Also see the @ref math_orientation_representation "Generic Orientation Representation" page.
  29:./math/pprz_orientation_conversion.h ****  *
  30:./math/pprz_orientation_conversion.h ****  * @author Felix Ruess <felix.ruess@gmail.com>
  31:./math/pprz_orientation_conversion.h ****  */
  32:./math/pprz_orientation_conversion.h **** 
  33:./math/pprz_orientation_conversion.h **** /**
  34:./math/pprz_orientation_conversion.h ****  * @addtogroup math
  35:./math/pprz_orientation_conversion.h ****  * @{
  36:./math/pprz_orientation_conversion.h ****  */
  37:./math/pprz_orientation_conversion.h **** 
  38:./math/pprz_orientation_conversion.h **** /**
  39:./math/pprz_orientation_conversion.h ****  * This generic orientation representation consists of a struct, containing the 6 orientation
  40:./math/pprz_orientation_conversion.h ****  * representations, and a status variable. The bits in the status variable indicate  which
  41:./math/pprz_orientation_conversion.h ****  * representations of the orientation are up-to-date.
  42:./math/pprz_orientation_conversion.h ****  *
  43:./math/pprz_orientation_conversion.h ****  * When a getter is used to get a certain representation, the status bit is checked to see if
  44:./math/pprz_orientation_conversion.h ****  * the current value is already available in the desired orientation representation.
  45:./math/pprz_orientation_conversion.h ****  * If the desired representation is not available, it will be calculated.
  46:./math/pprz_orientation_conversion.h ****  *
  47:./math/pprz_orientation_conversion.h ****  * When a setter is used to set a representation, all status bits are cleared, and only the
  48:./math/pprz_orientation_conversion.h ****  * status bit for the set representation is set to one.
  49:./math/pprz_orientation_conversion.h ****  */
  50:./math/pprz_orientation_conversion.h **** 
  51:./math/pprz_orientation_conversion.h **** /**
  52:./math/pprz_orientation_conversion.h ****  * @defgroup math_orientation_representation Generic Orientation Representations
  53:./math/pprz_orientation_conversion.h ****  * @{
  54:./math/pprz_orientation_conversion.h ****  */
  55:./math/pprz_orientation_conversion.h **** 
  56:./math/pprz_orientation_conversion.h **** #ifndef PPRZ_ORIENTATION_CONVERSION_H
  57:./math/pprz_orientation_conversion.h **** #define PPRZ_ORIENTATION_CONVERSION_H
  58:./math/pprz_orientation_conversion.h **** 
  59:./math/pprz_orientation_conversion.h **** #ifdef __cplusplus
  60:./math/pprz_orientation_conversion.h **** extern "C" {
  61:./math/pprz_orientation_conversion.h **** #endif
  62:./math/pprz_orientation_conversion.h **** 
  63:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_int.h"
  64:./math/pprz_orientation_conversion.h **** #include "math/pprz_algebra_float.h"
  65:./math/pprz_orientation_conversion.h **** 
  66:./math/pprz_orientation_conversion.h **** #include "std.h"
  67:./math/pprz_orientation_conversion.h **** 
  68:./math/pprz_orientation_conversion.h **** 
  69:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_I  0  ///< Quaternion (BFP int)
  70:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_I 1  ///< zyx Euler (BFP int)
  71:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_I  2  ///< Rotation Matrix (BFP int)
  72:./math/pprz_orientation_conversion.h **** #define ORREP_QUAT_F  3  ///< Quaternion (float)
  73:./math/pprz_orientation_conversion.h **** #define ORREP_EULER_F 4  ///< zyx Euler (float)
  74:./math/pprz_orientation_conversion.h **** #define ORREP_RMAT_F  5  ///< Rotation Matrix (float)
  75:./math/pprz_orientation_conversion.h **** 
  76:./math/pprz_orientation_conversion.h **** /*
  77:./math/pprz_orientation_conversion.h ****  * @brief Struct with euler/rmat/quaternion orientation representations in BFP int and float
  78:./math/pprz_orientation_conversion.h ****  */
  79:./math/pprz_orientation_conversion.h **** struct OrientationReps {
  80:./math/pprz_orientation_conversion.h ****   /**
  81:./math/pprz_orientation_conversion.h ****    * Holds the status bits for all orientation representations.
  82:./math/pprz_orientation_conversion.h ****    * When the corresponding bit is set, the representation
  83:./math/pprz_orientation_conversion.h ****    * is already computed.
  84:./math/pprz_orientation_conversion.h ****    */
  85:./math/pprz_orientation_conversion.h ****   uint8_t status;
  86:./math/pprz_orientation_conversion.h **** 
  87:./math/pprz_orientation_conversion.h ****   /**
  88:./math/pprz_orientation_conversion.h ****    * Orientation quaternion.
  89:./math/pprz_orientation_conversion.h ****    * Units: #INT32_QUAT_FRAC
  90:./math/pprz_orientation_conversion.h ****    */
  91:./math/pprz_orientation_conversion.h ****   struct Int32Quat quat_i;
  92:./math/pprz_orientation_conversion.h **** 
  93:./math/pprz_orientation_conversion.h ****   /**
  94:./math/pprz_orientation_conversion.h ****    * Orientation in zyx euler angles.
  95:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_ANGLE_FRAC
  96:./math/pprz_orientation_conversion.h ****    */
  97:./math/pprz_orientation_conversion.h ****   struct Int32Eulers eulers_i;
  98:./math/pprz_orientation_conversion.h **** 
  99:./math/pprz_orientation_conversion.h ****   /**
 100:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
 101:./math/pprz_orientation_conversion.h ****    * Units: rad in BFP with #INT32_TRIG_FRAC
 102:./math/pprz_orientation_conversion.h ****    */
 103:./math/pprz_orientation_conversion.h ****   struct Int32RMat rmat_i;
 104:./math/pprz_orientation_conversion.h **** 
 105:./math/pprz_orientation_conversion.h ****   /**
 106:./math/pprz_orientation_conversion.h ****    * Orientation as quaternion.
 107:./math/pprz_orientation_conversion.h ****    * Units: unit length quaternion
 108:./math/pprz_orientation_conversion.h ****    */
 109:./math/pprz_orientation_conversion.h ****   struct FloatQuat quat_f;
 110:./math/pprz_orientation_conversion.h **** 
 111:./math/pprz_orientation_conversion.h ****   /**
 112:./math/pprz_orientation_conversion.h ****    * Orienation in zyx euler angles.
 113:./math/pprz_orientation_conversion.h ****    * Units: rad
 114:./math/pprz_orientation_conversion.h ****    */
 115:./math/pprz_orientation_conversion.h ****   struct FloatEulers eulers_f;
 116:./math/pprz_orientation_conversion.h **** 
 117:./math/pprz_orientation_conversion.h ****   /**
 118:./math/pprz_orientation_conversion.h ****    * Orientation rotation matrix.
 119:./math/pprz_orientation_conversion.h ****    * Units: rad
 120:./math/pprz_orientation_conversion.h ****    */
 121:./math/pprz_orientation_conversion.h ****   struct FloatRMat   rmat_f;
 122:./math/pprz_orientation_conversion.h **** };
 123:./math/pprz_orientation_conversion.h **** 
 124:./math/pprz_orientation_conversion.h **** /************* declaration of transformation functions ************/
 125:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_i(struct OrientationReps *orientation);
 126:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_i(struct OrientationReps *orientation);
 127:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_i(struct OrientationReps *orientation);
 128:./math/pprz_orientation_conversion.h **** extern void orientationCalcQuat_f(struct OrientationReps *orientation);
 129:./math/pprz_orientation_conversion.h **** extern void orientationCalcRMat_f(struct OrientationReps *orientation);
 130:./math/pprz_orientation_conversion.h **** extern void orientationCalcEulers_f(struct OrientationReps *orientation);
 131:./math/pprz_orientation_conversion.h **** 
 132:./math/pprz_orientation_conversion.h **** 
 133:./math/pprz_orientation_conversion.h **** /*********************** validity test functions ******************/
 134:./math/pprz_orientation_conversion.h **** /// Test if orientations are valid.
 135:./math/pprz_orientation_conversion.h **** static inline bool_t orienationCheckValid(struct OrientationReps *orientation)
 136:./math/pprz_orientation_conversion.h **** {
 137:./math/pprz_orientation_conversion.h ****   return (orientation->status);
 138:./math/pprz_orientation_conversion.h **** }
 139:./math/pprz_orientation_conversion.h **** 
 140:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (int).
 141:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_i(struct OrientationReps *orientation, struct Int32Quat *quat
 142:./math/pprz_orientation_conversion.h **** {
 143:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_i, *quat);
 144:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 145:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_I);
 146:./math/pprz_orientation_conversion.h **** }
 147:./math/pprz_orientation_conversion.h **** 
 148:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (int).
 149:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_i(struct OrientationReps *orientation, struct Int32RMat *rmat
 150:./math/pprz_orientation_conversion.h **** {
 151:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_i, *rmat);
 152:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 153:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_I);
 154:./math/pprz_orientation_conversion.h **** }
 155:./math/pprz_orientation_conversion.h **** 
 156:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (int).
 157:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_i(struct OrientationReps *orientation, struct Int32Eulers *
 158:./math/pprz_orientation_conversion.h **** {
 159:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_i, *eulers);
 160:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 161:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_I);
 162:./math/pprz_orientation_conversion.h **** }
 163:./math/pprz_orientation_conversion.h **** 
 164:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from quaternion (float).
 165:./math/pprz_orientation_conversion.h **** static inline void orientationSetQuat_f(struct OrientationReps *orientation, struct FloatQuat *quat
 166:./math/pprz_orientation_conversion.h **** {
 167:./math/pprz_orientation_conversion.h ****   QUAT_COPY(orientation->quat_f, *quat);
 168:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 169:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_QUAT_F);
 170:./math/pprz_orientation_conversion.h **** }
 171:./math/pprz_orientation_conversion.h **** 
 172:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from rotation matrix (float).
 173:./math/pprz_orientation_conversion.h **** static inline void orientationSetRMat_f(struct OrientationReps *orientation, struct FloatRMat *rmat
 174:./math/pprz_orientation_conversion.h **** {
 175:./math/pprz_orientation_conversion.h ****   RMAT_COPY(orientation->rmat_f, *rmat);
 176:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 177:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_RMAT_F);
 178:./math/pprz_orientation_conversion.h **** }
 179:./math/pprz_orientation_conversion.h **** 
 180:./math/pprz_orientation_conversion.h **** /// Set vehicle body attitude from euler angles (float).
 181:./math/pprz_orientation_conversion.h **** static inline void orientationSetEulers_f(struct OrientationReps *orientation, struct FloatEulers *
 182:./math/pprz_orientation_conversion.h **** {
 183:./math/pprz_orientation_conversion.h ****   EULERS_COPY(orientation->eulers_f, *eulers);
 184:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 185:./math/pprz_orientation_conversion.h ****   orientation->status = (1 << ORREP_EULER_F);
 186:./math/pprz_orientation_conversion.h **** }
 187:./math/pprz_orientation_conversion.h **** 
 188:./math/pprz_orientation_conversion.h **** 
 189:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (int).
 190:./math/pprz_orientation_conversion.h **** static inline struct Int32Quat *orientationGetQuat_i(struct OrientationReps *orientation)
 191:./math/pprz_orientation_conversion.h **** {
 192:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_I)) {
 193:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_i(orientation);
 194:./math/pprz_orientation_conversion.h ****   }
 195:./math/pprz_orientation_conversion.h ****   return &orientation->quat_i;
 196:./math/pprz_orientation_conversion.h **** }
 197:./math/pprz_orientation_conversion.h **** 
 198:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (int).
 199:./math/pprz_orientation_conversion.h **** static inline struct Int32RMat *orientationGetRMat_i(struct OrientationReps *orientation)
 200:./math/pprz_orientation_conversion.h **** {
 201:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_I)) {
 202:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_i(orientation);
 203:./math/pprz_orientation_conversion.h ****   }
 204:./math/pprz_orientation_conversion.h ****   return &orientation->rmat_i;
 205:./math/pprz_orientation_conversion.h **** }
 206:./math/pprz_orientation_conversion.h **** 
 207:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude euler angles (int).
 208:./math/pprz_orientation_conversion.h **** static inline struct Int32Eulers *orientationGetEulers_i(struct OrientationReps *orientation)
 209:./math/pprz_orientation_conversion.h **** {
 210:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_I)) {
 211:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_i(orientation);
 212:./math/pprz_orientation_conversion.h ****   }
 213:./math/pprz_orientation_conversion.h ****   return &orientation->eulers_i;
 214:./math/pprz_orientation_conversion.h **** }
 215:./math/pprz_orientation_conversion.h **** 
 216:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude quaternion (float).
 217:./math/pprz_orientation_conversion.h **** static inline struct FloatQuat *orientationGetQuat_f(struct OrientationReps *orientation)
 218:./math/pprz_orientation_conversion.h **** {
 219:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_QUAT_F)) {
 220:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_f(orientation);
 221:./math/pprz_orientation_conversion.h ****   }
 222:./math/pprz_orientation_conversion.h ****   return &orientation->quat_f;
 223:./math/pprz_orientation_conversion.h **** }
 224:./math/pprz_orientation_conversion.h **** 
 225:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude rotation matrix (float).
 226:./math/pprz_orientation_conversion.h **** static inline struct FloatRMat *orientationGetRMat_f(struct OrientationReps *orientation)
 227:./math/pprz_orientation_conversion.h **** {
 228:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_RMAT_F)) {
 229:./math/pprz_orientation_conversion.h ****     orientationCalcRMat_f(orientation);
 230:./math/pprz_orientation_conversion.h ****   }
 231:./math/pprz_orientation_conversion.h ****   return &orientation->rmat_f;
 232:./math/pprz_orientation_conversion.h **** }
 233:./math/pprz_orientation_conversion.h **** 
 234:./math/pprz_orientation_conversion.h **** /// Get vehicle body attitude euler angles (float).
 235:./math/pprz_orientation_conversion.h **** static inline struct FloatEulers *orientationGetEulers_f(struct OrientationReps *orientation)
 236:./math/pprz_orientation_conversion.h **** {
  27              		.loc 1 236 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
 237:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_F)) {
  36              		.loc 1 237 0
  37 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  38 0004 DB06     		lsls	r3, r3, #27
 236:./math/pprz_orientation_conversion.h ****   if (!bit_is_set(orientation->status, ORREP_EULER_F)) {
  39              		.loc 1 236 0
  40 0006 0446     		mov	r4, r0
  41              		.loc 1 237 0
  42 0008 01D4     		bmi	.L2
 238:./math/pprz_orientation_conversion.h ****     orientationCalcEulers_f(orientation);
  43              		.loc 1 238 0
  44 000a FFF7FEFF 		bl	orientationCalcEulers_f
  45              	.LVL1:
  46              	.L2:
 239:./math/pprz_orientation_conversion.h ****   }
 240:./math/pprz_orientation_conversion.h ****   return &orientation->eulers_f;
 241:./math/pprz_orientation_conversion.h **** }
  47              		.loc 1 241 0
  48 000e 04F15400 		add	r0, r4, #84
  49 0012 10BD     		pop	{r4, pc}
  50              		.cfi_endproc
  51              	.LFE53:
  53              		.section	.text.send_mag_raw,"ax",%progbits
  54              		.align	1
  55              		.thumb
  56              		.thumb_func
  58              	send_mag_raw:
  59              	.LFB483:
  60              		.file 2 "subsystems/imu.c"
   1:subsystems/imu.c **** /*
   2:subsystems/imu.c ****  * Copyright (C) 2008-2010 The Paparazzi Team
   3:subsystems/imu.c ****  *
   4:subsystems/imu.c ****  * This file is part of paparazzi.
   5:subsystems/imu.c ****  *
   6:subsystems/imu.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:subsystems/imu.c ****  * it under the terms of the GNU General Public License as published by
   8:subsystems/imu.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:subsystems/imu.c ****  * any later version.
  10:subsystems/imu.c ****  *
  11:subsystems/imu.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:subsystems/imu.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:subsystems/imu.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:subsystems/imu.c ****  * GNU General Public License for more details.
  15:subsystems/imu.c ****  *
  16:subsystems/imu.c ****  * You should have received a copy of the GNU General Public License
  17:subsystems/imu.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:subsystems/imu.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:subsystems/imu.c ****  * Boston, MA 02111-1307, USA.
  20:subsystems/imu.c ****  */
  21:subsystems/imu.c **** 
  22:subsystems/imu.c **** /**
  23:subsystems/imu.c ****  * @file subsystems/imu.c
  24:subsystems/imu.c ****  * Inertial Measurement Unit interface.
  25:subsystems/imu.c ****  */
  26:subsystems/imu.c **** 
  27:subsystems/imu.c **** #ifdef BOARD_CONFIG
  28:subsystems/imu.c **** #include BOARD_CONFIG
  29:subsystems/imu.c **** #endif
  30:subsystems/imu.c **** 
  31:subsystems/imu.c **** #include "subsystems/imu.h"
  32:subsystems/imu.c **** #include "state.h"
  33:subsystems/imu.c **** #include "subsystems/abi.h"
  34:subsystems/imu.c **** 
  35:subsystems/imu.c **** #ifdef IMU_POWER_GPIO
  36:subsystems/imu.c **** #include "mcu_periph/gpio.h"
  37:subsystems/imu.c **** 
  38:subsystems/imu.c **** #ifndef IMU_POWER_GPIO_ON
  39:subsystems/imu.c **** #define IMU_POWER_GPIO_ON gpio_set
  40:subsystems/imu.c **** #endif
  41:subsystems/imu.c **** #endif
  42:subsystems/imu.c **** 
  43:subsystems/imu.c **** #if PERIODIC_TELEMETRY
  44:subsystems/imu.c **** #include "subsystems/datalink/telemetry.h"
  45:subsystems/imu.c **** 
  46:subsystems/imu.c **** static void send_accel_raw(struct transport_tx *trans, struct link_device *dev)
  47:subsystems/imu.c **** {
  48:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL_RAW(trans, dev, AC_ID,
  49:subsystems/imu.c ****                               &imu.accel_unscaled.x, &imu.accel_unscaled.y, &imu.accel_unscaled.z);
  50:subsystems/imu.c **** }
  51:subsystems/imu.c **** 
  52:subsystems/imu.c **** static void send_accel_scaled(struct transport_tx *trans, struct link_device *dev)
  53:subsystems/imu.c **** {
  54:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL_SCALED(trans, dev, AC_ID,
  55:subsystems/imu.c ****                                  &imu.accel.x, &imu.accel.y, &imu.accel.z);
  56:subsystems/imu.c **** }
  57:subsystems/imu.c **** 
  58:subsystems/imu.c **** static void send_accel(struct transport_tx *trans, struct link_device *dev)
  59:subsystems/imu.c **** {
  60:subsystems/imu.c ****   struct FloatVect3 accel_float;
  61:subsystems/imu.c ****   ACCELS_FLOAT_OF_BFP(accel_float, imu.accel);
  62:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL(trans, dev, AC_ID,
  63:subsystems/imu.c ****                           &accel_float.x, &accel_float.y, &accel_float.z);
  64:subsystems/imu.c **** }
  65:subsystems/imu.c **** 
  66:subsystems/imu.c **** static void send_gyro_raw(struct transport_tx *trans, struct link_device *dev)
  67:subsystems/imu.c **** {
  68:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO_RAW(trans, dev, AC_ID,
  69:subsystems/imu.c ****                              &imu.gyro_unscaled.p, &imu.gyro_unscaled.q, &imu.gyro_unscaled.r);
  70:subsystems/imu.c **** }
  71:subsystems/imu.c **** 
  72:subsystems/imu.c **** static void send_gyro_scaled(struct transport_tx *trans, struct link_device *dev)
  73:subsystems/imu.c **** {
  74:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO_SCALED(trans, dev, AC_ID,
  75:subsystems/imu.c ****                                 &imu.gyro.p, &imu.gyro.q, &imu.gyro.r);
  76:subsystems/imu.c **** }
  77:subsystems/imu.c **** 
  78:subsystems/imu.c **** static void send_gyro(struct transport_tx *trans, struct link_device *dev)
  79:subsystems/imu.c **** {
  80:subsystems/imu.c ****   struct FloatRates gyro_float;
  81:subsystems/imu.c ****   RATES_FLOAT_OF_BFP(gyro_float, imu.gyro);
  82:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO(trans, dev, AC_ID,
  83:subsystems/imu.c ****                          &gyro_float.p, &gyro_float.q, &gyro_float.r);
  84:subsystems/imu.c **** }
  85:subsystems/imu.c **** 
  86:subsystems/imu.c **** static void send_mag_raw(struct transport_tx *trans, struct link_device *dev)
  87:subsystems/imu.c **** {
  61              		.loc 2 87 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 8
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              	.LVL2:
  66 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  67              		.cfi_def_cfa_offset 40
  68              		.cfi_offset 4, -24
  69              		.cfi_offset 5, -20
  70              		.cfi_offset 6, -16
  71              		.cfi_offset 7, -12
  72              		.cfi_offset 8, -8
  73              		.cfi_offset 14, -4
  74              	.LBB11:
  75              	.LBB12:
  76              		.file 3 "/home/dino/paparazzi/var/include/messages.h"
   1:/home/dino/paparazzi/var/include/messages.h **** /* Automatically generated by gen_messages from /home/dino/paparazzi/conf/messages.xml */
   2:/home/dino/paparazzi/var/include/messages.h **** /* Please DO NOT EDIT */
   3:/home/dino/paparazzi/var/include/messages.h **** /* Macros to send and receive messages of class telemetry */
   4:/home/dino/paparazzi/var/include/messages.h **** #ifndef _VAR_MESSAGES_telemetry_H_
   5:/home/dino/paparazzi/var/include/messages.h **** #define _VAR_MESSAGES_telemetry_H_
   6:/home/dino/paparazzi/var/include/messages.h **** #include "subsystems/datalink/transport.h"
   7:/home/dino/paparazzi/var/include/messages.h **** #include "mcu_periph/link_device.h"
   8:/home/dino/paparazzi/var/include/messages.h **** #if DOWNLINK
   9:/home/dino/paparazzi/var/include/messages.h **** #define DL_AUTOPILOT_VERSION 1
  10:/home/dino/paparazzi/var/include/messages.h **** #define DL_ALIVE 2
  11:/home/dino/paparazzi/var/include/messages.h **** #define DL_PONG 3
  12:/home/dino/paparazzi/var/include/messages.h **** #define DL_TAKEOFF 4
  13:/home/dino/paparazzi/var/include/messages.h **** #define DL_ARDRONE_NAVDATA 5
  14:/home/dino/paparazzi/var/include/messages.h **** #define DL_ATTITUDE 6
  15:/home/dino/paparazzi/var/include/messages.h **** #define DL_IR_SENSORS 7
  16:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS 8
  17:/home/dino/paparazzi/var/include/messages.h **** #define DL_NAVIGATION_REF 9
  18:/home/dino/paparazzi/var/include/messages.h **** #define DL_NAVIGATION 10
  19:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPRZ_MODE 11
  20:/home/dino/paparazzi/var/include/messages.h **** #define DL_BAT 12
  21:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG_MCU_LINK 13
  22:/home/dino/paparazzi/var/include/messages.h **** #define DL_CALIBRATION 14
  23:/home/dino/paparazzi/var/include/messages.h **** #define DL_SETTINGS 15
  24:/home/dino/paparazzi/var/include/messages.h **** #define DL_DESIRED 16
  25:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_SOL 17
  26:/home/dino/paparazzi/var/include/messages.h **** #define DL_ADC_GENERIC 18
  27:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_FORMAT 19
  28:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAM 20
  29:/home/dino/paparazzi/var/include/messages.h **** #define DL_CIRCLE 21
  30:/home/dino/paparazzi/var/include/messages.h **** #define DL_SEGMENT 22
  31:/home/dino/paparazzi/var/include/messages.h **** #define DL_SVINFO 25
  32:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG 26
  33:/home/dino/paparazzi/var/include/messages.h **** #define DL_SURVEY 27
  34:/home/dino/paparazzi/var/include/messages.h **** #define DL_WC_RSSI 28
  35:/home/dino/paparazzi/var/include/messages.h **** #define DL_RANGEFINDER 29
  36:/home/dino/paparazzi/var/include/messages.h **** #define DL_DATALINK_REPORT 30
  37:/home/dino/paparazzi/var/include/messages.h **** #define DL_DL_VALUE 31
  38:/home/dino/paparazzi/var/include/messages.h **** #define DL_MARK 32
  39:/home/dino/paparazzi/var/include/messages.h **** #define DL_SYS_MON 33
  40:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR 34
  41:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED 35
  42:/home/dino/paparazzi/var/include/messages.h **** #define DL_MKK 36
  43:/home/dino/paparazzi/var/include/messages.h **** #define DL_ENERGY 37
  44:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_BMP85_CALIB 38
  45:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_BMP85 39
  46:/home/dino/paparazzi/var/include/messages.h **** #define DL_SPEED_LOOP 40
  47:/home/dino/paparazzi/var/include/messages.h **** #define DL_ALT_KALMAN 41
  48:/home/dino/paparazzi/var/include/messages.h **** #define DL_ESTIMATOR 42
  49:/home/dino/paparazzi/var/include/messages.h **** #define DL_TUNE_ROLL 43
  50:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_MS5534A 44
  51:/home/dino/paparazzi/var/include/messages.h **** #define DL_PRESSURE 45
  52:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_WORDS 46
  53:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED_LLA 47
  54:/home/dino/paparazzi/var/include/messages.h **** #define DL_CHRONO 48
  55:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED_ENU 49
  56:/home/dino/paparazzi/var/include/messages.h **** #define DL_WINDTURBINE_STATUS_ 50
  57:/home/dino/paparazzi/var/include/messages.h **** #define DL_RC_3CH_ 51
  58:/home/dino/paparazzi/var/include/messages.h **** #define DL_MPPT 52
  59:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG_IR_I2C 53
  60:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED 54
  61:/home/dino/paparazzi/var/include/messages.h **** #define DL_XSENS 55
  62:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_ETS 56
  63:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED_ETS 57
  64:/home/dino/paparazzi/var/include/messages.h **** #define DL_PBN 58
  65:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_LLA 59
  66:/home/dino/paparazzi/var/include/messages.h **** #define DL_H_CTL_A 60
  67:/home/dino/paparazzi/var/include/messages.h **** #define DL_TURB_PRESSURE_RAW 61
  68:/home/dino/paparazzi/var/include/messages.h **** #define DL_TURB_PRESSURE_VOLTAGE 62
  69:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAM_POINT 63
  70:/home/dino/paparazzi/var/include/messages.h **** #define DL_DC_INFO 64
  71:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSYS_BARO 65
  72:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSYS_AIRSPEED 66
  73:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLIGHT_BENCHMARK 67
  74:/home/dino/paparazzi/var/include/messages.h **** #define DL_MPL3115_BARO 68
  75:/home/dino/paparazzi/var/include/messages.h **** #define DL_AOA_ADC 69
  76:/home/dino/paparazzi/var/include/messages.h **** #define DL_XTEND_RSSI 70
  77:/home/dino/paparazzi/var/include/messages.h **** #define DL_SUPERBITRF 72
  78:/home/dino/paparazzi/var/include/messages.h **** #define DL_GX3_INFO 73
  79:/home/dino/paparazzi/var/include/messages.h **** #define DL_EXPLAIN 74
  80:/home/dino/paparazzi/var/include/messages.h **** #define DL_VIDEO_TELEMETRY 75
  81:/home/dino/paparazzi/var/include/messages.h **** #define DL_VF_UPDATE 76
  82:/home/dino/paparazzi/var/include/messages.h **** #define DL_VF_PREDICT 77
  83:/home/dino/paparazzi/var/include/messages.h **** #define DL_INV_FILTER 78
  84:/home/dino/paparazzi/var/include/messages.h **** #define DL_MISSION_STATUS 79
  85:/home/dino/paparazzi/var/include/messages.h **** #define DL_CROSS_TRACK_ERROR 80
  86:/home/dino/paparazzi/var/include/messages.h **** #define DL_GENERIC_COM 81
  87:/home/dino/paparazzi/var/include/messages.h **** #define DL_FORMATION_SLOT_TM 82
  88:/home/dino/paparazzi/var/include/messages.h **** #define DL_FORMATION_STATUS_TM 83
  89:/home/dino/paparazzi/var/include/messages.h **** #define DL_BMP_STATUS 84
  90:/home/dino/paparazzi/var/include/messages.h **** #define DL_MLX_STATUS 85
  91:/home/dino/paparazzi/var/include/messages.h **** #define DL_TMP_STATUS 86
  92:/home/dino/paparazzi/var/include/messages.h **** #define DL_WIND_INFO_RET 87
  93:/home/dino/paparazzi/var/include/messages.h **** #define DL_SCP_STATUS 88
  94:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_STATUS 89
  95:/home/dino/paparazzi/var/include/messages.h **** #define DL_ENOSE_STATUS 90
  96:/home/dino/paparazzi/var/include/messages.h **** #define DL_DPICCO_STATUS 91
  97:/home/dino/paparazzi/var/include/messages.h **** #define DL_ANTENNA_DEBUG 92
  98:/home/dino/paparazzi/var/include/messages.h **** #define DL_ANTENNA_STATUS 93
  99:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR_BENCH_STATUS 94
 100:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR_BENCH_STATIC 95
 101:/home/dino/paparazzi/var/include/messages.h **** #define DL_HIH_STATUS 96
 102:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMT_STATUS 97
 103:/home/dino/paparazzi/var/include/messages.h **** #define DL_GP2Y_STATUS 98
 104:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_I2C_SERIAL 99
 105:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPM 100
 106:/home/dino/paparazzi/var/include/messages.h **** #define DL_RC 101
 107:/home/dino/paparazzi/var/include/messages.h **** #define DL_COMMANDS 102
 108:/home/dino/paparazzi/var/include/messages.h **** #define DL_FBW_STATUS 103
 109:/home/dino/paparazzi/var/include/messages.h **** #define DL_ADC 104
 110:/home/dino/paparazzi/var/include/messages.h **** #define DL_ACTUATORS 105
 111:/home/dino/paparazzi/var/include/messages.h **** #define DL_DC_SHOT 110
 112:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_BOARD_RESULTS 111
 113:/home/dino/paparazzi/var/include/messages.h **** #define DL_MLX_SERIAL 113
 114:/home/dino/paparazzi/var/include/messages.h **** #define DL_PAYLOAD 114
 115:/home/dino/paparazzi/var/include/messages.h **** #define DL_HTM_STATUS 115
 116:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_MS5611 116
 117:/home/dino/paparazzi/var/include/messages.h **** #define DL_MS5611_COEFF 117
 118:/home/dino/paparazzi/var/include/messages.h **** #define DL_ATMOSPHERE_CHARGE 118
 119:/home/dino/paparazzi/var/include/messages.h **** #define DL_SOLAR_RADIATION 119
 120:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_TA 120
 121:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_RA 121
 122:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_RESOLVED 122
 123:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_DEBUG 123
 124:/home/dino/paparazzi/var/include/messages.h **** #define DL_POTENTIAL 124
 125:/home/dino/paparazzi/var/include/messages.h **** #define DL_VERTICAL_ENERGY 125
 126:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMP_TCOUPLE 126
 127:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_I2C_STATUS 127
 128:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAMERA_SNAPSHOT 128
 129:/home/dino/paparazzi/var/include/messages.h **** #define DL_TIMESTAMP 129
 130:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_FLOAT 130
 131:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_SCALED 131
 132:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL_SCALED 132
 133:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_SCALED 133
 134:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER 134
 135:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER2 135
 136:/home/dino/paparazzi/var/include/messages.h **** #define DL_RATE_LOOP 136
 137:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER_ALIGNER 137
 138:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED_MS45XX 138
 139:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER_COR 139
 140:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_INT 140
 141:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_REF_INT 141
 142:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_REF_FLOAT 142
 143:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_CMD 143
 144:/home/dino/paparazzi/var/include/messages.h **** #define DL_GUIDANCE_H_INT 144
 145:/home/dino/paparazzi/var/include/messages.h **** #define DL_VERT_LOOP 145
 146:/home/dino/paparazzi/var/include/messages.h **** #define DL_HOVER_LOOP 146
 147:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_FP 147
 148:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMP_ADC 148
 149:/home/dino/paparazzi/var/include/messages.h **** #define DL_GUIDANCE_H_REF_INT 149
 150:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_TUNE_HOVER 150
 151:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_Z 151
 152:/home/dino/paparazzi/var/include/messages.h **** #define DL_PCAP01_STATUS 152
 153:/home/dino/paparazzi/var/include/messages.h **** #define DL_GEIGER_COUNTER 153
 154:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_REF 154
 155:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_INT 155
 156:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_EULER_INT 156
 157:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_QUAT_INT 157
 158:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_RMAT_INT 158
 159:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_NAV_STATUS 159
 160:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_RADIO_CONTROL 160
 161:/home/dino/paparazzi/var/include/messages.h **** #define DL_VFF_EXTENDED 161
 162:/home/dino/paparazzi/var/include/messages.h **** #define DL_VFF 162
 163:/home/dino/paparazzi/var/include/messages.h **** #define DL_GEO_MAG 163
 164:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF 164
 165:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF_DBG 165
 166:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF_GPS 166
 167:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_SONAR 167
 168:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_CAM 168
 169:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_REF_QUAT 169
 170:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_XHAT 170
 171:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_Y 171
 172:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_P_DIAG 172
 173:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_EULER 173
 174:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_MEASUREMENT_EULER 174
 175:/home/dino/paparazzi/var/include/messages.h **** #define DL_WT 175
 176:/home/dino/paparazzi/var/include/messages.h **** #define DL_CSC_CAN_DEBUG 176
 177:/home/dino/paparazzi/var/include/messages.h **** #define DL_CSC_CAN_MSG 177
 178:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_GYRO_BIAS_INT 178
 179:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLOW_AP_OTF 179
 180:/home/dino/paparazzi/var/include/messages.h **** #define DL_FMS_TIME 180
 181:/home/dino/paparazzi/var/include/messages.h **** #define DL_LOADCELL 181
 182:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLA_DEBUG 182
 183:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_FAULT_STATUS 183
 184:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_SPEEDS 184
 185:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_DEBUG_QUAT 185
 186:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_BUSVOLTS 186
 187:/home/dino/paparazzi/var/include/messages.h **** #define DL_SYSTEM_STATUS 187
 188:/home/dino/paparazzi/var/include/messages.h **** #define DL_DYNAMIXEL 188
 189:/home/dino/paparazzi/var/include/messages.h **** #define DL_RMAT_DEBUG 189
 190:/home/dino/paparazzi/var/include/messages.h **** #define DL_SIMPLE_COMMANDS 190
 191:/home/dino/paparazzi/var/include/messages.h **** #define DL_VANE_SENSOR 191
 192:/home/dino/paparazzi/var/include/messages.h **** #define DL_CONTROLLER_GAINS 192
 193:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF 193
 194:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_DEBUG 194
 195:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_ACC_DBG 195
 196:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_MAG_DBG 196
 197:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_SENSORS_SCALED 197
 198:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS 198
 199:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_ERROR 199
 200:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO 200
 201:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG 201
 202:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL 202
 203:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_RAW 203
 204:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL_RAW 204
 205:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_RAW 205
 206:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_SETTINGS 206
 207:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_CURRENT_CALIBRATION 207
 208:/home/dino/paparazzi/var/include/messages.h **** #define DL_UART_ERRORS 208
 209:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_LP 209
 210:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_PRESSURE 210
 211:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_HS_GYRO 211
 212:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_PASSTHROUGH_STATUS 212
 213:/home/dino/paparazzi/var/include/messages.h **** #define DL_TUNE_VERT 213
 214:/home/dino/paparazzi/var/include/messages.h **** #define DL_MF_DAQ_STATE 214
 215:/home/dino/paparazzi/var/include/messages.h **** #define DL_INFO_MSG 215
 216:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_INDI 216
 217:/home/dino/paparazzi/var/include/messages.h **** #define DL_BEBOP_ACTUATORS 218
 218:/home/dino/paparazzi/var/include/messages.h **** #define DL_WEATHER 219
 219:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_TURNTABLE 220
 220:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_RAW 221
 221:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIR_DATA 222
 222:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSL 223
 223:/home/dino/paparazzi/var/include/messages.h **** #define DL_VIDEO_SYNC 225
 224:/home/dino/paparazzi/var/include/messages.h **** #define DL_PERIODIC_TELEMETRY_ERR 226
 225:/home/dino/paparazzi/var/include/messages.h **** #define DL_TIME 227
 226:/home/dino/paparazzi/var/include/messages.h **** #define DL_OPTIC_FLOW_EST 228
 227:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_ARDRONE2 230
 228:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_STATUS 231
 229:/home/dino/paparazzi/var/include/messages.h **** #define DL_STATE_FILTER_STATUS 232
 230:/home/dino/paparazzi/var/include/messages.h **** #define DL_PX4FLOW 233
 231:/home/dino/paparazzi/var/include/messages.h **** #define DL_OPTICFLOW 234
 232:/home/dino/paparazzi/var/include/messages.h **** #define DL_VISUALTARGET 235
 233:/home/dino/paparazzi/var/include/messages.h **** #define DL_SONAR 236
 234:/home/dino/paparazzi/var/include/messages.h **** #define DL_PAYLOAD_FLOAT 237
 235:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_POS_LLH 238
 236:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RPMS 239
 237:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_SPEED_POS 240
 238:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RATE_ATTITUDE 241
 239:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_GYRO_BIAS 242
 240:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RANGE_METER 243
 241:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_WIND 244
 242:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPRZ_DEBUG 247
 243:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_ACCEL_LTP 248
 244:/home/dino/paparazzi/var/include/messages.h **** #define DL_LOOSE_INS_GPS 249
 245:/home/dino/paparazzi/var/include/messages.h **** #define DL_AFL_COEFFS 250
 246:/home/dino/paparazzi/var/include/messages.h **** #define DL_I2C_ERRORS 253
 247:/home/dino/paparazzi/var/include/messages.h **** #define DL_RDYB_TRAJECTORY 254
 248:/home/dino/paparazzi/var/include/messages.h **** #define DL_HENRY_GNSS 255
 249:/home/dino/paparazzi/var/include/messages.h **** #define DL_MSG_telemetry_NB 240
 250:/home/dino/paparazzi/var/include/messages.h **** 
 251:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AUTOPILOT_VERSION(_trans, _dev, version, nb_desc, desc) pprz_msg_send_AUTOPIL
 252:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AUTOPILOT_VERSION(struct transport_tx *trans, struct link_device *
 253:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 
 254:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 /* msg heade
 255:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1+nb_desc*1 +2 /* msg header overhead */);
 256:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 257:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AUTOPILOT_VERSION, "
 258:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _version);
 259:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_desc)
 260:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * nb_desc, (void *) _desc);
 261:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 262:/home/dino/paparazzi/var/include/messages.h **** 	} else
 263:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 264:/home/dino/paparazzi/var/include/messages.h **** }
 265:/home/dino/paparazzi/var/include/messages.h **** 
 266:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ALIVE(_trans, _dev, nb_md5sum, md5sum) pprz_msg_send_ALIVE(&((_trans).trans_t
 267:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ALIVE(struct transport_tx *trans, struct link_device *dev, uint8_t
 268:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 
 269:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 /* msg heade
 270:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_md5sum*1 +2 /* msg header overhead */);
 271:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 272:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ALIVE, "ALIVE");
 273:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_md5su
 274:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_md5sum, (void *) _md5s
 275:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 276:/home/dino/paparazzi/var/include/messages.h **** 	} else
 277:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 278:/home/dino/paparazzi/var/include/messages.h **** }
 279:/home/dino/paparazzi/var/include/messages.h **** 
 280:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PONG(_trans, _dev) pprz_msg_send_PONG(&((_trans).trans_tx), &((_dev).device),
 281:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PONG(struct transport_tx *trans, struct link_device *dev, uint8_t 
 282:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0 +2 /* msg header 
 283:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0 +2 /* msg header overhead */)
 284:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0 +2 /* msg header overhead */);
 285:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 286:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PONG, "PONG");
 287:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 288:/home/dino/paparazzi/var/include/messages.h **** 	} else
 289:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 290:/home/dino/paparazzi/var/include/messages.h **** }
 291:/home/dino/paparazzi/var/include/messages.h **** 
 292:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TAKEOFF(_trans, _dev, cpu_time) pprz_msg_send_TAKEOFF(&((_trans).trans_tx), &
 293:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TAKEOFF(struct transport_tx *trans, struct link_device *dev, uint8
 294:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg heade
 295:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg header overhead *
 296:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2 +2 /* msg header overhead */);
 297:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 298:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TAKEOFF, "TAKEOFF");
 299:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _cpu_time);
 300:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 301:/home/dino/paparazzi/var/include/messages.h **** 	} else
 302:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 303:/home/dino/paparazzi/var/include/messages.h **** }
 304:/home/dino/paparazzi/var/include/messages.h **** 
 305:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ARDRONE_NAVDATA(_trans, _dev, taille, nu_trame, ax, ay, az, vx, vy, vz, tempe
 306:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ARDRONE_NAVDATA(struct transport_tx *trans, struct link_device *de
 307:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2
 308:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2
 309:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+4+2+2+4+2+2+2+2+2
 310:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 311:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ARDRONE_NAVDATA, "AR
 312:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _taille);
 313:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _nu_trame);
 314:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ax);
 315:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ay);
 316:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _az);
 317:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vx);
 318:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vy);
 319:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vz);
 320:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_ac
 321:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_gy
 322:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ultrasound);
 323:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_debut_echo)
 324:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_fin_echo);
 325:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_association
 326:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_distance_ec
 327:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_time)
 328:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_value
 329:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_ref);
 330:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _nb_echo);
 331:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _sum_echo);
 332:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _gradient);
 333:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flag_echo_ini)
 334:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _pressure);
 335:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_pr
 336:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mx);
 337:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _my);
 338:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mz);
 339:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _chksum);
 340:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _checksum_error
 341:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 342:/home/dino/paparazzi/var/include/messages.h **** 	} else
 343:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 344:/home/dino/paparazzi/var/include/messages.h **** }
 345:/home/dino/paparazzi/var/include/messages.h **** 
 346:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ATTITUDE(_trans, _dev, phi, psi, theta) pprz_msg_send_ATTITUDE(&((_trans).tra
 347:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ATTITUDE(struct transport_tx *trans, struct link_device *dev, uint
 348:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
 349:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 350:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 351:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 352:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ATTITUDE, "ATTITUDE"
 353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
 354:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
 355:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
 356:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 357:/home/dino/paparazzi/var/include/messages.h **** 	} else
 358:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 359:/home/dino/paparazzi/var/include/messages.h **** }
 360:/home/dino/paparazzi/var/include/messages.h **** 
 361:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IR_SENSORS(_trans, _dev, ir1, ir2, longitudinal, lateral, vertical) pprz_msg_
 362:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IR_SENSORS(struct transport_tx *trans, struct link_device *dev, ui
 363:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2 +2 /* m
 364:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2 +2 /* msg header ov
 365:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2 +2 /* msg header overhead */);
 366:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 367:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IR_SENSORS, "IR_SENS
 368:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir1);
 369:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir2);
 370:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _longitudinal);
 371:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _lateral);
 372:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vertical);
 373:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 374:/home/dino/paparazzi/var/include/messages.h **** 	} else
 375:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 376:/home/dino/paparazzi/var/include/messages.h **** }
 377:/home/dino/paparazzi/var/include/messages.h **** 
 378:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS(_trans, _dev, mode, utm_east, utm_north, course, alt, speed, climb, week,
 379:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS(struct transport_tx *trans, struct link_device *dev, uint8_t a
 380:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+2+4+2+2+2+4
 381:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+2+4+2+2+2+4+1+1 +2 /* m
 382:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+2+4+2+2+2+4+1+1 +2 /* msg header overhead */);
 383:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 384:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS, "GPS");
 385:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mode);
 386:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 387:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 388:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _course);
 389:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
 390:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _speed);
 391:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _climb);
 392:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _week);
 393:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _itow);
 394:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 395:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _gps_nb_err);
 396:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 397:/home/dino/paparazzi/var/include/messages.h **** 	} else
 398:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 399:/home/dino/paparazzi/var/include/messages.h **** }
 400:/home/dino/paparazzi/var/include/messages.h **** 
 401:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_NAVIGATION_REF(_trans, _dev, utm_east, utm_north, utm_zone, ground_alt) pprz_
 402:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_NAVIGATION_REF(struct transport_tx *trans, struct link_device *dev
 403:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+4 +2 /* msg
 404:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+4 +2 /* msg header over
 405:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+1+4 +2 /* msg header overhead */);
 406:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 407:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NAVIGATION_REF, "NAV
 408:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 409:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 410:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 411:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ground_alt);
 412:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 413:/home/dino/paparazzi/var/include/messages.h **** 	} else
 414:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 415:/home/dino/paparazzi/var/include/messages.h **** }
 416:/home/dino/paparazzi/var/include/messages.h **** 
 417:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_NAVIGATION(_trans, _dev, cur_block, cur_stage, pos_x, pos_y, dist_wp, dist_ho
 418:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_NAVIGATION(struct transport_tx *trans, struct link_device *dev, ui
 419:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +
 420:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +2 /* msg hea
 421:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4+4+4+1+1 +2 /* msg header overhead */);
 422:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 423:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NAVIGATION, "NAVIGAT
 424:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_block);
 425:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_stage);
 426:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_x);
 427:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_y);
 428:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_wp);
 429:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_home);
 430:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _circle_count);
 431:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _oval_count);
 432:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 433:/home/dino/paparazzi/var/include/messages.h **** 	} else
 434:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 435:/home/dino/paparazzi/var/include/messages.h **** }
 436:/home/dino/paparazzi/var/include/messages.h **** 
 437:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PPRZ_MODE(_trans, _dev, ap_mode, ap_gaz, ap_lateral, ap_horizontal, if_calib_
 438:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PPRZ_MODE(struct transport_tx *trans, struct link_device *dev, uin
 439:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /*
 440:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /* msg header 
 441:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+1 +2 /* msg header overhead */);
 442:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 443:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PPRZ_MODE, "PPRZ_MOD
 444:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_mode);
 445:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_gaz);
 446:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_lateral);
 447:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_horizontal);
 448:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _if_calib_mode);
 449:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mcu1_status);
 450:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 451:/home/dino/paparazzi/var/include/messages.h **** 	} else
 452:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 453:/home/dino/paparazzi/var/include/messages.h **** }
 454:/home/dino/paparazzi/var/include/messages.h **** 
 455:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BAT(_trans, _dev, throttle, voltage, amps, flight_time, kill_auto_throttle, b
 456:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BAT(struct transport_tx *trans, struct link_device *dev, uint8_t a
 457:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +
 458:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +2 /* msg hea
 459:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+1+2+2+2 +2 /* msg header overhead */);
 460:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 461:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BAT, "BAT");
 462:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _throttle);
 463:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _voltage);
 464:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _amps);
 465:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flight_time);
 466:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _kill_auto_throt
 467:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _block_time);
 468:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _stage_time);
 469:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _energy);
 470:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 471:/home/dino/paparazzi/var/include/messages.h **** 	} else
 472:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 473:/home/dino/paparazzi/var/include/messages.h **** }
 474:/home/dino/paparazzi/var/include/messages.h **** 
 475:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DEBUG_MCU_LINK(_trans, _dev, i2c_nb_err, i2c_mcu1_nb_err, ppm_rate) pprz_msg_
 476:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DEBUG_MCU_LINK(struct transport_tx *trans, struct link_device *dev
 477:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg h
 478:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhe
 479:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
 480:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 481:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DEBUG_MCU_LINK, "DEB
 482:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _i2c_nb_err);
 483:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _i2c_mcu1_nb_err
 484:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ppm_rate);
 485:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 486:/home/dino/paparazzi/var/include/messages.h **** 	} else
 487:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 488:/home/dino/paparazzi/var/include/messages.h **** }
 489:/home/dino/paparazzi/var/include/messages.h **** 
 490:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CALIBRATION(_trans, _dev, climb_sum_err, climb_gaz_submode) pprz_msg_send_CAL
 491:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CALIBRATION(struct transport_tx *trans, struct link_device *dev, u
 492:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+1 +2 /* msg hea
 493:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1 +2 /* msg header overhead
 494:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1 +2 /* msg header overhead */);
 495:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 496:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CALIBRATION, "CALIBR
 497:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _climb_sum_err);
 498:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _climb_gaz_submo
 499:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 500:/home/dino/paparazzi/var/include/messages.h **** 	} else
 501:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 502:/home/dino/paparazzi/var/include/messages.h **** }
 503:/home/dino/paparazzi/var/include/messages.h **** 
 504:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SETTINGS(_trans, _dev, slider_1_val, slider_2_val) pprz_msg_send_SETTINGS(&((
 505:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SETTINGS(struct transport_tx *trans, struct link_device *dev, uint
 506:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
 507:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
 508:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
 509:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 510:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SETTINGS, "SETTINGS"
 511:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _slider_1_val);
 512:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _slider_2_val);
 513:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 514:/home/dino/paparazzi/var/include/messages.h **** 	} else
 515:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 516:/home/dino/paparazzi/var/include/messages.h **** }
 517:/home/dino/paparazzi/var/include/messages.h **** 
 518:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DESIRED(_trans, _dev, roll, pitch, course, x, y, altitude, climb, airspeed) p
 519:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DESIRED(struct transport_tx *trans, struct link_device *dev, uint8
 520:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +
 521:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
 522:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
 523:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 524:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DESIRED, "DESIRED");
 525:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll);
 526:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch);
 527:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _course);
 528:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _x);
 529:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _y);
 530:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _altitude);
 531:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _climb);
 532:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
 533:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 534:/home/dino/paparazzi/var/include/messages.h **** 	} else
 535:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 536:/home/dino/paparazzi/var/include/messages.h **** }
 537:/home/dino/paparazzi/var/include/messages.h **** 
 538:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS_SOL(_trans, _dev, Pacc, Sacc, PDOP, numSV) pprz_msg_send_GPS_SOL(&((_tran
 539:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS_SOL(struct transport_tx *trans, struct link_device *dev, uint8
 540:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+1 +2 /* msg
 541:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+1 +2 /* msg header over
 542:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+2+1 +2 /* msg header overhead */);
 543:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 544:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS_SOL, "GPS_SOL");
 545:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _Pacc);
 546:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _Sacc);
 547:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _PDOP);
 548:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _numSV);
 549:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 550:/home/dino/paparazzi/var/include/messages.h **** 	} else
 551:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 552:/home/dino/paparazzi/var/include/messages.h **** }
 553:/home/dino/paparazzi/var/include/messages.h **** 
 554:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ADC_GENERIC(_trans, _dev, val1, val2) pprz_msg_send_ADC_GENERIC(&((_trans).tr
 555:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ADC_GENERIC(struct transport_tx *trans, struct link_device *dev, u
 556:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2 +2 /* msg hea
 557:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2 +2 /* msg header overhead
 558:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2 +2 /* msg header overhead */);
 559:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 560:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ADC_GENERIC, "ADC_GE
 561:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val1);
 562:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val2);
 563:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 564:/home/dino/paparazzi/var/include/messages.h **** 	} else
 565:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 566:/home/dino/paparazzi/var/include/messages.h **** }
 567:/home/dino/paparazzi/var/include/messages.h **** 
 568:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TEST_FORMAT(_trans, _dev, val1, val2) pprz_msg_send_TEST_FORMAT(&((_trans).tr
 569:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TEST_FORMAT(struct transport_tx *trans, struct link_device *dev, u
 570:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+8+4 +2 /* msg hea
 571:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+8+4 +2 /* msg header overhead
 572:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+8+4 +2 /* msg header overhead */);
 573:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 574:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TEST_FORMAT, "TEST_F
 575:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_DOUBLE, DL_FORMAT_SCALAR, 8, (void *) _val1);
 576:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _val2);
 577:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 578:/home/dino/paparazzi/var/include/messages.h **** 	} else
 579:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 580:/home/dino/paparazzi/var/include/messages.h **** }
 581:/home/dino/paparazzi/var/include/messages.h **** 
 582:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CAM(_trans, _dev, phi, theta, target_x, target_y) pprz_msg_send_CAM(&((_trans
 583:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CAM(struct transport_tx *trans, struct link_device *dev, uint8_t a
 584:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg
 585:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg header over
 586:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2 +2 /* msg header overhead */);
 587:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 588:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CAM, "CAM");
 589:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _phi);
 590:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _theta);
 591:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _target_x);
 592:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _target_y);
 593:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 594:/home/dino/paparazzi/var/include/messages.h **** 	} else
 595:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 596:/home/dino/paparazzi/var/include/messages.h **** }
 597:/home/dino/paparazzi/var/include/messages.h **** 
 598:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CIRCLE(_trans, _dev, center_east, center_north, radius) pprz_msg_send_CIRCLE(
 599:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CIRCLE(struct transport_tx *trans, struct link_device *dev, uint8_
 600:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
 601:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 602:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 603:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 604:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CIRCLE, "CIRCLE");
 605:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _center_east);
 606:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _center_north);
 607:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _radius);
 608:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 609:/home/dino/paparazzi/var/include/messages.h **** 	} else
 610:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 611:/home/dino/paparazzi/var/include/messages.h **** }
 612:/home/dino/paparazzi/var/include/messages.h **** 
 613:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SEGMENT(_trans, _dev, segment_east_1, segment_north_1, segment_east_2, segmen
 614:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SEGMENT(struct transport_tx *trans, struct link_device *dev, uint8
 615:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 616:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 617:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 618:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 619:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SEGMENT, "SEGMENT");
 620:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_east_1)
 621:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_north_1
 622:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_east_2)
 623:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_north_2
 624:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 625:/home/dino/paparazzi/var/include/messages.h **** 	} else
 626:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 627:/home/dino/paparazzi/var/include/messages.h **** }
 628:/home/dino/paparazzi/var/include/messages.h **** 
 629:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SVINFO(_trans, _dev, chn, SVID, Flags, QI, CNO, Elev, Azim) pprz_msg_send_SVI
 630:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SVINFO(struct transport_tx *trans, struct link_device *dev, uint8_
 631:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1+2 +2 
 632:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1+2 +2 /* msg heade
 633:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+1+2 +2 /* msg header overhead */);
 634:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 635:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SVINFO, "SVINFO");
 636:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _chn);
 637:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _SVID);
 638:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _Flags);
 639:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _QI);
 640:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _CNO);
 641:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _Elev);
 642:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _Azim);
 643:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 644:/home/dino/paparazzi/var/include/messages.h **** 	} else
 645:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 646:/home/dino/paparazzi/var/include/messages.h **** }
 647:/home/dino/paparazzi/var/include/messages.h **** 
 648:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DEBUG(_trans, _dev, nb_msg, msg) pprz_msg_send_DEBUG(&((_trans).trans_tx), &(
 649:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DEBUG(struct transport_tx *trans, struct link_device *dev, uint8_t
 650:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_msg*1 +2 /* 
 651:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_msg*1 +2 /* msg header o
 652:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_msg*1 +2 /* msg header overhead */);
 653:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 654:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DEBUG, "DEBUG");
 655:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_msg);
 656:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_msg, (void *) _msg);
 657:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 658:/home/dino/paparazzi/var/include/messages.h **** 	} else
 659:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 660:/home/dino/paparazzi/var/include/messages.h **** }
 661:/home/dino/paparazzi/var/include/messages.h **** 
 662:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SURVEY(_trans, _dev, east, north, west, south) pprz_msg_send_SURVEY(&((_trans
 663:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SURVEY(struct transport_tx *trans, struct link_device *dev, uint8_
 664:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 665:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 666:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 667:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 668:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SURVEY, "SURVEY");
 669:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _east);
 670:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _north);
 671:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _west);
 672:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _south);
 673:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 674:/home/dino/paparazzi/var/include/messages.h **** 	} else
 675:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 676:/home/dino/paparazzi/var/include/messages.h **** }
 677:/home/dino/paparazzi/var/include/messages.h **** 
 678:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WC_RSSI(_trans, _dev, raw_level) pprz_msg_send_WC_RSSI(&((_trans).trans_tx), 
 679:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WC_RSSI(struct transport_tx *trans, struct link_device *dev, uint8
 680:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg heade
 681:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead *
 682:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1 +2 /* msg header overhead */);
 683:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 684:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WC_RSSI, "WC_RSSI");
 685:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _raw_level);
 686:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 687:/home/dino/paparazzi/var/include/messages.h **** 	} else
 688:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 689:/home/dino/paparazzi/var/include/messages.h **** }
 690:/home/dino/paparazzi/var/include/messages.h **** 
 691:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_RANGEFINDER(_trans, _dev, range, z_dot, z_dot_sum_err, z_dot_setpoint, z_sum_
 692:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_RANGEFINDER(struct transport_tx *trans, struct link_device *dev, u
 693:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+1 +2 
 694:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+1 +2 /* msg heade
 695:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4+4+4+4+1 +2 /* msg header overhead */);
 696:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 697:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_RANGEFINDER, "RANGEF
 698:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _range);
 699:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot);
 700:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot_sum_err);
 701:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot_setpoint)
 702:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_sum_err);
 703:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_setpoint);
 704:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _flying);
 705:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 706:/home/dino/paparazzi/var/include/messages.h **** 	} else
 707:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 708:/home/dino/paparazzi/var/include/messages.h **** }
 709:/home/dino/paparazzi/var/include/messages.h **** 
 710:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DATALINK_REPORT(_trans, _dev, uplink_lost_time, uplink_nb_msgs, downlink_nb_m
 711:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DATALINK_REPORT(struct transport_tx *trans, struct link_device *de
 712:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1 +2 /* m
 713:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1 +2 /* msg header ov
 714:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+1 +2 /* msg header overhead */);
 715:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 716:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DATALINK_REPORT, "DA
 717:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _uplink_lost_ti
 718:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _uplink_nb_msgs
 719:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _downlink_nb_ms
 720:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _downlink_rate)
 721:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _downlink_ovrn);
 722:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 723:/home/dino/paparazzi/var/include/messages.h **** 	} else
 724:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 725:/home/dino/paparazzi/var/include/messages.h **** }
 726:/home/dino/paparazzi/var/include/messages.h **** 
 727:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DL_VALUE(_trans, _dev, index, value) pprz_msg_send_DL_VALUE(&((_trans).trans_
 728:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DL_VALUE(struct transport_tx *trans, struct link_device *dev, uint
 729:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg hea
 730:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg header overhead
 731:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4 +2 /* msg header overhead */);
 732:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 733:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DL_VALUE, "DL_VALUE"
 734:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _index);
 735:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _value);
 736:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 737:/home/dino/paparazzi/var/include/messages.h **** 	} else
 738:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 739:/home/dino/paparazzi/var/include/messages.h **** }
 740:/home/dino/paparazzi/var/include/messages.h **** 
 741:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MARK(_trans, _dev, ac_id, lat, long) pprz_msg_send_MARK(&((_trans).trans_tx),
 742:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MARK(struct transport_tx *trans, struct link_device *dev, uint8_t 
 743:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4 +2 /* msg h
 744:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4 +2 /* msg header overhe
 745:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4 +2 /* msg header overhead */);
 746:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 747:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MARK, "MARK");
 748:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
 749:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _lat);
 750:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _long);
 751:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 752:/home/dino/paparazzi/var/include/messages.h **** 	} else
 753:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 754:/home/dino/paparazzi/var/include/messages.h **** }
 755:/home/dino/paparazzi/var/include/messages.h **** 
 756:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SYS_MON(_trans, _dev, periodic_time, periodic_time_min, periodic_time_max, pe
 757:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SYS_MON(struct transport_tx *trans, struct link_device *dev, uint8
 758:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+1 +
 759:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+1 +2 /* msg hea
 760:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+1 +2 /* msg header overhead */);
 761:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 762:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SYS_MON, "SYS_MON");
 763:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_time)
 764:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_time_
 765:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_time_
 766:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_cycle
 767:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_cycle
 768:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_cycle
 769:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _event_number);
 770:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cpu_load);
 771:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 772:/home/dino/paparazzi/var/include/messages.h **** 	} else
 773:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 774:/home/dino/paparazzi/var/include/messages.h **** }
 775:/home/dino/paparazzi/var/include/messages.h **** 
 776:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MOTOR(_trans, _dev, rpm, current) pprz_msg_send_MOTOR(&((_trans).trans_tx), &
 777:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MOTOR(struct transport_tx *trans, struct link_device *dev, uint8_t
 778:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg hea
 779:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg header overhead
 780:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4 +2 /* msg header overhead */);
 781:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 782:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MOTOR, "MOTOR");
 783:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _rpm);
 784:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _current);
 785:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 786:/home/dino/paparazzi/var/include/messages.h **** 	} else
 787:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 788:/home/dino/paparazzi/var/include/messages.h **** }
 789:/home/dino/paparazzi/var/include/messages.h **** 
 790:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WP_MOVED(_trans, _dev, wp_id, utm_east, utm_north, alt, utm_zone) pprz_msg_se
 791:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WP_MOVED(struct transport_tx *trans, struct link_device *dev, uint
 792:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4+1 +2 /* m
 793:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4+1 +2 /* msg header ov
 794:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+4+1 +2 /* msg header overhead */);
 795:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 796:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WP_MOVED, "WP_MOVED"
 797:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_id);
 798:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 799:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 800:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alt);
 801:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 802:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 803:/home/dino/paparazzi/var/include/messages.h **** 	} else
 804:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 805:/home/dino/paparazzi/var/include/messages.h **** }
 806:/home/dino/paparazzi/var/include/messages.h **** 
 807:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MKK(_trans, _dev, nr, rpm, current, temp) pprz_msg_send_MKK(&((_trans).trans_
 808:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MKK(struct transport_tx *trans, struct link_device *dev, uint8_t a
 809:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1 +2 /* msg
 810:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1 +2 /* msg header over
 811:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1 +2 /* msg header overhead */);
 812:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 813:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MKK, "MKK");
 814:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _nr);
 815:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _rpm);
 816:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _current);
 817:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _temp);
 818:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 819:/home/dino/paparazzi/var/include/messages.h **** 	} else
 820:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 821:/home/dino/paparazzi/var/include/messages.h **** }
 822:/home/dino/paparazzi/var/include/messages.h **** 
 823:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ENERGY(_trans, _dev, bat, amp, energy, power) pprz_msg_send_ENERGY(&((_trans)
 824:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ENERGY(struct transport_tx *trans, struct link_device *dev, uint8_
 825:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg
 826:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+4 +2 /* msg header over
 827:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+2+4 +2 /* msg header overhead */);
 828:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 829:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ENERGY, "ENERGY");
 830:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bat);
 831:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _amp);
 832:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _energy);
 833:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _power);
 834:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 835:/home/dino/paparazzi/var/include/messages.h **** 	} else
 836:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 837:/home/dino/paparazzi/var/include/messages.h **** }
 838:/home/dino/paparazzi/var/include/messages.h **** 
 839:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_BMP85_CALIB(_trans, _dev, a1, a2, a3, a4, a5, a6, b1, b2, mb, mc, md) pp
 840:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_BMP85_CALIB(struct transport_tx *trans, struct link_device *d
 841:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2
 842:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2+2+2 +2 /* m
 843:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+2+2+2+2 +2 /* msg header overhead */);
 844:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 845:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_BMP85_CALIB, "B
 846:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _a1);
 847:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _a2);
 848:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _a3);
 849:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _a4);
 850:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _a5);
 851:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _a6);
 852:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _b1);
 853:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _b2);
 854:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mb);
 855:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mc);
 856:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _md);
 857:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 858:/home/dino/paparazzi/var/include/messages.h **** 	} else
 859:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 860:/home/dino/paparazzi/var/include/messages.h **** }
 861:/home/dino/paparazzi/var/include/messages.h **** 
 862:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_BMP85(_trans, _dev, UT, UP, P, T, MSL) pprz_msg_send_BARO_BMP85(&((_tran
 863:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_BMP85(struct transport_tx *trans, struct link_device *dev, ui
 864:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4 +2 /* m
 865:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4 +2 /* msg header ov
 866:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4 +2 /* msg header overhead */);
 867:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 868:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_BMP85, "BARO_BM
 869:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _UT);
 870:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _UP);
 871:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _P);
 872:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _T);
 873:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _MSL);
 874:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 875:/home/dino/paparazzi/var/include/messages.h **** 	} else
 876:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 877:/home/dino/paparazzi/var/include/messages.h **** }
 878:/home/dino/paparazzi/var/include/messages.h **** 
 879:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SPEED_LOOP(_trans, _dev, ve_set_point, ve, vn_set_point, vn, north_sp, east_s
 880:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SPEED_LOOP(struct transport_tx *trans, struct link_device *dev, ui
 881:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /*
 882:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /* msg header 
 883:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4 +2 /* msg header overhead */);
 884:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 885:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SPEED_LOOP, "SPEED_L
 886:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ve_set_point);
 887:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ve);
 888:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _vn_set_point);
 889:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _vn);
 890:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _north_sp);
 891:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _east_sp);
 892:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 893:/home/dino/paparazzi/var/include/messages.h **** 	} else
 894:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 895:/home/dino/paparazzi/var/include/messages.h **** }
 896:/home/dino/paparazzi/var/include/messages.h **** 
 897:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ALT_KALMAN(_trans, _dev, p00, p01, p10, p11) pprz_msg_send_ALT_KALMAN(&((_tra
 898:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ALT_KALMAN(struct transport_tx *trans, struct link_device *dev, ui
 899:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 900:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 901:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 902:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 903:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ALT_KALMAN, "ALT_KAL
 904:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p00);
 905:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p01);
 906:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p10);
 907:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p11);
 908:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 909:/home/dino/paparazzi/var/include/messages.h **** 	} else
 910:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 911:/home/dino/paparazzi/var/include/messages.h **** }
 912:/home/dino/paparazzi/var/include/messages.h **** 
 913:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ESTIMATOR(_trans, _dev, z, z_dot) pprz_msg_send_ESTIMATOR(&((_trans).trans_tx
 914:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ESTIMATOR(struct transport_tx *trans, struct link_device *dev, uin
 915:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
 916:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
 917:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
 918:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 919:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ESTIMATOR, "ESTIMATO
 920:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z);
 921:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot);
 922:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 923:/home/dino/paparazzi/var/include/messages.h **** 	} else
 924:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 925:/home/dino/paparazzi/var/include/messages.h **** }
 926:/home/dino/paparazzi/var/include/messages.h **** 
 927:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TUNE_ROLL(_trans, _dev, p, phi, phi_sp) pprz_msg_send_TUNE_ROLL(&((_trans).tr
 928:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TUNE_ROLL(struct transport_tx *trans, struct link_device *dev, uin
 929:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
 930:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 931:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 932:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 933:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TUNE_ROLL, "TUNE_ROL
 934:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p);
 935:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
 936:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi_sp);
 937:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 938:/home/dino/paparazzi/var/include/messages.h **** 	} else
 939:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 940:/home/dino/paparazzi/var/include/messages.h **** }
 941:/home/dino/paparazzi/var/include/messages.h **** 
 942:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_MS5534A(_trans, _dev, pressure, temp, alt) pprz_msg_send_BARO_MS5534A(&(
 943:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_MS5534A(struct transport_tx *trans, struct link_device *dev, 
 944:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+4 +2 /* msg h
 945:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+4 +2 /* msg header overhe
 946:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+2+4 +2 /* msg header overhead */);
 947:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 948:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_MS5534A, "BARO_
 949:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _pressure);
 950:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temp);
 951:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alt);
 952:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 953:/home/dino/paparazzi/var/include/messages.h **** 	} else
 954:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 955:/home/dino/paparazzi/var/include/messages.h **** }
 956:/home/dino/paparazzi/var/include/messages.h **** 
 957:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PRESSURE(_trans, _dev, airspeed_adc, airspeed, altitude_adc, altitude) pprz_m
 958:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PRESSURE(struct transport_tx *trans, struct link_device *dev, uint
 959:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 960:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 961:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 962:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 963:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PRESSURE, "PRESSURE"
 964:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed_adc);
 965:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
 966:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _altitude_adc);
 967:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _altitude);
 968:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 969:/home/dino/paparazzi/var/include/messages.h **** 	} else
 970:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 971:/home/dino/paparazzi/var/include/messages.h **** }
 972:/home/dino/paparazzi/var/include/messages.h **** 
 973:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_WORDS(_trans, _dev, w1, w2, w3, w4) pprz_msg_send_BARO_WORDS(&((_trans).
 974:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_WORDS(struct transport_tx *trans, struct link_device *dev, ui
 975:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg
 976:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg header over
 977:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2 +2 /* msg header overhead */);
 978:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 979:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_WORDS, "BARO_WO
 980:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _w1);
 981:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _w2);
 982:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _w3);
 983:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _w4);
 984:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 985:/home/dino/paparazzi/var/include/messages.h **** 	} else
 986:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 987:/home/dino/paparazzi/var/include/messages.h **** }
 988:/home/dino/paparazzi/var/include/messages.h **** 
 989:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WP_MOVED_LLA(_trans, _dev, wp_id, lat, lon, alt) pprz_msg_send_WP_MOVED_LLA(&
 990:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WP_MOVED_LLA(struct transport_tx *trans, struct link_device *dev, 
 991:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4 +2 /* msg
 992:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4 +2 /* msg header over
 993:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+4 +2 /* msg header overhead */);
 994:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 995:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WP_MOVED_LLA, "WP_MO
 996:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_id);
 997:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lat);
 998:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lon);
 999:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
1000:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1001:/home/dino/paparazzi/var/include/messages.h **** 	} else
1002:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1003:/home/dino/paparazzi/var/include/messages.h **** }
1004:/home/dino/paparazzi/var/include/messages.h **** 
1005:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CHRONO(_trans, _dev, tag, time) pprz_msg_send_CHRONO(&((_trans).trans_tx), &(
1006:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CHRONO(struct transport_tx *trans, struct link_device *dev, uint8_
1007:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg hea
1008:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg header overhead
1009:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4 +2 /* msg header overhead */);
1010:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1011:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CHRONO, "CHRONO");
1012:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _tag);
1013:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _time);
1014:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1015:/home/dino/paparazzi/var/include/messages.h **** 	} else
1016:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1017:/home/dino/paparazzi/var/include/messages.h **** }
1018:/home/dino/paparazzi/var/include/messages.h **** 
1019:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WP_MOVED_ENU(_trans, _dev, wp_id, east, north, up) pprz_msg_send_WP_MOVED_ENU
1020:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WP_MOVED_ENU(struct transport_tx *trans, struct link_device *dev, 
1021:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4 +2 /* msg
1022:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4 +2 /* msg header over
1023:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+4 +2 /* msg header overhead */);
1024:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1025:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WP_MOVED_ENU, "WP_MO
1026:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_id);
1027:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _east);
1028:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _north);
1029:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _up);
1030:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1031:/home/dino/paparazzi/var/include/messages.h **** 	} else
1032:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1033:/home/dino/paparazzi/var/include/messages.h **** }
1034:/home/dino/paparazzi/var/include/messages.h **** 
1035:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WINDTURBINE_STATUS_(_trans, _dev, ac_id, tb_id, sync_itow, cycle_time) pprz_m
1036:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WINDTURBINE_STATUS_(struct transport_tx *trans, struct link_device
1037:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4 +2 /* msg
1038:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4 +2 /* msg header over
1039:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4 +2 /* msg header overhead */);
1040:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1041:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WINDTURBINE_STATUS_,
1042:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
1043:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _tb_id);
1044:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _sync_itow);
1045:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _cycle_time);
1046:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1047:/home/dino/paparazzi/var/include/messages.h **** 	} else
1048:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1049:/home/dino/paparazzi/var/include/messages.h **** }
1050:/home/dino/paparazzi/var/include/messages.h **** 
1051:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_RC_3CH_(_trans, _dev, throttle_mode, roll, pitch) pprz_msg_send_RC_3CH_(&((_t
1052:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_RC_3CH_(struct transport_tx *trans, struct link_device *dev, uint8
1053:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg h
1054:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhe
1055:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
1056:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1057:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_RC_3CH_, "RC_3CH_");
1058:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _throttle_mode);
1059:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _roll);
1060:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _pitch);
1061:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1062:/home/dino/paparazzi/var/include/messages.h **** 	} else
1063:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1064:/home/dino/paparazzi/var/include/messages.h **** }
1065:/home/dino/paparazzi/var/include/messages.h **** 
1066:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MPPT(_trans, _dev, nb_values, values) pprz_msg_send_MPPT(&((_trans).trans_tx)
1067:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MPPT(struct transport_tx *trans, struct link_device *dev, uint8_t 
1068:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 
1069:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 /* msg heade
1070:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_values*2 +2 /* msg header overhead */);
1071:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1072:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MPPT, "MPPT");
1073:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_value
1074:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_ARRAY, 2 * nb_values, (void *) _valu
1075:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1076:/home/dino/paparazzi/var/include/messages.h **** 	} else
1077:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1078:/home/dino/paparazzi/var/include/messages.h **** }
1079:/home/dino/paparazzi/var/include/messages.h **** 
1080:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DEBUG_IR_I2C(_trans, _dev, ir1, ir2, top) pprz_msg_send_DEBUG_IR_I2C(&((_tran
1081:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DEBUG_IR_I2C(struct transport_tx *trans, struct link_device *dev, 
1082:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2 +2 /* msg h
1083:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2 +2 /* msg header overhe
1084:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2 +2 /* msg header overhead */);
1085:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1086:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DEBUG_IR_I2C, "DEBUG
1087:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir1);
1088:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir2);
1089:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _top);
1090:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1091:/home/dino/paparazzi/var/include/messages.h **** 	} else
1092:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1093:/home/dino/paparazzi/var/include/messages.h **** }
1094:/home/dino/paparazzi/var/include/messages.h **** 
1095:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AIRSPEED(_trans, _dev, airspeed, airspeed_sp, airspeed_cnt, groundspeed_sp) p
1096:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AIRSPEED(struct transport_tx *trans, struct link_device *dev, uint
1097:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
1098:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
1099:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
1100:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1101:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AIRSPEED, "AIRSPEED"
1102:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
1103:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed_sp);
1104:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed_cnt);
1105:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _groundspeed_sp)
1106:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1107:/home/dino/paparazzi/var/include/messages.h **** 	} else
1108:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1109:/home/dino/paparazzi/var/include/messages.h **** }
1110:/home/dino/paparazzi/var/include/messages.h **** 
1111:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_XSENS(_trans, _dev, counter, p, q, r, phi, theta, psi, ax, ay, az, vx, vy, vz
1112:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_XSENS(struct transport_tx *trans, struct link_device *dev, uint8_t
1113:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+4+4+4
1114:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+4+4+4+4+4+4+4+4+4
1115:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+1+1+1+1+4+2+1+1 +2 /* m
1116:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1117:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_XSENS, "XSENS");
1118:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _counter);
1119:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p);
1120:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _q);
1121:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _r);
1122:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
1123:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
1124:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
1125:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ax);
1126:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ay);
1127:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _az);
1128:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _vx);
1129:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _vy);
1130:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _vz);
1131:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _lat);
1132:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _lon);
1133:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alt);
1134:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _status);
1135:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _hour);
1136:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _min);
1137:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _sec);
1138:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _nanosec);
1139:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _year);
1140:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _month);
1141:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _day);
1142:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1143:/home/dino/paparazzi/var/include/messages.h **** 	} else
1144:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1145:/home/dino/paparazzi/var/include/messages.h **** }
1146:/home/dino/paparazzi/var/include/messages.h **** 
1147:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_ETS(_trans, _dev, adc, offset, scaled) pprz_msg_send_BARO_ETS(&((_trans)
1148:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_ETS(struct transport_tx *trans, struct link_device *dev, uint
1149:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4 +2 /* msg h
1150:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4 +2 /* msg header overhe
1151:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+4 +2 /* msg header overhead */);
1152:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1153:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_ETS, "BARO_ETS"
1154:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _adc);
1155:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _offset);
1156:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _scaled);
1157:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1158:/home/dino/paparazzi/var/include/messages.h **** 	} else
1159:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1160:/home/dino/paparazzi/var/include/messages.h **** }
1161:/home/dino/paparazzi/var/include/messages.h **** 
1162:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AIRSPEED_ETS(_trans, _dev, adc, offset, scaled) pprz_msg_send_AIRSPEED_ETS(&(
1163:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AIRSPEED_ETS(struct transport_tx *trans, struct link_device *dev, 
1164:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4 +2 /* msg h
1165:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4 +2 /* msg header overhe
1166:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+4 +2 /* msg header overhead */);
1167:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1168:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AIRSPEED_ETS, "AIRSP
1169:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _adc);
1170:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _offset);
1171:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _scaled);
1172:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1173:/home/dino/paparazzi/var/include/messages.h **** 	} else
1174:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1175:/home/dino/paparazzi/var/include/messages.h **** }
1176:/home/dino/paparazzi/var/include/messages.h **** 
1177:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PBN(_trans, _dev, airspeed_adc, altitude_adc, airspeed, altitude, airspeed_of
1178:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PBN(struct transport_tx *trans, struct link_device *dev, uint8_t a
1179:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4+2+2 +2 /*
1180:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4+2+2 +2 /* msg header 
1181:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+4+4+2+2 +2 /* msg header overhead */);
1182:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1183:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PBN, "PBN");
1184:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _airspeed_adc);
1185:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _altitude_adc);
1186:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
1187:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _altitude);
1188:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _airspeed_offse
1189:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _altitude_offse
1190:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1191:/home/dino/paparazzi/var/include/messages.h **** 	} else
1192:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1193:/home/dino/paparazzi/var/include/messages.h **** }
1194:/home/dino/paparazzi/var/include/messages.h **** 
1195:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS_LLA(_trans, _dev, lat, lon, alt, course, speed, climb, week, itow, mode, 
1196:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS_LLA(struct transport_tx *trans, struct link_device *dev, uint8
1197:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+2+2+2+2+4+1
1198:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+2+2+2+2+4+1+1 +2 /* msg
1199:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+2+2+2+2+4+1+1 +2 /* msg header overhead */);
1200:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1201:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS_LLA, "GPS_LLA");
1202:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lat);
1203:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lon);
1204:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
1205:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _course);
1206:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _speed);
1207:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _climb);
1208:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _week);
1209:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _itow);
1210:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mode);
1211:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _gps_nb_err);
1212:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1213:/home/dino/paparazzi/var/include/messages.h **** 	} else
1214:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1215:/home/dino/paparazzi/var/include/messages.h **** }
1216:/home/dino/paparazzi/var/include/messages.h **** 
1217:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_H_CTL_A(_trans, _dev, roll_sum_err, roll_sp, roll_ref, phi, aileron_sp, pitch
1218:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_H_CTL_A(struct transport_tx *trans, struct link_device *dev, uint8
1219:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+2+4+4+4+4
1220:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+2+4+4+4+4+2 +2 /* msg
1221:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+2+4+4+4+4+2 +2 /* msg header overhead */);
1222:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1223:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_H_CTL_A, "H_CTL_A");
1224:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll_sum_err);
1225:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll_sp);
1226:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll_ref);
1227:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
1228:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _aileron_sp);
1229:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch_sum_err);
1230:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch_sp);
1231:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch_ref);
1232:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
1233:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _elevator_sp);
1234:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1235:/home/dino/paparazzi/var/include/messages.h **** 	} else
1236:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1237:/home/dino/paparazzi/var/include/messages.h **** }
1238:/home/dino/paparazzi/var/include/messages.h **** 
1239:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TURB_PRESSURE_RAW(_trans, _dev, ch_0, ch_1, ch_2, ch_3, ch_4, ch_5, ch_6, ch_
1240:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TURB_PRESSURE_RAW(struct transport_tx *trans, struct link_device *
1241:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
1242:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
1243:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhe
1244:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1245:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TURB_PRESSURE_RAW, "
1246:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_0);
1247:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_1);
1248:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_2);
1249:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_3);
1250:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_4);
1251:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_5);
1252:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_6);
1253:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_7);
1254:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_8);
1255:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_9);
1256:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_10);
1257:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_11);
1258:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_12);
1259:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_13);
1260:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_14);
1261:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ch_15);
1262:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1263:/home/dino/paparazzi/var/include/messages.h **** 	} else
1264:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1265:/home/dino/paparazzi/var/include/messages.h **** }
1266:/home/dino/paparazzi/var/include/messages.h **** 
1267:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TURB_PRESSURE_VOLTAGE(_trans, _dev, ch_1_p, ch_1_t, ch_2_p, ch_2_t, ch_3_p, c
1268:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TURB_PRESSURE_VOLTAGE(struct transport_tx *trans, struct link_devi
1269:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
1270:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
1271:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhe
1272:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1273:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TURB_PRESSURE_VOLTAG
1274:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_1_p);
1275:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_1_t);
1276:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_2_p);
1277:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_2_t);
1278:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_3_p);
1279:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_3_t);
1280:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_4_p);
1281:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_4_t);
1282:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_5_p);
1283:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_5_t);
1284:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_6_p);
1285:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_6_t);
1286:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_7_p);
1287:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ch_7_t);
1288:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _gnd1);
1289:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _gnd2);
1290:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1291:/home/dino/paparazzi/var/include/messages.h **** 	} else
1292:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1293:/home/dino/paparazzi/var/include/messages.h **** }
1294:/home/dino/paparazzi/var/include/messages.h **** 
1295:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CAM_POINT(_trans, _dev, cam_point_distance_from_home, cam_point_lat, cam_poin
1296:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CAM_POINT(struct transport_tx *trans, struct link_device *dev, uin
1297:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4 +2 /* msg h
1298:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4 +2 /* msg header overhe
1299:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4 +2 /* msg header overhead */);
1300:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1301:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CAM_POINT, "CAM_POIN
1302:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _cam_point_dist
1303:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _cam_point_lat);
1304:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _cam_point_lon);
1305:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1306:/home/dino/paparazzi/var/include/messages.h **** 	} else
1307:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1308:/home/dino/paparazzi/var/include/messages.h **** }
1309:/home/dino/paparazzi/var/include/messages.h **** 
1310:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DC_INFO(_trans, _dev, mode, lat, lon, alt, course, photo_nr, dist, next_dist,
1311:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DC_INFO(struct transport_tx *trans, struct link_device *dev, uint8
1312:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+2+4+4+4
1313:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+2+4+4+4+4+4+4+4+2+1
1314:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4+4+4+2+4+4+4+4+4+4+4+2+1 +2 /* msg header overhead
1315:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1316:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DC_INFO, "DC_INFO");
1317:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mode);
1318:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lat);
1319:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lon);
1320:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
1321:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _course);
1322:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _photo_nr);
1323:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist);
1324:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _next_dist);
1325:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _start_x);
1326:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _start_y);
1327:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _start_angle);
1328:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _angle);
1329:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _last_block);
1330:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _count);
1331:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _shutter);
1332:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1333:/home/dino/paparazzi/var/include/messages.h **** 	} else
1334:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1335:/home/dino/paparazzi/var/include/messages.h **** }
1336:/home/dino/paparazzi/var/include/messages.h **** 
1337:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AMSYS_BARO(_trans, _dev, pBaroRaw, pBaro, pHomePressure, AltOffset, aktuell, 
1338:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AMSYS_BARO(struct transport_tx *trans, struct link_device *dev, ui
1339:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+4 +2 
1340:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+4 +2 /* msg heade
1341:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4+4+4+4+4 +2 /* msg header overhead */);
1342:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1343:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AMSYS_BARO, "AMSYS_B
1344:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _pBaroRaw);
1345:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pBaro);
1346:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pHomePressure);
1347:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _AltOffset);
1348:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _aktuell);
1349:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Over_Ground);
1350:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _tempBaro);
1351:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1352:/home/dino/paparazzi/var/include/messages.h **** 	} else
1353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1354:/home/dino/paparazzi/var/include/messages.h **** }
1355:/home/dino/paparazzi/var/include/messages.h **** 
1356:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AMSYS_AIRSPEED(_trans, _dev, asRaw, asPresure, asAirspeed, asAirsFilt, asTemp
1357:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AMSYS_AIRSPEED(struct transport_tx *trans, struct link_device *dev
1358:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4 +2 /* m
1359:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4 +2 /* msg header ov
1360:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4+4+4 +2 /* msg header overhead */);
1361:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1362:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AMSYS_AIRSPEED, "AMS
1363:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _asRaw);
1364:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _asPresure);
1365:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _asAirspeed);
1366:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _asAirsFilt);
1367:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _asTemp);
1368:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1369:/home/dino/paparazzi/var/include/messages.h **** 	} else
1370:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1371:/home/dino/paparazzi/var/include/messages.h **** }
1372:/home/dino/paparazzi/var/include/messages.h **** 
1373:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FLIGHT_BENCHMARK(_trans, _dev, SE_As, SE_Alt, SE_Pos, Err_As, Err_Alt, Err_Po
1374:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FLIGHT_BENCHMARK(struct transport_tx *trans, struct link_device *d
1375:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /*
1376:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /* msg header 
1377:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4 +2 /* msg header overhead */);
1378:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1379:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FLIGHT_BENCHMARK, "F
1380:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _SE_As);
1381:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _SE_Alt);
1382:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _SE_Pos);
1383:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Err_As);
1384:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Err_Alt);
1385:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Err_Pos);
1386:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1387:/home/dino/paparazzi/var/include/messages.h **** 	} else
1388:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1389:/home/dino/paparazzi/var/include/messages.h **** }
1390:/home/dino/paparazzi/var/include/messages.h **** 
1391:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MPL3115_BARO(_trans, _dev, pressure, temp, alt) pprz_msg_send_MPL3115_BARO(&(
1392:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MPL3115_BARO(struct transport_tx *trans, struct link_device *dev, 
1393:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+4 +2 /* msg h
1394:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+4 +2 /* msg header overhe
1395:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+2+4 +2 /* msg header overhead */);
1396:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1397:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MPL3115_BARO, "MPL31
1398:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _pressure);
1399:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _temp);
1400:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alt);
1401:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1402:/home/dino/paparazzi/var/include/messages.h **** 	} else
1403:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1404:/home/dino/paparazzi/var/include/messages.h **** }
1405:/home/dino/paparazzi/var/include/messages.h **** 
1406:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AOA_ADC(_trans, _dev, adcVal, AOA) pprz_msg_send_AOA_ADC(&((_trans).trans_tx)
1407:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AOA_ADC(struct transport_tx *trans, struct link_device *dev, uint8
1408:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg hea
1409:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg header overhead
1410:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4 +2 /* msg header overhead */);
1411:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1412:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AOA_ADC, "AOA_ADC");
1413:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _adcVal);
1414:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _AOA);
1415:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1416:/home/dino/paparazzi/var/include/messages.h **** 	} else
1417:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1418:/home/dino/paparazzi/var/include/messages.h **** }
1419:/home/dino/paparazzi/var/include/messages.h **** 
1420:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_XTEND_RSSI(_trans, _dev, datalink_time, rssi_fade_margin, duty) pprz_msg_send
1421:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_XTEND_RSSI(struct transport_tx *trans, struct link_device *dev, ui
1422:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+1+1 +2 /* msg h
1423:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+1+1 +2 /* msg header overhe
1424:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+1+1 +2 /* msg header overhead */);
1425:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1426:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_XTEND_RSSI, "XTEND_R
1427:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _datalink_time)
1428:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _rssi_fade_margi
1429:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _duty);
1430:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1431:/home/dino/paparazzi/var/include/messages.h **** 	} else
1432:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1433:/home/dino/paparazzi/var/include/messages.h **** }
1434:/home/dino/paparazzi/var/include/messages.h **** 
1435:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SUPERBITRF(_trans, _dev, status, cyrf_status, irq_count, rx_packet_count, tx_
1436:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SUPERBITRF(struct transport_tx *trans, struct link_device *dev, ui
1437:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+4+4+4
1438:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+4+4+4+4+4+4+1+nb_
1439:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4+4+4+4+4+4+4+4+4+1+nb_mfg_id*1 +2 /* msg header 
1440:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1441:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SUPERBITRF, "SUPERBI
1442:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _status);
1443:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cyrf_status);
1444:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _irq_count);
1445:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _rx_packet_coun
1446:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _tx_packet_coun
1447:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _transfer_timeo
1448:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _resync_count);
1449:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _uplink_count);
1450:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _rc_count);
1451:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _timing1);
1452:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _timing2);
1453:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _bind_mfg_id);
1454:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_mfg_i
1455:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_mfg_id, (void *) _mfg_
1456:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1457:/home/dino/paparazzi/var/include/messages.h **** 	} else
1458:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1459:/home/dino/paparazzi/var/include/messages.h **** }
1460:/home/dino/paparazzi/var/include/messages.h **** 
1461:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GX3_INFO(_trans, _dev, GX3_freq, chksm_error, hdr_error, GX3_chksm) pprz_msg_
1462:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GX3_INFO(struct transport_tx *trans, struct link_device *dev, uint
1463:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+2 +2 /* msg
1464:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+2 +2 /* msg header over
1465:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+2 +2 /* msg header overhead */);
1466:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1467:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GX3_INFO, "GX3_INFO"
1468:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _GX3_freq);
1469:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _chksm_error);
1470:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _hdr_error);
1471:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _GX3_chksm);
1472:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1473:/home/dino/paparazzi/var/include/messages.h **** 	} else
1474:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1475:/home/dino/paparazzi/var/include/messages.h **** }
1476:/home/dino/paparazzi/var/include/messages.h **** 
1477:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_EXPLAIN(_trans, _dev, type, id, nb_string, string) pprz_msg_send_EXPLAIN(&((_
1478:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_EXPLAIN(struct transport_tx *trans, struct link_device *dev, uint8
1479:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+nb_string*1
1480:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+nb_string*1 +2 /* msg h
1481:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+nb_string*1 +2 /* msg header overhead */);
1482:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1483:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_EXPLAIN, "EXPLAIN");
1484:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _type);
1485:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _id);
1486:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_strin
1487:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_string, (void *) _stri
1488:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1489:/home/dino/paparazzi/var/include/messages.h **** 	} else
1490:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1491:/home/dino/paparazzi/var/include/messages.h **** }
1492:/home/dino/paparazzi/var/include/messages.h **** 
1493:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_VIDEO_TELEMETRY(_trans, _dev, blob_x1, blob_y1, blob_x2, blob_y2, blob_x3, bl
1494:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_VIDEO_TELEMETRY(struct transport_tx *trans, struct link_device *de
1495:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +
1496:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
1497:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
1498:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1499:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_VIDEO_TELEMETRY, "VI
1500:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _blob_x1);
1501:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _blob_y1);
1502:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _blob_x2);
1503:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _blob_y2);
1504:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _blob_x3);
1505:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _blob_y3);
1506:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _blob_x4);
1507:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _blob_y4);
1508:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1509:/home/dino/paparazzi/var/include/messages.h **** 	} else
1510:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1511:/home/dino/paparazzi/var/include/messages.h **** }
1512:/home/dino/paparazzi/var/include/messages.h **** 
1513:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_VF_UPDATE(_trans, _dev, baro, range_meter) pprz_msg_send_VF_UPDATE(&((_trans)
1514:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_VF_UPDATE(struct transport_tx *trans, struct link_device *dev, uin
1515:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
1516:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
1517:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
1518:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1519:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_VF_UPDATE, "VF_UPDAT
1520:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _baro);
1521:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _range_meter);
1522:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1523:/home/dino/paparazzi/var/include/messages.h **** 	} else
1524:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1525:/home/dino/paparazzi/var/include/messages.h **** }
1526:/home/dino/paparazzi/var/include/messages.h **** 
1527:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_VF_PREDICT(_trans, _dev, accel) pprz_msg_send_VF_PREDICT(&((_trans).trans_tx)
1528:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_VF_PREDICT(struct transport_tx *trans, struct link_device *dev, ui
1529:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4 +2 /* msg heade
1530:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4 +2 /* msg header overhead *
1531:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4 +2 /* msg header overhead */);
1532:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1533:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_VF_PREDICT, "VF_PRED
1534:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _accel);
1535:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1536:/home/dino/paparazzi/var/include/messages.h **** 	} else
1537:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1538:/home/dino/paparazzi/var/include/messages.h **** }
1539:/home/dino/paparazzi/var/include/messages.h **** 
1540:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_INV_FILTER(_trans, _dev, quat, phi_inv, theta_inv, psi_inv, Vx_inv, Vy_inv, V
1541:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_INV_FILTER(struct transport_tx *trans, struct link_device *dev, ui
1542:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
1543:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
1544:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header over
1545:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1546:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_INV_FILTER, "INV_FIL
1547:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _quat);
1548:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi_inv);
1549:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta_inv);
1550:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi_inv);
1551:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Vx_inv);
1552:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Vy_inv);
1553:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Vz_inv);
1554:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Px_inv);
1555:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Py_inv);
1556:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Pz_inv);
1557:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bias_phi);
1558:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bias_theta);
1559:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bias_psi);
1560:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bias_as);
1561:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bias_hb);
1562:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _meas_baro);
1563:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _meas_gps);
1564:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1565:/home/dino/paparazzi/var/include/messages.h **** 	} else
1566:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1567:/home/dino/paparazzi/var/include/messages.h **** }
1568:/home/dino/paparazzi/var/include/messages.h **** 
1569:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MISSION_STATUS(_trans, _dev, remaining_time, nb_task_list, task_list) pprz_ms
1570:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MISSION_STATUS(struct transport_tx *trans, struct link_device *dev
1571:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_task_list*
1572:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_task_list*1 +2 /* msg 
1573:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1+nb_task_list*1 +2 /* msg header overhead */);
1574:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1575:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MISSION_STATUS, "MIS
1576:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _remaining_time)
1577:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_task_
1578:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_task_list, (void *) _t
1579:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1580:/home/dino/paparazzi/var/include/messages.h **** 	} else
1581:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1582:/home/dino/paparazzi/var/include/messages.h **** }
1583:/home/dino/paparazzi/var/include/messages.h **** 
1584:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CROSS_TRACK_ERROR(_trans, _dev, cross_track_error, cte_int) pprz_msg_send_CRO
1585:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CROSS_TRACK_ERROR(struct transport_tx *trans, struct link_device *
1586:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
1587:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
1588:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
1589:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1590:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CROSS_TRACK_ERROR, "
1591:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _cross_track_err
1592:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _cte_int);
1593:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1594:/home/dino/paparazzi/var/include/messages.h **** 	} else
1595:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1596:/home/dino/paparazzi/var/include/messages.h **** }
1597:/home/dino/paparazzi/var/include/messages.h **** 
1598:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GENERIC_COM(_trans, _dev, lat, lon, alt, gspeed, course, airspeed, vsupply, e
1599:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GENERIC_COM(struct transport_tx *trans, struct link_device *dev, u
1600:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+2+2+2+1+1+1
1601:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+2+2+2+1+1+1+1+1+2 +2 /*
1602:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+2+2+2+2+1+1+1+1+1+2 +2 /* msg header overhead */);
1603:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1604:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GENERIC_COM, "GENERI
1605:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lat);
1606:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lon);
1607:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _alt);
1608:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _gspeed);
1609:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _course);
1610:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _airspeed);
1611:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _vsupply);
1612:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _energy);
1613:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _throttle);
1614:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_mode);
1615:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _nav_block);
1616:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flight_time);
1617:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1618:/home/dino/paparazzi/var/include/messages.h **** 	} else
1619:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1620:/home/dino/paparazzi/var/include/messages.h **** }
1621:/home/dino/paparazzi/var/include/messages.h **** 
1622:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FORMATION_SLOT_TM(_trans, _dev, ac_id, mode, slot_east, slot_north, slot_alt)
1623:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FORMATION_SLOT_TM(struct transport_tx *trans, struct link_device *
1624:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4 +2 /* m
1625:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4 +2 /* msg header ov
1626:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4+4 +2 /* msg header overhead */);
1627:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1628:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FORMATION_SLOT_TM, "
1629:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
1630:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mode);
1631:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _slot_east);
1632:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _slot_north);
1633:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _slot_alt);
1634:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1635:/home/dino/paparazzi/var/include/messages.h **** 	} else
1636:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1637:/home/dino/paparazzi/var/include/messages.h **** }
1638:/home/dino/paparazzi/var/include/messages.h **** 
1639:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FORMATION_STATUS_TM(_trans, _dev, ac_id, leader_id, status) pprz_msg_send_FOR
1640:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FORMATION_STATUS_TM(struct transport_tx *trans, struct link_device
1641:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg h
1642:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhe
1643:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
1644:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1645:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FORMATION_STATUS_TM,
1646:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
1647:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _leader_id);
1648:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _status);
1649:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1650:/home/dino/paparazzi/var/include/messages.h **** 	} else
1651:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1652:/home/dino/paparazzi/var/include/messages.h **** }
1653:/home/dino/paparazzi/var/include/messages.h **** 
1654:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BMP_STATUS(_trans, _dev, UP, UT, press, temp) pprz_msg_send_BMP_STATUS(&((_tr
1655:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BMP_STATUS(struct transport_tx *trans, struct link_device *dev, ui
1656:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
1657:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
1658:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
1659:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1660:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BMP_STATUS, "BMP_STA
1661:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _UP);
1662:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _UT);
1663:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _press);
1664:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _temp);
1665:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1666:/home/dino/paparazzi/var/include/messages.h **** 	} else
1667:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1668:/home/dino/paparazzi/var/include/messages.h **** }
1669:/home/dino/paparazzi/var/include/messages.h **** 
1670:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MLX_STATUS(_trans, _dev, itemp_case, temp_case, itemp_obj, temp_obj) pprz_msg
1671:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MLX_STATUS(struct transport_tx *trans, struct link_device *dev, ui
1672:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+2+4 +2 /* msg
1673:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+2+4 +2 /* msg header over
1674:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+2+4 +2 /* msg header overhead */);
1675:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1676:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MLX_STATUS, "MLX_STA
1677:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _itemp_case);
1678:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp_case);
1679:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _itemp_obj);
1680:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp_obj);
1681:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1682:/home/dino/paparazzi/var/include/messages.h **** 	} else
1683:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1684:/home/dino/paparazzi/var/include/messages.h **** }
1685:/home/dino/paparazzi/var/include/messages.h **** 
1686:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TMP_STATUS(_trans, _dev, itemp, temp) pprz_msg_send_TMP_STATUS(&((_trans).tra
1687:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TMP_STATUS(struct transport_tx *trans, struct link_device *dev, ui
1688:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg hea
1689:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg header overhead
1690:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4 +2 /* msg header overhead */);
1691:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1692:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TMP_STATUS, "TMP_STA
1693:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _itemp);
1694:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp);
1695:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1696:/home/dino/paparazzi/var/include/messages.h **** 	} else
1697:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1698:/home/dino/paparazzi/var/include/messages.h **** }
1699:/home/dino/paparazzi/var/include/messages.h **** 
1700:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WIND_INFO_RET(_trans, _dev, east, north, airspeed) pprz_msg_send_WIND_INFO_RE
1701:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WIND_INFO_RET(struct transport_tx *trans, struct link_device *dev,
1702:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
1703:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
1704:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
1705:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1706:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WIND_INFO_RET, "WIND
1707:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _east);
1708:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _north);
1709:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
1710:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1711:/home/dino/paparazzi/var/include/messages.h **** 	} else
1712:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1713:/home/dino/paparazzi/var/include/messages.h **** }
1714:/home/dino/paparazzi/var/include/messages.h **** 
1715:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SCP_STATUS(_trans, _dev, press, temp) pprz_msg_send_SCP_STATUS(&((_trans).tra
1716:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SCP_STATUS(struct transport_tx *trans, struct link_device *dev, ui
1717:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+2 +2 /* msg hea
1718:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+2 +2 /* msg header overhead
1719:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+2 +2 /* msg header overhead */);
1720:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1721:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SCP_STATUS, "SCP_STA
1722:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _press);
1723:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _temp);
1724:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1725:/home/dino/paparazzi/var/include/messages.h **** 	} else
1726:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1727:/home/dino/paparazzi/var/include/messages.h **** }
1728:/home/dino/paparazzi/var/include/messages.h **** 
1729:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SHT_STATUS(_trans, _dev, ihumid, itemp, humid, temp) pprz_msg_send_SHT_STATUS
1730:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SHT_STATUS(struct transport_tx *trans, struct link_device *dev, ui
1731:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4 +2 /* msg
1732:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4 +2 /* msg header over
1733:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+4+4 +2 /* msg header overhead */);
1734:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1735:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SHT_STATUS, "SHT_STA
1736:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ihumid);
1737:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _itemp);
1738:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _humid);
1739:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp);
1740:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1741:/home/dino/paparazzi/var/include/messages.h **** 	} else
1742:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1743:/home/dino/paparazzi/var/include/messages.h **** }
1744:/home/dino/paparazzi/var/include/messages.h **** 
1745:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ENOSE_STATUS(_trans, _dev, val1, val2, val3, PID, nb_heat, heat) pprz_msg_sen
1746:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ENOSE_STATUS(struct transport_tx *trans, struct link_device *dev, 
1747:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+nb_heat
1748:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+nb_heat*1 +2 /* msg
1749:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+1+nb_heat*1 +2 /* msg header overhead */);
1750:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1751:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ENOSE_STATUS, "ENOSE
1752:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val1);
1753:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val2);
1754:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val3);
1755:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _PID);
1756:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_heat)
1757:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_heat, (void *) _heat);
1758:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1759:/home/dino/paparazzi/var/include/messages.h **** 	} else
1760:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1761:/home/dino/paparazzi/var/include/messages.h **** }
1762:/home/dino/paparazzi/var/include/messages.h **** 
1763:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DPICCO_STATUS(_trans, _dev, humid, temp, fhumid, ftemp) pprz_msg_send_DPICCO_
1764:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DPICCO_STATUS(struct transport_tx *trans, struct link_device *dev,
1765:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4 +2 /* msg
1766:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4 +2 /* msg header over
1767:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+4+4 +2 /* msg header overhead */);
1768:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1769:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DPICCO_STATUS, "DPIC
1770:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _humid);
1771:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temp);
1772:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fhumid);
1773:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ftemp);
1774:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1775:/home/dino/paparazzi/var/include/messages.h **** 	} else
1776:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1777:/home/dino/paparazzi/var/include/messages.h **** }
1778:/home/dino/paparazzi/var/include/messages.h **** 
1779:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ANTENNA_DEBUG(_trans, _dev, mag_xraw, mag_yraw, mag_xcal, mag_ycal, mag_headi
1780:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ANTENNA_DEBUG(struct transport_tx *trans, struct link_device *dev,
1781:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+1+1
1782:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+1+1 +2 /* msg h
1783:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+1+1 +2 /* msg header overhead */);
1784:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1785:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ANTENNA_DEBUG, "ANTE
1786:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mag_xraw);
1787:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mag_yraw);
1788:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mag_xcal);
1789:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mag_ycal);
1790:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mag_heading);
1791:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mag_magnitude);
1792:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mag_temp);
1793:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mag_distor);
1794:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mag_cal_status)
1795:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1796:/home/dino/paparazzi/var/include/messages.h **** 	} else
1797:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1798:/home/dino/paparazzi/var/include/messages.h **** }
1799:/home/dino/paparazzi/var/include/messages.h **** 
1800:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ANTENNA_STATUS(_trans, _dev, azim_sp, elev_sp, id_sp, mode) pprz_msg_send_ANT
1801:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ANTENNA_STATUS(struct transport_tx *trans, struct link_device *dev
1802:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+1 +2 /* msg
1803:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+1 +2 /* msg header over
1804:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+1+1 +2 /* msg header overhead */);
1805:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1806:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ANTENNA_STATUS, "ANT
1807:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _azim_sp);
1808:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _elev_sp);
1809:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _id_sp);
1810:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mode);
1811:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1812:/home/dino/paparazzi/var/include/messages.h **** 	} else
1813:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1814:/home/dino/paparazzi/var/include/messages.h **** }
1815:/home/dino/paparazzi/var/include/messages.h **** 
1816:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MOTOR_BENCH_STATUS(_trans, _dev, time_ticks, throttle, rpm, current, thrust, 
1817:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MOTOR_BENCH_STATUS(struct transport_tx *trans, struct link_device 
1818:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+2+1 +
1819:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+2+1 +2 /* msg hea
1820:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+2+1 +2 /* msg header overhead */);
1821:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1822:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MOTOR_BENCH_STATUS, 
1823:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _time_ticks);
1824:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _throttle);
1825:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _rpm);
1826:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _current);
1827:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _thrust);
1828:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _torque);
1829:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _time_s);
1830:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mode);
1831:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1832:/home/dino/paparazzi/var/include/messages.h **** 	} else
1833:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1834:/home/dino/paparazzi/var/include/messages.h **** }
1835:/home/dino/paparazzi/var/include/messages.h **** 
1836:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MOTOR_BENCH_STATIC(_trans, _dev, av_rpm, av_thrust, av_current, throttle) ppr
1837:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MOTOR_BENCH_STATIC(struct transport_tx *trans, struct link_device 
1838:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+2 +2 /* msg
1839:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+2 +2 /* msg header over
1840:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+2 +2 /* msg header overhead */);
1841:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1842:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MOTOR_BENCH_STATIC, 
1843:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _av_rpm);
1844:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _av_thrust);
1845:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _av_current);
1846:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _throttle);
1847:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1848:/home/dino/paparazzi/var/include/messages.h **** 	} else
1849:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1850:/home/dino/paparazzi/var/include/messages.h **** }
1851:/home/dino/paparazzi/var/include/messages.h **** 
1852:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_HIH_STATUS(_trans, _dev, humid, fhumid, ftemp) pprz_msg_send_HIH_STATUS(&((_t
1853:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_HIH_STATUS(struct transport_tx *trans, struct link_device *dev, ui
1854:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4 +2 /* msg h
1855:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4 +2 /* msg header overhe
1856:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4 +2 /* msg header overhead */);
1857:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1858:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HIH_STATUS, "HIH_STA
1859:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _humid);
1860:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fhumid);
1861:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ftemp);
1862:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1863:/home/dino/paparazzi/var/include/messages.h **** 	} else
1864:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1865:/home/dino/paparazzi/var/include/messages.h **** }
1866:/home/dino/paparazzi/var/include/messages.h **** 
1867:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TEMT_STATUS(_trans, _dev, light, f_light) pprz_msg_send_TEMT_STATUS(&((_trans
1868:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TEMT_STATUS(struct transport_tx *trans, struct link_device *dev, u
1869:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg hea
1870:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg header overhead
1871:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4 +2 /* msg header overhead */);
1872:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1873:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TEMT_STATUS, "TEMT_S
1874:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _light);
1875:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _f_light);
1876:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1877:/home/dino/paparazzi/var/include/messages.h **** 	} else
1878:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1879:/home/dino/paparazzi/var/include/messages.h **** }
1880:/home/dino/paparazzi/var/include/messages.h **** 
1881:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GP2Y_STATUS(_trans, _dev, idensity, density) pprz_msg_send_GP2Y_STATUS(&((_tr
1882:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GP2Y_STATUS(struct transport_tx *trans, struct link_device *dev, u
1883:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg hea
1884:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg header overhead
1885:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4 +2 /* msg header overhead */);
1886:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1887:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GP2Y_STATUS, "GP2Y_S
1888:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _idensity);
1889:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _density);
1890:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1891:/home/dino/paparazzi/var/include/messages.h **** 	} else
1892:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1893:/home/dino/paparazzi/var/include/messages.h **** }
1894:/home/dino/paparazzi/var/include/messages.h **** 
1895:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SHT_I2C_SERIAL(_trans, _dev, serial0, serial1) pprz_msg_send_SHT_I2C_SERIAL(&
1896:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SHT_I2C_SERIAL(struct transport_tx *trans, struct link_device *dev
1897:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
1898:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
1899:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
1900:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1901:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SHT_I2C_SERIAL, "SHT
1902:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _serial0);
1903:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _serial1);
1904:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1905:/home/dino/paparazzi/var/include/messages.h **** 	} else
1906:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1907:/home/dino/paparazzi/var/include/messages.h **** }
1908:/home/dino/paparazzi/var/include/messages.h **** 
1909:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PPM(_trans, _dev, ppm_rate, nb_values, values) pprz_msg_send_PPM(&((_trans).t
1910:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PPM(struct transport_tx *trans, struct link_device *dev, uint8_t a
1911:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_values*2 +
1912:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_values*2 +2 /* msg hea
1913:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+nb_values*2 +2 /* msg header overhead */);
1914:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1915:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PPM, "PPM");
1916:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ppm_rate);
1917:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_value
1918:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_ARRAY, 2 * nb_values, (void *) _val
1919:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1920:/home/dino/paparazzi/var/include/messages.h **** 	} else
1921:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1922:/home/dino/paparazzi/var/include/messages.h **** }
1923:/home/dino/paparazzi/var/include/messages.h **** 
1924:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_RC(_trans, _dev, nb_values, values) pprz_msg_send_RC(&((_trans).trans_tx), &(
1925:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_RC(struct transport_tx *trans, struct link_device *dev, uint8_t ac
1926:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 
1927:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 /* msg heade
1928:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_values*2 +2 /* msg header overhead */);
1929:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1930:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_RC, "RC");
1931:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_value
1932:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_ARRAY, 2 * nb_values, (void *) _valu
1933:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1934:/home/dino/paparazzi/var/include/messages.h **** 	} else
1935:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1936:/home/dino/paparazzi/var/include/messages.h **** }
1937:/home/dino/paparazzi/var/include/messages.h **** 
1938:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_COMMANDS(_trans, _dev, nb_values, values) pprz_msg_send_COMMANDS(&((_trans).t
1939:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_COMMANDS(struct transport_tx *trans, struct link_device *dev, uint
1940:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 
1941:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 /* msg heade
1942:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_values*2 +2 /* msg header overhead */);
1943:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1944:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_COMMANDS, "COMMANDS"
1945:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_value
1946:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_ARRAY, 2 * nb_values, (void *) _valu
1947:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1948:/home/dino/paparazzi/var/include/messages.h **** 	} else
1949:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1950:/home/dino/paparazzi/var/include/messages.h **** }
1951:/home/dino/paparazzi/var/include/messages.h **** 
1952:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FBW_STATUS(_trans, _dev, rc_status, frame_rate, mode, vsupply, current) pprz_
1953:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FBW_STATUS(struct transport_tx *trans, struct link_device *dev, ui
1954:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+2+4 +2 /* m
1955:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+2+4 +2 /* msg header ov
1956:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+2+4 +2 /* msg header overhead */);
1957:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1958:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FBW_STATUS, "FBW_STA
1959:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _rc_status);
1960:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _frame_rate);
1961:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mode);
1962:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _vsupply);
1963:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _current);
1964:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1965:/home/dino/paparazzi/var/include/messages.h **** 	} else
1966:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1967:/home/dino/paparazzi/var/include/messages.h **** }
1968:/home/dino/paparazzi/var/include/messages.h **** 
1969:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ADC(_trans, _dev, mcu, nb_values, values) pprz_msg_send_ADC(&((_trans).trans_
1970:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ADC(struct transport_tx *trans, struct link_device *dev, uint8_t a
1971:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_values*2 +
1972:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_values*2 +2 /* msg hea
1973:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+nb_values*2 +2 /* msg header overhead */);
1974:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1975:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ADC, "ADC");
1976:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mcu);
1977:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_value
1978:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_ARRAY, 2 * nb_values, (void *) _val
1979:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1980:/home/dino/paparazzi/var/include/messages.h **** 	} else
1981:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1982:/home/dino/paparazzi/var/include/messages.h **** }
1983:/home/dino/paparazzi/var/include/messages.h **** 
1984:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ACTUATORS(_trans, _dev, nb_values, values) pprz_msg_send_ACTUATORS(&((_trans)
1985:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ACTUATORS(struct transport_tx *trans, struct link_device *dev, uin
1986:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 
1987:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*2 +2 /* msg heade
1988:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_values*2 +2 /* msg header overhead */);
1989:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
1990:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ACTUATORS, "ACTUATOR
1991:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_value
1992:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_ARRAY, 2 * nb_values, (void *) _valu
1993:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
1994:/home/dino/paparazzi/var/include/messages.h **** 	} else
1995:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
1996:/home/dino/paparazzi/var/include/messages.h **** }
1997:/home/dino/paparazzi/var/include/messages.h **** 
1998:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DC_SHOT(_trans, _dev, photo_nr, lat, lon, alt, hmsl, phi, theta, psi, course,
1999:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DC_SHOT(struct transport_tx *trans, struct link_device *dev, uint8
2000:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+2+2+2+2
2001:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+2+2+2+2+2+4 +2 /* m
2002:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4+4+4+2+2+2+2+2+4 +2 /* msg header overhead */);
2003:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2004:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DC_SHOT, "DC_SHOT");
2005:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _photo_nr);
2006:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lat);
2007:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lon);
2008:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
2009:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _hmsl);
2010:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _phi);
2011:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _theta);
2012:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _psi);
2013:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _course);
2014:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _speed);
2015:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _itow);
2016:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2017:/home/dino/paparazzi/var/include/messages.h **** 	} else
2018:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2019:/home/dino/paparazzi/var/include/messages.h **** }
2020:/home/dino/paparazzi/var/include/messages.h **** 
2021:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TEST_BOARD_RESULTS(_trans, _dev, uart, ppm, nb_servo, servo) pprz_msg_send_TE
2022:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TEST_BOARD_RESULTS(struct transport_tx *trans, struct link_device 
2023:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+nb_servo*2 
2024:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+nb_servo*2 +2 /* msg he
2025:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+nb_servo*2 +2 /* msg header overhead */);
2026:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2027:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TEST_BOARD_RESULTS, 
2028:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _uart);
2029:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ppm);
2030:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_servo
2031:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_ARRAY, 2 * nb_servo, (void *) _serv
2032:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2033:/home/dino/paparazzi/var/include/messages.h **** 	} else
2034:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2035:/home/dino/paparazzi/var/include/messages.h **** }
2036:/home/dino/paparazzi/var/include/messages.h **** 
2037:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MLX_SERIAL(_trans, _dev, serial0, serial1) pprz_msg_send_MLX_SERIAL(&((_trans
2038:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MLX_SERIAL(struct transport_tx *trans, struct link_device *dev, ui
2039:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
2040:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
2041:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
2042:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2043:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MLX_SERIAL, "MLX_SER
2044:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _serial0);
2045:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _serial1);
2046:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2047:/home/dino/paparazzi/var/include/messages.h **** 	} else
2048:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2049:/home/dino/paparazzi/var/include/messages.h **** }
2050:/home/dino/paparazzi/var/include/messages.h **** 
2051:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PAYLOAD(_trans, _dev, nb_values, values) pprz_msg_send_PAYLOAD(&((_trans).tra
2052:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PAYLOAD(struct transport_tx *trans, struct link_device *dev, uint8
2053:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*1 +2 
2054:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_values*1 +2 /* msg heade
2055:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_values*1 +2 /* msg header overhead */);
2056:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2057:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PAYLOAD, "PAYLOAD");
2058:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_value
2059:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_values, (void *) _valu
2060:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2061:/home/dino/paparazzi/var/include/messages.h **** 	} else
2062:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2063:/home/dino/paparazzi/var/include/messages.h **** }
2064:/home/dino/paparazzi/var/include/messages.h **** 
2065:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_HTM_STATUS(_trans, _dev, ihumid, itemp, humid, temp) pprz_msg_send_HTM_STATUS
2066:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_HTM_STATUS(struct transport_tx *trans, struct link_device *dev, ui
2067:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4 +2 /* msg
2068:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4 +2 /* msg header over
2069:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+4+4 +2 /* msg header overhead */);
2070:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2071:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HTM_STATUS, "HTM_STA
2072:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ihumid);
2073:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _itemp);
2074:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _humid);
2075:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp);
2076:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2077:/home/dino/paparazzi/var/include/messages.h **** 	} else
2078:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2079:/home/dino/paparazzi/var/include/messages.h **** }
2080:/home/dino/paparazzi/var/include/messages.h **** 
2081:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BARO_MS5611(_trans, _dev, d1, d2, pressure, temp) pprz_msg_send_BARO_MS5611(&
2082:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BARO_MS5611(struct transport_tx *trans, struct link_device *dev, u
2083:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
2084:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
2085:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
2086:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2087:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BARO_MS5611, "BARO_M
2088:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _d1);
2089:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _d2);
2090:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pressure);
2091:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp);
2092:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2093:/home/dino/paparazzi/var/include/messages.h **** 	} else
2094:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2095:/home/dino/paparazzi/var/include/messages.h **** }
2096:/home/dino/paparazzi/var/include/messages.h **** 
2097:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MS5611_COEFF(_trans, _dev, c0, c1, c2, c3, c4, c5, c6, c7) pprz_msg_send_MS56
2098:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MS5611_COEFF(struct transport_tx *trans, struct link_device *dev, 
2099:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2 +
2100:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2 +2 /* msg hea
2101:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+2 +2 /* msg header overhead */);
2102:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2103:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MS5611_COEFF, "MS561
2104:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _c0);
2105:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _c1);
2106:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _c2);
2107:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _c3);
2108:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _c4);
2109:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _c5);
2110:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _c6);
2111:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _c7);
2112:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2113:/home/dino/paparazzi/var/include/messages.h **** 	} else
2114:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2115:/home/dino/paparazzi/var/include/messages.h **** }
2116:/home/dino/paparazzi/var/include/messages.h **** 
2117:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ATMOSPHERE_CHARGE(_trans, _dev, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) pprz_
2118:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ATMOSPHERE_CHARGE(struct transport_tx *trans, struct link_device *
2119:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2
2120:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2+2 +2 /* msg
2121:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+2+2+2 +2 /* msg header overhead */);
2122:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2123:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ATMOSPHERE_CHARGE, "
2124:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t0);
2125:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t1);
2126:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t2);
2127:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t3);
2128:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t4);
2129:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t5);
2130:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t6);
2131:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t7);
2132:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t8);
2133:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _t9);
2134:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2135:/home/dino/paparazzi/var/include/messages.h **** 	} else
2136:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2137:/home/dino/paparazzi/var/include/messages.h **** }
2138:/home/dino/paparazzi/var/include/messages.h **** 
2139:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SOLAR_RADIATION(_trans, _dev, up_t0, dn_t0, up_t1, dn_t1, up_t2, dn_t2, up_t3
2140:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SOLAR_RADIATION(struct transport_tx *trans, struct link_device *de
2141:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2
2142:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2
2143:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2 +2 /* msg heade
2144:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2145:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SOLAR_RADIATION, "SO
2146:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t0);
2147:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t0);
2148:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t1);
2149:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t1);
2150:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t2);
2151:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t2);
2152:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t3);
2153:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t3);
2154:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t4);
2155:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t4);
2156:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t5);
2157:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t5);
2158:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t6);
2159:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t6);
2160:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t7);
2161:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t7);
2162:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t8);
2163:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t8);
2164:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _up_t9);
2165:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _dn_t9);
2166:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2167:/home/dino/paparazzi/var/include/messages.h **** 	} else
2168:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2169:/home/dino/paparazzi/var/include/messages.h **** }
2170:/home/dino/paparazzi/var/include/messages.h **** 
2171:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TCAS_TA(_trans, _dev, ac_id) pprz_msg_send_TCAS_TA(&((_trans).trans_tx), &((_
2172:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TCAS_TA(struct transport_tx *trans, struct link_device *dev, uint8
2173:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg heade
2174:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead *
2175:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1 +2 /* msg header overhead */);
2176:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2177:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TCAS_TA, "TCAS_TA");
2178:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
2179:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2180:/home/dino/paparazzi/var/include/messages.h **** 	} else
2181:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2182:/home/dino/paparazzi/var/include/messages.h **** }
2183:/home/dino/paparazzi/var/include/messages.h **** 
2184:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TCAS_RA(_trans, _dev, ac_id, resolve) pprz_msg_send_TCAS_RA(&((_trans).trans_
2185:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TCAS_RA(struct transport_tx *trans, struct link_device *dev, uint8
2186:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1 +2 /* msg hea
2187:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1 +2 /* msg header overhead
2188:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1 +2 /* msg header overhead */);
2189:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2190:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TCAS_RA, "TCAS_RA");
2191:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
2192:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _resolve);
2193:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2194:/home/dino/paparazzi/var/include/messages.h **** 	} else
2195:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2196:/home/dino/paparazzi/var/include/messages.h **** }
2197:/home/dino/paparazzi/var/include/messages.h **** 
2198:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TCAS_RESOLVED(_trans, _dev, ac_id) pprz_msg_send_TCAS_RESOLVED(&((_trans).tra
2199:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TCAS_RESOLVED(struct transport_tx *trans, struct link_device *dev,
2200:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg heade
2201:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead *
2202:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1 +2 /* msg header overhead */);
2203:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2204:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TCAS_RESOLVED, "TCAS
2205:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
2206:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2207:/home/dino/paparazzi/var/include/messages.h **** 	} else
2208:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2209:/home/dino/paparazzi/var/include/messages.h **** }
2210:/home/dino/paparazzi/var/include/messages.h **** 
2211:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TCAS_DEBUG(_trans, _dev, ac_id, tau) pprz_msg_send_TCAS_DEBUG(&((_trans).tran
2212:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TCAS_DEBUG(struct transport_tx *trans, struct link_device *dev, ui
2213:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg hea
2214:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg header overhead
2215:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4 +2 /* msg header overhead */);
2216:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2217:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TCAS_DEBUG, "TCAS_DE
2218:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
2219:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _tau);
2220:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2221:/home/dino/paparazzi/var/include/messages.h **** 	} else
2222:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2223:/home/dino/paparazzi/var/include/messages.h **** }
2224:/home/dino/paparazzi/var/include/messages.h **** 
2225:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_POTENTIAL(_trans, _dev, east, north, alt, speed, climb) pprz_msg_send_POTENTI
2226:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_POTENTIAL(struct transport_tx *trans, struct link_device *dev, uin
2227:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4 +2 /* m
2228:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4 +2 /* msg header ov
2229:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4 +2 /* msg header overhead */);
2230:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2231:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_POTENTIAL, "POTENTIA
2232:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _east);
2233:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _north);
2234:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alt);
2235:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _speed);
2236:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _climb);
2237:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2238:/home/dino/paparazzi/var/include/messages.h **** 	} else
2239:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2240:/home/dino/paparazzi/var/include/messages.h **** }
2241:/home/dino/paparazzi/var/include/messages.h **** 
2242:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_VERTICAL_ENERGY(_trans, _dev, Epot_err, Ekin_err, Etot_err, Edis_err, throttl
2243:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_VERTICAL_ENERGY(struct transport_tx *trans, struct link_device *de
2244:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 
2245:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 /* msg heade
2246:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4 +2 /* msg header overhead */);
2247:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2248:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_VERTICAL_ENERGY, "VE
2249:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Epot_err);
2250:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Ekin_err);
2251:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Etot_err);
2252:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Edis_err);
2253:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _throttle);
2254:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _nav_pitch);
2255:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _speed_sp);
2256:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2257:/home/dino/paparazzi/var/include/messages.h **** 	} else
2258:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2259:/home/dino/paparazzi/var/include/messages.h **** }
2260:/home/dino/paparazzi/var/include/messages.h **** 
2261:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TEMP_TCOUPLE(_trans, _dev, fval0, fval1, fval2, fval3, fref0, fref1, fref2, f
2262:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TEMP_TCOUPLE(struct transport_tx *trans, struct link_device *dev, 
2263:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+2
2264:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+2+2+2+2+2+2+2
2265:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+2+2+2+2+2+2+2+2 +2 /* msg header overhe
2266:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2267:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TEMP_TCOUPLE, "TEMP_
2268:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fval0);
2269:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fval1);
2270:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fval2);
2271:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fval3);
2272:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fref0);
2273:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fref1);
2274:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fref2);
2275:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fref3);
2276:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val0);
2277:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val1);
2278:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val2);
2279:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val3);
2280:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ref0);
2281:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ref1);
2282:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ref2);
2283:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ref3);
2284:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2285:/home/dino/paparazzi/var/include/messages.h **** 	} else
2286:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2287:/home/dino/paparazzi/var/include/messages.h **** }
2288:/home/dino/paparazzi/var/include/messages.h **** 
2289:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SHT_I2C_STATUS(_trans, _dev, ihumid, itemp, humid, temp) pprz_msg_send_SHT_I2
2290:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SHT_I2C_STATUS(struct transport_tx *trans, struct link_device *dev
2291:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4 +2 /* msg
2292:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4 +2 /* msg header over
2293:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+4+4 +2 /* msg header overhead */);
2294:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2295:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SHT_I2C_STATUS, "SHT
2296:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ihumid);
2297:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _itemp);
2298:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _humid);
2299:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp);
2300:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2301:/home/dino/paparazzi/var/include/messages.h **** 	} else
2302:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2303:/home/dino/paparazzi/var/include/messages.h **** }
2304:/home/dino/paparazzi/var/include/messages.h **** 
2305:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CAMERA_SNAPSHOT(_trans, _dev, snapshot_image_number) pprz_msg_send_CAMERA_SNA
2306:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CAMERA_SNAPSHOT(struct transport_tx *trans, struct link_device *de
2307:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg heade
2308:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg header overhead *
2309:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2 +2 /* msg header overhead */);
2310:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2311:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CAMERA_SNAPSHOT, "CA
2312:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _snapshot_image
2313:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2314:/home/dino/paparazzi/var/include/messages.h **** 	} else
2315:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2316:/home/dino/paparazzi/var/include/messages.h **** }
2317:/home/dino/paparazzi/var/include/messages.h **** 
2318:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TIMESTAMP(_trans, _dev, timestamp) pprz_msg_send_TIMESTAMP(&((_trans).trans_t
2319:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TIMESTAMP(struct transport_tx *trans, struct link_device *dev, uin
2320:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4 +2 /* msg heade
2321:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4 +2 /* msg header overhead *
2322:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4 +2 /* msg header overhead */);
2323:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2324:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TIMESTAMP, "TIMESTAM
2325:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _timestamp);
2326:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2327:/home/dino/paparazzi/var/include/messages.h **** 	} else
2328:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2329:/home/dino/paparazzi/var/include/messages.h **** }
2330:/home/dino/paparazzi/var/include/messages.h **** 
2331:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_STAB_ATTITUDE_FLOAT(_trans, _dev, est_p, est_q, est_r, est_phi, est_theta, es
2332:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_STAB_ATTITUDE_FLOAT(struct transport_tx *trans, struct link_device
2333:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2334:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
2335:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* m
2336:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2337:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_STAB_ATTITUDE_FLOAT,
2338:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _est_p);
2339:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _est_q);
2340:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _est_r);
2341:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _est_phi);
2342:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _est_theta);
2343:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _est_psi);
2344:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_phi);
2345:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_theta);
2346:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_psi);
2347:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _sum_err_phi);
2348:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _sum_err_theta);
2349:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _sum_err_psi);
2350:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _delta_a_fb);
2351:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _delta_e_fb);
2352:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _delta_r_fb);
2353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _delta_a_ff);
2354:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _delta_e_ff);
2355:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _delta_r_ff);
2356:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_a);
2357:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_e);
2358:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_r);
2359:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _est_p_d);
2360:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _est_q_d);
2361:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _est_r_d);
2362:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2363:/home/dino/paparazzi/var/include/messages.h **** 	} else
2364:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2365:/home/dino/paparazzi/var/include/messages.h **** }
2366:/home/dino/paparazzi/var/include/messages.h **** 
2367:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IMU_GYRO_SCALED(_trans, _dev, gp, gq, gr) pprz_msg_send_IMU_GYRO_SCALED(&((_t
2368:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IMU_GYRO_SCALED(struct transport_tx *trans, struct link_device *de
2369:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
2370:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
2371:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
2372:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2373:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_GYRO_SCALED, "IM
2374:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gp);
2375:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gq);
2376:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gr);
2377:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2378:/home/dino/paparazzi/var/include/messages.h **** 	} else
2379:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2380:/home/dino/paparazzi/var/include/messages.h **** }
2381:/home/dino/paparazzi/var/include/messages.h **** 
2382:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IMU_ACCEL_SCALED(_trans, _dev, ax, ay, az) pprz_msg_send_IMU_ACCEL_SCALED(&((
2383:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IMU_ACCEL_SCALED(struct transport_tx *trans, struct link_device *d
2384:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
2385:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
2386:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
2387:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2388:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_ACCEL_SCALED, "I
2389:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ax);
2390:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ay);
2391:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _az);
2392:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2393:/home/dino/paparazzi/var/include/messages.h **** 	} else
2394:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2395:/home/dino/paparazzi/var/include/messages.h **** }
2396:/home/dino/paparazzi/var/include/messages.h **** 
2397:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IMU_MAG_SCALED(_trans, _dev, mx, my, mz) pprz_msg_send_IMU_MAG_SCALED(&((_tra
2398:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IMU_MAG_SCALED(struct transport_tx *trans, struct link_device *dev
2399:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
2400:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
2401:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
2402:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2403:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_MAG_SCALED, "IMU
2404:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mx);
2405:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _my);
2406:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mz);
2407:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2408:/home/dino/paparazzi/var/include/messages.h **** 	} else
2409:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2410:/home/dino/paparazzi/var/include/messages.h **** }
2411:/home/dino/paparazzi/var/include/messages.h **** 
2412:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FILTER(_trans, _dev, phi, theta, psi, measure_phi, measure_theta, measure_psi
2413:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FILTER(struct transport_tx *trans, struct link_device *dev, uint8_
2414:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2415:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
2416:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead
2417:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2418:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FILTER, "FILTER");
2419:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _phi);
2420:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _theta);
2421:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _psi);
2422:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _measure_phi);
2423:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _measure_theta);
2424:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _measure_psi);
2425:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _corrected_phi);
2426:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _corrected_theta
2427:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _corrected_psi);
2428:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _correction_phi)
2429:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _correction_thet
2430:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _correction_psi)
2431:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _bp);
2432:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _bq);
2433:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _br);
2434:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2435:/home/dino/paparazzi/var/include/messages.h **** 	} else
2436:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2437:/home/dino/paparazzi/var/include/messages.h **** }
2438:/home/dino/paparazzi/var/include/messages.h **** 
2439:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FILTER2(_trans, _dev, px, py, pz, gsx, gsy, gsz) pprz_msg_send_FILTER2(&((_tr
2440:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FILTER2(struct transport_tx *trans, struct link_device *dev, uint8
2441:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /*
2442:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /* msg header 
2443:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4 +2 /* msg header overhead */);
2444:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2445:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FILTER2, "FILTER2");
2446:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _px);
2447:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _py);
2448:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _pz);
2449:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gsx);
2450:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gsy);
2451:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gsz);
2452:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2453:/home/dino/paparazzi/var/include/messages.h **** 	} else
2454:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2455:/home/dino/paparazzi/var/include/messages.h **** }
2456:/home/dino/paparazzi/var/include/messages.h **** 
2457:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_RATE_LOOP(_trans, _dev, sp_p, sp_q, sp_r, ref_p, ref_q, ref_r, refdot_p, refd
2458:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_RATE_LOOP(struct transport_tx *trans, struct link_device *dev, uin
2459:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2460:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
2461:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header 
2462:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2463:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_RATE_LOOP, "RATE_LOO
2464:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_p);
2465:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_q);
2466:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_r);
2467:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_p);
2468:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_q);
2469:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_r);
2470:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _refdot_p);
2471:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _refdot_q);
2472:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _refdot_r);
2473:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sumerr_p);
2474:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sumerr_q);
2475:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sumerr_r);
2476:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ff_p);
2477:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ff_q);
2478:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ff_r);
2479:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _fb_p);
2480:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _fb_q);
2481:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _fb_r);
2482:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_t);
2483:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2484:/home/dino/paparazzi/var/include/messages.h **** 	} else
2485:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2486:/home/dino/paparazzi/var/include/messages.h **** }
2487:/home/dino/paparazzi/var/include/messages.h **** 
2488:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FILTER_ALIGNER(_trans, _dev, lp_gp, lp_gq, lp_gr, gp, gq, gr, noise, cnt, sta
2489:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FILTER_ALIGNER(struct transport_tx *trans, struct link_device *dev
2490:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+1
2491:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+1 +2 /* msg h
2492:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+1 +2 /* msg header overhead */);
2493:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2494:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FILTER_ALIGNER, "FIL
2495:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lp_gp);
2496:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lp_gq);
2497:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lp_gr);
2498:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gp);
2499:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gq);
2500:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gr);
2501:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _noise);
2502:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cnt);
2503:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _status);
2504:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2505:/home/dino/paparazzi/var/include/messages.h **** 	} else
2506:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2507:/home/dino/paparazzi/var/include/messages.h **** }
2508:/home/dino/paparazzi/var/include/messages.h **** 
2509:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AIRSPEED_MS45XX(_trans, _dev, diffPress, temperature, airspeed) pprz_msg_send
2510:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AIRSPEED_MS45XX(struct transport_tx *trans, struct link_device *de
2511:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+4 +2 /* msg h
2512:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+4 +2 /* msg header overhe
2513:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+2+4 +2 /* msg header overhead */);
2514:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2515:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AIRSPEED_MS45XX, "AI
2516:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _diffPress);
2517:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _temperature);
2518:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
2519:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2520:/home/dino/paparazzi/var/include/messages.h **** 	} else
2521:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2522:/home/dino/paparazzi/var/include/messages.h **** }
2523:/home/dino/paparazzi/var/include/messages.h **** 
2524:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FILTER_COR(_trans, _dev, mphi, mtheta, mpsi, qi, qx, qy, qz) pprz_msg_send_FI
2525:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FILTER_COR(struct transport_tx *trans, struct link_device *dev, ui
2526:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 
2527:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 /* msg heade
2528:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4 +2 /* msg header overhead */);
2529:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2530:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FILTER_COR, "FILTER_
2531:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mphi);
2532:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mtheta);
2533:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mpsi);
2534:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _qi);
2535:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _qx);
2536:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _qy);
2537:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _qz);
2538:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2539:/home/dino/paparazzi/var/include/messages.h **** 	} else
2540:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2541:/home/dino/paparazzi/var/include/messages.h **** }
2542:/home/dino/paparazzi/var/include/messages.h **** 
2543:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_STAB_ATTITUDE_INT(_trans, _dev, est_p, est_q, est_r, est_phi, est_theta, est_
2544:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_STAB_ATTITUDE_INT(struct transport_tx *trans, struct link_device *
2545:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2546:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
2547:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg hea
2548:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2549:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_STAB_ATTITUDE_INT, "
2550:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_p);
2551:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_q);
2552:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_r);
2553:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_phi);
2554:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_theta);
2555:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_psi);
2556:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_phi);
2557:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_theta);
2558:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_psi);
2559:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sum_err_phi);
2560:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sum_err_theta);
2561:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sum_err_psi);
2562:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_a_fb);
2563:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_e_fb);
2564:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_r_fb);
2565:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_a_ff);
2566:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_e_ff);
2567:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_r_ff);
2568:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_a);
2569:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_e);
2570:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_r);
2571:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2572:/home/dino/paparazzi/var/include/messages.h **** 	} else
2573:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2574:/home/dino/paparazzi/var/include/messages.h **** }
2575:/home/dino/paparazzi/var/include/messages.h **** 
2576:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_STAB_ATTITUDE_REF_INT(_trans, _dev, sp_phi, sp_theta, sp_psi, ref_phi, ref_th
2577:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_STAB_ATTITUDE_REF_INT(struct transport_tx *trans, struct link_devi
2578:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2579:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4 +2 /*
2580:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
2581:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2582:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_STAB_ATTITUDE_REF_IN
2583:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_phi);
2584:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_theta);
2585:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_psi);
2586:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_phi);
2587:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_theta);
2588:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_psi);
2589:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_p);
2590:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_q);
2591:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_r);
2592:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_pd);
2593:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_qd);
2594:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_rd);
2595:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2596:/home/dino/paparazzi/var/include/messages.h **** 	} else
2597:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2598:/home/dino/paparazzi/var/include/messages.h **** }
2599:/home/dino/paparazzi/var/include/messages.h **** 
2600:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_STAB_ATTITUDE_REF_FLOAT(_trans, _dev, sp_phi, sp_theta, sp_psi, ref_phi, ref_
2601:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_STAB_ATTITUDE_REF_FLOAT(struct transport_tx *trans, struct link_de
2602:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2603:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4 +2 /*
2604:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
2605:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2606:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_STAB_ATTITUDE_REF_FL
2607:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _sp_phi);
2608:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _sp_theta);
2609:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _sp_psi);
2610:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_phi);
2611:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_theta);
2612:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_psi);
2613:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_p);
2614:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_q);
2615:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_r);
2616:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_pd);
2617:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_qd);
2618:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ref_rd);
2619:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2620:/home/dino/paparazzi/var/include/messages.h **** 	} else
2621:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2622:/home/dino/paparazzi/var/include/messages.h **** }
2623:/home/dino/paparazzi/var/include/messages.h **** 
2624:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ROTORCRAFT_CMD(_trans, _dev, cmd_roll, cmd_pitch, cmd_yaw, cmd_thrust) pprz_m
2625:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ROTORCRAFT_CMD(struct transport_tx *trans, struct link_device *dev
2626:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
2627:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
2628:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
2629:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2630:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ROTORCRAFT_CMD, "ROT
2631:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_roll);
2632:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_pitch);
2633:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_yaw);
2634:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_thrust);
2635:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2636:/home/dino/paparazzi/var/include/messages.h **** 	} else
2637:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2638:/home/dino/paparazzi/var/include/messages.h **** }
2639:/home/dino/paparazzi/var/include/messages.h **** 
2640:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GUIDANCE_H_INT(_trans, _dev, sp_x, sp_y, ref_x, ref_y, est_x, est_y) pprz_msg
2641:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GUIDANCE_H_INT(struct transport_tx *trans, struct link_device *dev
2642:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /*
2643:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /* msg header 
2644:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4 +2 /* msg header overhead */);
2645:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2646:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GUIDANCE_H_INT, "GUI
2647:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_x);
2648:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_y);
2649:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_x);
2650:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_y);
2651:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_x);
2652:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_y);
2653:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2654:/home/dino/paparazzi/var/include/messages.h **** 	} else
2655:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2656:/home/dino/paparazzi/var/include/messages.h **** }
2657:/home/dino/paparazzi/var/include/messages.h **** 
2658:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_VERT_LOOP(_trans, _dev, z_sp, zd_sp, est_z, est_zd, est_zdd, ref_z, ref_zd, r
2659:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_VERT_LOOP(struct transport_tx *trans, struct link_device *dev, uin
2660:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2661:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
2662:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead
2663:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2664:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_VERT_LOOP, "VERT_LOO
2665:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _z_sp);
2666:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _zd_sp);
2667:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_z);
2668:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_zd);
2669:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_zdd);
2670:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_z);
2671:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_zd);
2672:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_zdd);
2673:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _adp_inv_m);
2674:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _adp_cov);
2675:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _adp_meas);
2676:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sum_err);
2677:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ff_cmd);
2678:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _fb_cmd);
2679:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _delta_t);
2680:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2681:/home/dino/paparazzi/var/include/messages.h **** 	} else
2682:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2683:/home/dino/paparazzi/var/include/messages.h **** }
2684:/home/dino/paparazzi/var/include/messages.h **** 
2685:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_HOVER_LOOP(_trans, _dev, sp_x, sp_y, est_x, est_y, est_xd, est_yd, est_xdd, e
2686:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_HOVER_LOOP(struct transport_tx *trans, struct link_device *dev, ui
2687:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2688:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
2689:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header over
2690:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2691:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HOVER_LOOP, "HOVER_L
2692:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_x);
2693:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_y);
2694:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_x);
2695:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_y);
2696:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_xd);
2697:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_yd);
2698:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_xdd);
2699:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _est_ydd);
2700:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _err_x);
2701:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _err_y);
2702:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _err_xd);
2703:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _err_yd);
2704:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _err_sum_x);
2705:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _err_sum_y);
2706:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_x);
2707:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_y);
2708:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_heading);
2709:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2710:/home/dino/paparazzi/var/include/messages.h **** 	} else
2711:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2712:/home/dino/paparazzi/var/include/messages.h **** }
2713:/home/dino/paparazzi/var/include/messages.h **** 
2714:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ROTORCRAFT_FP(_trans, _dev, east, north, up, veast, vnorth, vup, phi, theta, 
2715:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ROTORCRAFT_FP(struct transport_tx *trans, struct link_device *dev,
2716:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2717:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+2
2718:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+2 +2 /* msg header overhead
2719:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2720:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ROTORCRAFT_FP, "ROTO
2721:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _east);
2722:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _north);
2723:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _up);
2724:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _veast);
2725:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _vnorth);
2726:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _vup);
2727:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _phi);
2728:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _theta);
2729:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _psi);
2730:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _carrot_east);
2731:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _carrot_north);
2732:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _carrot_up);
2733:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _carrot_psi);
2734:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _thrust);
2735:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flight_time);
2736:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2737:/home/dino/paparazzi/var/include/messages.h **** 	} else
2738:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2739:/home/dino/paparazzi/var/include/messages.h **** }
2740:/home/dino/paparazzi/var/include/messages.h **** 
2741:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TEMP_ADC(_trans, _dev, temp1, temp2, temp3) pprz_msg_send_TEMP_ADC(&((_trans)
2742:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TEMP_ADC(struct transport_tx *trans, struct link_device *dev, uint
2743:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
2744:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
2745:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
2746:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2747:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TEMP_ADC, "TEMP_ADC"
2748:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp1);
2749:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp2);
2750:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp3);
2751:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2752:/home/dino/paparazzi/var/include/messages.h **** 	} else
2753:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2754:/home/dino/paparazzi/var/include/messages.h **** }
2755:/home/dino/paparazzi/var/include/messages.h **** 
2756:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GUIDANCE_H_REF_INT(_trans, _dev, sp_x, ref_x, sp_xd, ref_xd, ref_xdd, sp_y, r
2757:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GUIDANCE_H_REF_INT(struct transport_tx *trans, struct link_device 
2758:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2759:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4 +2 /* msg
2760:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
2761:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2762:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GUIDANCE_H_REF_INT, 
2763:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_x);
2764:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_x);
2765:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_xd);
2766:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_xd);
2767:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_xdd);
2768:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_y);
2769:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_y);
2770:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _sp_yd);
2771:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_yd);
2772:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_ydd);
2773:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2774:/home/dino/paparazzi/var/include/messages.h **** 	} else
2775:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2776:/home/dino/paparazzi/var/include/messages.h **** }
2777:/home/dino/paparazzi/var/include/messages.h **** 
2778:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ROTORCRAFT_TUNE_HOVER(_trans, _dev, rc_roll, rc_pitch, rc_yaw, cmd_roll, cmd_
2779:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ROTORCRAFT_TUNE_HOVER(struct transport_tx *trans, struct link_devi
2780:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+4+4+4+4+4+4
2781:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+4+4+4+4+4+4+4 +2 /* msg
2782:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+4+4+4+4+4+4+4 +2 /* msg header overhead */);
2783:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2784:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ROTORCRAFT_TUNE_HOVE
2785:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _rc_roll);
2786:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _rc_pitch);
2787:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _rc_yaw);
2788:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_roll);
2789:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_pitch);
2790:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_yaw);
2791:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _cmd_thrust);
2792:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_phi);
2793:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_theta);
2794:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_psi);
2795:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2796:/home/dino/paparazzi/var/include/messages.h **** 	} else
2797:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2798:/home/dino/paparazzi/var/include/messages.h **** }
2799:/home/dino/paparazzi/var/include/messages.h **** 
2800:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_INS_Z(_trans, _dev, baro_z, ins_z, ins_zd, ins_zdd) pprz_msg_send_INS_Z(&((_t
2801:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_INS_Z(struct transport_tx *trans, struct link_device *dev, uint8_t
2802:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
2803:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
2804:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
2805:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2806:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_INS_Z, "INS_Z");
2807:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _baro_z);
2808:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_z);
2809:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_zd);
2810:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_zdd);
2811:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2812:/home/dino/paparazzi/var/include/messages.h **** 	} else
2813:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2814:/home/dino/paparazzi/var/include/messages.h **** }
2815:/home/dino/paparazzi/var/include/messages.h **** 
2816:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PCAP01_STATUS(_trans, _dev, ihumid, itemp, humid, temp) pprz_msg_send_PCAP01_
2817:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PCAP01_STATUS(struct transport_tx *trans, struct link_device *dev,
2818:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
2819:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
2820:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
2821:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2822:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PCAP01_STATUS, "PCAP
2823:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _ihumid);
2824:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _itemp);
2825:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _humid);
2826:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _temp);
2827:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2828:/home/dino/paparazzi/var/include/messages.h **** 	} else
2829:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2830:/home/dino/paparazzi/var/include/messages.h **** }
2831:/home/dino/paparazzi/var/include/messages.h **** 
2832:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GEIGER_COUNTER(_trans, _dev, tube1, tube2, vsupply) pprz_msg_send_GEIGER_COUN
2833:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GEIGER_COUNTER(struct transport_tx *trans, struct link_device *dev
2834:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2 +2 /* msg h
2835:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2 +2 /* msg header overhe
2836:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+2 +2 /* msg header overhead */);
2837:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2838:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GEIGER_COUNTER, "GEI
2839:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _tube1);
2840:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _tube2);
2841:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _vsupply);
2842:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2843:/home/dino/paparazzi/var/include/messages.h **** 	} else
2844:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2845:/home/dino/paparazzi/var/include/messages.h **** }
2846:/home/dino/paparazzi/var/include/messages.h **** 
2847:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_INS_REF(_trans, _dev, ecef_x0, ecef_y0, ecef_z0, lat0, lon0, alt0, hmsl0, bar
2848:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_INS_REF(struct transport_tx *trans, struct link_device *dev, uint8
2849:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +
2850:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
2851:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
2852:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2853:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_INS_REF, "INS_REF");
2854:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ecef_x0);
2855:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ecef_y0);
2856:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ecef_z0);
2857:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lat0);
2858:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lon0);
2859:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt0);
2860:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _hmsl0);
2861:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _baro_qfe);
2862:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2863:/home/dino/paparazzi/var/include/messages.h **** 	} else
2864:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2865:/home/dino/paparazzi/var/include/messages.h **** }
2866:/home/dino/paparazzi/var/include/messages.h **** 
2867:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS_INT(_trans, _dev, ecef_x, ecef_y, ecef_z, lat, lon, alt, hmsl, ecef_xd, e
2868:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS_INT(struct transport_tx *trans, struct link_device *dev, uint8
2869:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2870:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+2+1
2871:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+2+1+1 +2 /* msg header overhe
2872:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2873:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS_INT, "GPS_INT");
2874:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ecef_x);
2875:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ecef_y);
2876:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ecef_z);
2877:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lat);
2878:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _lon);
2879:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
2880:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _hmsl);
2881:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ecef_xd);
2882:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ecef_yd);
2883:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ecef_zd);
2884:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _pacc);
2885:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _sacc);
2886:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _tow);
2887:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _pdop);
2888:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _numsv);
2889:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _fix);
2890:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2891:/home/dino/paparazzi/var/include/messages.h **** 	} else
2892:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2893:/home/dino/paparazzi/var/include/messages.h **** }
2894:/home/dino/paparazzi/var/include/messages.h **** 
2895:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_EULER_INT(_trans, _dev, imu_phi, imu_theta, imu_psi, body_phi, body_thet
2896:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_EULER_INT(struct transport_tx *trans, struct link_device *dev
2897:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /*
2898:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /* msg header 
2899:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4 +2 /* msg header overhead */);
2900:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2901:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_EULER_INT, "AHR
2902:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_phi);
2903:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_theta);
2904:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_psi);
2905:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_phi);
2906:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_theta);
2907:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_psi);
2908:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2909:/home/dino/paparazzi/var/include/messages.h **** 	} else
2910:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2911:/home/dino/paparazzi/var/include/messages.h **** }
2912:/home/dino/paparazzi/var/include/messages.h **** 
2913:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_QUAT_INT(_trans, _dev, weight, imu_qi, imu_qx, imu_qy, imu_qz, body_qi, 
2914:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_QUAT_INT(struct transport_tx *trans, struct link_device *dev,
2915:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2916:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4 +2 /* msg h
2917:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
2918:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2919:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_QUAT_INT, "AHRS
2920:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _weight);
2921:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_qi);
2922:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_qx);
2923:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_qy);
2924:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_qz);
2925:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_qi);
2926:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_qx);
2927:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_qy);
2928:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_qz);
2929:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2930:/home/dino/paparazzi/var/include/messages.h **** 	} else
2931:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2932:/home/dino/paparazzi/var/include/messages.h **** }
2933:/home/dino/paparazzi/var/include/messages.h **** 
2934:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_RMAT_INT(_trans, _dev, imu_m00, imu_m01, imu_m02, imu_m10, imu_m11, imu_
2935:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_RMAT_INT(struct transport_tx *trans, struct link_device *dev,
2936:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
2937:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
2938:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header ov
2939:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2940:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_RMAT_INT, "AHRS
2941:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_m00);
2942:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_m01);
2943:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_m02);
2944:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_m10);
2945:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_m11);
2946:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_m12);
2947:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_m20);
2948:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_m21);
2949:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _imu_m22);
2950:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_m00);
2951:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_m01);
2952:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_m02);
2953:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_m10);
2954:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_m11);
2955:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_m12);
2956:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_m20);
2957:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_m21);
2958:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_m22);
2959:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2960:/home/dino/paparazzi/var/include/messages.h **** 	} else
2961:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2962:/home/dino/paparazzi/var/include/messages.h **** }
2963:/home/dino/paparazzi/var/include/messages.h **** 
2964:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ROTORCRAFT_NAV_STATUS(_trans, _dev, block_time, stage_time, dist_home, dist_w
2965:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ROTORCRAFT_NAV_STATUS(struct transport_tx *trans, struct link_devi
2966:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4+1+1+1 +2 
2967:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+4+4+1+1+1 +2 /* msg heade
2968:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+4+4+1+1+1 +2 /* msg header overhead */);
2969:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2970:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ROTORCRAFT_NAV_STATU
2971:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _block_time);
2972:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _stage_time);
2973:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_home);
2974:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_wp);
2975:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_block);
2976:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_stage);
2977:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _horizontal_mode
2978:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2979:/home/dino/paparazzi/var/include/messages.h **** 	} else
2980:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
2981:/home/dino/paparazzi/var/include/messages.h **** }
2982:/home/dino/paparazzi/var/include/messages.h **** 
2983:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ROTORCRAFT_RADIO_CONTROL(_trans, _dev, roll, pitch, yaw, throttle, mode, kill
2984:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ROTORCRAFT_RADIO_CONTROL(struct transport_tx *trans, struct link_d
2985:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+1 +2 
2986:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+1 +2 /* msg heade
2987:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+1 +2 /* msg header overhead */);
2988:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
2989:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ROTORCRAFT_RADIO_CON
2990:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _roll);
2991:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _pitch);
2992:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _yaw);
2993:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _throttle);
2994:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mode);
2995:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _kill);
2996:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _status);
2997:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
2998:/home/dino/paparazzi/var/include/messages.h **** 	} else
2999:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3000:/home/dino/paparazzi/var/include/messages.h **** }
3001:/home/dino/paparazzi/var/include/messages.h **** 
3002:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_VFF_EXTENDED(_trans, _dev, meas_baro, meas_alt, z, zd, zdd, bias, offset) ppr
3003:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_VFF_EXTENDED(struct transport_tx *trans, struct link_device *dev, 
3004:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 
3005:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 /* msg heade
3006:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3007:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3008:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_VFF_EXTENDED, "VFF_E
3009:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _meas_baro);
3010:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _meas_alt);
3011:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z);
3012:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _zd);
3013:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _zdd);
3014:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bias);
3015:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _offset);
3016:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3017:/home/dino/paparazzi/var/include/messages.h **** 	} else
3018:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3019:/home/dino/paparazzi/var/include/messages.h **** }
3020:/home/dino/paparazzi/var/include/messages.h **** 
3021:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_VFF(_trans, _dev, measure, z, zd, bias, Pzz, Pzdzd, Pbb) pprz_msg_send_VFF(&(
3022:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_VFF(struct transport_tx *trans, struct link_device *dev, uint8_t a
3023:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 
3024:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 /* msg heade
3025:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3026:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3027:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_VFF, "VFF");
3028:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _measure);
3029:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z);
3030:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _zd);
3031:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bias);
3032:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Pzz);
3033:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Pzdzd);
3034:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Pbb);
3035:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3036:/home/dino/paparazzi/var/include/messages.h **** 	} else
3037:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3038:/home/dino/paparazzi/var/include/messages.h **** }
3039:/home/dino/paparazzi/var/include/messages.h **** 
3040:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GEO_MAG(_trans, _dev, Hx, Hy, Hz) pprz_msg_send_GEO_MAG(&((_trans).trans_tx),
3041:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GEO_MAG(struct transport_tx *trans, struct link_device *dev, uint8
3042:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3043:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3044:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3045:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3046:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GEO_MAG, "GEO_MAG");
3047:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Hx);
3048:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Hy);
3049:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Hz);
3050:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3051:/home/dino/paparazzi/var/include/messages.h **** 	} else
3052:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3053:/home/dino/paparazzi/var/include/messages.h **** }
3054:/home/dino/paparazzi/var/include/messages.h **** 
3055:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_HFF(_trans, _dev, x, y, xd, yd, xdd, ydd) pprz_msg_send_HFF(&((_trans).trans_
3056:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_HFF(struct transport_tx *trans, struct link_device *dev, uint8_t a
3057:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /*
3058:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /* msg header 
3059:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4 +2 /* msg header overhead */);
3060:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3061:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HFF, "HFF");
3062:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _x);
3063:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _y);
3064:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _xd);
3065:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _yd);
3066:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _xdd);
3067:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ydd);
3068:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3069:/home/dino/paparazzi/var/include/messages.h **** 	} else
3070:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3071:/home/dino/paparazzi/var/include/messages.h **** }
3072:/home/dino/paparazzi/var/include/messages.h **** 
3073:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_HFF_DBG(_trans, _dev, x_measure, y_measure, xd_measure, yd_measure, Pxx, Pyy,
3074:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_HFF_DBG(struct transport_tx *trans, struct link_device *dev, uint8
3075:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +
3076:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
3077:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3078:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3079:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HFF_DBG, "HFF_DBG");
3080:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _x_measure);
3081:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _y_measure);
3082:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _xd_measure);
3083:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _yd_measure);
3084:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Pxx);
3085:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Pyy);
3086:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Pxdxd);
3087:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _Pydyd);
3088:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3089:/home/dino/paparazzi/var/include/messages.h **** 	} else
3090:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3091:/home/dino/paparazzi/var/include/messages.h **** }
3092:/home/dino/paparazzi/var/include/messages.h **** 
3093:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_HFF_GPS(_trans, _dev, lag_cnt, lag_cnt_err, save_cnt) pprz_msg_send_HFF_GPS(&
3094:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_HFF_GPS(struct transport_tx *trans, struct link_device *dev, uint8
3095:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2 +2 /* msg h
3096:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2 +2 /* msg header overhe
3097:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2 +2 /* msg header overhead */);
3098:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3099:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HFF_GPS, "HFF_GPS");
3100:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _lag_cnt);
3101:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _lag_cnt_err);
3102:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _save_cnt);
3103:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3104:/home/dino/paparazzi/var/include/messages.h **** 	} else
3105:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3106:/home/dino/paparazzi/var/include/messages.h **** }
3107:/home/dino/paparazzi/var/include/messages.h **** 
3108:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_INS_SONAR(_trans, _dev, distance, var) pprz_msg_send_INS_SONAR(&((_trans).tra
3109:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_INS_SONAR(struct transport_tx *trans, struct link_device *dev, uin
3110:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
3111:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
3112:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
3113:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3114:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_INS_SONAR, "INS_SONA
3115:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _distance);
3116:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _var);
3117:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3118:/home/dino/paparazzi/var/include/messages.h **** 	} else
3119:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3120:/home/dino/paparazzi/var/include/messages.h **** }
3121:/home/dino/paparazzi/var/include/messages.h **** 
3122:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ROTORCRAFT_CAM(_trans, _dev, tilt, pan) pprz_msg_send_ROTORCRAFT_CAM(&((_tran
3123:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ROTORCRAFT_CAM(struct transport_tx *trans, struct link_device *dev
3124:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2 +2 /* msg hea
3125:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2 +2 /* msg header overhead
3126:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2 +2 /* msg header overhead */);
3127:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3128:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ROTORCRAFT_CAM, "ROT
3129:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _tilt);
3130:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _pan);
3131:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3132:/home/dino/paparazzi/var/include/messages.h **** 	} else
3133:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3134:/home/dino/paparazzi/var/include/messages.h **** }
3135:/home/dino/paparazzi/var/include/messages.h **** 
3136:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_REF_QUAT(_trans, _dev, ref_qi, ref_qx, ref_qy, ref_qz, body_qi, body_qx,
3137:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_REF_QUAT(struct transport_tx *trans, struct link_device *dev,
3138:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +
3139:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
3140:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3141:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3142:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_REF_QUAT, "AHRS
3143:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_qi);
3144:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_qx);
3145:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_qy);
3146:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ref_qz);
3147:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_qi);
3148:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_qx);
3149:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_qy);
3150:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _body_qz);
3151:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3152:/home/dino/paparazzi/var/include/messages.h **** 	} else
3153:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3154:/home/dino/paparazzi/var/include/messages.h **** }
3155:/home/dino/paparazzi/var/include/messages.h **** 
3156:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_EKF7_XHAT(_trans, _dev, c, s1, s2, s3, p, q, r, bp, bq, br) pprz_msg_send_EKF
3157:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_EKF7_XHAT(struct transport_tx *trans, struct link_device *dev, uin
3158:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
3159:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4 +2 /* msg
3160:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3161:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3162:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_EKF7_XHAT, "EKF7_XHA
3163:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _c);
3164:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _s1);
3165:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _s2);
3166:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _s3);
3167:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p);
3168:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _q);
3169:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _r);
3170:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bp);
3171:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bq);
3172:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _br);
3173:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3174:/home/dino/paparazzi/var/include/messages.h **** 	} else
3175:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3176:/home/dino/paparazzi/var/include/messages.h **** }
3177:/home/dino/paparazzi/var/include/messages.h **** 
3178:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_EKF7_Y(_trans, _dev, timecount, g1, g2, g3, m1, m2, m3, p, q, r) pprz_msg_sen
3179:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_EKF7_Y(struct transport_tx *trans, struct link_device *dev, uint8_
3180:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+4+4+4
3181:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+4+4+4+4 +2 /* msg
3182:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3183:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3184:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_EKF7_Y, "EKF7_Y");
3185:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _timecount);
3186:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _g1);
3187:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _g2);
3188:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _g3);
3189:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _m1);
3190:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _m2);
3191:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _m3);
3192:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p);
3193:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _q);
3194:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _r);
3195:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3196:/home/dino/paparazzi/var/include/messages.h **** 	} else
3197:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3198:/home/dino/paparazzi/var/include/messages.h **** }
3199:/home/dino/paparazzi/var/include/messages.h **** 
3200:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_EKF7_P_DIAG(_trans, _dev, c, s1, s2, s3, p, q, r, bp, bq, br) pprz_msg_send_E
3201:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_EKF7_P_DIAG(struct transport_tx *trans, struct link_device *dev, u
3202:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
3203:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4 +2 /* msg
3204:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3205:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3206:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_EKF7_P_DIAG, "EKF7_P
3207:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _c);
3208:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _s1);
3209:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _s2);
3210:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _s3);
3211:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p);
3212:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _q);
3213:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _r);
3214:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bp);
3215:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bq);
3216:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _br);
3217:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3218:/home/dino/paparazzi/var/include/messages.h **** 	} else
3219:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3220:/home/dino/paparazzi/var/include/messages.h **** }
3221:/home/dino/paparazzi/var/include/messages.h **** 
3222:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_EULER(_trans, _dev, phi, theta, psi) pprz_msg_send_AHRS_EULER(&((_trans)
3223:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_EULER(struct transport_tx *trans, struct link_device *dev, ui
3224:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3225:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3226:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3227:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3228:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_EULER, "AHRS_EU
3229:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
3230:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
3231:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
3232:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3233:/home/dino/paparazzi/var/include/messages.h **** 	} else
3234:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3235:/home/dino/paparazzi/var/include/messages.h **** }
3236:/home/dino/paparazzi/var/include/messages.h **** 
3237:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_MEASUREMENT_EULER(_trans, _dev, phi, theta, psi) pprz_msg_send_AHRS_MEAS
3238:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_MEASUREMENT_EULER(struct transport_tx *trans, struct link_dev
3239:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3240:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3241:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3242:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3243:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_MEASUREMENT_EUL
3244:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
3245:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
3246:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
3247:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3248:/home/dino/paparazzi/var/include/messages.h **** 	} else
3249:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3250:/home/dino/paparazzi/var/include/messages.h **** }
3251:/home/dino/paparazzi/var/include/messages.h **** 
3252:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WT(_trans, _dev, rpm) pprz_msg_send_WT(&((_trans).trans_tx), &((_dev).device)
3253:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WT(struct transport_tx *trans, struct link_device *dev, uint8_t ac
3254:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4 +2 /* msg heade
3255:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4 +2 /* msg header overhead *
3256:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4 +2 /* msg header overhead */);
3257:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3258:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WT, "WT");
3259:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _rpm);
3260:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3261:/home/dino/paparazzi/var/include/messages.h **** 	} else
3262:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3263:/home/dino/paparazzi/var/include/messages.h **** }
3264:/home/dino/paparazzi/var/include/messages.h **** 
3265:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CSC_CAN_DEBUG(_trans, _dev, err_nb, err_code) pprz_msg_send_CSC_CAN_DEBUG(&((
3266:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CSC_CAN_DEBUG(struct transport_tx *trans, struct link_device *dev,
3267:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
3268:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
3269:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
3270:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3271:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CSC_CAN_DEBUG, "CSC_
3272:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _err_nb);
3273:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _err_code);
3274:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3275:/home/dino/paparazzi/var/include/messages.h **** 	} else
3276:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3277:/home/dino/paparazzi/var/include/messages.h **** }
3278:/home/dino/paparazzi/var/include/messages.h **** 
3279:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CSC_CAN_MSG(_trans, _dev, frame, id, data_a, data_b) pprz_msg_send_CSC_CAN_MS
3280:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CSC_CAN_MSG(struct transport_tx *trans, struct link_device *dev, u
3281:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
3282:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
3283:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
3284:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3285:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CSC_CAN_MSG, "CSC_CA
3286:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _frame);
3287:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _id);
3288:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _data_a);
3289:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _data_b);
3290:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3291:/home/dino/paparazzi/var/include/messages.h **** 	} else
3292:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3293:/home/dino/paparazzi/var/include/messages.h **** }
3294:/home/dino/paparazzi/var/include/messages.h **** 
3295:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_GYRO_BIAS_INT(_trans, _dev, bp, bq, br) pprz_msg_send_AHRS_GYRO_BIAS_INT
3296:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_GYRO_BIAS_INT(struct transport_tx *trans, struct link_device 
3297:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3298:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3299:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3300:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3301:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_GYRO_BIAS_INT, 
3302:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _bp);
3303:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _bq);
3304:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _br);
3305:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3306:/home/dino/paparazzi/var/include/messages.h **** 	} else
3307:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3308:/home/dino/paparazzi/var/include/messages.h **** }
3309:/home/dino/paparazzi/var/include/messages.h **** 
3310:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FLOW_AP_OTF(_trans, _dev, counter, velocity, a_attack, a_sidesl, altitude, ch
3311:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FLOW_AP_OTF(struct transport_tx *trans, struct link_device *dev, u
3312:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+2+2+4+1 +2 /*
3313:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+2+2+2+4+1 +2 /* msg header 
3314:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+2+2+2+4+1 +2 /* msg header overhead */);
3315:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3316:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FLOW_AP_OTF, "FLOW_A
3317:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _counter);
3318:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _velocity);
3319:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _a_attack);
3320:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _a_sidesl);
3321:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _altitude);
3322:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _checksum);
3323:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3324:/home/dino/paparazzi/var/include/messages.h **** 	} else
3325:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3326:/home/dino/paparazzi/var/include/messages.h **** }
3327:/home/dino/paparazzi/var/include/messages.h **** 
3328:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FMS_TIME(_trans, _dev, tv_sec, tv_nsec, delay_ns) pprz_msg_send_FMS_TIME(&((_
3329:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FMS_TIME(struct transport_tx *trans, struct link_device *dev, uint
3330:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3331:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3332:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3333:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3334:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FMS_TIME, "FMS_TIME"
3335:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _tv_sec);
3336:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _tv_nsec);
3337:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _delay_ns);
3338:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3339:/home/dino/paparazzi/var/include/messages.h **** 	} else
3340:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3341:/home/dino/paparazzi/var/include/messages.h **** }
3342:/home/dino/paparazzi/var/include/messages.h **** 
3343:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_LOADCELL(_trans, _dev, load) pprz_msg_send_LOADCELL(&((_trans).trans_tx), &((
3344:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_LOADCELL(struct transport_tx *trans, struct link_device *dev, uint
3345:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4 +2 /* msg heade
3346:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4 +2 /* msg header overhead *
3347:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4 +2 /* msg header overhead */);
3348:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3349:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_LOADCELL, "LOADCELL"
3350:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _load);
3351:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3352:/home/dino/paparazzi/var/include/messages.h **** 	} else
3353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3354:/home/dino/paparazzi/var/include/messages.h **** }
3355:/home/dino/paparazzi/var/include/messages.h **** 
3356:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_FLA_DEBUG(_trans, _dev, past_input, imu_rate, desired_accel, motor_command) p
3357:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_FLA_DEBUG(struct transport_tx *trans, struct link_device *dev, uin
3358:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
3359:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
3360:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
3361:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3362:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_FLA_DEBUG, "FLA_DEBU
3363:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _past_input);
3364:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _imu_rate);
3365:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _desired_accel);
3366:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _motor_command);
3367:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3368:/home/dino/paparazzi/var/include/messages.h **** 	} else
3369:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3370:/home/dino/paparazzi/var/include/messages.h **** }
3371:/home/dino/paparazzi/var/include/messages.h **** 
3372:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BLMC_FAULT_STATUS(_trans, _dev, nb_raw_fault, raw_fault) pprz_msg_send_BLMC_F
3373:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BLMC_FAULT_STATUS(struct transport_tx *trans, struct link_device *
3374:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_raw_fault*2 
3375:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_raw_fault*2 +2 /* msg he
3376:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_raw_fault*2 +2 /* msg header overhead */);
3377:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3378:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BLMC_FAULT_STATUS, "
3379:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_raw_f
3380:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_ARRAY, 2 * nb_raw_fault, (void *) _
3381:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3382:/home/dino/paparazzi/var/include/messages.h **** 	} else
3383:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3384:/home/dino/paparazzi/var/include/messages.h **** }
3385:/home/dino/paparazzi/var/include/messages.h **** 
3386:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BLMC_SPEEDS(_trans, _dev, nb_speeds, speeds) pprz_msg_send_BLMC_SPEEDS(&((_tr
3387:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BLMC_SPEEDS(struct transport_tx *trans, struct link_device *dev, u
3388:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_speeds*2 +2 
3389:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_speeds*2 +2 /* msg heade
3390:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_speeds*2 +2 /* msg header overhead */);
3391:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3392:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BLMC_SPEEDS, "BLMC_S
3393:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_speed
3394:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_ARRAY, 2 * nb_speeds, (void *) _spee
3395:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3396:/home/dino/paparazzi/var/include/messages.h **** 	} else
3397:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3398:/home/dino/paparazzi/var/include/messages.h **** }
3399:/home/dino/paparazzi/var/include/messages.h **** 
3400:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_DEBUG_QUAT(_trans, _dev, jqi, jqx, jqy, jqz, xqi, xqx, xqy, xqz, mqi, mq
3401:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_DEBUG_QUAT(struct transport_tx *trans, struct link_device *de
3402:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
3403:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4 +2 /*
3404:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3405:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3406:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_DEBUG_QUAT, "AH
3407:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _jqi);
3408:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _jqx);
3409:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _jqy);
3410:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _jqz);
3411:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _xqi);
3412:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _xqx);
3413:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _xqy);
3414:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _xqz);
3415:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mqi);
3416:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mqx);
3417:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mqy);
3418:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mqz);
3419:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3420:/home/dino/paparazzi/var/include/messages.h **** 	} else
3421:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3422:/home/dino/paparazzi/var/include/messages.h **** }
3423:/home/dino/paparazzi/var/include/messages.h **** 
3424:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BLMC_BUSVOLTS(_trans, _dev, nb_busvolts, busvolts) pprz_msg_send_BLMC_BUSVOLT
3425:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BLMC_BUSVOLTS(struct transport_tx *trans, struct link_device *dev,
3426:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_busvolts*2 +
3427:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_busvolts*2 +2 /* msg hea
3428:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_busvolts*2 +2 /* msg header overhead */);
3429:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3430:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BLMC_BUSVOLTS, "BLMC
3431:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_busvo
3432:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_ARRAY, 2 * nb_busvolts, (void *) _b
3433:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3434:/home/dino/paparazzi/var/include/messages.h **** 	} else
3435:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3436:/home/dino/paparazzi/var/include/messages.h **** }
3437:/home/dino/paparazzi/var/include/messages.h **** 
3438:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SYSTEM_STATUS(_trans, _dev, csc1_loop_count, csc1_msg_count, csc2_loop_count,
3439:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SYSTEM_STATUS(struct transport_tx *trans, struct link_device *dev,
3440:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+1 +
3441:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+1 +2 /* msg hea
3442:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+1 +2 /* msg header overhead */);
3443:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3444:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SYSTEM_STATUS, "SYST
3445:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _csc1_loop_coun
3446:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _csc1_msg_count
3447:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _csc2_loop_coun
3448:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _csc2_msg_count
3449:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _can_rx_err);
3450:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _can_tx_err);
3451:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _rc_parser_err)
3452:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _system_fault);
3453:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3454:/home/dino/paparazzi/var/include/messages.h **** 	} else
3455:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3456:/home/dino/paparazzi/var/include/messages.h **** }
3457:/home/dino/paparazzi/var/include/messages.h **** 
3458:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DYNAMIXEL(_trans, _dev, left_wing, right_wing, left_wing_flag, right_wing_fla
3459:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DYNAMIXEL(struct transport_tx *trans, struct link_device *dev, uin
3460:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+1+1+4+4+4+4+4
3461:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+1+1+4+4+4+4+4 +2 /* msg h
3462:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+1+1+4+4+4+4+4 +2 /* msg header overhead */);
3463:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3464:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DYNAMIXEL, "DYNAMIXE
3465:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _left_wing);
3466:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _right_wing);
3467:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _left_wing_flag)
3468:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _right_wing_flag
3469:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _invalid_positi
3470:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _timeout_events
3471:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _checksum_error
3472:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fuse_rotation_a
3473:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _fuse_rotation_r
3474:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3475:/home/dino/paparazzi/var/include/messages.h **** 	} else
3476:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3477:/home/dino/paparazzi/var/include/messages.h **** }
3478:/home/dino/paparazzi/var/include/messages.h **** 
3479:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_RMAT_DEBUG(_trans, _dev, a, b, c, d, e, f, g, h, i) pprz_msg_send_RMAT_DEBUG(
3480:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_RMAT_DEBUG(struct transport_tx *trans, struct link_device *dev, ui
3481:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
3482:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4 +2 /* msg h
3483:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3484:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3485:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_RMAT_DEBUG, "RMAT_DE
3486:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _a);
3487:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _b);
3488:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _c);
3489:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _d);
3490:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _e);
3491:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _f);
3492:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _g);
3493:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _h);
3494:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _i);
3495:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3496:/home/dino/paparazzi/var/include/messages.h **** 	} else
3497:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3498:/home/dino/paparazzi/var/include/messages.h **** }
3499:/home/dino/paparazzi/var/include/messages.h **** 
3500:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SIMPLE_COMMANDS(_trans, _dev, roll, pitch, yaw) pprz_msg_send_SIMPLE_COMMANDS
3501:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SIMPLE_COMMANDS(struct transport_tx *trans, struct link_device *de
3502:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2 +2 /* msg h
3503:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2 +2 /* msg header overhe
3504:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2 +2 /* msg header overhead */);
3505:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3506:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SIMPLE_COMMANDS, "SI
3507:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _roll);
3508:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _pitch);
3509:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _yaw);
3510:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3511:/home/dino/paparazzi/var/include/messages.h **** 	} else
3512:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3513:/home/dino/paparazzi/var/include/messages.h **** }
3514:/home/dino/paparazzi/var/include/messages.h **** 
3515:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_VANE_SENSOR(_trans, _dev, alpha, alpha_filtered, alpha_target, alpha_vane_err
3516:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_VANE_SENSOR(struct transport_tx *trans, struct link_device *dev, u
3517:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
3518:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4 +2 /* msg
3519:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3520:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3521:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_VANE_SENSOR, "VANE_S
3522:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alpha);
3523:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alpha_filtered)
3524:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alpha_target);
3525:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alpha_vane_erro
3526:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alpha2);
3527:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _beta);
3528:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _beta_filtered);
3529:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _beta_target);
3530:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _beta_vane_error
3531:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _beta2);
3532:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3533:/home/dino/paparazzi/var/include/messages.h **** 	} else
3534:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3535:/home/dino/paparazzi/var/include/messages.h **** }
3536:/home/dino/paparazzi/var/include/messages.h **** 
3537:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CONTROLLER_GAINS(_trans, _dev, roll_gamma_p, roll_gamma_d, roll_gamma_i, pitc
3538:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CONTROLLER_GAINS(struct transport_tx *trans, struct link_device *d
3539:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
3540:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4 +2 /* msg h
3541:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3542:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3543:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CONTROLLER_GAINS, "C
3544:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll_gamma_p);
3545:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll_gamma_d);
3546:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll_gamma_i);
3547:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch_gamma_p);
3548:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch_gamma_d);
3549:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch_gamma_i);
3550:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _yaw_gamma_p);
3551:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _yaw_gamma_d);
3552:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _yaw_gamma_i);
3553:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3554:/home/dino/paparazzi/var/include/messages.h **** 	} else
3555:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3556:/home/dino/paparazzi/var/include/messages.h **** }
3557:/home/dino/paparazzi/var/include/messages.h **** 
3558:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_LKF(_trans, _dev, phi, theta, psi, qi, qx, qy, qz, p, q, r, ax, ay, az, 
3559:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_LKF(struct transport_tx *trans, struct link_device *dev, uint
3560:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
3561:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
3562:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhe
3563:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3564:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_LKF, "AHRS_LKF"
3565:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
3566:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
3567:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
3568:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qi);
3569:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qx);
3570:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qy);
3571:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qz);
3572:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _p);
3573:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _q);
3574:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _r);
3575:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ax);
3576:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ay);
3577:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _az);
3578:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mx);
3579:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _my);
3580:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mz);
3581:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3582:/home/dino/paparazzi/var/include/messages.h **** 	} else
3583:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3584:/home/dino/paparazzi/var/include/messages.h **** }
3585:/home/dino/paparazzi/var/include/messages.h **** 
3586:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_LKF_DEBUG(_trans, _dev, phi_err, theta_err, psi_err, bp, bq, br, quat_no
3587:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_LKF_DEBUG(struct transport_tx *trans, struct link_device *dev
3588:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
3589:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4
3590:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead
3591:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3592:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_LKF_DEBUG, "AHR
3593:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi_err);
3594:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta_err);
3595:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi_err);
3596:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bp);
3597:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bq);
3598:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _br);
3599:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _quat_norm);
3600:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi_accel);
3601:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta_accel);
3602:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi_cov);
3603:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta_cov);
3604:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi_cov);
3605:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bp_cov);
3606:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bq_cov);
3607:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _br_cov);
3608:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3609:/home/dino/paparazzi/var/include/messages.h **** 	} else
3610:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3611:/home/dino/paparazzi/var/include/messages.h **** }
3612:/home/dino/paparazzi/var/include/messages.h **** 
3613:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_LKF_ACC_DBG(_trans, _dev, qi_err, qx_err, qy_err, qz_err, bp_err, bq_err
3614:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_LKF_ACC_DBG(struct transport_tx *trans, struct link_device *d
3615:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 
3616:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 /* msg heade
3617:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3618:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3619:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_LKF_ACC_DBG, "A
3620:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qi_err);
3621:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qx_err);
3622:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qy_err);
3623:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qz_err);
3624:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bp_err);
3625:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bq_err);
3626:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _br_err);
3627:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3628:/home/dino/paparazzi/var/include/messages.h **** 	} else
3629:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3630:/home/dino/paparazzi/var/include/messages.h **** }
3631:/home/dino/paparazzi/var/include/messages.h **** 
3632:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AHRS_LKF_MAG_DBG(_trans, _dev, qi_err, qx_err, qy_err, qz_err, bp_err, bq_err
3633:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AHRS_LKF_MAG_DBG(struct transport_tx *trans, struct link_device *d
3634:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 
3635:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4 +2 /* msg heade
3636:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3637:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3638:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AHRS_LKF_MAG_DBG, "A
3639:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qi_err);
3640:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qx_err);
3641:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qy_err);
3642:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _qz_err);
3643:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bp_err);
3644:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _bq_err);
3645:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _br_err);
3646:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3647:/home/dino/paparazzi/var/include/messages.h **** 	} else
3648:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3649:/home/dino/paparazzi/var/include/messages.h **** }
3650:/home/dino/paparazzi/var/include/messages.h **** 
3651:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_NPS_SENSORS_SCALED(_trans, _dev, acc_x, acc_y, acc_z, mag_x, mag_y, mag_z) pp
3652:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_NPS_SENSORS_SCALED(struct transport_tx *trans, struct link_device 
3653:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /*
3654:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /* msg header 
3655:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4 +2 /* msg header overhead */);
3656:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3657:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NPS_SENSORS_SCALED, 
3658:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _acc_x);
3659:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _acc_y);
3660:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _acc_z);
3661:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mag_x);
3662:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mag_y);
3663:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mag_z);
3664:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3665:/home/dino/paparazzi/var/include/messages.h **** 	} else
3666:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3667:/home/dino/paparazzi/var/include/messages.h **** }
3668:/home/dino/paparazzi/var/include/messages.h **** 
3669:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_INS(_trans, _dev, ins_x, ins_y, ins_z, ins_xd, ins_yd, ins_zd, ins_xdd, ins_y
3670:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_INS(struct transport_tx *trans, struct link_device *dev, uint8_t a
3671:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4
3672:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4+4 +2 /* msg h
3673:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
3674:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3675:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_INS, "INS");
3676:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_x);
3677:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_y);
3678:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_z);
3679:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_xd);
3680:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_yd);
3681:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_zd);
3682:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_xdd);
3683:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_ydd);
3684:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ins_zdd);
3685:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3686:/home/dino/paparazzi/var/include/messages.h **** 	} else
3687:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3688:/home/dino/paparazzi/var/include/messages.h **** }
3689:/home/dino/paparazzi/var/include/messages.h **** 
3690:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS_ERROR(_trans, _dev, x_position, y_position, z_position, x_velocity, y_vel
3691:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS_ERROR(struct transport_tx *trans, struct link_device *dev, uin
3692:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /*
3693:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4 +2 /* msg header 
3694:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4 +2 /* msg header overhead */);
3695:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3696:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS_ERROR, "GPS_ERRO
3697:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _x_position);
3698:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _y_position);
3699:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_position);
3700:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _x_velocity);
3701:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _y_velocity);
3702:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_velocity);
3703:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3704:/home/dino/paparazzi/var/include/messages.h **** 	} else
3705:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3706:/home/dino/paparazzi/var/include/messages.h **** }
3707:/home/dino/paparazzi/var/include/messages.h **** 
3708:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IMU_GYRO(_trans, _dev, gp, gq, gr) pprz_msg_send_IMU_GYRO(&((_trans).trans_tx
3709:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IMU_GYRO(struct transport_tx *trans, struct link_device *dev, uint
3710:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3711:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3712:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3713:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3714:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_GYRO, "IMU_GYRO"
3715:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _gp);
3716:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _gq);
3717:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _gr);
3718:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3719:/home/dino/paparazzi/var/include/messages.h **** 	} else
3720:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3721:/home/dino/paparazzi/var/include/messages.h **** }
3722:/home/dino/paparazzi/var/include/messages.h **** 
3723:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IMU_MAG(_trans, _dev, mx, my, mz) pprz_msg_send_IMU_MAG(&((_trans).trans_tx),
3724:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IMU_MAG(struct transport_tx *trans, struct link_device *dev, uint8
3725:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3726:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3727:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3728:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3729:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_MAG, "IMU_MAG");
3730:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mx);
3731:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _my);
3732:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mz);
3733:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3734:/home/dino/paparazzi/var/include/messages.h **** 	} else
3735:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3736:/home/dino/paparazzi/var/include/messages.h **** }
3737:/home/dino/paparazzi/var/include/messages.h **** 
3738:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IMU_ACCEL(_trans, _dev, ax, ay, az) pprz_msg_send_IMU_ACCEL(&((_trans).trans_
3739:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IMU_ACCEL(struct transport_tx *trans, struct link_device *dev, uin
3740:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3741:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3742:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3743:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3744:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_ACCEL, "IMU_ACCE
3745:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ax);
3746:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ay);
3747:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _az);
3748:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3749:/home/dino/paparazzi/var/include/messages.h **** 	} else
3750:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3751:/home/dino/paparazzi/var/include/messages.h **** }
3752:/home/dino/paparazzi/var/include/messages.h **** 
3753:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IMU_GYRO_RAW(_trans, _dev, gp, gq, gr) pprz_msg_send_IMU_GYRO_RAW(&((_trans).
3754:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IMU_GYRO_RAW(struct transport_tx *trans, struct link_device *dev, 
3755:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3756:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3757:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3758:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3759:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_GYRO_RAW, "IMU_G
3760:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gp);
3761:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gq);
3762:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gr);
3763:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3764:/home/dino/paparazzi/var/include/messages.h **** 	} else
3765:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3766:/home/dino/paparazzi/var/include/messages.h **** }
3767:/home/dino/paparazzi/var/include/messages.h **** 
3768:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IMU_ACCEL_RAW(_trans, _dev, ax, ay, az) pprz_msg_send_IMU_ACCEL_RAW(&((_trans
3769:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IMU_ACCEL_RAW(struct transport_tx *trans, struct link_device *dev,
3770:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
3771:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
3772:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
3773:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3774:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_ACCEL_RAW, "IMU_
3775:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ax);
3776:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ay);
3777:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _az);
3778:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
3779:/home/dino/paparazzi/var/include/messages.h **** 	} else
3780:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
3781:/home/dino/paparazzi/var/include/messages.h **** }
3782:/home/dino/paparazzi/var/include/messages.h **** 
3783:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IMU_MAG_RAW(_trans, _dev, mx, my, mz) pprz_msg_send_IMU_MAG_RAW(&((_trans).tr
3784:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IMU_MAG_RAW(struct transport_tx *trans, struct link_device *dev, u
3785:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
  77              		.loc 3 3785 0
  78 0004 076A     		ldr	r7, [r0, #32]
  79 0006 D0F80480 		ldr	r8, [r0, #4]
  80 000a 0368     		ldr	r3, [r0]
  81 000c 0126     		movs	r6, #1
  82              	.LBE12:
  83              	.LBE11:
  84              		.loc 2 87 0
  85 000e 0D46     		mov	r5, r1
  86              	.LVL3:
  87 0010 0446     		mov	r4, r0
  88              	.LBB14:
  89              	.LBB13:
  90              		.loc 3 3785 0
  91 0012 0E21     		movs	r1, #14
  92              	.LVL4:
  93 0014 8DF80F60 		strb	r6, [sp, #15]
  94              	.LVL5:
  95 0018 3846     		mov	r0, r7
  96              	.LVL6:
  97 001a 9847     		blx	r3
  98              	.LVL7:
  99 001c 2946     		mov	r1, r5
 100 001e 0246     		mov	r2, r0
 101 0020 3846     		mov	r0, r7
 102 0022 C047     		blx	r8
 103              	.LVL8:
 104 0024 0028     		cmp	r0, #0
 105 0026 45D0     		beq	.L5
3786:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 106              		.loc 3 3786 0
 107 0028 276A     		ldr	r7, [r4, #32]
 108 002a 2368     		ldr	r3, [r4]
 109 002c D4F81C80 		ldr	r8, [r4, #28]
 110 0030 3846     		mov	r0, r7
 111 0032 0E21     		movs	r1, #14
 112 0034 9847     		blx	r3
 113              	.LVL9:
 114 0036 2946     		mov	r1, r5
 115 0038 0246     		mov	r2, r0
 116 003a 3846     		mov	r0, r7
 117 003c C047     		blx	r8
 118              	.LVL10:
3787:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 119              		.loc 3 3787 0
 120 003e 2369     		ldr	r3, [r4, #16]
 121 0040 206A     		ldr	r0, [r4, #32]
3788:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
3789:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_MAG_RAW, "IMU_MA
3790:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mx);
 122              		.loc 3 3790 0
 123 0042 DFF88480 		ldr	r8, .L8+4
3787:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 124              		.loc 3 3787 0
 125 0046 2946     		mov	r1, r5
 126 0048 0E22     		movs	r2, #14
 127 004a 9847     		blx	r3
 128              	.LVL11:
3788:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 129              		.loc 3 3788 0
 130 004c 0DF10F03 		add	r3, sp, #15
 131 0050 0096     		str	r6, [sp]
 132 0052 0193     		str	r3, [sp, #4]
 133 0054 A668     		ldr	r6, [r4, #8]
 134              	.LVL12:
 135 0056 206A     		ldr	r0, [r4, #32]
 136 0058 2946     		mov	r1, r5
 137 005a 0222     		movs	r2, #2
 138 005c 0023     		movs	r3, #0
 139              	.LVL13:
 140 005e B047     		blx	r6
 141              	.LVL14:
3789:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mx);
 142              		.loc 3 3789 0
 143 0060 CD23     		movs	r3, #205
 144 0062 0093     		str	r3, [sp]
 145 0064 174B     		ldr	r3, .L8
 146 0066 0193     		str	r3, [sp, #4]
 147              		.loc 3 3790 0
 148 0068 0427     		movs	r7, #4
3789:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mx);
 149              		.loc 3 3789 0
 150 006a E668     		ldr	r6, [r4, #12]
 151 006c 206A     		ldr	r0, [r4, #32]
 152 006e 2946     		mov	r1, r5
 153 0070 0222     		movs	r2, #2
 154 0072 0023     		movs	r3, #0
 155 0074 B047     		blx	r6
 156              	.LVL15:
 157              		.loc 3 3790 0
 158 0076 206A     		ldr	r0, [r4, #32]
 159 0078 A668     		ldr	r6, [r4, #8]
 160 007a 0097     		str	r7, [sp]
 161 007c 2946     		mov	r1, r5
 162 007e 0722     		movs	r2, #7
 163 0080 0023     		movs	r3, #0
 164 0082 CDF80480 		str	r8, [sp, #4]
 165 0086 B047     		blx	r6
 166              	.LVL16:
3791:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _my);
 167              		.loc 3 3791 0
 168 0088 08EB0703 		add	r3, r8, r7
 169 008c 0193     		str	r3, [sp, #4]
 170 008e 206A     		ldr	r0, [r4, #32]
 171 0090 A668     		ldr	r6, [r4, #8]
 172 0092 0097     		str	r7, [sp]
 173 0094 2946     		mov	r1, r5
 174 0096 0722     		movs	r2, #7
 175 0098 0023     		movs	r3, #0
 176 009a B047     		blx	r6
 177              	.LVL17:
3792:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mz);
 178              		.loc 3 3792 0
 179 009c 08F10806 		add	r6, r8, #8
 180 00a0 0196     		str	r6, [sp, #4]
 181 00a2 0023     		movs	r3, #0
 182 00a4 0097     		str	r7, [sp]
 183 00a6 A668     		ldr	r6, [r4, #8]
 184 00a8 206A     		ldr	r0, [r4, #32]
 185 00aa 2946     		mov	r1, r5
 186 00ac 0722     		movs	r2, #7
 187 00ae B047     		blx	r6
 188              	.LVL18:
3793:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 189              		.loc 3 3793 0
 190 00b0 6369     		ldr	r3, [r4, #20]
 191 00b2 00E0     		b	.L7
 192              	.L5:
3794:/home/dino/paparazzi/var/include/messages.h **** 	} else
3795:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 193              		.loc 3 3795 0
 194 00b4 A369     		ldr	r3, [r4, #24]
 195              	.L7:
 196 00b6 206A     		ldr	r0, [r4, #32]
 197 00b8 2946     		mov	r1, r5
 198 00ba 9847     		blx	r3
 199              	.LVL19:
 200              	.LBE13:
 201              	.LBE14:
  88:subsystems/imu.c ****   pprz_msg_send_IMU_MAG_RAW(trans, dev, AC_ID,
  89:subsystems/imu.c ****                             &imu.mag_unscaled.x, &imu.mag_unscaled.y, &imu.mag_unscaled.z);
  90:subsystems/imu.c **** }
 202              		.loc 2 90 0
 203 00bc 04B0     		add	sp, sp, #16
 204              		.cfi_def_cfa_offset 24
 205              		@ sp needed
 206 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 207              	.LVL20:
 208              	.L9:
 209 00c2 00BF     		.align	2
 210              	.L8:
 211 00c4 00000000 		.word	.LC0
 212 00c8 78000000 		.word	.LANCHOR0+120
 213              		.cfi_endproc
 214              	.LFE483:
 216              		.section	.text.send_accel_raw,"ax",%progbits
 217              		.align	1
 218              		.thumb
 219              		.thumb_func
 221              	send_accel_raw:
 222              	.LFB477:
  47:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL_RAW(trans, dev, AC_ID,
 223              		.loc 2 47 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 8
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              	.LVL21:
 228 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 229              		.cfi_def_cfa_offset 40
 230              		.cfi_offset 4, -24
 231              		.cfi_offset 5, -20
 232              		.cfi_offset 6, -16
 233              		.cfi_offset 7, -12
 234              		.cfi_offset 8, -8
 235              		.cfi_offset 14, -4
 236              	.LBB17:
 237              	.LBB18:
3770:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 238              		.loc 3 3770 0
 239 0004 076A     		ldr	r7, [r0, #32]
 240 0006 D0F80480 		ldr	r8, [r0, #4]
 241 000a 0368     		ldr	r3, [r0]
 242 000c 0126     		movs	r6, #1
 243              	.LBE18:
 244              	.LBE17:
  47:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL_RAW(trans, dev, AC_ID,
 245              		.loc 2 47 0
 246 000e 0D46     		mov	r5, r1
 247              	.LVL22:
 248 0010 0446     		mov	r4, r0
 249              	.LBB20:
 250              	.LBB19:
3770:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 251              		.loc 3 3770 0
 252 0012 0E21     		movs	r1, #14
 253              	.LVL23:
 254 0014 8DF80F60 		strb	r6, [sp, #15]
 255              	.LVL24:
 256 0018 3846     		mov	r0, r7
 257              	.LVL25:
 258 001a 9847     		blx	r3
 259              	.LVL26:
 260 001c 2946     		mov	r1, r5
 261 001e 0246     		mov	r2, r0
 262 0020 3846     		mov	r0, r7
 263 0022 C047     		blx	r8
 264              	.LVL27:
 265 0024 0028     		cmp	r0, #0
 266 0026 45D0     		beq	.L11
3771:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 267              		.loc 3 3771 0
 268 0028 276A     		ldr	r7, [r4, #32]
 269 002a 2368     		ldr	r3, [r4]
 270 002c D4F81C80 		ldr	r8, [r4, #28]
 271 0030 3846     		mov	r0, r7
 272 0032 0E21     		movs	r1, #14
 273 0034 9847     		blx	r3
 274              	.LVL28:
 275 0036 2946     		mov	r1, r5
 276 0038 0246     		mov	r2, r0
 277 003a 3846     		mov	r0, r7
 278 003c C047     		blx	r8
 279              	.LVL29:
3772:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 280              		.loc 3 3772 0
 281 003e 2369     		ldr	r3, [r4, #16]
 282 0040 206A     		ldr	r0, [r4, #32]
3775:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ay);
 283              		.loc 3 3775 0
 284 0042 DFF88480 		ldr	r8, .L14+4
3772:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 285              		.loc 3 3772 0
 286 0046 2946     		mov	r1, r5
 287 0048 0E22     		movs	r2, #14
 288 004a 9847     		blx	r3
 289              	.LVL30:
3773:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_ACCEL_RAW, "IMU_
 290              		.loc 3 3773 0
 291 004c 0DF10F03 		add	r3, sp, #15
 292 0050 0096     		str	r6, [sp]
 293 0052 0193     		str	r3, [sp, #4]
 294 0054 A668     		ldr	r6, [r4, #8]
 295              	.LVL31:
 296 0056 206A     		ldr	r0, [r4, #32]
 297 0058 2946     		mov	r1, r5
 298 005a 0222     		movs	r2, #2
 299 005c 0023     		movs	r3, #0
 300              	.LVL32:
 301 005e B047     		blx	r6
 302              	.LVL33:
3774:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ax);
 303              		.loc 3 3774 0
 304 0060 CC23     		movs	r3, #204
 305 0062 0093     		str	r3, [sp]
 306 0064 174B     		ldr	r3, .L14
 307 0066 0193     		str	r3, [sp, #4]
3775:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ay);
 308              		.loc 3 3775 0
 309 0068 0427     		movs	r7, #4
3774:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ax);
 310              		.loc 3 3774 0
 311 006a E668     		ldr	r6, [r4, #12]
 312 006c 206A     		ldr	r0, [r4, #32]
 313 006e 2946     		mov	r1, r5
 314 0070 0222     		movs	r2, #2
 315 0072 0023     		movs	r3, #0
 316 0074 B047     		blx	r6
 317              	.LVL34:
3775:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ay);
 318              		.loc 3 3775 0
 319 0076 206A     		ldr	r0, [r4, #32]
 320 0078 A668     		ldr	r6, [r4, #8]
 321 007a 0097     		str	r7, [sp]
 322 007c 2946     		mov	r1, r5
 323 007e 0722     		movs	r2, #7
 324 0080 0023     		movs	r3, #0
 325 0082 CDF80480 		str	r8, [sp, #4]
 326 0086 B047     		blx	r6
 327              	.LVL35:
3776:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _az);
 328              		.loc 3 3776 0
 329 0088 08EB0703 		add	r3, r8, r7
 330 008c 0193     		str	r3, [sp, #4]
 331 008e 206A     		ldr	r0, [r4, #32]
 332 0090 A668     		ldr	r6, [r4, #8]
 333 0092 0097     		str	r7, [sp]
 334 0094 2946     		mov	r1, r5
 335 0096 0722     		movs	r2, #7
 336 0098 0023     		movs	r3, #0
 337 009a B047     		blx	r6
 338              	.LVL36:
3777:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 339              		.loc 3 3777 0
 340 009c 08F10806 		add	r6, r8, #8
 341 00a0 0196     		str	r6, [sp, #4]
 342 00a2 0023     		movs	r3, #0
 343 00a4 0097     		str	r7, [sp]
 344 00a6 A668     		ldr	r6, [r4, #8]
 345 00a8 206A     		ldr	r0, [r4, #32]
 346 00aa 2946     		mov	r1, r5
 347 00ac 0722     		movs	r2, #7
 348 00ae B047     		blx	r6
 349              	.LVL37:
3778:/home/dino/paparazzi/var/include/messages.h **** 	} else
 350              		.loc 3 3778 0
 351 00b0 6369     		ldr	r3, [r4, #20]
 352 00b2 00E0     		b	.L13
 353              	.L11:
3780:/home/dino/paparazzi/var/include/messages.h **** }
 354              		.loc 3 3780 0
 355 00b4 A369     		ldr	r3, [r4, #24]
 356              	.L13:
 357 00b6 206A     		ldr	r0, [r4, #32]
 358 00b8 2946     		mov	r1, r5
 359 00ba 9847     		blx	r3
 360              	.LVL38:
 361              	.LBE19:
 362              	.LBE20:
  50:subsystems/imu.c **** 
 363              		.loc 2 50 0
 364 00bc 04B0     		add	sp, sp, #16
 365              		.cfi_def_cfa_offset 24
 366              		@ sp needed
 367 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 368              	.LVL39:
 369              	.L15:
 370 00c2 00BF     		.align	2
 371              	.L14:
 372 00c4 0C000000 		.word	.LC1
 373 00c8 6C000000 		.word	.LANCHOR0+108
 374              		.cfi_endproc
 375              	.LFE477:
 377              		.section	.text.send_gyro_raw,"ax",%progbits
 378              		.align	1
 379              		.thumb
 380              		.thumb_func
 382              	send_gyro_raw:
 383              	.LFB480:
  67:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO_RAW(trans, dev, AC_ID,
 384              		.loc 2 67 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 8
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              	.LVL40:
 389 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 390              		.cfi_def_cfa_offset 40
 391              		.cfi_offset 4, -24
 392              		.cfi_offset 5, -20
 393              		.cfi_offset 6, -16
 394              		.cfi_offset 7, -12
 395              		.cfi_offset 8, -8
 396              		.cfi_offset 14, -4
 397              	.LBB23:
 398              	.LBB24:
3755:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 399              		.loc 3 3755 0
 400 0004 076A     		ldr	r7, [r0, #32]
 401 0006 D0F80480 		ldr	r8, [r0, #4]
 402 000a 0368     		ldr	r3, [r0]
 403 000c 0126     		movs	r6, #1
 404              	.LBE24:
 405              	.LBE23:
  67:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO_RAW(trans, dev, AC_ID,
 406              		.loc 2 67 0
 407 000e 0D46     		mov	r5, r1
 408              	.LVL41:
 409 0010 0446     		mov	r4, r0
 410              	.LBB26:
 411              	.LBB25:
3755:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 412              		.loc 3 3755 0
 413 0012 0E21     		movs	r1, #14
 414              	.LVL42:
 415 0014 8DF80F60 		strb	r6, [sp, #15]
 416              	.LVL43:
 417 0018 3846     		mov	r0, r7
 418              	.LVL44:
 419 001a 9847     		blx	r3
 420              	.LVL45:
 421 001c 2946     		mov	r1, r5
 422 001e 0246     		mov	r2, r0
 423 0020 3846     		mov	r0, r7
 424 0022 C047     		blx	r8
 425              	.LVL46:
 426 0024 0028     		cmp	r0, #0
 427 0026 45D0     		beq	.L17
3756:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 428              		.loc 3 3756 0
 429 0028 276A     		ldr	r7, [r4, #32]
 430 002a 2368     		ldr	r3, [r4]
 431 002c D4F81C80 		ldr	r8, [r4, #28]
 432 0030 3846     		mov	r0, r7
 433 0032 0E21     		movs	r1, #14
 434 0034 9847     		blx	r3
 435              	.LVL47:
 436 0036 2946     		mov	r1, r5
 437 0038 0246     		mov	r2, r0
 438 003a 3846     		mov	r0, r7
 439 003c C047     		blx	r8
 440              	.LVL48:
3757:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 441              		.loc 3 3757 0
 442 003e 2369     		ldr	r3, [r4, #16]
 443 0040 206A     		ldr	r0, [r4, #32]
3760:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gq);
 444              		.loc 3 3760 0
 445 0042 DFF88480 		ldr	r8, .L20+4
3757:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 446              		.loc 3 3757 0
 447 0046 2946     		mov	r1, r5
 448 0048 0E22     		movs	r2, #14
 449 004a 9847     		blx	r3
 450              	.LVL49:
3758:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_GYRO_RAW, "IMU_G
 451              		.loc 3 3758 0
 452 004c 0DF10F03 		add	r3, sp, #15
 453 0050 0096     		str	r6, [sp]
 454 0052 0193     		str	r3, [sp, #4]
 455 0054 A668     		ldr	r6, [r4, #8]
 456              	.LVL50:
 457 0056 206A     		ldr	r0, [r4, #32]
 458 0058 2946     		mov	r1, r5
 459 005a 0222     		movs	r2, #2
 460 005c 0023     		movs	r3, #0
 461              	.LVL51:
 462 005e B047     		blx	r6
 463              	.LVL52:
3759:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gp);
 464              		.loc 3 3759 0
 465 0060 CB23     		movs	r3, #203
 466 0062 0093     		str	r3, [sp]
 467 0064 174B     		ldr	r3, .L20
 468 0066 0193     		str	r3, [sp, #4]
3760:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gq);
 469              		.loc 3 3760 0
 470 0068 0427     		movs	r7, #4
3759:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gp);
 471              		.loc 3 3759 0
 472 006a E668     		ldr	r6, [r4, #12]
 473 006c 206A     		ldr	r0, [r4, #32]
 474 006e 2946     		mov	r1, r5
 475 0070 0222     		movs	r2, #2
 476 0072 0023     		movs	r3, #0
 477 0074 B047     		blx	r6
 478              	.LVL53:
3760:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gq);
 479              		.loc 3 3760 0
 480 0076 206A     		ldr	r0, [r4, #32]
 481 0078 A668     		ldr	r6, [r4, #8]
 482 007a 0097     		str	r7, [sp]
 483 007c 2946     		mov	r1, r5
 484 007e 0722     		movs	r2, #7
 485 0080 0023     		movs	r3, #0
 486 0082 CDF80480 		str	r8, [sp, #4]
 487 0086 B047     		blx	r6
 488              	.LVL54:
3761:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gr);
 489              		.loc 3 3761 0
 490 0088 08EB0703 		add	r3, r8, r7
 491 008c 0193     		str	r3, [sp, #4]
 492 008e 206A     		ldr	r0, [r4, #32]
 493 0090 A668     		ldr	r6, [r4, #8]
 494 0092 0097     		str	r7, [sp]
 495 0094 2946     		mov	r1, r5
 496 0096 0722     		movs	r2, #7
 497 0098 0023     		movs	r3, #0
 498 009a B047     		blx	r6
 499              	.LVL55:
3762:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 500              		.loc 3 3762 0
 501 009c 08F10806 		add	r6, r8, #8
 502 00a0 0196     		str	r6, [sp, #4]
 503 00a2 0023     		movs	r3, #0
 504 00a4 0097     		str	r7, [sp]
 505 00a6 A668     		ldr	r6, [r4, #8]
 506 00a8 206A     		ldr	r0, [r4, #32]
 507 00aa 2946     		mov	r1, r5
 508 00ac 0722     		movs	r2, #7
 509 00ae B047     		blx	r6
 510              	.LVL56:
3763:/home/dino/paparazzi/var/include/messages.h **** 	} else
 511              		.loc 3 3763 0
 512 00b0 6369     		ldr	r3, [r4, #20]
 513 00b2 00E0     		b	.L19
 514              	.L17:
3765:/home/dino/paparazzi/var/include/messages.h **** }
 515              		.loc 3 3765 0
 516 00b4 A369     		ldr	r3, [r4, #24]
 517              	.L19:
 518 00b6 206A     		ldr	r0, [r4, #32]
 519 00b8 2946     		mov	r1, r5
 520 00ba 9847     		blx	r3
 521              	.LVL57:
 522              	.LBE25:
 523              	.LBE26:
  70:subsystems/imu.c **** 
 524              		.loc 2 70 0
 525 00bc 04B0     		add	sp, sp, #16
 526              		.cfi_def_cfa_offset 24
 527              		@ sp needed
 528 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 529              	.LVL58:
 530              	.L21:
 531 00c2 00BF     		.align	2
 532              	.L20:
 533 00c4 1A000000 		.word	.LC2
 534 00c8 60000000 		.word	.LANCHOR0+96
 535              		.cfi_endproc
 536              	.LFE480:
 538              		.section	.text.send_accel,"ax",%progbits
 539              		.align	1
 540              		.thumb
 541              		.thumb_func
 543              	send_accel:
 544              	.LFB479:
  59:subsystems/imu.c ****   struct FloatVect3 accel_float;
 545              		.loc 2 59 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 16
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              	.LVL59:
  61:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL(trans, dev, AC_ID,
 550              		.loc 2 61 0
 551 0000 3C4B     		ldr	r3, .L26
 552 0002 DFED3D6A 		flds	s13, .L26+4
 553 0006 D3ED037A 		flds	s15, [r3, #12]	@ int
  59:subsystems/imu.c ****   struct FloatVect3 accel_float;
 554              		.loc 2 59 0
 555 000a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 556              		.cfi_def_cfa_offset 24
 557              		.cfi_offset 4, -24
 558              		.cfi_offset 5, -20
 559              		.cfi_offset 6, -16
 560              		.cfi_offset 7, -12
 561              		.cfi_offset 8, -8
 562              		.cfi_offset 14, -4
  61:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL(trans, dev, AC_ID,
 563              		.loc 2 61 0
 564 000e B8EEE77A 		fsitos	s14, s15
 565 0012 D3ED047A 		flds	s15, [r3, #16]	@ int
 566              	.LBB29:
 567              	.LBB30:
3740:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 568              		.loc 3 3740 0
 569 0016 076A     		ldr	r7, [r0, #32]
 570 0018 D0F80480 		ldr	r8, [r0, #4]
 571              	.LBE30:
 572              	.LBE29:
  61:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL(trans, dev, AC_ID,
 573              		.loc 2 61 0
 574 001c 27EE267A 		fmuls	s14, s14, s13
  59:subsystems/imu.c ****   struct FloatVect3 accel_float;
 575              		.loc 2 59 0
 576 0020 86B0     		sub	sp, sp, #24
 577              		.cfi_def_cfa_offset 48
  61:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL(trans, dev, AC_ID,
 578              		.loc 2 61 0
 579 0022 8DED037A 		fsts	s14, [sp, #12]
 580 0026 B8EEE77A 		fsitos	s14, s15
 581 002a D3ED057A 		flds	s15, [r3, #20]	@ int
 582              	.LBB34:
 583              	.LBB31:
3740:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 584              		.loc 3 3740 0
 585 002e 0368     		ldr	r3, [r0]
 586              	.LBE31:
 587              	.LBE34:
  61:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL(trans, dev, AC_ID,
 588              		.loc 2 61 0
 589 0030 F8EEE77A 		fsitos	s15, s15
 590 0034 27EE267A 		fmuls	s14, s14, s13
 591 0038 67EEA67A 		fmuls	s15, s15, s13
 592 003c 0126     		movs	r6, #1
  59:subsystems/imu.c ****   struct FloatVect3 accel_float;
 593              		.loc 2 59 0
 594 003e 0D46     		mov	r5, r1
 595 0040 0446     		mov	r4, r0
 596              	.LBB35:
 597              	.LBB32:
3740:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 598              		.loc 3 3740 0
 599 0042 0E21     		movs	r1, #14
 600              	.LVL60:
 601              	.LBE32:
 602              	.LBE35:
  61:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL(trans, dev, AC_ID,
 603              		.loc 2 61 0
 604 0044 8DED047A 		fsts	s14, [sp, #16]
 605 0048 CDED057A 		fsts	s15, [sp, #20]
 606              	.LVL61:
 607 004c 8DF80B60 		strb	r6, [sp, #11]
 608              	.LVL62:
 609              	.LBB36:
 610              	.LBB33:
3740:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 611              		.loc 3 3740 0
 612 0050 3846     		mov	r0, r7
 613              	.LVL63:
 614 0052 9847     		blx	r3
 615              	.LVL64:
 616 0054 2946     		mov	r1, r5
 617 0056 0246     		mov	r2, r0
 618 0058 3846     		mov	r0, r7
 619 005a C047     		blx	r8
 620              	.LVL65:
 621 005c 0028     		cmp	r0, #0
 622 005e 41D0     		beq	.L23
3741:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 623              		.loc 3 3741 0
 624 0060 276A     		ldr	r7, [r4, #32]
 625 0062 2368     		ldr	r3, [r4]
 626 0064 D4F81C80 		ldr	r8, [r4, #28]
 627 0068 3846     		mov	r0, r7
 628 006a 0E21     		movs	r1, #14
 629 006c 9847     		blx	r3
 630              	.LVL66:
 631 006e 2946     		mov	r1, r5
 632 0070 0246     		mov	r2, r0
 633 0072 3846     		mov	r0, r7
 634 0074 C047     		blx	r8
 635              	.LVL67:
3742:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 636              		.loc 3 3742 0
 637 0076 2369     		ldr	r3, [r4, #16]
 638 0078 206A     		ldr	r0, [r4, #32]
 639 007a 2946     		mov	r1, r5
 640 007c 0E22     		movs	r2, #14
 641 007e 9847     		blx	r3
 642              	.LVL68:
3743:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_ACCEL, "IMU_ACCE
 643              		.loc 3 3743 0
 644 0080 0DF10B03 		add	r3, sp, #11
 645 0084 0096     		str	r6, [sp]
 646 0086 0193     		str	r3, [sp, #4]
 647 0088 A668     		ldr	r6, [r4, #8]
 648              	.LVL69:
 649 008a 206A     		ldr	r0, [r4, #32]
 650 008c 2946     		mov	r1, r5
 651 008e 0222     		movs	r2, #2
 652 0090 0023     		movs	r3, #0
 653              	.LVL70:
 654 0092 B047     		blx	r6
 655              	.LVL71:
3744:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ax);
 656              		.loc 3 3744 0
 657 0094 CA23     		movs	r3, #202
 658 0096 0093     		str	r3, [sp]
 659 0098 184B     		ldr	r3, .L26+8
 660 009a 0193     		str	r3, [sp, #4]
 661 009c E668     		ldr	r6, [r4, #12]
 662 009e 206A     		ldr	r0, [r4, #32]
 663 00a0 2946     		mov	r1, r5
 664 00a2 0222     		movs	r2, #2
 665 00a4 0023     		movs	r3, #0
 666 00a6 B047     		blx	r6
 667              	.LVL72:
3745:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ay);
 668              		.loc 3 3745 0
 669 00a8 0426     		movs	r6, #4
 670 00aa 03AB     		add	r3, sp, #12
 671              	.LVL73:
 672 00ac 0096     		str	r6, [sp]
 673 00ae 0193     		str	r3, [sp, #4]
 674 00b0 A768     		ldr	r7, [r4, #8]
 675 00b2 206A     		ldr	r0, [r4, #32]
 676 00b4 2946     		mov	r1, r5
 677 00b6 0A22     		movs	r2, #10
 678 00b8 0023     		movs	r3, #0
 679              	.LVL74:
 680 00ba B847     		blx	r7
 681              	.LVL75:
3746:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _az);
 682              		.loc 3 3746 0
 683 00bc 04AB     		add	r3, sp, #16
 684              	.LVL76:
 685 00be 0096     		str	r6, [sp]
 686 00c0 0193     		str	r3, [sp, #4]
 687 00c2 206A     		ldr	r0, [r4, #32]
 688 00c4 A768     		ldr	r7, [r4, #8]
 689 00c6 2946     		mov	r1, r5
 690 00c8 0A22     		movs	r2, #10
 691 00ca 0023     		movs	r3, #0
 692              	.LVL77:
 693 00cc B847     		blx	r7
 694              	.LVL78:
3747:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 695              		.loc 3 3747 0
 696 00ce 05AB     		add	r3, sp, #20
 697              	.LVL79:
 698 00d0 0096     		str	r6, [sp]
 699 00d2 0193     		str	r3, [sp, #4]
 700 00d4 A668     		ldr	r6, [r4, #8]
 701 00d6 206A     		ldr	r0, [r4, #32]
 702 00d8 0023     		movs	r3, #0
 703              	.LVL80:
 704 00da 2946     		mov	r1, r5
 705 00dc 0A22     		movs	r2, #10
 706 00de B047     		blx	r6
 707              	.LVL81:
3748:/home/dino/paparazzi/var/include/messages.h **** 	} else
 708              		.loc 3 3748 0
 709 00e0 6369     		ldr	r3, [r4, #20]
 710 00e2 00E0     		b	.L25
 711              	.L23:
3750:/home/dino/paparazzi/var/include/messages.h **** }
 712              		.loc 3 3750 0
 713 00e4 A369     		ldr	r3, [r4, #24]
 714              	.L25:
 715 00e6 206A     		ldr	r0, [r4, #32]
 716 00e8 2946     		mov	r1, r5
 717 00ea 9847     		blx	r3
 718              	.LVL82:
 719              	.LBE33:
 720              	.LBE36:
  64:subsystems/imu.c **** 
 721              		.loc 2 64 0
 722 00ec 06B0     		add	sp, sp, #24
 723              		.cfi_def_cfa_offset 24
 724              		@ sp needed
 725 00ee BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 726              	.LVL83:
 727              	.L27:
 728 00f2 00BF     		.align	2
 729              	.L26:
 730 00f4 00000000 		.word	.LANCHOR0
 731 00f8 0000803A 		.word	981467136
 732 00fc 27000000 		.word	.LC3
 733              		.cfi_endproc
 734              	.LFE479:
 736              		.section	.text.send_mag,"ax",%progbits
 737              		.align	1
 738              		.thumb
 739              		.thumb_func
 741              	send_mag:
 742              	.LFB485:
  91:subsystems/imu.c **** 
  92:subsystems/imu.c **** static void send_mag_scaled(struct transport_tx *trans, struct link_device *dev)
  93:subsystems/imu.c **** {
  94:subsystems/imu.c ****   pprz_msg_send_IMU_MAG_SCALED(trans, dev, AC_ID,
  95:subsystems/imu.c ****                                &imu.mag.x, &imu.mag.y, &imu.mag.z);
  96:subsystems/imu.c **** }
  97:subsystems/imu.c **** 
  98:subsystems/imu.c **** static void send_mag(struct transport_tx *trans, struct link_device *dev)
  99:subsystems/imu.c **** {
 743              		.loc 2 99 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 16
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              	.LVL84:
 100:subsystems/imu.c ****   struct FloatVect3 mag_float;
 101:subsystems/imu.c ****   MAGS_FLOAT_OF_BFP(mag_float, imu.mag);
 748              		.loc 2 101 0
 749 0000 3C4B     		ldr	r3, .L32
 750 0002 DFED3D6A 		flds	s13, .L32+4
 751 0006 D3ED067A 		flds	s15, [r3, #24]	@ int
  99:subsystems/imu.c ****   struct FloatVect3 mag_float;
 752              		.loc 2 99 0
 753 000a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 754              		.cfi_def_cfa_offset 24
 755              		.cfi_offset 4, -24
 756              		.cfi_offset 5, -20
 757              		.cfi_offset 6, -16
 758              		.cfi_offset 7, -12
 759              		.cfi_offset 8, -8
 760              		.cfi_offset 14, -4
 761              		.loc 2 101 0
 762 000e B8EEE77A 		fsitos	s14, s15
 763 0012 D3ED077A 		flds	s15, [r3, #28]	@ int
 764              	.LBB39:
 765              	.LBB40:
3725:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 766              		.loc 3 3725 0
 767 0016 076A     		ldr	r7, [r0, #32]
 768 0018 D0F80480 		ldr	r8, [r0, #4]
 769              	.LBE40:
 770              	.LBE39:
 771              		.loc 2 101 0
 772 001c 27EE267A 		fmuls	s14, s14, s13
  99:subsystems/imu.c ****   struct FloatVect3 mag_float;
 773              		.loc 2 99 0
 774 0020 86B0     		sub	sp, sp, #24
 775              		.cfi_def_cfa_offset 48
 776              		.loc 2 101 0
 777 0022 8DED037A 		fsts	s14, [sp, #12]
 778 0026 B8EEE77A 		fsitos	s14, s15
 779 002a D3ED087A 		flds	s15, [r3, #32]	@ int
 780              	.LBB44:
 781              	.LBB41:
3725:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 782              		.loc 3 3725 0
 783 002e 0368     		ldr	r3, [r0]
 784              	.LBE41:
 785              	.LBE44:
 786              		.loc 2 101 0
 787 0030 F8EEE77A 		fsitos	s15, s15
 788 0034 27EE267A 		fmuls	s14, s14, s13
 789 0038 67EEA67A 		fmuls	s15, s15, s13
 790 003c 0126     		movs	r6, #1
  99:subsystems/imu.c ****   struct FloatVect3 mag_float;
 791              		.loc 2 99 0
 792 003e 0D46     		mov	r5, r1
 793 0040 0446     		mov	r4, r0
 794              	.LBB45:
 795              	.LBB42:
3725:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 796              		.loc 3 3725 0
 797 0042 0E21     		movs	r1, #14
 798              	.LVL85:
 799              	.LBE42:
 800              	.LBE45:
 801              		.loc 2 101 0
 802 0044 8DED047A 		fsts	s14, [sp, #16]
 803 0048 CDED057A 		fsts	s15, [sp, #20]
 804              	.LVL86:
 805 004c 8DF80B60 		strb	r6, [sp, #11]
 806              	.LVL87:
 807              	.LBB46:
 808              	.LBB43:
3725:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 809              		.loc 3 3725 0
 810 0050 3846     		mov	r0, r7
 811              	.LVL88:
 812 0052 9847     		blx	r3
 813              	.LVL89:
 814 0054 2946     		mov	r1, r5
 815 0056 0246     		mov	r2, r0
 816 0058 3846     		mov	r0, r7
 817 005a C047     		blx	r8
 818              	.LVL90:
 819 005c 0028     		cmp	r0, #0
 820 005e 41D0     		beq	.L29
3726:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 821              		.loc 3 3726 0
 822 0060 276A     		ldr	r7, [r4, #32]
 823 0062 2368     		ldr	r3, [r4]
 824 0064 D4F81C80 		ldr	r8, [r4, #28]
 825 0068 3846     		mov	r0, r7
 826 006a 0E21     		movs	r1, #14
 827 006c 9847     		blx	r3
 828              	.LVL91:
 829 006e 2946     		mov	r1, r5
 830 0070 0246     		mov	r2, r0
 831 0072 3846     		mov	r0, r7
 832 0074 C047     		blx	r8
 833              	.LVL92:
3727:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 834              		.loc 3 3727 0
 835 0076 2369     		ldr	r3, [r4, #16]
 836 0078 206A     		ldr	r0, [r4, #32]
 837 007a 2946     		mov	r1, r5
 838 007c 0E22     		movs	r2, #14
 839 007e 9847     		blx	r3
 840              	.LVL93:
3728:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_MAG, "IMU_MAG");
 841              		.loc 3 3728 0
 842 0080 0DF10B03 		add	r3, sp, #11
 843 0084 0096     		str	r6, [sp]
 844 0086 0193     		str	r3, [sp, #4]
 845 0088 A668     		ldr	r6, [r4, #8]
 846              	.LVL94:
 847 008a 206A     		ldr	r0, [r4, #32]
 848 008c 2946     		mov	r1, r5
 849 008e 0222     		movs	r2, #2
 850 0090 0023     		movs	r3, #0
 851              	.LVL95:
 852 0092 B047     		blx	r6
 853              	.LVL96:
3729:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mx);
 854              		.loc 3 3729 0
 855 0094 C923     		movs	r3, #201
 856 0096 0093     		str	r3, [sp]
 857 0098 184B     		ldr	r3, .L32+8
 858 009a 0193     		str	r3, [sp, #4]
 859 009c E668     		ldr	r6, [r4, #12]
 860 009e 206A     		ldr	r0, [r4, #32]
 861 00a0 2946     		mov	r1, r5
 862 00a2 0222     		movs	r2, #2
 863 00a4 0023     		movs	r3, #0
 864 00a6 B047     		blx	r6
 865              	.LVL97:
3730:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _my);
 866              		.loc 3 3730 0
 867 00a8 0426     		movs	r6, #4
 868 00aa 03AB     		add	r3, sp, #12
 869              	.LVL98:
 870 00ac 0096     		str	r6, [sp]
 871 00ae 0193     		str	r3, [sp, #4]
 872 00b0 A768     		ldr	r7, [r4, #8]
 873 00b2 206A     		ldr	r0, [r4, #32]
 874 00b4 2946     		mov	r1, r5
 875 00b6 0A22     		movs	r2, #10
 876 00b8 0023     		movs	r3, #0
 877              	.LVL99:
 878 00ba B847     		blx	r7
 879              	.LVL100:
3731:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _mz);
 880              		.loc 3 3731 0
 881 00bc 04AB     		add	r3, sp, #16
 882              	.LVL101:
 883 00be 0096     		str	r6, [sp]
 884 00c0 0193     		str	r3, [sp, #4]
 885 00c2 206A     		ldr	r0, [r4, #32]
 886 00c4 A768     		ldr	r7, [r4, #8]
 887 00c6 2946     		mov	r1, r5
 888 00c8 0A22     		movs	r2, #10
 889 00ca 0023     		movs	r3, #0
 890              	.LVL102:
 891 00cc B847     		blx	r7
 892              	.LVL103:
3732:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 893              		.loc 3 3732 0
 894 00ce 05AB     		add	r3, sp, #20
 895              	.LVL104:
 896 00d0 0096     		str	r6, [sp]
 897 00d2 0193     		str	r3, [sp, #4]
 898 00d4 A668     		ldr	r6, [r4, #8]
 899 00d6 206A     		ldr	r0, [r4, #32]
 900 00d8 0023     		movs	r3, #0
 901              	.LVL105:
 902 00da 2946     		mov	r1, r5
 903 00dc 0A22     		movs	r2, #10
 904 00de B047     		blx	r6
 905              	.LVL106:
3733:/home/dino/paparazzi/var/include/messages.h **** 	} else
 906              		.loc 3 3733 0
 907 00e0 6369     		ldr	r3, [r4, #20]
 908 00e2 00E0     		b	.L31
 909              	.L29:
3735:/home/dino/paparazzi/var/include/messages.h **** }
 910              		.loc 3 3735 0
 911 00e4 A369     		ldr	r3, [r4, #24]
 912              	.L31:
 913 00e6 206A     		ldr	r0, [r4, #32]
 914 00e8 2946     		mov	r1, r5
 915 00ea 9847     		blx	r3
 916              	.LVL107:
 917              	.LBE43:
 918              	.LBE46:
 102:subsystems/imu.c ****   pprz_msg_send_IMU_MAG(trans, dev, AC_ID,
 103:subsystems/imu.c ****                         &mag_float.x, &mag_float.y, &mag_float.z);
 104:subsystems/imu.c **** }
 919              		.loc 2 104 0
 920 00ec 06B0     		add	sp, sp, #24
 921              		.cfi_def_cfa_offset 24
 922              		@ sp needed
 923 00ee BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 924              	.LVL108:
 925              	.L33:
 926 00f2 00BF     		.align	2
 927              	.L32:
 928 00f4 00000000 		.word	.LANCHOR0
 929 00f8 0000003A 		.word	973078528
 930 00fc 31000000 		.word	.LC4
 931              		.cfi_endproc
 932              	.LFE485:
 934              		.section	.text.send_gyro,"ax",%progbits
 935              		.align	1
 936              		.thumb
 937              		.thumb_func
 939              	send_gyro:
 940              	.LFB482:
  79:subsystems/imu.c ****   struct FloatRates gyro_float;
 941              		.loc 2 79 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 16
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              	.LVL109:
  81:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO(trans, dev, AC_ID,
 946              		.loc 2 81 0
 947 0000 3C4B     		ldr	r3, .L38
 948 0002 DFED3D6A 		flds	s13, .L38+4
 949 0006 D3ED007A 		flds	s15, [r3]	@ int
  79:subsystems/imu.c ****   struct FloatRates gyro_float;
 950              		.loc 2 79 0
 951 000a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 952              		.cfi_def_cfa_offset 24
 953              		.cfi_offset 4, -24
 954              		.cfi_offset 5, -20
 955              		.cfi_offset 6, -16
 956              		.cfi_offset 7, -12
 957              		.cfi_offset 8, -8
 958              		.cfi_offset 14, -4
  81:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO(trans, dev, AC_ID,
 959              		.loc 2 81 0
 960 000e B8EEE77A 		fsitos	s14, s15
 961 0012 D3ED017A 		flds	s15, [r3, #4]	@ int
 962              	.LBB49:
 963              	.LBB50:
3710:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 964              		.loc 3 3710 0
 965 0016 076A     		ldr	r7, [r0, #32]
 966 0018 D0F80480 		ldr	r8, [r0, #4]
 967              	.LBE50:
 968              	.LBE49:
  81:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO(trans, dev, AC_ID,
 969              		.loc 2 81 0
 970 001c 27EE267A 		fmuls	s14, s14, s13
  79:subsystems/imu.c ****   struct FloatRates gyro_float;
 971              		.loc 2 79 0
 972 0020 86B0     		sub	sp, sp, #24
 973              		.cfi_def_cfa_offset 48
  81:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO(trans, dev, AC_ID,
 974              		.loc 2 81 0
 975 0022 8DED037A 		fsts	s14, [sp, #12]
 976 0026 B8EEE77A 		fsitos	s14, s15
 977 002a D3ED027A 		flds	s15, [r3, #8]	@ int
 978              	.LBB54:
 979              	.LBB51:
3710:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 980              		.loc 3 3710 0
 981 002e 0368     		ldr	r3, [r0]
 982              	.LBE51:
 983              	.LBE54:
  81:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO(trans, dev, AC_ID,
 984              		.loc 2 81 0
 985 0030 F8EEE77A 		fsitos	s15, s15
 986 0034 27EE267A 		fmuls	s14, s14, s13
 987 0038 67EEA67A 		fmuls	s15, s15, s13
 988 003c 0126     		movs	r6, #1
  79:subsystems/imu.c ****   struct FloatRates gyro_float;
 989              		.loc 2 79 0
 990 003e 0D46     		mov	r5, r1
 991 0040 0446     		mov	r4, r0
 992              	.LBB55:
 993              	.LBB52:
3710:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 994              		.loc 3 3710 0
 995 0042 0E21     		movs	r1, #14
 996              	.LVL110:
 997              	.LBE52:
 998              	.LBE55:
  81:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO(trans, dev, AC_ID,
 999              		.loc 2 81 0
 1000 0044 8DED047A 		fsts	s14, [sp, #16]
 1001 0048 CDED057A 		fsts	s15, [sp, #20]
 1002              	.LVL111:
 1003 004c 8DF80B60 		strb	r6, [sp, #11]
 1004              	.LVL112:
 1005              	.LBB56:
 1006              	.LBB53:
3710:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 1007              		.loc 3 3710 0
 1008 0050 3846     		mov	r0, r7
 1009              	.LVL113:
 1010 0052 9847     		blx	r3
 1011              	.LVL114:
 1012 0054 2946     		mov	r1, r5
 1013 0056 0246     		mov	r2, r0
 1014 0058 3846     		mov	r0, r7
 1015 005a C047     		blx	r8
 1016              	.LVL115:
 1017 005c 0028     		cmp	r0, #0
 1018 005e 41D0     		beq	.L35
3711:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 1019              		.loc 3 3711 0
 1020 0060 276A     		ldr	r7, [r4, #32]
 1021 0062 2368     		ldr	r3, [r4]
 1022 0064 D4F81C80 		ldr	r8, [r4, #28]
 1023 0068 3846     		mov	r0, r7
 1024 006a 0E21     		movs	r1, #14
 1025 006c 9847     		blx	r3
 1026              	.LVL116:
 1027 006e 2946     		mov	r1, r5
 1028 0070 0246     		mov	r2, r0
 1029 0072 3846     		mov	r0, r7
 1030 0074 C047     		blx	r8
 1031              	.LVL117:
3712:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1032              		.loc 3 3712 0
 1033 0076 2369     		ldr	r3, [r4, #16]
 1034 0078 206A     		ldr	r0, [r4, #32]
 1035 007a 2946     		mov	r1, r5
 1036 007c 0E22     		movs	r2, #14
 1037 007e 9847     		blx	r3
 1038              	.LVL118:
3713:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_GYRO, "IMU_GYRO"
 1039              		.loc 3 3713 0
 1040 0080 0DF10B03 		add	r3, sp, #11
 1041 0084 0096     		str	r6, [sp]
 1042 0086 0193     		str	r3, [sp, #4]
 1043 0088 A668     		ldr	r6, [r4, #8]
 1044              	.LVL119:
 1045 008a 206A     		ldr	r0, [r4, #32]
 1046 008c 2946     		mov	r1, r5
 1047 008e 0222     		movs	r2, #2
 1048 0090 0023     		movs	r3, #0
 1049              	.LVL120:
 1050 0092 B047     		blx	r6
 1051              	.LVL121:
3714:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _gp);
 1052              		.loc 3 3714 0
 1053 0094 C823     		movs	r3, #200
 1054 0096 0093     		str	r3, [sp]
 1055 0098 184B     		ldr	r3, .L38+8
 1056 009a 0193     		str	r3, [sp, #4]
 1057 009c E668     		ldr	r6, [r4, #12]
 1058 009e 206A     		ldr	r0, [r4, #32]
 1059 00a0 2946     		mov	r1, r5
 1060 00a2 0222     		movs	r2, #2
 1061 00a4 0023     		movs	r3, #0
 1062 00a6 B047     		blx	r6
 1063              	.LVL122:
3715:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _gq);
 1064              		.loc 3 3715 0
 1065 00a8 0426     		movs	r6, #4
 1066 00aa 03AB     		add	r3, sp, #12
 1067              	.LVL123:
 1068 00ac 0096     		str	r6, [sp]
 1069 00ae 0193     		str	r3, [sp, #4]
 1070 00b0 A768     		ldr	r7, [r4, #8]
 1071 00b2 206A     		ldr	r0, [r4, #32]
 1072 00b4 2946     		mov	r1, r5
 1073 00b6 0A22     		movs	r2, #10
 1074 00b8 0023     		movs	r3, #0
 1075              	.LVL124:
 1076 00ba B847     		blx	r7
 1077              	.LVL125:
3716:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _gr);
 1078              		.loc 3 3716 0
 1079 00bc 04AB     		add	r3, sp, #16
 1080              	.LVL126:
 1081 00be 0096     		str	r6, [sp]
 1082 00c0 0193     		str	r3, [sp, #4]
 1083 00c2 206A     		ldr	r0, [r4, #32]
 1084 00c4 A768     		ldr	r7, [r4, #8]
 1085 00c6 2946     		mov	r1, r5
 1086 00c8 0A22     		movs	r2, #10
 1087 00ca 0023     		movs	r3, #0
 1088              	.LVL127:
 1089 00cc B847     		blx	r7
 1090              	.LVL128:
3717:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1091              		.loc 3 3717 0
 1092 00ce 05AB     		add	r3, sp, #20
 1093              	.LVL129:
 1094 00d0 0096     		str	r6, [sp]
 1095 00d2 0193     		str	r3, [sp, #4]
 1096 00d4 A668     		ldr	r6, [r4, #8]
 1097 00d6 206A     		ldr	r0, [r4, #32]
 1098 00d8 0023     		movs	r3, #0
 1099              	.LVL130:
 1100 00da 2946     		mov	r1, r5
 1101 00dc 0A22     		movs	r2, #10
 1102 00de B047     		blx	r6
 1103              	.LVL131:
3718:/home/dino/paparazzi/var/include/messages.h **** 	} else
 1104              		.loc 3 3718 0
 1105 00e0 6369     		ldr	r3, [r4, #20]
 1106 00e2 00E0     		b	.L37
 1107              	.L35:
3720:/home/dino/paparazzi/var/include/messages.h **** }
 1108              		.loc 3 3720 0
 1109 00e4 A369     		ldr	r3, [r4, #24]
 1110              	.L37:
 1111 00e6 206A     		ldr	r0, [r4, #32]
 1112 00e8 2946     		mov	r1, r5
 1113 00ea 9847     		blx	r3
 1114              	.LVL132:
 1115              	.LBE53:
 1116              	.LBE56:
  84:subsystems/imu.c **** 
 1117              		.loc 2 84 0
 1118 00ec 06B0     		add	sp, sp, #24
 1119              		.cfi_def_cfa_offset 24
 1120              		@ sp needed
 1121 00ee BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1122              	.LVL133:
 1123              	.L39:
 1124 00f2 00BF     		.align	2
 1125              	.L38:
 1126 00f4 00000000 		.word	.LANCHOR0
 1127 00f8 00008039 		.word	964689920
 1128 00fc 39000000 		.word	.LC5
 1129              		.cfi_endproc
 1130              	.LFE482:
 1132              		.section	.text.send_mag_scaled,"ax",%progbits
 1133              		.align	1
 1134              		.thumb
 1135              		.thumb_func
 1137              	send_mag_scaled:
 1138              	.LFB484:
  93:subsystems/imu.c ****   pprz_msg_send_IMU_MAG_SCALED(trans, dev, AC_ID,
 1139              		.loc 2 93 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 8
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143              	.LVL134:
 1144 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1145              		.cfi_def_cfa_offset 40
 1146              		.cfi_offset 4, -24
 1147              		.cfi_offset 5, -20
 1148              		.cfi_offset 6, -16
 1149              		.cfi_offset 7, -12
 1150              		.cfi_offset 8, -8
 1151              		.cfi_offset 14, -4
 1152              	.LBB59:
 1153              	.LBB60:
2399:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 1154              		.loc 3 2399 0
 1155 0004 076A     		ldr	r7, [r0, #32]
 1156 0006 D0F80480 		ldr	r8, [r0, #4]
 1157 000a 0368     		ldr	r3, [r0]
 1158 000c 0126     		movs	r6, #1
 1159              	.LBE60:
 1160              	.LBE59:
  93:subsystems/imu.c ****   pprz_msg_send_IMU_MAG_SCALED(trans, dev, AC_ID,
 1161              		.loc 2 93 0
 1162 000e 0D46     		mov	r5, r1
 1163              	.LVL135:
 1164 0010 0446     		mov	r4, r0
 1165              	.LBB62:
 1166              	.LBB61:
2399:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 1167              		.loc 3 2399 0
 1168 0012 0E21     		movs	r1, #14
 1169              	.LVL136:
 1170 0014 8DF80F60 		strb	r6, [sp, #15]
 1171              	.LVL137:
 1172 0018 3846     		mov	r0, r7
 1173              	.LVL138:
 1174 001a 9847     		blx	r3
 1175              	.LVL139:
 1176 001c 2946     		mov	r1, r5
 1177 001e 0246     		mov	r2, r0
 1178 0020 3846     		mov	r0, r7
 1179 0022 C047     		blx	r8
 1180              	.LVL140:
 1181 0024 0028     		cmp	r0, #0
 1182 0026 45D0     		beq	.L41
2400:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 1183              		.loc 3 2400 0
 1184 0028 276A     		ldr	r7, [r4, #32]
 1185 002a 2368     		ldr	r3, [r4]
 1186 002c D4F81C80 		ldr	r8, [r4, #28]
 1187 0030 3846     		mov	r0, r7
 1188 0032 0E21     		movs	r1, #14
 1189 0034 9847     		blx	r3
 1190              	.LVL141:
 1191 0036 2946     		mov	r1, r5
 1192 0038 0246     		mov	r2, r0
 1193 003a 3846     		mov	r0, r7
 1194 003c C047     		blx	r8
 1195              	.LVL142:
2401:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1196              		.loc 3 2401 0
 1197 003e 2369     		ldr	r3, [r4, #16]
 1198 0040 206A     		ldr	r0, [r4, #32]
2404:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _my);
 1199              		.loc 3 2404 0
 1200 0042 DFF88480 		ldr	r8, .L44+4
2401:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1201              		.loc 3 2401 0
 1202 0046 2946     		mov	r1, r5
 1203 0048 0E22     		movs	r2, #14
 1204 004a 9847     		blx	r3
 1205              	.LVL143:
2402:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_MAG_SCALED, "IMU
 1206              		.loc 3 2402 0
 1207 004c 0DF10F03 		add	r3, sp, #15
 1208 0050 0096     		str	r6, [sp]
 1209 0052 0193     		str	r3, [sp, #4]
 1210 0054 A668     		ldr	r6, [r4, #8]
 1211              	.LVL144:
 1212 0056 206A     		ldr	r0, [r4, #32]
 1213 0058 2946     		mov	r1, r5
 1214 005a 0222     		movs	r2, #2
 1215 005c 0023     		movs	r3, #0
 1216              	.LVL145:
 1217 005e B047     		blx	r6
 1218              	.LVL146:
2403:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mx);
 1219              		.loc 3 2403 0
 1220 0060 8523     		movs	r3, #133
 1221 0062 0093     		str	r3, [sp]
 1222 0064 174B     		ldr	r3, .L44
 1223 0066 0193     		str	r3, [sp, #4]
2404:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _my);
 1224              		.loc 3 2404 0
 1225 0068 0427     		movs	r7, #4
2403:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mx);
 1226              		.loc 3 2403 0
 1227 006a E668     		ldr	r6, [r4, #12]
 1228 006c 206A     		ldr	r0, [r4, #32]
 1229 006e 2946     		mov	r1, r5
 1230 0070 0222     		movs	r2, #2
 1231 0072 0023     		movs	r3, #0
 1232 0074 B047     		blx	r6
 1233              	.LVL147:
2404:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _my);
 1234              		.loc 3 2404 0
 1235 0076 206A     		ldr	r0, [r4, #32]
 1236 0078 A668     		ldr	r6, [r4, #8]
 1237 007a 0097     		str	r7, [sp]
 1238 007c 2946     		mov	r1, r5
 1239 007e 0722     		movs	r2, #7
 1240 0080 0023     		movs	r3, #0
 1241 0082 CDF80480 		str	r8, [sp, #4]
 1242 0086 B047     		blx	r6
 1243              	.LVL148:
2405:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _mz);
 1244              		.loc 3 2405 0
 1245 0088 08EB0703 		add	r3, r8, r7
 1246 008c 0193     		str	r3, [sp, #4]
 1247 008e 206A     		ldr	r0, [r4, #32]
 1248 0090 A668     		ldr	r6, [r4, #8]
 1249 0092 0097     		str	r7, [sp]
 1250 0094 2946     		mov	r1, r5
 1251 0096 0722     		movs	r2, #7
 1252 0098 0023     		movs	r3, #0
 1253 009a B047     		blx	r6
 1254              	.LVL149:
2406:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1255              		.loc 3 2406 0
 1256 009c 08F10806 		add	r6, r8, #8
 1257 00a0 0196     		str	r6, [sp, #4]
 1258 00a2 0023     		movs	r3, #0
 1259 00a4 0097     		str	r7, [sp]
 1260 00a6 A668     		ldr	r6, [r4, #8]
 1261 00a8 206A     		ldr	r0, [r4, #32]
 1262 00aa 2946     		mov	r1, r5
 1263 00ac 0722     		movs	r2, #7
 1264 00ae B047     		blx	r6
 1265              	.LVL150:
2407:/home/dino/paparazzi/var/include/messages.h **** 	} else
 1266              		.loc 3 2407 0
 1267 00b0 6369     		ldr	r3, [r4, #20]
 1268 00b2 00E0     		b	.L43
 1269              	.L41:
2409:/home/dino/paparazzi/var/include/messages.h **** }
 1270              		.loc 3 2409 0
 1271 00b4 A369     		ldr	r3, [r4, #24]
 1272              	.L43:
 1273 00b6 206A     		ldr	r0, [r4, #32]
 1274 00b8 2946     		mov	r1, r5
 1275 00ba 9847     		blx	r3
 1276              	.LVL151:
 1277              	.LBE61:
 1278              	.LBE62:
  96:subsystems/imu.c **** 
 1279              		.loc 2 96 0
 1280 00bc 04B0     		add	sp, sp, #16
 1281              		.cfi_def_cfa_offset 24
 1282              		@ sp needed
 1283 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1284              	.LVL152:
 1285              	.L45:
 1286 00c2 00BF     		.align	2
 1287              	.L44:
 1288 00c4 42000000 		.word	.LC6
 1289 00c8 18000000 		.word	.LANCHOR0+24
 1290              		.cfi_endproc
 1291              	.LFE484:
 1293              		.section	.text.send_accel_scaled,"ax",%progbits
 1294              		.align	1
 1295              		.thumb
 1296              		.thumb_func
 1298              	send_accel_scaled:
 1299              	.LFB478:
  53:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL_SCALED(trans, dev, AC_ID,
 1300              		.loc 2 53 0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 8
 1303              		@ frame_needed = 0, uses_anonymous_args = 0
 1304              	.LVL153:
 1305 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1306              		.cfi_def_cfa_offset 40
 1307              		.cfi_offset 4, -24
 1308              		.cfi_offset 5, -20
 1309              		.cfi_offset 6, -16
 1310              		.cfi_offset 7, -12
 1311              		.cfi_offset 8, -8
 1312              		.cfi_offset 14, -4
 1313              	.LBB65:
 1314              	.LBB66:
2384:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 1315              		.loc 3 2384 0
 1316 0004 076A     		ldr	r7, [r0, #32]
 1317 0006 D0F80480 		ldr	r8, [r0, #4]
 1318 000a 0368     		ldr	r3, [r0]
 1319 000c 0126     		movs	r6, #1
 1320              	.LBE66:
 1321              	.LBE65:
  53:subsystems/imu.c ****   pprz_msg_send_IMU_ACCEL_SCALED(trans, dev, AC_ID,
 1322              		.loc 2 53 0
 1323 000e 0D46     		mov	r5, r1
 1324              	.LVL154:
 1325 0010 0446     		mov	r4, r0
 1326              	.LBB68:
 1327              	.LBB67:
2384:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 1328              		.loc 3 2384 0
 1329 0012 0E21     		movs	r1, #14
 1330              	.LVL155:
 1331 0014 8DF80F60 		strb	r6, [sp, #15]
 1332              	.LVL156:
 1333 0018 3846     		mov	r0, r7
 1334              	.LVL157:
 1335 001a 9847     		blx	r3
 1336              	.LVL158:
 1337 001c 2946     		mov	r1, r5
 1338 001e 0246     		mov	r2, r0
 1339 0020 3846     		mov	r0, r7
 1340 0022 C047     		blx	r8
 1341              	.LVL159:
 1342 0024 0028     		cmp	r0, #0
 1343 0026 45D0     		beq	.L47
2385:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 1344              		.loc 3 2385 0
 1345 0028 276A     		ldr	r7, [r4, #32]
 1346 002a 2368     		ldr	r3, [r4]
 1347 002c D4F81C80 		ldr	r8, [r4, #28]
 1348 0030 3846     		mov	r0, r7
 1349 0032 0E21     		movs	r1, #14
 1350 0034 9847     		blx	r3
 1351              	.LVL160:
 1352 0036 2946     		mov	r1, r5
 1353 0038 0246     		mov	r2, r0
 1354 003a 3846     		mov	r0, r7
 1355 003c C047     		blx	r8
 1356              	.LVL161:
2386:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1357              		.loc 3 2386 0
 1358 003e 2369     		ldr	r3, [r4, #16]
 1359 0040 206A     		ldr	r0, [r4, #32]
2389:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ay);
 1360              		.loc 3 2389 0
 1361 0042 DFF88480 		ldr	r8, .L50+4
2386:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1362              		.loc 3 2386 0
 1363 0046 2946     		mov	r1, r5
 1364 0048 0E22     		movs	r2, #14
 1365 004a 9847     		blx	r3
 1366              	.LVL162:
2387:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_ACCEL_SCALED, "I
 1367              		.loc 3 2387 0
 1368 004c 0DF10F03 		add	r3, sp, #15
 1369 0050 0096     		str	r6, [sp]
 1370 0052 0193     		str	r3, [sp, #4]
 1371 0054 A668     		ldr	r6, [r4, #8]
 1372              	.LVL163:
 1373 0056 206A     		ldr	r0, [r4, #32]
 1374 0058 2946     		mov	r1, r5
 1375 005a 0222     		movs	r2, #2
 1376 005c 0023     		movs	r3, #0
 1377              	.LVL164:
 1378 005e B047     		blx	r6
 1379              	.LVL165:
2388:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ax);
 1380              		.loc 3 2388 0
 1381 0060 8423     		movs	r3, #132
 1382 0062 0093     		str	r3, [sp]
 1383 0064 174B     		ldr	r3, .L50
 1384 0066 0193     		str	r3, [sp, #4]
2389:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ay);
 1385              		.loc 3 2389 0
 1386 0068 0427     		movs	r7, #4
2388:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ax);
 1387              		.loc 3 2388 0
 1388 006a E668     		ldr	r6, [r4, #12]
 1389 006c 206A     		ldr	r0, [r4, #32]
 1390 006e 2946     		mov	r1, r5
 1391 0070 0222     		movs	r2, #2
 1392 0072 0023     		movs	r3, #0
 1393 0074 B047     		blx	r6
 1394              	.LVL166:
2389:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _ay);
 1395              		.loc 3 2389 0
 1396 0076 206A     		ldr	r0, [r4, #32]
 1397 0078 A668     		ldr	r6, [r4, #8]
 1398 007a 0097     		str	r7, [sp]
 1399 007c 2946     		mov	r1, r5
 1400 007e 0722     		movs	r2, #7
 1401 0080 0023     		movs	r3, #0
 1402 0082 CDF80480 		str	r8, [sp, #4]
 1403 0086 B047     		blx	r6
 1404              	.LVL167:
2390:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _az);
 1405              		.loc 3 2390 0
 1406 0088 08EB0703 		add	r3, r8, r7
 1407 008c 0193     		str	r3, [sp, #4]
 1408 008e 206A     		ldr	r0, [r4, #32]
 1409 0090 A668     		ldr	r6, [r4, #8]
 1410 0092 0097     		str	r7, [sp]
 1411 0094 2946     		mov	r1, r5
 1412 0096 0722     		movs	r2, #7
 1413 0098 0023     		movs	r3, #0
 1414 009a B047     		blx	r6
 1415              	.LVL168:
2391:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1416              		.loc 3 2391 0
 1417 009c 08F10806 		add	r6, r8, #8
 1418 00a0 0196     		str	r6, [sp, #4]
 1419 00a2 0023     		movs	r3, #0
 1420 00a4 0097     		str	r7, [sp]
 1421 00a6 A668     		ldr	r6, [r4, #8]
 1422 00a8 206A     		ldr	r0, [r4, #32]
 1423 00aa 2946     		mov	r1, r5
 1424 00ac 0722     		movs	r2, #7
 1425 00ae B047     		blx	r6
 1426              	.LVL169:
2392:/home/dino/paparazzi/var/include/messages.h **** 	} else
 1427              		.loc 3 2392 0
 1428 00b0 6369     		ldr	r3, [r4, #20]
 1429 00b2 00E0     		b	.L49
 1430              	.L47:
2394:/home/dino/paparazzi/var/include/messages.h **** }
 1431              		.loc 3 2394 0
 1432 00b4 A369     		ldr	r3, [r4, #24]
 1433              	.L49:
 1434 00b6 206A     		ldr	r0, [r4, #32]
 1435 00b8 2946     		mov	r1, r5
 1436 00ba 9847     		blx	r3
 1437              	.LVL170:
 1438              	.LBE67:
 1439              	.LBE68:
  56:subsystems/imu.c **** 
 1440              		.loc 2 56 0
 1441 00bc 04B0     		add	sp, sp, #16
 1442              		.cfi_def_cfa_offset 24
 1443              		@ sp needed
 1444 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1445              	.LVL171:
 1446              	.L51:
 1447 00c2 00BF     		.align	2
 1448              	.L50:
 1449 00c4 51000000 		.word	.LC7
 1450 00c8 0C000000 		.word	.LANCHOR0+12
 1451              		.cfi_endproc
 1452              	.LFE478:
 1454              		.section	.text.send_gyro_scaled,"ax",%progbits
 1455              		.align	1
 1456              		.thumb
 1457              		.thumb_func
 1459              	send_gyro_scaled:
 1460              	.LFB481:
  73:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO_SCALED(trans, dev, AC_ID,
 1461              		.loc 2 73 0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 8
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465              	.LVL172:
 1466 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1467              		.cfi_def_cfa_offset 40
 1468              		.cfi_offset 4, -24
 1469              		.cfi_offset 5, -20
 1470              		.cfi_offset 6, -16
 1471              		.cfi_offset 7, -12
 1472              		.cfi_offset 8, -8
 1473              		.cfi_offset 14, -4
 1474              	.LBB71:
 1475              	.LBB72:
2369:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 1476              		.loc 3 2369 0
 1477 0004 076A     		ldr	r7, [r0, #32]
 1478 0006 D0F80480 		ldr	r8, [r0, #4]
 1479 000a 0368     		ldr	r3, [r0]
 1480 000c 0126     		movs	r6, #1
 1481              	.LBE72:
 1482              	.LBE71:
  73:subsystems/imu.c ****   pprz_msg_send_IMU_GYRO_SCALED(trans, dev, AC_ID,
 1483              		.loc 2 73 0
 1484 000e 0D46     		mov	r5, r1
 1485              	.LVL173:
 1486 0010 0446     		mov	r4, r0
 1487              	.LBB74:
 1488              	.LBB73:
2369:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 1489              		.loc 3 2369 0
 1490 0012 0E21     		movs	r1, #14
 1491              	.LVL174:
 1492 0014 8DF80F60 		strb	r6, [sp, #15]
 1493              	.LVL175:
 1494 0018 3846     		mov	r0, r7
 1495              	.LVL176:
 1496 001a 9847     		blx	r3
 1497              	.LVL177:
 1498 001c 2946     		mov	r1, r5
 1499 001e 0246     		mov	r2, r0
 1500 0020 3846     		mov	r0, r7
 1501 0022 C047     		blx	r8
 1502              	.LVL178:
 1503 0024 0028     		cmp	r0, #0
 1504 0026 45D0     		beq	.L53
2370:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 1505              		.loc 3 2370 0
 1506 0028 276A     		ldr	r7, [r4, #32]
 1507 002a 2368     		ldr	r3, [r4]
 1508 002c D4F81C80 		ldr	r8, [r4, #28]
 1509 0030 3846     		mov	r0, r7
 1510 0032 0E21     		movs	r1, #14
 1511 0034 9847     		blx	r3
 1512              	.LVL179:
 1513 0036 2946     		mov	r1, r5
 1514 0038 0246     		mov	r2, r0
 1515 003a 3846     		mov	r0, r7
 1516 003c C047     		blx	r8
 1517              	.LVL180:
2371:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1518              		.loc 3 2371 0
 1519 003e 2369     		ldr	r3, [r4, #16]
 1520 0040 206A     		ldr	r0, [r4, #32]
2374:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gq);
 1521              		.loc 3 2374 0
 1522 0042 DFF88480 		ldr	r8, .L56+4
2371:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 1523              		.loc 3 2371 0
 1524 0046 2946     		mov	r1, r5
 1525 0048 0E22     		movs	r2, #14
 1526 004a 9847     		blx	r3
 1527              	.LVL181:
2372:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMU_GYRO_SCALED, "IM
 1528              		.loc 3 2372 0
 1529 004c 0DF10F03 		add	r3, sp, #15
 1530 0050 0096     		str	r6, [sp]
 1531 0052 0193     		str	r3, [sp, #4]
 1532 0054 A668     		ldr	r6, [r4, #8]
 1533              	.LVL182:
 1534 0056 206A     		ldr	r0, [r4, #32]
 1535 0058 2946     		mov	r1, r5
 1536 005a 0222     		movs	r2, #2
 1537 005c 0023     		movs	r3, #0
 1538              	.LVL183:
 1539 005e B047     		blx	r6
 1540              	.LVL184:
2373:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gp);
 1541              		.loc 3 2373 0
 1542 0060 8323     		movs	r3, #131
 1543 0062 0093     		str	r3, [sp]
 1544 0064 174B     		ldr	r3, .L56
 1545 0066 0193     		str	r3, [sp, #4]
2374:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gq);
 1546              		.loc 3 2374 0
 1547 0068 0427     		movs	r7, #4
2373:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gp);
 1548              		.loc 3 2373 0
 1549 006a E668     		ldr	r6, [r4, #12]
 1550 006c 206A     		ldr	r0, [r4, #32]
 1551 006e 2946     		mov	r1, r5
 1552 0070 0222     		movs	r2, #2
 1553 0072 0023     		movs	r3, #0
 1554 0074 B047     		blx	r6
 1555              	.LVL185:
2374:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gq);
 1556              		.loc 3 2374 0
 1557 0076 206A     		ldr	r0, [r4, #32]
 1558 0078 A668     		ldr	r6, [r4, #8]
 1559 007a 0097     		str	r7, [sp]
 1560 007c 2946     		mov	r1, r5
 1561 007e 0722     		movs	r2, #7
 1562 0080 0023     		movs	r3, #0
 1563 0082 CDF80480 		str	r8, [sp, #4]
 1564 0086 B047     		blx	r6
 1565              	.LVL186:
2375:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _gr);
 1566              		.loc 3 2375 0
 1567 0088 08EB0703 		add	r3, r8, r7
 1568 008c 0193     		str	r3, [sp, #4]
 1569 008e 206A     		ldr	r0, [r4, #32]
 1570 0090 A668     		ldr	r6, [r4, #8]
 1571 0092 0097     		str	r7, [sp]
 1572 0094 2946     		mov	r1, r5
 1573 0096 0722     		movs	r2, #7
 1574 0098 0023     		movs	r3, #0
 1575 009a B047     		blx	r6
 1576              	.LVL187:
2376:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1577              		.loc 3 2376 0
 1578 009c 08F10806 		add	r6, r8, #8
 1579 00a0 0196     		str	r6, [sp, #4]
 1580 00a2 0023     		movs	r3, #0
 1581 00a4 0097     		str	r7, [sp]
 1582 00a6 A668     		ldr	r6, [r4, #8]
 1583 00a8 206A     		ldr	r0, [r4, #32]
 1584 00aa 2946     		mov	r1, r5
 1585 00ac 0722     		movs	r2, #7
 1586 00ae B047     		blx	r6
 1587              	.LVL188:
2377:/home/dino/paparazzi/var/include/messages.h **** 	} else
 1588              		.loc 3 2377 0
 1589 00b0 6369     		ldr	r3, [r4, #20]
 1590 00b2 00E0     		b	.L55
 1591              	.L53:
2379:/home/dino/paparazzi/var/include/messages.h **** }
 1592              		.loc 3 2379 0
 1593 00b4 A369     		ldr	r3, [r4, #24]
 1594              	.L55:
 1595 00b6 206A     		ldr	r0, [r4, #32]
 1596 00b8 2946     		mov	r1, r5
 1597 00ba 9847     		blx	r3
 1598              	.LVL189:
 1599              	.LBE73:
 1600              	.LBE74:
  76:subsystems/imu.c **** 
 1601              		.loc 2 76 0
 1602 00bc 04B0     		add	sp, sp, #16
 1603              		.cfi_def_cfa_offset 24
 1604              		@ sp needed
 1605 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1606              	.LVL190:
 1607              	.L57:
 1608 00c2 00BF     		.align	2
 1609              	.L56:
 1610 00c4 62000000 		.word	.LC8
 1611 00c8 00000000 		.word	.LANCHOR0
 1612              		.cfi_endproc
 1613              	.LFE481:
 1615              		.section	.text.AbiSendMsgBODY_TO_IMU_QUAT.constprop.10,"ax",%progbits
 1616              		.align	1
 1617              		.thumb
 1618              		.thumb_func
 1620              	AbiSendMsgBODY_TO_IMU_QUAT.constprop.10:
 1621              	.LFB498:
 1622              		.file 4 "/home/dino/paparazzi/var/include/abi_messages.h"
   1:/home/dino/paparazzi/var/include/abi_messages.h **** /* Automatically generated by gen_abi from /home/dino/paparazzi/conf/abi.xml */
   2:/home/dino/paparazzi/var/include/abi_messages.h **** /* Please DO NOT EDIT */
   3:/home/dino/paparazzi/var/include/abi_messages.h **** 
   4:/home/dino/paparazzi/var/include/abi_messages.h **** /* Onboard middleware library ABI
   5:/home/dino/paparazzi/var/include/abi_messages.h ****  * send and receive messages of class airborne
   6:/home/dino/paparazzi/var/include/abi_messages.h ****  */
   7:/home/dino/paparazzi/var/include/abi_messages.h **** 
   8:/home/dino/paparazzi/var/include/abi_messages.h **** #ifndef ABI_MESSAGES_H
   9:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_MESSAGES_H
  10:/home/dino/paparazzi/var/include/abi_messages.h **** 
  11:/home/dino/paparazzi/var/include/abi_messages.h **** #include "subsystems/abi_common.h"
  12:/home/dino/paparazzi/var/include/abi_messages.h **** 
  13:/home/dino/paparazzi/var/include/abi_messages.h **** /* Messages IDs */
  14:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_BARO_ABS_ID 0
  15:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_BARO_DIFF_ID 1
  16:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_AGL_ID 2
  17:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_TEMPERATURE_ID 3
  18:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_IMU_GYRO_INT32_ID 4
  19:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_IMU_ACCEL_INT32_ID 5
  20:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_IMU_MAG_INT32_ID 6
  21:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_IMU_LOWPASSED_ID 7
  22:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_BODY_TO_IMU_QUAT_ID 8
  23:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_GEO_MAG_ID 9
  24:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_GPS_ID 10
  25:/home/dino/paparazzi/var/include/abi_messages.h **** 
  26:/home/dino/paparazzi/var/include/abi_messages.h **** /* Array and linked list structure */
  27:/home/dino/paparazzi/var/include/abi_messages.h **** #define ABI_MESSAGE_NB 11
  28:/home/dino/paparazzi/var/include/abi_messages.h **** 
  29:/home/dino/paparazzi/var/include/abi_messages.h **** ABI_EXTERN abi_event* abi_queues[ABI_MESSAGE_NB];
  30:/home/dino/paparazzi/var/include/abi_messages.h **** 
  31:/home/dino/paparazzi/var/include/abi_messages.h **** /* Callbacks */
  32:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackBARO_ABS)(uint8_t sender_id, float pressure);
  33:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackBARO_DIFF)(uint8_t sender_id, float pressure);
  34:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackAGL)(uint8_t sender_id, float distance);
  35:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackTEMPERATURE)(uint8_t sender_id, float temp);
  36:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackIMU_GYRO_INT32)(uint8_t sender_id, uint32_t stamp, struct Int32Rates * g
  37:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackIMU_ACCEL_INT32)(uint8_t sender_id, uint32_t stamp, struct Int32Vect3 * 
  38:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackIMU_MAG_INT32)(uint8_t sender_id, uint32_t stamp, struct Int32Vect3 * ma
  39:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackIMU_LOWPASSED)(uint8_t sender_id, uint32_t stamp, struct Int32Rates * gy
  40:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackBODY_TO_IMU_QUAT)(uint8_t sender_id, struct FloatQuat * q_b2i_f);
  41:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackGEO_MAG)(uint8_t sender_id, struct FloatVect3 * h);
  42:/home/dino/paparazzi/var/include/abi_messages.h **** typedef void (*abi_callbackGPS)(uint8_t sender_id, uint32_t stamp, struct GpsState * gps_s);
  43:/home/dino/paparazzi/var/include/abi_messages.h **** 
  44:/home/dino/paparazzi/var/include/abi_messages.h **** /* Bind and Send functions */
  45:/home/dino/paparazzi/var/include/abi_messages.h **** 
  46:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiBindMsgBARO_ABS(uint8_t sender_id, abi_event * ev, abi_callbackBARO_ABS cb) {
  47:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->id = sender_id;
  48:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->cb = (abi_callback)cb;
  49:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_PREPEND(abi_queues[ABI_BARO_ABS_ID],ev);
  50:/home/dino/paparazzi/var/include/abi_messages.h **** }
  51:/home/dino/paparazzi/var/include/abi_messages.h **** 
  52:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiSendMsgBARO_ABS(uint8_t sender_id, float pressure) {
  53:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
  54:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_FOREACH(abi_queues[ABI_BARO_ABS_ID],e) {
  55:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
  56:/home/dino/paparazzi/var/include/abi_messages.h ****       abi_callbackBARO_ABS cb = (abi_callbackBARO_ABS)(e->cb);
  57:/home/dino/paparazzi/var/include/abi_messages.h ****       cb(sender_id, pressure);
  58:/home/dino/paparazzi/var/include/abi_messages.h ****     }
  59:/home/dino/paparazzi/var/include/abi_messages.h ****   }
  60:/home/dino/paparazzi/var/include/abi_messages.h **** }
  61:/home/dino/paparazzi/var/include/abi_messages.h **** 
  62:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiBindMsgBARO_DIFF(uint8_t sender_id, abi_event * ev, abi_callbackBARO_DIFF cb)
  63:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->id = sender_id;
  64:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->cb = (abi_callback)cb;
  65:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_PREPEND(abi_queues[ABI_BARO_DIFF_ID],ev);
  66:/home/dino/paparazzi/var/include/abi_messages.h **** }
  67:/home/dino/paparazzi/var/include/abi_messages.h **** 
  68:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiSendMsgBARO_DIFF(uint8_t sender_id, float pressure) {
  69:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
  70:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_FOREACH(abi_queues[ABI_BARO_DIFF_ID],e) {
  71:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
  72:/home/dino/paparazzi/var/include/abi_messages.h ****       abi_callbackBARO_DIFF cb = (abi_callbackBARO_DIFF)(e->cb);
  73:/home/dino/paparazzi/var/include/abi_messages.h ****       cb(sender_id, pressure);
  74:/home/dino/paparazzi/var/include/abi_messages.h ****     }
  75:/home/dino/paparazzi/var/include/abi_messages.h ****   }
  76:/home/dino/paparazzi/var/include/abi_messages.h **** }
  77:/home/dino/paparazzi/var/include/abi_messages.h **** 
  78:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiBindMsgAGL(uint8_t sender_id, abi_event * ev, abi_callbackAGL cb) {
  79:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->id = sender_id;
  80:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->cb = (abi_callback)cb;
  81:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_PREPEND(abi_queues[ABI_AGL_ID],ev);
  82:/home/dino/paparazzi/var/include/abi_messages.h **** }
  83:/home/dino/paparazzi/var/include/abi_messages.h **** 
  84:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiSendMsgAGL(uint8_t sender_id, float distance) {
  85:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
  86:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_FOREACH(abi_queues[ABI_AGL_ID],e) {
  87:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
  88:/home/dino/paparazzi/var/include/abi_messages.h ****       abi_callbackAGL cb = (abi_callbackAGL)(e->cb);
  89:/home/dino/paparazzi/var/include/abi_messages.h ****       cb(sender_id, distance);
  90:/home/dino/paparazzi/var/include/abi_messages.h ****     }
  91:/home/dino/paparazzi/var/include/abi_messages.h ****   }
  92:/home/dino/paparazzi/var/include/abi_messages.h **** }
  93:/home/dino/paparazzi/var/include/abi_messages.h **** 
  94:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiBindMsgTEMPERATURE(uint8_t sender_id, abi_event * ev, abi_callbackTEMPERATURE
  95:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->id = sender_id;
  96:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->cb = (abi_callback)cb;
  97:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_PREPEND(abi_queues[ABI_TEMPERATURE_ID],ev);
  98:/home/dino/paparazzi/var/include/abi_messages.h **** }
  99:/home/dino/paparazzi/var/include/abi_messages.h **** 
 100:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiSendMsgTEMPERATURE(uint8_t sender_id, float temp) {
 101:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
 102:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_FOREACH(abi_queues[ABI_TEMPERATURE_ID],e) {
 103:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
 104:/home/dino/paparazzi/var/include/abi_messages.h ****       abi_callbackTEMPERATURE cb = (abi_callbackTEMPERATURE)(e->cb);
 105:/home/dino/paparazzi/var/include/abi_messages.h ****       cb(sender_id, temp);
 106:/home/dino/paparazzi/var/include/abi_messages.h ****     }
 107:/home/dino/paparazzi/var/include/abi_messages.h ****   }
 108:/home/dino/paparazzi/var/include/abi_messages.h **** }
 109:/home/dino/paparazzi/var/include/abi_messages.h **** 
 110:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiBindMsgIMU_GYRO_INT32(uint8_t sender_id, abi_event * ev, abi_callbackIMU_GYRO
 111:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->id = sender_id;
 112:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->cb = (abi_callback)cb;
 113:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_PREPEND(abi_queues[ABI_IMU_GYRO_INT32_ID],ev);
 114:/home/dino/paparazzi/var/include/abi_messages.h **** }
 115:/home/dino/paparazzi/var/include/abi_messages.h **** 
 116:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiSendMsgIMU_GYRO_INT32(uint8_t sender_id, uint32_t stamp, struct Int32Rates * 
 117:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
 118:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_FOREACH(abi_queues[ABI_IMU_GYRO_INT32_ID],e) {
 119:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
 120:/home/dino/paparazzi/var/include/abi_messages.h ****       abi_callbackIMU_GYRO_INT32 cb = (abi_callbackIMU_GYRO_INT32)(e->cb);
 121:/home/dino/paparazzi/var/include/abi_messages.h ****       cb(sender_id, stamp, gyro);
 122:/home/dino/paparazzi/var/include/abi_messages.h ****     }
 123:/home/dino/paparazzi/var/include/abi_messages.h ****   }
 124:/home/dino/paparazzi/var/include/abi_messages.h **** }
 125:/home/dino/paparazzi/var/include/abi_messages.h **** 
 126:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiBindMsgIMU_ACCEL_INT32(uint8_t sender_id, abi_event * ev, abi_callbackIMU_ACC
 127:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->id = sender_id;
 128:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->cb = (abi_callback)cb;
 129:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_PREPEND(abi_queues[ABI_IMU_ACCEL_INT32_ID],ev);
 130:/home/dino/paparazzi/var/include/abi_messages.h **** }
 131:/home/dino/paparazzi/var/include/abi_messages.h **** 
 132:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiSendMsgIMU_ACCEL_INT32(uint8_t sender_id, uint32_t stamp, struct Int32Vect3 *
 133:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
 134:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_FOREACH(abi_queues[ABI_IMU_ACCEL_INT32_ID],e) {
 135:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
 136:/home/dino/paparazzi/var/include/abi_messages.h ****       abi_callbackIMU_ACCEL_INT32 cb = (abi_callbackIMU_ACCEL_INT32)(e->cb);
 137:/home/dino/paparazzi/var/include/abi_messages.h ****       cb(sender_id, stamp, accel);
 138:/home/dino/paparazzi/var/include/abi_messages.h ****     }
 139:/home/dino/paparazzi/var/include/abi_messages.h ****   }
 140:/home/dino/paparazzi/var/include/abi_messages.h **** }
 141:/home/dino/paparazzi/var/include/abi_messages.h **** 
 142:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiBindMsgIMU_MAG_INT32(uint8_t sender_id, abi_event * ev, abi_callbackIMU_MAG_I
 143:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->id = sender_id;
 144:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->cb = (abi_callback)cb;
 145:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_PREPEND(abi_queues[ABI_IMU_MAG_INT32_ID],ev);
 146:/home/dino/paparazzi/var/include/abi_messages.h **** }
 147:/home/dino/paparazzi/var/include/abi_messages.h **** 
 148:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiSendMsgIMU_MAG_INT32(uint8_t sender_id, uint32_t stamp, struct Int32Vect3 * m
 149:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
 150:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_FOREACH(abi_queues[ABI_IMU_MAG_INT32_ID],e) {
 151:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
 152:/home/dino/paparazzi/var/include/abi_messages.h ****       abi_callbackIMU_MAG_INT32 cb = (abi_callbackIMU_MAG_INT32)(e->cb);
 153:/home/dino/paparazzi/var/include/abi_messages.h ****       cb(sender_id, stamp, mag);
 154:/home/dino/paparazzi/var/include/abi_messages.h ****     }
 155:/home/dino/paparazzi/var/include/abi_messages.h ****   }
 156:/home/dino/paparazzi/var/include/abi_messages.h **** }
 157:/home/dino/paparazzi/var/include/abi_messages.h **** 
 158:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiBindMsgIMU_LOWPASSED(uint8_t sender_id, abi_event * ev, abi_callbackIMU_LOWPA
 159:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->id = sender_id;
 160:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->cb = (abi_callback)cb;
 161:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_PREPEND(abi_queues[ABI_IMU_LOWPASSED_ID],ev);
 162:/home/dino/paparazzi/var/include/abi_messages.h **** }
 163:/home/dino/paparazzi/var/include/abi_messages.h **** 
 164:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiSendMsgIMU_LOWPASSED(uint8_t sender_id, uint32_t stamp, struct Int32Rates * g
 165:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
 166:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_FOREACH(abi_queues[ABI_IMU_LOWPASSED_ID],e) {
 167:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
 168:/home/dino/paparazzi/var/include/abi_messages.h ****       abi_callbackIMU_LOWPASSED cb = (abi_callbackIMU_LOWPASSED)(e->cb);
 169:/home/dino/paparazzi/var/include/abi_messages.h ****       cb(sender_id, stamp, gyro, accel, mag);
 170:/home/dino/paparazzi/var/include/abi_messages.h ****     }
 171:/home/dino/paparazzi/var/include/abi_messages.h ****   }
 172:/home/dino/paparazzi/var/include/abi_messages.h **** }
 173:/home/dino/paparazzi/var/include/abi_messages.h **** 
 174:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiBindMsgBODY_TO_IMU_QUAT(uint8_t sender_id, abi_event * ev, abi_callbackBODY_T
 175:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->id = sender_id;
 176:/home/dino/paparazzi/var/include/abi_messages.h ****   ev->cb = (abi_callback)cb;
 177:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_PREPEND(abi_queues[ABI_BODY_TO_IMU_QUAT_ID],ev);
 178:/home/dino/paparazzi/var/include/abi_messages.h **** }
 179:/home/dino/paparazzi/var/include/abi_messages.h **** 
 180:/home/dino/paparazzi/var/include/abi_messages.h **** static inline void AbiSendMsgBODY_TO_IMU_QUAT(uint8_t sender_id, struct FloatQuat * q_b2i_f) {
 1623              		.loc 4 180 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 0
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627              	.LVL191:
 1628 0000 38B5     		push	{r3, r4, r5, lr}
 1629              		.cfi_def_cfa_offset 16
 1630              		.cfi_offset 3, -16
 1631              		.cfi_offset 4, -12
 1632              		.cfi_offset 5, -8
 1633              		.cfi_offset 14, -4
 181:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
 182:/home/dino/paparazzi/var/include/abi_messages.h ****   ABI_FOREACH(abi_queues[ABI_BODY_TO_IMU_QUAT_ID],e) {
 1634              		.loc 4 182 0
 1635 0002 074B     		ldr	r3, .L63
 1636 0004 1C6A     		ldr	r4, [r3, #32]
 1637              	.LVL192:
 180:/home/dino/paparazzi/var/include/abi_messages.h ****   abi_event* e;
 1638              		.loc 4 180 0
 1639 0006 0546     		mov	r5, r0
 1640              	.LVL193:
 1641              	.L59:
 1642              		.loc 4 182 0
 1643 0008 44B1     		cbz	r4, .L62
 183:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
 1644              		.loc 4 183 0
 1645 000a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1646 000c 012B     		cmp	r3, #1
 1647 000e 03D8     		bhi	.L60
 1648              	.LVL194:
 1649              	.LBB75:
 184:/home/dino/paparazzi/var/include/abi_messages.h ****       abi_callbackBODY_TO_IMU_QUAT cb = (abi_callbackBODY_TO_IMU_QUAT)(e->cb);
 185:/home/dino/paparazzi/var/include/abi_messages.h ****       cb(sender_id, q_b2i_f);
 1650              		.loc 4 185 0
 1651 0010 6368     		ldr	r3, [r4, #4]
 1652 0012 0120     		movs	r0, #1
 1653 0014 2946     		mov	r1, r5
 1654 0016 9847     		blx	r3
 1655              	.LVL195:
 1656              	.L60:
 1657              	.LBE75:
 182:/home/dino/paparazzi/var/include/abi_messages.h ****     if (e->id == ABI_BROADCAST || e->id == sender_id) {
 1658              		.loc 4 182 0
 1659 0018 A468     		ldr	r4, [r4, #8]
 1660              	.LVL196:
 1661 001a F5E7     		b	.L59
 1662              	.L62:
 186:/home/dino/paparazzi/var/include/abi_messages.h ****     }
 187:/home/dino/paparazzi/var/include/abi_messages.h ****   }
 188:/home/dino/paparazzi/var/include/abi_messages.h **** }
 1663              		.loc 4 188 0
 1664 001c 38BD     		pop	{r3, r4, r5, pc}
 1665              	.LVL197:
 1666              	.L64:
 1667 001e 00BF     		.align	2
 1668              	.L63:
 1669 0020 00000000 		.word	abi_queues
 1670              		.cfi_endproc
 1671              	.LFE498:
 1673              		.section	.text.orientationGetQuat_f.constprop.11,"ax",%progbits
 1674              		.align	1
 1675              		.thumb
 1676              		.thumb_func
 1678              	orientationGetQuat_f.constprop.11:
 1679              	.LFB497:
 217:./math/pprz_orientation_conversion.h **** {
 1680              		.loc 1 217 0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 0
 1683              		@ frame_needed = 0, uses_anonymous_args = 0
 1684              	.LVL198:
 1685 0000 08B5     		push	{r3, lr}
 1686              		.cfi_def_cfa_offset 8
 1687              		.cfi_offset 3, -8
 1688              		.cfi_offset 14, -4
 219:./math/pprz_orientation_conversion.h ****     orientationCalcQuat_f(orientation);
 1689              		.loc 1 219 0
 1690 0002 0548     		ldr	r0, .L67
 1691 0004 90F88430 		ldrb	r3, [r0, #132]	@ zero_extendqisi2
 1692 0008 1B07     		lsls	r3, r3, #28
 1693 000a 02D4     		bmi	.L66
 220:./math/pprz_orientation_conversion.h ****   }
 1694              		.loc 1 220 0
 1695 000c 8430     		adds	r0, r0, #132
 1696 000e FFF7FEFF 		bl	orientationCalcQuat_f
 1697              	.LVL199:
 1698              	.L66:
 223:./math/pprz_orientation_conversion.h **** 
 1699              		.loc 1 223 0
 1700 0012 0248     		ldr	r0, .L67+4
 1701 0014 08BD     		pop	{r3, pc}
 1702              	.L68:
 1703 0016 00BF     		.align	2
 1704              	.L67:
 1705 0018 00000000 		.word	.LANCHOR0
 1706 001c C8000000 		.word	.LANCHOR0+200
 1707              		.cfi_endproc
 1708              	.LFE497:
 1710              		.section	.text.imu_init,"ax",%progbits
 1711              		.align	1
 1712              		.global	imu_init
 1713              		.thumb
 1714              		.thumb_func
 1716              	imu_init:
 1717              	.LFB486:
 105:subsystems/imu.c **** 
 106:subsystems/imu.c **** #endif /* PERIODIC_TELEMETRY */
 107:subsystems/imu.c **** 
 108:subsystems/imu.c **** struct Imu imu;
 109:subsystems/imu.c **** 
 110:subsystems/imu.c **** void imu_init(void)
 111:subsystems/imu.c **** {
 1718              		.loc 2 111 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 112:subsystems/imu.c **** 
 113:subsystems/imu.c **** #ifdef IMU_POWER_GPIO
 114:subsystems/imu.c ****   gpio_setup_output(IMU_POWER_GPIO);
 115:subsystems/imu.c ****   IMU_POWER_GPIO_ON(IMU_POWER_GPIO);
 116:subsystems/imu.c **** #endif
 117:subsystems/imu.c **** 
 118:subsystems/imu.c ****   /* initialises neutrals */
 119:subsystems/imu.c ****   RATES_ASSIGN(imu.gyro_neutral,  IMU_GYRO_P_NEUTRAL,  IMU_GYRO_Q_NEUTRAL,  IMU_GYRO_R_NEUTRAL);
 1722              		.loc 2 119 0
 1723 0000 2F4B     		ldr	r3, .L70
 1724 0002 0022     		movs	r2, #0
 111:subsystems/imu.c **** 
 1725              		.loc 2 111 0
 1726 0004 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1727              		.cfi_def_cfa_offset 24
 1728              		.cfi_offset 4, -24
 1729              		.cfi_offset 5, -20
 1730              		.cfi_offset 6, -16
 1731              		.cfi_offset 7, -12
 1732              		.cfi_offset 8, -8
 1733              		.cfi_offset 14, -4
 120:subsystems/imu.c **** 
 121:subsystems/imu.c ****   VECT3_ASSIGN(imu.accel_neutral, IMU_ACCEL_X_NEUTRAL, IMU_ACCEL_Y_NEUTRAL, IMU_ACCEL_Z_NEUTRAL);
 1734              		.loc 2 121 0
 1735 0008 6FF04301 		mvn	r1, #67
 119:subsystems/imu.c **** 
 1736              		.loc 2 119 0
 1737 000c DA63     		str	r2, [r3, #60]
 1738 000e 1A64     		str	r2, [r3, #64]
 1739 0010 5A64     		str	r2, [r3, #68]
 122:subsystems/imu.c **** 
 123:subsystems/imu.c **** #if defined IMU_MAG_X_NEUTRAL && defined IMU_MAG_Y_NEUTRAL && defined IMU_MAG_Z_NEUTRAL
 124:subsystems/imu.c ****   VECT3_ASSIGN(imu.mag_neutral,   IMU_MAG_X_NEUTRAL,   IMU_MAG_Y_NEUTRAL,   IMU_MAG_Z_NEUTRAL);
 1740              		.loc 2 124 0
 1741 0012 5A65     		str	r2, [r3, #84]
 1742 0014 9A65     		str	r2, [r3, #88]
 1743 0016 DA65     		str	r2, [r3, #92]
 1744              	.LVL200:
 1745              	.LBB78:
 1746              	.LBB79:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 1747              		.loc 1 183 0
 1748 0018 2A4A     		ldr	r2, .L70+4
 1749              	.LBE79:
 1750              	.LBE78:
 121:subsystems/imu.c **** 
 1751              		.loc 2 121 0
 1752 001a 9964     		str	r1, [r3, #72]
 1753              	.LBB85:
 1754              	.LBB80:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 1755              		.loc 1 183 0
 1756 001c C3F8D820 		str	r2, [r3, #216]	@ float
 1757              	.LBE80:
 1758              	.LBE85:
 125:subsystems/imu.c **** #else
 126:subsystems/imu.c **** #if USE_MAGNETOMETER
 127:subsystems/imu.c ****   INFO("Magnetometer neutrals are set to zero, you should calibrate!")
 128:subsystems/imu.c **** #endif
 129:subsystems/imu.c ****   INT_VECT3_ZERO(imu.mag_neutral);
 130:subsystems/imu.c **** #endif
 131:subsystems/imu.c **** 
 132:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers =
 133:subsystems/imu.c ****   {IMU_BODY_TO_IMU_PHI, IMU_BODY_TO_IMU_THETA, IMU_BODY_TO_IMU_PSI};
 134:subsystems/imu.c ****   orientationSetEulers_f(&imu.body_to_imu, &body_to_imu_eulers);
 135:subsystems/imu.c **** 
 136:subsystems/imu.c **** #if PERIODIC_TELEMETRY
 137:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_ACCEL", send_accel);
 1759              		.loc 2 137 0
 1760 0020 294C     		ldr	r4, .L70+8
 1761 0022 DFF8EC80 		ldr	r8, .L70+80
 1762 0026 294F     		ldr	r7, .L70+12
 138:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_GYRO", send_gyro);
 1763              		.loc 2 138 0
 1764 0028 294E     		ldr	r6, .L70+16
 1765 002a 2A4D     		ldr	r5, .L70+20
 1766              	.LBB86:
 1767              	.LBB81:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 1768              		.loc 1 183 0
 1769 002c 0022     		movs	r2, #0
 1770              	.LBE81:
 1771              	.LBE86:
 121:subsystems/imu.c **** 
 1772              		.loc 2 121 0
 1773 002e 4FF0FF31 		mov	r1, #-1
 1774 0032 D964     		str	r1, [r3, #76]
 1775              	.LBB87:
 1776              	.LBB82:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 1777              		.loc 1 183 0
 1778 0034 C3F8DC20 		str	r2, [r3, #220]	@ float
 1779 0038 C3F8E020 		str	r2, [r3, #224]	@ float
 1780              	.LBE82:
 1781              	.LBE87:
 121:subsystems/imu.c **** 
 1782              		.loc 2 121 0
 1783 003c 6FF03F01 		mvn	r1, #63
 1784              	.LBB88:
 1785              	.LBB83:
 185:./math/pprz_orientation_conversion.h **** }
 1786              		.loc 1 185 0
 1787 0040 1022     		movs	r2, #16
 1788              	.LBE83:
 1789              	.LBE88:
 121:subsystems/imu.c **** 
 1790              		.loc 2 121 0
 1791 0042 1965     		str	r1, [r3, #80]
 1792              	.LBB89:
 1793              	.LBB84:
 185:./math/pprz_orientation_conversion.h **** }
 1794              		.loc 1 185 0
 1795 0044 83F88420 		strb	r2, [r3, #132]
 1796              	.LBE84:
 1797              	.LBE89:
 137:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_GYRO", send_gyro);
 1798              		.loc 2 137 0
 1799 0048 4146     		mov	r1, r8
 1800 004a 3A46     		mov	r2, r7
 1801 004c 2046     		mov	r0, r4
 1802 004e FFF7FEFF 		bl	register_periodic_telemetry
 1803              	.LVL201:
 1804              		.loc 2 138 0
 1805 0052 3146     		mov	r1, r6
 1806 0054 2A46     		mov	r2, r5
 1807 0056 2046     		mov	r0, r4
 1808 0058 FFF7FEFF 		bl	register_periodic_telemetry
 1809              	.LVL202:
 139:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_ACCEL_RAW", send_accel_raw);
 1810              		.loc 2 139 0
 1811 005c 2046     		mov	r0, r4
 1812 005e 1E49     		ldr	r1, .L70+24
 1813 0060 1E4A     		ldr	r2, .L70+28
 1814 0062 FFF7FEFF 		bl	register_periodic_telemetry
 1815              	.LVL203:
 140:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_ACCEL_SCALED", send_accel_scaled);
 1816              		.loc 2 140 0
 1817 0066 2046     		mov	r0, r4
 1818 0068 1D49     		ldr	r1, .L70+32
 1819 006a 1E4A     		ldr	r2, .L70+36
 1820 006c FFF7FEFF 		bl	register_periodic_telemetry
 1821              	.LVL204:
 141:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_ACCEL", send_accel);
 1822              		.loc 2 141 0
 1823 0070 4146     		mov	r1, r8
 1824 0072 3A46     		mov	r2, r7
 1825 0074 2046     		mov	r0, r4
 1826 0076 FFF7FEFF 		bl	register_periodic_telemetry
 1827              	.LVL205:
 142:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_GYRO_RAW", send_gyro_raw);
 1828              		.loc 2 142 0
 1829 007a 2046     		mov	r0, r4
 1830 007c 1A49     		ldr	r1, .L70+40
 1831 007e 1B4A     		ldr	r2, .L70+44
 1832 0080 FFF7FEFF 		bl	register_periodic_telemetry
 1833              	.LVL206:
 143:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_GYRO_SCALED", send_gyro_scaled);
 1834              		.loc 2 143 0
 1835 0084 2046     		mov	r0, r4
 1836 0086 1A49     		ldr	r1, .L70+48
 1837 0088 1A4A     		ldr	r2, .L70+52
 1838 008a FFF7FEFF 		bl	register_periodic_telemetry
 1839              	.LVL207:
 144:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_GYRO", send_gyro);
 1840              		.loc 2 144 0
 1841 008e 3146     		mov	r1, r6
 1842 0090 2A46     		mov	r2, r5
 1843 0092 2046     		mov	r0, r4
 1844 0094 FFF7FEFF 		bl	register_periodic_telemetry
 1845              	.LVL208:
 145:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_MAG_RAW", send_mag_raw);
 1846              		.loc 2 145 0
 1847 0098 2046     		mov	r0, r4
 1848 009a 1749     		ldr	r1, .L70+56
 1849 009c 174A     		ldr	r2, .L70+60
 1850 009e FFF7FEFF 		bl	register_periodic_telemetry
 1851              	.LVL209:
 146:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_MAG_SCALED", send_mag_scaled);
 1852              		.loc 2 146 0
 1853 00a2 2046     		mov	r0, r4
 1854 00a4 1649     		ldr	r1, .L70+64
 1855 00a6 174A     		ldr	r2, .L70+68
 1856 00a8 FFF7FEFF 		bl	register_periodic_telemetry
 1857              	.LVL210:
 147:subsystems/imu.c ****   register_periodic_telemetry(DefaultPeriodic, "IMU_MAG", send_mag);
 1858              		.loc 2 147 0
 1859 00ac 2046     		mov	r0, r4
 1860 00ae 1649     		ldr	r1, .L70+72
 1861 00b0 164A     		ldr	r2, .L70+76
 1862 00b2 FFF7FEFF 		bl	register_periodic_telemetry
 1863              	.LVL211:
 148:subsystems/imu.c **** #endif // DOWNLINK
 149:subsystems/imu.c **** 
 150:subsystems/imu.c ****   imu_impl_init();
 151:subsystems/imu.c **** }
 1864              		.loc 2 151 0
 1865 00b6 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1866              		.cfi_restore 14
 1867              		.cfi_restore 8
 1868              		.cfi_restore 7
 1869              		.cfi_restore 6
 1870              		.cfi_restore 5
 1871              		.cfi_restore 4
 1872              		.cfi_def_cfa_offset 0
 150:subsystems/imu.c **** }
 1873              		.loc 2 150 0
 1874 00ba FFF7FEBF 		b	imu_impl_init
 1875              	.LVL212:
 1876              	.L71:
 1877 00be 00BF     		.align	2
 1878              	.L70:
 1879 00c0 00000000 		.word	.LANCHOR0
 1880 00c4 DB0F4940 		.word	1078530011
 1881 00c8 00000000 		.word	pprz_telemetry
 1882 00cc 00000000 		.word	send_accel
 1883 00d0 39000000 		.word	.LC5
 1884 00d4 00000000 		.word	send_gyro
 1885 00d8 0C000000 		.word	.LC1
 1886 00dc 00000000 		.word	send_accel_raw
 1887 00e0 51000000 		.word	.LC7
 1888 00e4 00000000 		.word	send_accel_scaled
 1889 00e8 1A000000 		.word	.LC2
 1890 00ec 00000000 		.word	send_gyro_raw
 1891 00f0 62000000 		.word	.LC8
 1892 00f4 00000000 		.word	send_gyro_scaled
 1893 00f8 00000000 		.word	.LC0
 1894 00fc 00000000 		.word	send_mag_raw
 1895 0100 42000000 		.word	.LC6
 1896 0104 00000000 		.word	send_mag_scaled
 1897 0108 31000000 		.word	.LC4
 1898 010c 00000000 		.word	send_mag
 1899 0110 27000000 		.word	.LC3
 1900              		.cfi_endproc
 1901              	.LFE486:
 1903              		.section	.text.imu_SetBodyToImuPhi,"ax",%progbits
 1904              		.align	1
 1905              		.global	imu_SetBodyToImuPhi
 1906              		.thumb
 1907              		.thumb_func
 1909              	imu_SetBodyToImuPhi:
 1910              	.LFB487:
 152:subsystems/imu.c **** 
 153:subsystems/imu.c **** 
 154:subsystems/imu.c **** void imu_SetBodyToImuPhi(float phi)
 155:subsystems/imu.c **** {
 1911              		.loc 2 155 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 16
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915              	.LVL213:
 1916 0000 30B5     		push	{r4, r5, lr}
 1917              		.cfi_def_cfa_offset 12
 1918              		.cfi_offset 4, -12
 1919              		.cfi_offset 5, -8
 1920              		.cfi_offset 14, -4
 156:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers;
 157:subsystems/imu.c ****   memcpy(&body_to_imu_eulers, orientationGetEulers_f(&imu.body_to_imu), sizeof(struct FloatEulers))
 1921              		.loc 2 157 0
 1922 0002 104C     		ldr	r4, .L73
 155:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers;
 1923              		.loc 2 155 0
 1924 0004 85B0     		sub	sp, sp, #20
 1925              		.cfi_def_cfa_offset 32
 155:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers;
 1926              		.loc 2 155 0
 1927 0006 0546     		mov	r5, r0	@ float
 1928              		.loc 2 157 0
 1929 0008 04F18400 		add	r0, r4, #132
 1930              	.LVL214:
 1931 000c FFF7FEFF 		bl	orientationGetEulers_f
 1932              	.LVL215:
 1933 0010 0246     		mov	r2, r0
 1934 0012 0068     		ldr	r0, [r0]	@ unaligned
 1935 0014 5168     		ldr	r1, [r2, #4]	@ unaligned
 1936 0016 01AB     		add	r3, sp, #4
 1937 0018 03C3     		stmia	r3!, {r0, r1}
 1938 001a 9068     		ldr	r0, [r2, #8]	@ unaligned
 1939 001c 1860     		str	r0, [r3]	@ unaligned
 1940              	.LVL216:
 1941              	.LBB92:
 1942              	.LBB93:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 1943              		.loc 1 183 0
 1944 001e 029B     		ldr	r3, [sp, #8]	@ float
 1945              	.LVL217:
 1946 0020 C4F8DC30 		str	r3, [r4, #220]	@ float
 1947 0024 039B     		ldr	r3, [sp, #12]	@ float
 1948 0026 C4F8E030 		str	r3, [r4, #224]	@ float
 185:./math/pprz_orientation_conversion.h **** }
 1949              		.loc 1 185 0
 1950 002a 1023     		movs	r3, #16
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 1951              		.loc 1 183 0
 1952 002c C4F8D850 		str	r5, [r4, #216]	@ float
 185:./math/pprz_orientation_conversion.h **** }
 1953              		.loc 1 185 0
 1954 0030 84F88430 		strb	r3, [r4, #132]
 1955              	.LBE93:
 1956              	.LBE92:
 158:subsystems/imu.c ****   body_to_imu_eulers.phi = phi;
 159:subsystems/imu.c ****   orientationSetEulers_f(&imu.body_to_imu, &body_to_imu_eulers);
 160:subsystems/imu.c ****   AbiSendMsgBODY_TO_IMU_QUAT(1, orientationGetQuat_f(&imu.body_to_imu));
 1957              		.loc 2 160 0
 1958 0034 FFF7FEFF 		bl	orientationGetQuat_f.constprop.11
 1959              	.LVL218:
 161:subsystems/imu.c **** }
 1960              		.loc 2 161 0
 1961 0038 05B0     		add	sp, sp, #20
 1962              		.cfi_def_cfa_offset 12
 1963              		@ sp needed
 1964 003a BDE83040 		pop	{r4, r5, lr}
 1965              		.cfi_restore 14
 1966              		.cfi_restore 5
 1967              		.cfi_restore 4
 1968              		.cfi_def_cfa_offset 0
 1969              	.LVL219:
 160:subsystems/imu.c **** }
 1970              		.loc 2 160 0
 1971 003e FFF7FEBF 		b	AbiSendMsgBODY_TO_IMU_QUAT.constprop.10
 1972              	.LVL220:
 1973              	.L74:
 1974 0042 00BF     		.align	2
 1975              	.L73:
 1976 0044 00000000 		.word	.LANCHOR0
 1977              		.cfi_endproc
 1978              	.LFE487:
 1980              		.section	.text.imu_SetBodyToImuTheta,"ax",%progbits
 1981              		.align	1
 1982              		.global	imu_SetBodyToImuTheta
 1983              		.thumb
 1984              		.thumb_func
 1986              	imu_SetBodyToImuTheta:
 1987              	.LFB488:
 162:subsystems/imu.c **** 
 163:subsystems/imu.c **** void imu_SetBodyToImuTheta(float theta)
 164:subsystems/imu.c **** {
 1988              		.loc 2 164 0
 1989              		.cfi_startproc
 1990              		@ args = 0, pretend = 0, frame = 16
 1991              		@ frame_needed = 0, uses_anonymous_args = 0
 1992              	.LVL221:
 1993 0000 30B5     		push	{r4, r5, lr}
 1994              		.cfi_def_cfa_offset 12
 1995              		.cfi_offset 4, -12
 1996              		.cfi_offset 5, -8
 1997              		.cfi_offset 14, -4
 165:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers;
 166:subsystems/imu.c ****   memcpy(&body_to_imu_eulers, orientationGetEulers_f(&imu.body_to_imu), sizeof(struct FloatEulers))
 1998              		.loc 2 166 0
 1999 0002 104C     		ldr	r4, .L76
 164:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers;
 2000              		.loc 2 164 0
 2001 0004 85B0     		sub	sp, sp, #20
 2002              		.cfi_def_cfa_offset 32
 164:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers;
 2003              		.loc 2 164 0
 2004 0006 0546     		mov	r5, r0	@ float
 2005              		.loc 2 166 0
 2006 0008 04F18400 		add	r0, r4, #132
 2007              	.LVL222:
 2008 000c FFF7FEFF 		bl	orientationGetEulers_f
 2009              	.LVL223:
 2010 0010 0246     		mov	r2, r0
 2011 0012 0068     		ldr	r0, [r0]	@ unaligned
 2012 0014 5168     		ldr	r1, [r2, #4]	@ unaligned
 2013 0016 01AB     		add	r3, sp, #4
 2014 0018 03C3     		stmia	r3!, {r0, r1}
 2015 001a 9068     		ldr	r0, [r2, #8]	@ unaligned
 2016 001c 1860     		str	r0, [r3]	@ unaligned
 2017              	.LVL224:
 2018              	.LBB96:
 2019              	.LBB97:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 2020              		.loc 1 183 0
 2021 001e 019B     		ldr	r3, [sp, #4]	@ float
 2022              	.LVL225:
 2023 0020 C4F8D830 		str	r3, [r4, #216]	@ float
 2024 0024 039B     		ldr	r3, [sp, #12]	@ float
 2025 0026 C4F8E030 		str	r3, [r4, #224]	@ float
 185:./math/pprz_orientation_conversion.h **** }
 2026              		.loc 1 185 0
 2027 002a 1023     		movs	r3, #16
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 2028              		.loc 1 183 0
 2029 002c C4F8DC50 		str	r5, [r4, #220]	@ float
 185:./math/pprz_orientation_conversion.h **** }
 2030              		.loc 1 185 0
 2031 0030 84F88430 		strb	r3, [r4, #132]
 2032              	.LBE97:
 2033              	.LBE96:
 167:subsystems/imu.c ****   body_to_imu_eulers.theta = theta;
 168:subsystems/imu.c ****   orientationSetEulers_f(&imu.body_to_imu, &body_to_imu_eulers);
 169:subsystems/imu.c ****   AbiSendMsgBODY_TO_IMU_QUAT(1, orientationGetQuat_f(&imu.body_to_imu));
 2034              		.loc 2 169 0
 2035 0034 FFF7FEFF 		bl	orientationGetQuat_f.constprop.11
 2036              	.LVL226:
 170:subsystems/imu.c **** }
 2037              		.loc 2 170 0
 2038 0038 05B0     		add	sp, sp, #20
 2039              		.cfi_def_cfa_offset 12
 2040              		@ sp needed
 2041 003a BDE83040 		pop	{r4, r5, lr}
 2042              		.cfi_restore 14
 2043              		.cfi_restore 5
 2044              		.cfi_restore 4
 2045              		.cfi_def_cfa_offset 0
 2046              	.LVL227:
 169:subsystems/imu.c **** }
 2047              		.loc 2 169 0
 2048 003e FFF7FEBF 		b	AbiSendMsgBODY_TO_IMU_QUAT.constprop.10
 2049              	.LVL228:
 2050              	.L77:
 2051 0042 00BF     		.align	2
 2052              	.L76:
 2053 0044 00000000 		.word	.LANCHOR0
 2054              		.cfi_endproc
 2055              	.LFE488:
 2057              		.section	.text.imu_SetBodyToImuPsi,"ax",%progbits
 2058              		.align	1
 2059              		.global	imu_SetBodyToImuPsi
 2060              		.thumb
 2061              		.thumb_func
 2063              	imu_SetBodyToImuPsi:
 2064              	.LFB489:
 171:subsystems/imu.c **** 
 172:subsystems/imu.c **** void imu_SetBodyToImuPsi(float psi)
 173:subsystems/imu.c **** {
 2065              		.loc 2 173 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 16
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
 2069              	.LVL229:
 2070 0000 30B5     		push	{r4, r5, lr}
 2071              		.cfi_def_cfa_offset 12
 2072              		.cfi_offset 4, -12
 2073              		.cfi_offset 5, -8
 2074              		.cfi_offset 14, -4
 174:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers;
 175:subsystems/imu.c ****   memcpy(&body_to_imu_eulers, orientationGetEulers_f(&imu.body_to_imu), sizeof(struct FloatEulers))
 2075              		.loc 2 175 0
 2076 0002 104C     		ldr	r4, .L79
 173:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers;
 2077              		.loc 2 173 0
 2078 0004 85B0     		sub	sp, sp, #20
 2079              		.cfi_def_cfa_offset 32
 173:subsystems/imu.c ****   struct FloatEulers body_to_imu_eulers;
 2080              		.loc 2 173 0
 2081 0006 0546     		mov	r5, r0	@ float
 2082              		.loc 2 175 0
 2083 0008 04F18400 		add	r0, r4, #132
 2084              	.LVL230:
 2085 000c FFF7FEFF 		bl	orientationGetEulers_f
 2086              	.LVL231:
 2087 0010 0246     		mov	r2, r0
 2088 0012 0068     		ldr	r0, [r0]	@ unaligned
 2089 0014 5168     		ldr	r1, [r2, #4]	@ unaligned
 2090 0016 01AB     		add	r3, sp, #4
 2091 0018 03C3     		stmia	r3!, {r0, r1}
 2092 001a 9068     		ldr	r0, [r2, #8]	@ unaligned
 2093 001c 1860     		str	r0, [r3]	@ unaligned
 2094              	.LVL232:
 2095              	.LBB100:
 2096              	.LBB101:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 2097              		.loc 1 183 0
 2098 001e 019B     		ldr	r3, [sp, #4]	@ float
 2099              	.LVL233:
 2100 0020 C4F8D830 		str	r3, [r4, #216]	@ float
 2101 0024 029B     		ldr	r3, [sp, #8]	@ float
 2102 0026 C4F8DC30 		str	r3, [r4, #220]	@ float
 185:./math/pprz_orientation_conversion.h **** }
 2103              		.loc 1 185 0
 2104 002a 1023     		movs	r3, #16
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 2105              		.loc 1 183 0
 2106 002c C4F8E050 		str	r5, [r4, #224]	@ float
 185:./math/pprz_orientation_conversion.h **** }
 2107              		.loc 1 185 0
 2108 0030 84F88430 		strb	r3, [r4, #132]
 2109              	.LBE101:
 2110              	.LBE100:
 176:subsystems/imu.c ****   body_to_imu_eulers.psi = psi;
 177:subsystems/imu.c ****   orientationSetEulers_f(&imu.body_to_imu, &body_to_imu_eulers);
 178:subsystems/imu.c ****   AbiSendMsgBODY_TO_IMU_QUAT(1, orientationGetQuat_f(&imu.body_to_imu));
 2111              		.loc 2 178 0
 2112 0034 FFF7FEFF 		bl	orientationGetQuat_f.constprop.11
 2113              	.LVL234:
 179:subsystems/imu.c **** }
 2114              		.loc 2 179 0
 2115 0038 05B0     		add	sp, sp, #20
 2116              		.cfi_def_cfa_offset 12
 2117              		@ sp needed
 2118 003a BDE83040 		pop	{r4, r5, lr}
 2119              		.cfi_restore 14
 2120              		.cfi_restore 5
 2121              		.cfi_restore 4
 2122              		.cfi_def_cfa_offset 0
 2123              	.LVL235:
 178:subsystems/imu.c **** }
 2124              		.loc 2 178 0
 2125 003e FFF7FEBF 		b	AbiSendMsgBODY_TO_IMU_QUAT.constprop.10
 2126              	.LVL236:
 2127              	.L80:
 2128 0042 00BF     		.align	2
 2129              	.L79:
 2130 0044 00000000 		.word	.LANCHOR0
 2131              		.cfi_endproc
 2132              	.LFE489:
 2134              		.section	.text.imu_SetBodyToImuCurrent,"ax",%progbits
 2135              		.align	1
 2136              		.global	imu_SetBodyToImuCurrent
 2137              		.thumb
 2138              		.thumb_func
 2140              	imu_SetBodyToImuCurrent:
 2141              	.LFB490:
 180:subsystems/imu.c **** 
 181:subsystems/imu.c **** void imu_SetBodyToImuCurrent(float set)
 182:subsystems/imu.c **** {
 2142              		.loc 2 182 0
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 24
 2145              		@ frame_needed = 0, uses_anonymous_args = 0
 2146              	.LVL237:
 2147 0000 30B5     		push	{r4, r5, lr}
 2148              		.cfi_def_cfa_offset 12
 2149              		.cfi_offset 4, -12
 2150              		.cfi_offset 5, -8
 2151              		.cfi_offset 14, -4
 183:subsystems/imu.c ****   imu.b2i_set_current = set;
 2152              		.loc 2 183 0
 2153 0002 07EE900A 		fmsr	s15, r0
 182:subsystems/imu.c ****   imu.b2i_set_current = set;
 2154              		.loc 2 182 0
 2155 0006 2DED028B 		fstmfdd	sp!, {d8}
 2156              		.cfi_def_cfa_offset 20
 2157              		.cfi_offset 80, -20
 2158              		.cfi_offset 81, -16
 2159              		.loc 2 183 0
 2160 000a FCEEE77A 		ftouizs	s15, s15
 182:subsystems/imu.c ****   imu.b2i_set_current = set;
 2161              		.loc 2 182 0
 2162 000e 87B0     		sub	sp, sp, #28
 2163              		.cfi_def_cfa_offset 48
 2164              		.loc 2 183 0
 2165 0010 CDED017A 		fsts	s15, [sp, #4]	@ int
 2166 0014 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 2167 0018 234C     		ldr	r4, .L87
 2168 001a 84F80831 		strb	r3, [r4, #264]
 184:subsystems/imu.c **** 
 185:subsystems/imu.c ****   if (imu.b2i_set_current) {
 2169              		.loc 2 185 0
 2170 001e 73B3     		cbz	r3, .L82
 2171              	.LBB113:
 186:subsystems/imu.c ****     // adjust imu_to_body roll and pitch by current NedToBody roll and pitch
 187:subsystems/imu.c ****     struct FloatEulers body_to_imu_eulers;
 188:subsystems/imu.c ****     memcpy(&body_to_imu_eulers, orientationGetEulers_f(&imu.body_to_imu), sizeof(struct FloatEulers
 2172              		.loc 2 188 0
 2173 0020 04F18400 		add	r0, r4, #132
 2174              	.LVL238:
 2175 0024 FFF7FEFF 		bl	orientationGetEulers_f
 2176              	.LVL239:
 2177 0028 0246     		mov	r2, r0
 2178 002a 0068     		ldr	r0, [r0]	@ unaligned
 2179 002c 5168     		ldr	r1, [r2, #4]	@ unaligned
 2180 002e 1F4D     		ldr	r5, .L87+4
 2181 0030 03AB     		add	r3, sp, #12
 2182 0032 03C3     		stmia	r3!, {r0, r1}
 2183 0034 9068     		ldr	r0, [r2, #8]	@ unaligned
 2184 0036 1860     		str	r0, [r3]	@ unaligned
 2185              	.LVL240:
 189:subsystems/imu.c ****     if (stateIsAttitudeValid()) {
 2186              		.loc 2 189 0
 2187 0038 95F8A431 		ldrb	r3, [r5, #420]	@ zero_extendqisi2
 2188 003c CBB1     		cbz	r3, .L83
 2189              	.LBB114:
 2190              	.LBB115:
 2191              		.file 5 "./state.h"
   1:./state.h     **** /*
   2:./state.h     ****  * Copyright (C) 2011-2012 Felix Ruess <felix.ruess@gmail.com>
   3:./state.h     ****  *
   4:./state.h     ****  * This file is part of paparazzi.
   5:./state.h     ****  *
   6:./state.h     ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./state.h     ****  * it under the terms of the GNU General Public License as published by
   8:./state.h     ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./state.h     ****  * any later version.
  10:./state.h     ****  *
  11:./state.h     ****  * paparazzi is distributed in the hope that it will be useful,
  12:./state.h     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./state.h     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./state.h     ****  * GNU General Public License for more details.
  15:./state.h     ****  *
  16:./state.h     ****  * You should have received a copy of the GNU General Public License
  17:./state.h     ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./state.h     ****  * <http://www.gnu.org/licenses/>.
  19:./state.h     ****  */
  20:./state.h     **** 
  21:./state.h     **** /**
  22:./state.h     ****  * @file state.h
  23:./state.h     ****  *
  24:./state.h     ****  * API to get/set the generic vehicle states.
  25:./state.h     ****  *
  26:./state.h     ****  * Also see the @ref state_interface "State Interface" page.
  27:./state.h     ****  *
  28:./state.h     ****  * @author Felix Ruess <felix.ruess@gmail.com>
  29:./state.h     ****  */
  30:./state.h     **** 
  31:./state.h     **** #ifndef STATE_H
  32:./state.h     **** #define STATE_H
  33:./state.h     **** 
  34:./state.h     **** #include "math/pprz_algebra_int.h"
  35:./state.h     **** #include "math/pprz_algebra_float.h"
  36:./state.h     **** #include "math/pprz_geodetic_int.h"
  37:./state.h     **** #include "math/pprz_geodetic_float.h"
  38:./state.h     **** #include "math/pprz_orientation_conversion.h"
  39:./state.h     **** 
  40:./state.h     **** #include "std.h"
  41:./state.h     **** #include <string.h>
  42:./state.h     **** 
  43:./state.h     **** /**
  44:./state.h     ****  * This general state interface holds all the most important vehicle states like
  45:./state.h     ****  * position, velocity, attitude, etc. It handles coordinate system and
  46:./state.h     ****  * fixed-/floating-point conversion on the fly when needed.
  47:./state.h     ****  *
  48:./state.h     ****  * You can set e.g. the position in any coordinate system you wish:
  49:./state.h     ****  * stateSetPositionNed_i() to set the position in fixed-point NED coordinates.
  50:./state.h     ****  * If you need to read the position somewhere else in a different representation,
  51:./state.h     ****  * call: stateGetPositionLla_f() and only then the LLA float position representation
  52:./state.h     ****  * is calculated on the fly and returned. It's also only calculated once,
  53:./state.h     ****  * until a new position is set which invalidates all the other representations again.
  54:./state.h     ****  */
  55:./state.h     **** 
  56:./state.h     **** /**
  57:./state.h     ****  * @defgroup state_interface State interface
  58:./state.h     ****  * @{
  59:./state.h     ****  */
  60:./state.h     **** 
  61:./state.h     **** /**
  62:./state.h     ****  * @defgroup state_position Position representations
  63:./state.h     ****  * @{
  64:./state.h     ****  */
  65:./state.h     **** #define POS_ECEF_I 0
  66:./state.h     **** #define POS_NED_I  1
  67:./state.h     **** #define POS_ENU_I  2
  68:./state.h     **** #define POS_LLA_I  3
  69:./state.h     **** #define POS_UTM_I  4
  70:./state.h     **** #define POS_ECEF_F 5
  71:./state.h     **** #define POS_NED_F  6
  72:./state.h     **** #define POS_ENU_F  7
  73:./state.h     **** #define POS_LLA_F  8
  74:./state.h     **** #define POS_UTM_F  9
  75:./state.h     **** #define POS_LOCAL_COORD ((1<<POS_NED_I)|(1<<POS_NED_F)|(1<<POS_ENU_I)|(1<<POS_ENU_F))
  76:./state.h     **** #define POS_GLOBAL_COORD ((1<<POS_ECEF_I)|(1<<POS_ECEF_F)|(1<<POS_LLA_I)|(1<<POS_LLA_F)|(1<<POS_UTM
  77:./state.h     **** /**@}*/
  78:./state.h     **** 
  79:./state.h     **** /**
  80:./state.h     ****  * @defgroup state_velocity Speed representations
  81:./state.h     ****  * @{
  82:./state.h     ****  */
  83:./state.h     **** #define SPEED_ECEF_I  0
  84:./state.h     **** #define SPEED_NED_I   1
  85:./state.h     **** #define SPEED_ENU_I   2
  86:./state.h     **** #define SPEED_HNORM_I 3
  87:./state.h     **** #define SPEED_HDIR_I  4
  88:./state.h     **** #define SPEED_ECEF_F  5
  89:./state.h     **** #define SPEED_NED_F   6
  90:./state.h     **** #define SPEED_ENU_F   7
  91:./state.h     **** #define SPEED_HNORM_F 8
  92:./state.h     **** #define SPEED_HDIR_F  9
  93:./state.h     **** #define SPEED_LOCAL_COORD ((1<<SPEED_NED_I)|(1<<SPEED_ENU_I)|(1<<SPEED_NED_F)|(1<<SPEED_ENU_F))
  94:./state.h     **** /**@}*/
  95:./state.h     **** 
  96:./state.h     **** /**
  97:./state.h     ****  * @defgroup state_acceleration Acceleration representations
  98:./state.h     ****  * @{
  99:./state.h     ****  */
 100:./state.h     **** #define ACCEL_ECEF_I 0
 101:./state.h     **** #define ACCEL_NED_I  1
 102:./state.h     **** #define ACCEL_ECEF_F 2
 103:./state.h     **** #define ACCEL_NED_F  3
 104:./state.h     **** /**@}*/
 105:./state.h     **** 
 106:./state.h     **** /**
 107:./state.h     ****  * @defgroup state_rate Angular rate representations
 108:./state.h     ****  * @{
 109:./state.h     ****  */
 110:./state.h     **** #define RATE_I 0
 111:./state.h     **** #define RATE_F 1
 112:./state.h     **** /**@}*/
 113:./state.h     **** 
 114:./state.h     **** /**
 115:./state.h     ****  * @defgroup state_wind_airspeed Wind- and airspeed representations
 116:./state.h     ****  * @{
 117:./state.h     ****  */
 118:./state.h     **** #define WINDSPEED_I 0
 119:./state.h     **** #define AIRSPEED_I  1
 120:./state.h     **** #define WINDSPEED_F 2
 121:./state.h     **** #define AIRSPEED_F  3
 122:./state.h     **** #define AOA_F       4
 123:./state.h     **** #define SIDESLIP_F  5
 124:./state.h     **** /**@}*/
 125:./state.h     **** 
 126:./state.h     **** 
 127:./state.h     **** /**
 128:./state.h     ****  * Structure holding vehicle state data.
 129:./state.h     ****  */
 130:./state.h     **** struct State {
 131:./state.h     **** 
 132:./state.h     ****   /** @addtogroup state_position
 133:./state.h     ****    *  @{ */
 134:./state.h     **** 
 135:./state.h     ****   /**
 136:./state.h     ****    * Holds the status bits for all position representations.
 137:./state.h     ****    * When the corresponding bit is set the representation
 138:./state.h     ****    * is already computed.
 139:./state.h     ****    */
 140:./state.h     ****   uint16_t pos_status;
 141:./state.h     **** 
 142:./state.h     ****   /**
 143:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 144:./state.h     ****    * Units: centimeters
 145:./state.h     ****    */
 146:./state.h     ****   struct EcefCoor_i ecef_pos_i;
 147:./state.h     **** 
 148:./state.h     ****   /**
 149:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 150:./state.h     ****    * Units lat,lon: degrees*1e7
 151:./state.h     ****    * Units alt: milimeters above reference ellipsoid
 152:./state.h     ****    */
 153:./state.h     ****   struct LlaCoor_i lla_pos_i;
 154:./state.h     **** 
 155:./state.h     ****   /**
 156:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 157:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 158:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 159:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 160:./state.h     ****    * (int version)
 161:./state.h     ****    */
 162:./state.h     ****   struct LtpDef_i ned_origin_i;
 163:./state.h     **** 
 164:./state.h     ****   /**
 165:./state.h     ****    * true if local int coordinate frame is initialsed
 166:./state.h     ****    */
 167:./state.h     ****   bool_t ned_initialized_i;
 168:./state.h     **** 
 169:./state.h     ****   /**
 170:./state.h     ****    * Position in North East Down coordinates.
 171:./state.h     ****    * with respect to ned_origin_i (flat earth)
 172:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 173:./state.h     ****    */
 174:./state.h     ****   struct NedCoor_i ned_pos_i;
 175:./state.h     **** 
 176:./state.h     ****   /**
 177:./state.h     ****    * Position in East North Up coordinates.
 178:./state.h     ****    * with respect to ned_origin_i (flat earth)
 179:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 180:./state.h     ****    */
 181:./state.h     ****   struct EnuCoor_i enu_pos_i;
 182:./state.h     **** 
 183:./state.h     ****   /**
 184:./state.h     ****    * Position in UTM coordinates.
 185:./state.h     ****    * Units x,y: meters.
 186:./state.h     ****    * Units z: meters above MSL
 187:./state.h     ****    */
 188:./state.h     ****   struct UtmCoor_f utm_pos_f;
 189:./state.h     **** 
 190:./state.h     ****   /**
 191:./state.h     ****    * Altitude above ground level.
 192:./state.h     ****    * Unit: meters
 193:./state.h     ****    */
 194:./state.h     ****   float alt_agl_f;
 195:./state.h     **** 
 196:./state.h     ****   /**
 197:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 198:./state.h     ****    * Units lat,lon: radians
 199:./state.h     ****    * Units alt: meters above reference ellipsoid
 200:./state.h     ****    */
 201:./state.h     ****   struct LlaCoor_f lla_pos_f;
 202:./state.h     **** 
 203:./state.h     ****   /**
 204:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 205:./state.h     ****    * Units: meters
 206:./state.h     ****    */
 207:./state.h     ****   struct EcefCoor_f ecef_pos_f;
 208:./state.h     **** 
 209:./state.h     ****   /**
 210:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 211:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 212:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 213:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 214:./state.h     ****    * (float version)
 215:./state.h     ****    */
 216:./state.h     ****   struct LtpDef_f ned_origin_f;
 217:./state.h     **** 
 218:./state.h     ****   /// True if local float coordinate frame is initialsed
 219:./state.h     ****   bool_t ned_initialized_f;
 220:./state.h     **** 
 221:./state.h     ****   /**
 222:./state.h     ****    * Definition of the origin of Utm coordinate system.
 223:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 224:./state.h     ****    * in UTM coordinates, used as a reference when ned_origin is not
 225:./state.h     ****    * initialized.
 226:./state.h     ****    * (float version)
 227:./state.h     ****    */
 228:./state.h     ****   struct UtmCoor_f utm_origin_f;
 229:./state.h     **** 
 230:./state.h     ****   /// True if utm origin (float) coordinate frame is initialsed
 231:./state.h     ****   bool_t utm_initialized_f;
 232:./state.h     **** 
 233:./state.h     ****   /**
 234:./state.h     ****    * Position in North East Down coordinates.
 235:./state.h     ****    * with respect to ned_origin_i (flat earth)
 236:./state.h     ****    * Units: meters
 237:./state.h     ****    */
 238:./state.h     ****   struct NedCoor_f ned_pos_f;
 239:./state.h     **** 
 240:./state.h     ****   /**
 241:./state.h     ****    * Position in East North Up coordinates.
 242:./state.h     ****    * with respect to ned_origin_i (flat earth)
 243:./state.h     ****    * Units: meters
 244:./state.h     ****    */
 245:./state.h     ****   struct EnuCoor_f enu_pos_f;
 246:./state.h     ****   /** @}*/
 247:./state.h     **** 
 248:./state.h     **** 
 249:./state.h     ****   /** @addtogroup state_velocity
 250:./state.h     ****    *  @{ */
 251:./state.h     ****   /**
 252:./state.h     ****    * Holds the status bits for all ground speed representations.
 253:./state.h     ****    * When the corresponding bit is one the representation
 254:./state.h     ****    * is already computed.
 255:./state.h     ****    */
 256:./state.h     ****   uint16_t speed_status;
 257:./state.h     **** 
 258:./state.h     ****   /**
 259:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 260:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 261:./state.h     ****    */
 262:./state.h     ****   struct EcefCoor_i ecef_speed_i;
 263:./state.h     **** 
 264:./state.h     ****   /**
 265:./state.h     ****    * Velocity in North East Down coordinates.
 266:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 267:./state.h     ****    */
 268:./state.h     ****   struct NedCoor_i ned_speed_i;
 269:./state.h     **** 
 270:./state.h     ****   /**
 271:./state.h     ****    * Velocity in East North Up coordinates.
 272:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 273:./state.h     ****    */
 274:./state.h     ****   struct EnuCoor_i enu_speed_i;
 275:./state.h     **** 
 276:./state.h     ****   /**
 277:./state.h     ****    * Norm of horizontal ground speed.
 278:./state.h     ****    * Unit: m/s in BFP with #INT32_SPEED_FRAC
 279:./state.h     ****    */
 280:./state.h     ****   uint32_t h_speed_norm_i;
 281:./state.h     **** 
 282:./state.h     ****   /**
 283:./state.h     ****    * Direction of horizontal ground speed.
 284:./state.h     ****    * Unit: rad in BFP with #INT32_ANGLE_FRAC
 285:./state.h     ****    * (clockwise, zero=north)
 286:./state.h     ****    */
 287:./state.h     ****   int32_t h_speed_dir_i;
 288:./state.h     **** 
 289:./state.h     ****   /**
 290:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 291:./state.h     ****    * Units: m/s
 292:./state.h     ****    */
 293:./state.h     ****   struct EcefCoor_f ecef_speed_f;
 294:./state.h     **** 
 295:./state.h     ****   /**
 296:./state.h     ****    * @brief speed in North East Down coordinates
 297:./state.h     ****    * @details Units: m/s */
 298:./state.h     ****   struct NedCoor_f ned_speed_f;
 299:./state.h     **** 
 300:./state.h     ****   /**
 301:./state.h     ****    * Velocity in East North Up coordinates.
 302:./state.h     ****    * Units: m/s
 303:./state.h     ****    */
 304:./state.h     ****   struct EnuCoor_f enu_speed_f;
 305:./state.h     **** 
 306:./state.h     ****   /**
 307:./state.h     ****    * Norm of horizontal ground speed.
 308:./state.h     ****    * Unit: m/s
 309:./state.h     ****    */
 310:./state.h     ****   float h_speed_norm_f;
 311:./state.h     **** 
 312:./state.h     ****   /**
 313:./state.h     ****    * Direction of horizontal ground speed.
 314:./state.h     ****    * Unit: rad (clockwise, zero=north)
 315:./state.h     ****    */
 316:./state.h     ****   float h_speed_dir_f;
 317:./state.h     ****   /** @}*/
 318:./state.h     **** 
 319:./state.h     **** 
 320:./state.h     ****   /** @addtogroup state_acceleration
 321:./state.h     ****    *  @{ */
 322:./state.h     ****   /**
 323:./state.h     ****    * Holds the status bits for all acceleration representations.
 324:./state.h     ****    * When the corresponding bit is one the representation
 325:./state.h     ****    * is already computed.
 326:./state.h     ****    */
 327:./state.h     ****   uint8_t accel_status;
 328:./state.h     **** 
 329:./state.h     ****   /**
 330:./state.h     ****    * Acceleration in North East Down coordinates.
 331:./state.h     ****    * Units: m/s^2 in BFP with #INT32_ACCEL_FRAC
 332:./state.h     ****    */
 333:./state.h     ****   struct NedCoor_i ned_accel_i;
 334:./state.h     **** 
 335:./state.h     ****   /**
 336:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 337:./state.h     ****    * Units: m/s^2 in BFP with INT32_ACCEL_FRAC
 338:./state.h     ****    */
 339:./state.h     ****   struct EcefCoor_i ecef_accel_i;
 340:./state.h     **** 
 341:./state.h     ****   /**
 342:./state.h     ****    * Acceleration in North East Down coordinates.
 343:./state.h     ****    * Units: m/s^2
 344:./state.h     ****    */
 345:./state.h     ****   struct NedCoor_f ned_accel_f;
 346:./state.h     **** 
 347:./state.h     ****   /**
 348:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 349:./state.h     ****    * Units: m/s^2
 350:./state.h     ****    */
 351:./state.h     ****   struct EcefCoor_f ecef_accel_f;
 352:./state.h     ****   /** @}*/
 353:./state.h     **** 
 354:./state.h     **** 
 355:./state.h     ****   /** @defgroup state_attitude Attitude representations
 356:./state.h     ****    */
 357:./state.h     ****   struct OrientationReps ned_to_body_orientation;
 358:./state.h     **** 
 359:./state.h     **** 
 360:./state.h     ****   /** @addtogroup state_rate
 361:./state.h     ****    *  @{ */
 362:./state.h     ****   /**
 363:./state.h     ****    * Holds the status bits for all angular rate representations.
 364:./state.h     ****    * When the corresponding bit is one the representation
 365:./state.h     ****    * is already computed.
 366:./state.h     ****    */
 367:./state.h     ****   uint8_t rate_status;
 368:./state.h     **** 
 369:./state.h     ****   /**
 370:./state.h     ****    * Angular rates in body frame.
 371:./state.h     ****    * Units: rad/s in BFP with #INT32_RATE_FRAC
 372:./state.h     ****    */
 373:./state.h     ****   struct Int32Rates  body_rates_i;
 374:./state.h     **** 
 375:./state.h     ****   /**
 376:./state.h     ****    * Angular rates in body frame.
 377:./state.h     ****    * Units: rad/s
 378:./state.h     ****    */
 379:./state.h     ****   struct FloatRates  body_rates_f;
 380:./state.h     ****   /** @}*/
 381:./state.h     **** 
 382:./state.h     **** 
 383:./state.h     ****   /** @addtogroup state_wind_airspeed
 384:./state.h     ****    *  @{ */
 385:./state.h     ****   /**
 386:./state.h     ****    * Holds the status bits for all wind- and airspeed representations.
 387:./state.h     ****    * When the corresponding bit is one the representation
 388:./state.h     ****    * is already computed.
 389:./state.h     ****    */
 390:./state.h     ****   uint8_t wind_air_status;
 391:./state.h     **** 
 392:./state.h     ****   /**
 393:./state.h     ****    * Horizontal windspeed in north/east.
 394:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 395:./state.h     ****    */
 396:./state.h     ****   struct Int32Vect2 h_windspeed_i;
 397:./state.h     **** 
 398:./state.h     ****   /**
 399:./state.h     ****    * Norm of horizontal ground speed.
 400:./state.h     ****    * @details Unit: m/s in BFP with #INT32_SPEED_FRAC
 401:./state.h     ****    */
 402:./state.h     ****   int32_t airspeed_i;
 403:./state.h     **** 
 404:./state.h     ****   /**
 405:./state.h     ****    * Horizontal windspeed.
 406:./state.h     ****    * Units: m/s with x=north, y=east
 407:./state.h     ****    */
 408:./state.h     ****   struct FloatVect2 h_windspeed_f;
 409:./state.h     **** 
 410:./state.h     ****   /**
 411:./state.h     ****    * Norm of relative air speed.
 412:./state.h     ****    * Unit: m/s
 413:./state.h     ****    */
 414:./state.h     ****   float airspeed_f;
 415:./state.h     **** 
 416:./state.h     ****   /**
 417:./state.h     ****    * Angle of attack
 418:./state.h     ****    * Unit: rad
 419:./state.h     ****    */
 420:./state.h     ****   float angle_of_attack_f;
 421:./state.h     **** 
 422:./state.h     ****   /**
 423:./state.h     ****    * Sideslip angle
 424:./state.h     ****    * Unit: rad
 425:./state.h     ****    */
 426:./state.h     ****   float sideslip_f;
 427:./state.h     **** 
 428:./state.h     ****   /** @}*/
 429:./state.h     **** 
 430:./state.h     **** };
 431:./state.h     **** 
 432:./state.h     **** extern struct State state;
 433:./state.h     **** 
 434:./state.h     **** extern void stateInit(void);
 435:./state.h     **** 
 436:./state.h     **** /** @addtogroup state_position
 437:./state.h     ****  *  @{ */
 438:./state.h     **** 
 439:./state.h     **** /// Set the local (flat earth) coordinate frame origin (int).
 440:./state.h     **** static inline void stateSetLocalOrigin_i(struct LtpDef_i *ltp_def)
 441:./state.h     **** {
 442:./state.h     ****   memcpy(&state.ned_origin_i, ltp_def, sizeof(struct LtpDef_i));
 443:./state.h     ****   /* convert to float */
 444:./state.h     ****   ECEF_FLOAT_OF_BFP(state.ned_origin_f.ecef, state.ned_origin_i.ecef);
 445:./state.h     ****   LLA_FLOAT_OF_BFP(state.ned_origin_f.lla, state.ned_origin_i.lla);
 446:./state.h     ****   HIGH_RES_RMAT_FLOAT_OF_BFP(state.ned_origin_f.ltp_of_ecef, state.ned_origin_i.ltp_of_ecef);
 447:./state.h     ****   state.ned_origin_f.hmsl = M_OF_MM(state.ned_origin_i.hmsl);
 448:./state.h     **** 
 449:./state.h     ****   /* clear bits for all local frame representations */
 450:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 451:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 452:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 453:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 454:./state.h     **** 
 455:./state.h     ****   state.ned_initialized_i = TRUE;
 456:./state.h     ****   state.ned_initialized_f = TRUE;
 457:./state.h     **** }
 458:./state.h     **** 
 459:./state.h     **** /// Set the local (flat earth) coordinate frame origin from UTM (float).
 460:./state.h     **** static inline void stateSetLocalUtmOrigin_f(struct UtmCoor_f *utm_def)
 461:./state.h     **** {
 462:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
 463:./state.h     ****   state.utm_initialized_f = TRUE;
 464:./state.h     **** 
 465:./state.h     ****   /* clear bits for all local frame representations */
 466:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 467:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 468:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 469:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 470:./state.h     **** }
 471:./state.h     **** /*******************************************************************************
 472:./state.h     ****  *                                                                             *
 473:./state.h     ****  * Set and Get functions for the POSITION representations                      *
 474:./state.h     ****  *                                                                             *
 475:./state.h     ****  ******************************************************************************/
 476:./state.h     **** 
 477:./state.h     **** /************* declaration of transformation functions ************/
 478:./state.h     **** extern void stateCalcPositionEcef_i(void);
 479:./state.h     **** extern void stateCalcPositionNed_i(void);
 480:./state.h     **** extern void stateCalcPositionEnu_i(void);
 481:./state.h     **** extern void stateCalcPositionLla_i(void);
 482:./state.h     **** extern void stateCalcPositionUtm_f(void);
 483:./state.h     **** extern void stateCalcPositionEcef_f(void);
 484:./state.h     **** extern void stateCalcPositionNed_f(void);
 485:./state.h     **** extern void stateCalcPositionEnu_f(void);
 486:./state.h     **** extern void stateCalcPositionLla_f(void);
 487:./state.h     **** 
 488:./state.h     **** /*********************** validity test functions ******************/
 489:./state.h     **** 
 490:./state.h     **** /// Test if local coordinates are valid.
 491:./state.h     **** static inline bool_t stateIsLocalCoordinateValid(void)
 492:./state.h     **** {
 493:./state.h     ****   return ((state.ned_initialized_i || state.ned_initialized_f || state.utm_initialized_f)
 494:./state.h     ****           && (state.pos_status & (POS_LOCAL_COORD)));
 495:./state.h     **** }
 496:./state.h     **** 
 497:./state.h     **** /// Test if global coordinates are valid.
 498:./state.h     **** static inline bool_t stateIsGlobalCoordinateValid(void)
 499:./state.h     **** {
 500:./state.h     ****   return ((state.pos_status & (POS_GLOBAL_COORD)) || stateIsLocalCoordinateValid());
 501:./state.h     **** }
 502:./state.h     **** 
 503:./state.h     **** /************************ Set functions ****************************/
 504:./state.h     **** 
 505:./state.h     **** /// Set position from ECEF coordinates (int).
 506:./state.h     **** static inline void stateSetPositionEcef_i(struct EcefCoor_i *ecef_pos)
 507:./state.h     **** {
 508:./state.h     ****   VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 509:./state.h     ****   /* clear bits for all position representations and only set the new one */
 510:./state.h     ****   state.pos_status = (1 << POS_ECEF_I);
 511:./state.h     **** }
 512:./state.h     **** 
 513:./state.h     **** /// Set position from local NED coordinates (int).
 514:./state.h     **** static inline void stateSetPositionNed_i(struct NedCoor_i *ned_pos)
 515:./state.h     **** {
 516:./state.h     ****   VECT3_COPY(state.ned_pos_i, *ned_pos);
 517:./state.h     ****   /* clear bits for all position representations and only set the new one */
 518:./state.h     ****   state.pos_status = (1 << POS_NED_I);
 519:./state.h     **** }
 520:./state.h     **** 
 521:./state.h     **** /// Set position from local ENU coordinates (int).
 522:./state.h     **** static inline void stateSetPositionEnu_i(struct EnuCoor_i *enu_pos)
 523:./state.h     **** {
 524:./state.h     ****   VECT3_COPY(state.enu_pos_i, *enu_pos);
 525:./state.h     ****   /* clear bits for all position representations and only set the new one */
 526:./state.h     ****   state.pos_status = (1 << POS_ENU_I);
 527:./state.h     **** }
 528:./state.h     **** 
 529:./state.h     **** /// Set position from LLA coordinates (int).
 530:./state.h     **** static inline void stateSetPositionLla_i(struct LlaCoor_i *lla_pos)
 531:./state.h     **** {
 532:./state.h     ****   LLA_COPY(state.lla_pos_i, *lla_pos);
 533:./state.h     ****   /* clear bits for all position representations and only set the new one */
 534:./state.h     ****   state.pos_status = (1 << POS_LLA_I);
 535:./state.h     **** }
 536:./state.h     **** 
 537:./state.h     **** /// Set multiple position coordinates (int).
 538:./state.h     **** static inline void stateSetPosition_i(
 539:./state.h     ****   struct EcefCoor_i *ecef_pos,
 540:./state.h     ****   struct NedCoor_i *ned_pos,
 541:./state.h     ****   struct EnuCoor_i *enu_pos,
 542:./state.h     ****   struct LlaCoor_i *lla_pos)
 543:./state.h     **** {
 544:./state.h     ****   /* clear all status bit */
 545:./state.h     ****   state.pos_status = 0;
 546:./state.h     ****   if (ecef_pos != NULL) {
 547:./state.h     ****     VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 548:./state.h     ****     state.pos_status |= (1 << POS_ECEF_I);
 549:./state.h     ****   }
 550:./state.h     ****   if (ned_pos != NULL) {
 551:./state.h     ****     VECT3_COPY(state.ned_pos_i, *ned_pos);
 552:./state.h     ****     state.pos_status |= (1 << POS_NED_I);
 553:./state.h     ****   }
 554:./state.h     ****   if (enu_pos != NULL) {
 555:./state.h     ****     VECT3_COPY(state.enu_pos_i, *enu_pos);
 556:./state.h     ****     state.pos_status |= (1 << POS_ENU_I);
 557:./state.h     ****   }
 558:./state.h     ****   if (lla_pos != NULL) {
 559:./state.h     ****     LLA_COPY(state.lla_pos_i, *lla_pos);
 560:./state.h     ****     state.pos_status |= (1 << POS_LLA_I);
 561:./state.h     ****   }
 562:./state.h     **** }
 563:./state.h     **** 
 564:./state.h     **** /// Set position from UTM coordinates (float).
 565:./state.h     **** static inline void stateSetPositionUtm_f(struct UtmCoor_f *utm_pos)
 566:./state.h     **** {
 567:./state.h     ****   memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 568:./state.h     ****   /* clear bits for all position representations and only set the new one */
 569:./state.h     ****   state.pos_status = (1 << POS_UTM_F);
 570:./state.h     **** }
 571:./state.h     **** 
 572:./state.h     **** /// Set position from ECEF coordinates (float).
 573:./state.h     **** static inline void stateSetPositionEcef_f(struct EcefCoor_f *ecef_pos)
 574:./state.h     **** {
 575:./state.h     ****   VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 576:./state.h     ****   /* clear bits for all position representations and only set the new one */
 577:./state.h     ****   state.pos_status = (1 << POS_ECEF_F);
 578:./state.h     **** }
 579:./state.h     **** 
 580:./state.h     **** /// Set position from local NED coordinates (float).
 581:./state.h     **** static inline void stateSetPositionNed_f(struct NedCoor_f *ned_pos)
 582:./state.h     **** {
 583:./state.h     ****   VECT3_COPY(state.ned_pos_f, *ned_pos);
 584:./state.h     ****   /* clear bits for all position representations and only set the new one */
 585:./state.h     ****   state.pos_status = (1 << POS_NED_F);
 586:./state.h     **** }
 587:./state.h     **** 
 588:./state.h     **** /// Set position from local ENU coordinates (float).
 589:./state.h     **** static inline void stateSetPositionEnu_f(struct EnuCoor_f *enu_pos)
 590:./state.h     **** {
 591:./state.h     ****   VECT3_COPY(state.enu_pos_f, *enu_pos);
 592:./state.h     ****   /* clear bits for all position representations and only set the new one */
 593:./state.h     ****   state.pos_status = (1 << POS_ENU_F);
 594:./state.h     **** }
 595:./state.h     **** 
 596:./state.h     **** /// Set position from LLA coordinates (float).
 597:./state.h     **** static inline void stateSetPositionLla_f(struct LlaCoor_f *lla_pos)
 598:./state.h     **** {
 599:./state.h     ****   LLA_COPY(state.lla_pos_f, *lla_pos);
 600:./state.h     ****   /* clear bits for all position representations and only set the new one */
 601:./state.h     ****   state.pos_status = (1 << POS_LLA_F);
 602:./state.h     **** }
 603:./state.h     **** 
 604:./state.h     **** /// Set multiple position coordinates (float).
 605:./state.h     **** static inline void stateSetPosition_f(
 606:./state.h     ****   struct EcefCoor_f *ecef_pos,
 607:./state.h     ****   struct NedCoor_f *ned_pos,
 608:./state.h     ****   struct EnuCoor_f *enu_pos,
 609:./state.h     ****   struct LlaCoor_f *lla_pos,
 610:./state.h     ****   struct UtmCoor_f *utm_pos)
 611:./state.h     **** {
 612:./state.h     ****   /* clear all status bit */
 613:./state.h     ****   state.pos_status = 0;
 614:./state.h     ****   if (ecef_pos != NULL) {
 615:./state.h     ****     VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 616:./state.h     ****     state.pos_status |= (1 << POS_ECEF_F);
 617:./state.h     ****   }
 618:./state.h     ****   if (ned_pos != NULL) {
 619:./state.h     ****     VECT3_COPY(state.ned_pos_f, *ned_pos);
 620:./state.h     ****     state.pos_status |= (1 << POS_NED_F);
 621:./state.h     ****   }
 622:./state.h     ****   if (enu_pos != NULL) {
 623:./state.h     ****     VECT3_COPY(state.enu_pos_f, *enu_pos);
 624:./state.h     ****     state.pos_status |= (1 << POS_ENU_F);
 625:./state.h     ****   }
 626:./state.h     ****   if (lla_pos != NULL) {
 627:./state.h     ****     LLA_COPY(state.lla_pos_f, *lla_pos);
 628:./state.h     ****     state.pos_status |= (1 << POS_LLA_F);
 629:./state.h     ****   }
 630:./state.h     ****   if (utm_pos != NULL) {
 631:./state.h     ****     memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 632:./state.h     ****     state.pos_status |= (1 << POS_UTM_F);
 633:./state.h     ****   }
 634:./state.h     **** }
 635:./state.h     **** 
 636:./state.h     **** /************************ Get functions ****************************/
 637:./state.h     **** 
 638:./state.h     **** /// Get position in ECEF coordinates (int).
 639:./state.h     **** static inline struct EcefCoor_i *stateGetPositionEcef_i(void)
 640:./state.h     **** {
 641:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_I)) {
 642:./state.h     ****     stateCalcPositionEcef_i();
 643:./state.h     ****   }
 644:./state.h     ****   return &state.ecef_pos_i;
 645:./state.h     **** }
 646:./state.h     **** 
 647:./state.h     **** /// Get position in local NED coordinates (int).
 648:./state.h     **** static inline struct NedCoor_i *stateGetPositionNed_i(void)
 649:./state.h     **** {
 650:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_I)) {
 651:./state.h     ****     stateCalcPositionNed_i();
 652:./state.h     ****   }
 653:./state.h     ****   return &state.ned_pos_i;
 654:./state.h     **** }
 655:./state.h     **** 
 656:./state.h     **** /// Get position in local ENU coordinates (int).
 657:./state.h     **** static inline struct EnuCoor_i *stateGetPositionEnu_i(void)
 658:./state.h     **** {
 659:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_I)) {
 660:./state.h     ****     stateCalcPositionEnu_i();
 661:./state.h     ****   }
 662:./state.h     ****   return &state.enu_pos_i;
 663:./state.h     **** }
 664:./state.h     **** 
 665:./state.h     **** /// Get position in LLA coordinates (int).
 666:./state.h     **** static inline struct LlaCoor_i *stateGetPositionLla_i(void)
 667:./state.h     **** {
 668:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_I)) {
 669:./state.h     ****     stateCalcPositionLla_i();
 670:./state.h     ****   }
 671:./state.h     ****   return &state.lla_pos_i;
 672:./state.h     **** }
 673:./state.h     **** 
 674:./state.h     **** /// Get position in UTM coordinates (float).
 675:./state.h     **** static inline struct UtmCoor_f *stateGetPositionUtm_f(void)
 676:./state.h     **** {
 677:./state.h     ****   if (!bit_is_set(state.pos_status, POS_UTM_F)) {
 678:./state.h     ****     stateCalcPositionUtm_f();
 679:./state.h     ****   }
 680:./state.h     ****   return &state.utm_pos_f;
 681:./state.h     **** }
 682:./state.h     **** 
 683:./state.h     **** /// Get position in ECEF coordinates (float).
 684:./state.h     **** static inline struct EcefCoor_f *stateGetPositionEcef_f(void)
 685:./state.h     **** {
 686:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_F)) {
 687:./state.h     ****     stateCalcPositionEcef_f();
 688:./state.h     ****   }
 689:./state.h     ****   return &state.ecef_pos_f;
 690:./state.h     **** }
 691:./state.h     **** 
 692:./state.h     **** /// Get position in local NED coordinates (float).
 693:./state.h     **** static inline struct NedCoor_f *stateGetPositionNed_f(void)
 694:./state.h     **** {
 695:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_F)) {
 696:./state.h     ****     stateCalcPositionNed_f();
 697:./state.h     ****   }
 698:./state.h     ****   return &state.ned_pos_f;
 699:./state.h     **** }
 700:./state.h     **** 
 701:./state.h     **** /// Get position in local ENU coordinates (float).
 702:./state.h     **** static inline struct EnuCoor_f *stateGetPositionEnu_f(void)
 703:./state.h     **** {
 704:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_F)) {
 705:./state.h     ****     stateCalcPositionEnu_f();
 706:./state.h     ****   }
 707:./state.h     ****   return &state.enu_pos_f;
 708:./state.h     **** }
 709:./state.h     **** 
 710:./state.h     **** /// Get position in LLA coordinates (float).
 711:./state.h     **** static inline struct LlaCoor_f *stateGetPositionLla_f(void)
 712:./state.h     **** {
 713:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_F)) {
 714:./state.h     ****     stateCalcPositionLla_f();
 715:./state.h     ****   }
 716:./state.h     ****   return &state.lla_pos_f;
 717:./state.h     **** }
 718:./state.h     **** 
 719:./state.h     **** /** @}*/
 720:./state.h     **** 
 721:./state.h     **** 
 722:./state.h     **** 
 723:./state.h     **** /******************************************************************************
 724:./state.h     ****  *                                                                            *
 725:./state.h     ****  * Set and Get functions for the SPEED representations                        *
 726:./state.h     ****  *                                                                            *
 727:./state.h     ****  *****************************************************************************/
 728:./state.h     **** /** @addtogroup state_velocity
 729:./state.h     ****  *  @{ */
 730:./state.h     **** 
 731:./state.h     **** /************* declaration of transformation functions ************/
 732:./state.h     **** extern void stateCalcSpeedNed_i(void);
 733:./state.h     **** extern void stateCalcSpeedEnu_i(void);
 734:./state.h     **** extern void stateCalcSpeedEcef_i(void);
 735:./state.h     **** extern void stateCalcHorizontalSpeedNorm_i(void);
 736:./state.h     **** extern void stateCalcHorizontalSpeedDir_i(void);
 737:./state.h     **** extern void stateCalcSpeedNed_f(void);
 738:./state.h     **** extern void stateCalcSpeedEnu_f(void);
 739:./state.h     **** extern void stateCalcSpeedEcef_f(void);
 740:./state.h     **** extern void stateCalcHorizontalSpeedNorm_f(void);
 741:./state.h     **** extern void stateCalcHorizontalSpeedDir_f(void);
 742:./state.h     **** 
 743:./state.h     **** /************************ Set functions ****************************/
 744:./state.h     **** 
 745:./state.h     **** /// Set ground speed in local NED coordinates (int).
 746:./state.h     **** static inline void stateSetSpeedNed_i(struct NedCoor_i *ned_speed)
 747:./state.h     **** {
 748:./state.h     ****   VECT3_COPY(state.ned_speed_i, *ned_speed);
 749:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 750:./state.h     ****   state.speed_status = (1 << SPEED_NED_I);
 751:./state.h     **** }
 752:./state.h     **** 
 753:./state.h     **** /// Set ground speed in local ENU coordinates (int).
 754:./state.h     **** static inline void stateSetSpeedEnu_i(struct EnuCoor_i *enu_speed)
 755:./state.h     **** {
 756:./state.h     ****   VECT3_COPY(state.enu_speed_i, *enu_speed);
 757:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 758:./state.h     ****   state.speed_status = (1 << SPEED_ENU_I);
 759:./state.h     **** }
 760:./state.h     **** 
 761:./state.h     **** /// Set ground speed in ECEF coordinates (int).
 762:./state.h     **** static inline void stateSetSpeedEcef_i(struct EcefCoor_i *ecef_speed)
 763:./state.h     **** {
 764:./state.h     ****   VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 765:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 766:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_I);
 767:./state.h     **** }
 768:./state.h     **** 
 769:./state.h     **** /// Set multiple speed coordinates (int).
 770:./state.h     **** static inline void stateSetSpeed_i(
 771:./state.h     ****   struct EcefCoor_i *ecef_speed,
 772:./state.h     ****   struct NedCoor_i *ned_speed,
 773:./state.h     ****   struct EnuCoor_i *enu_speed)
 774:./state.h     **** {
 775:./state.h     ****   /* clear all status bit */
 776:./state.h     ****   state.speed_status = 0;
 777:./state.h     ****   if (ecef_speed != NULL) {
 778:./state.h     ****     VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 779:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_I);
 780:./state.h     ****   }
 781:./state.h     ****   if (ned_speed != NULL) {
 782:./state.h     ****     VECT3_COPY(state.ned_speed_i, *ned_speed);
 783:./state.h     ****     state.speed_status |= (1 << SPEED_NED_I);
 784:./state.h     ****   }
 785:./state.h     ****   if (enu_speed != NULL) {
 786:./state.h     ****     VECT3_COPY(state.enu_speed_i, *enu_speed);
 787:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_I);
 788:./state.h     ****   }
 789:./state.h     **** }
 790:./state.h     **** 
 791:./state.h     **** /// Set ground speed in local NED coordinates (float).
 792:./state.h     **** static inline void stateSetSpeedNed_f(struct NedCoor_f *ned_speed)
 793:./state.h     **** {
 794:./state.h     ****   VECT3_COPY(state.ned_speed_f, *ned_speed);
 795:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 796:./state.h     ****   state.speed_status = (1 << SPEED_NED_F);
 797:./state.h     **** }
 798:./state.h     **** 
 799:./state.h     **** /// Set ground speed in local ENU coordinates (float).
 800:./state.h     **** static inline void stateSetSpeedEnu_f(struct EnuCoor_f *enu_speed)
 801:./state.h     **** {
 802:./state.h     ****   VECT3_COPY(state.enu_speed_f, *enu_speed);
 803:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 804:./state.h     ****   state.speed_status = (1 << SPEED_ENU_F);
 805:./state.h     **** }
 806:./state.h     **** 
 807:./state.h     **** /// Set ground speed in ECEF coordinates (float).
 808:./state.h     **** static inline void stateSetSpeedEcef_f(struct EcefCoor_f *ecef_speed)
 809:./state.h     **** {
 810:./state.h     ****   VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 811:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 812:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_F);
 813:./state.h     **** }
 814:./state.h     **** 
 815:./state.h     **** /// Set multiple speed coordinates (float).
 816:./state.h     **** static inline void stateSetSpeed_f(
 817:./state.h     ****   struct EcefCoor_f *ecef_speed,
 818:./state.h     ****   struct NedCoor_f *ned_speed,
 819:./state.h     ****   struct EnuCoor_f *enu_speed)
 820:./state.h     **** {
 821:./state.h     ****   /* clear all status bit */
 822:./state.h     ****   state.speed_status = 0;
 823:./state.h     ****   if (ecef_speed != NULL) {
 824:./state.h     ****     VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 825:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_F);
 826:./state.h     ****   }
 827:./state.h     ****   if (ned_speed != NULL) {
 828:./state.h     ****     VECT3_COPY(state.ned_speed_f, *ned_speed);
 829:./state.h     ****     state.speed_status |= (1 << SPEED_NED_F);
 830:./state.h     ****   }
 831:./state.h     ****   if (enu_speed != NULL) {
 832:./state.h     ****     VECT3_COPY(state.enu_speed_f, *enu_speed);
 833:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_F);
 834:./state.h     ****   }
 835:./state.h     **** }
 836:./state.h     **** 
 837:./state.h     **** /************************ Get functions ****************************/
 838:./state.h     **** 
 839:./state.h     **** /// Get ground speed in local NED coordinates (int).
 840:./state.h     **** static inline struct NedCoor_i *stateGetSpeedNed_i(void)
 841:./state.h     **** {
 842:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_I)) {
 843:./state.h     ****     stateCalcSpeedNed_i();
 844:./state.h     ****   }
 845:./state.h     ****   return &state.ned_speed_i;
 846:./state.h     **** }
 847:./state.h     **** 
 848:./state.h     **** /// Get ground speed in local ENU coordinates (int).
 849:./state.h     **** static inline struct EnuCoor_i *stateGetSpeedEnu_i(void)
 850:./state.h     **** {
 851:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_I)) {
 852:./state.h     ****     stateCalcSpeedEnu_i();
 853:./state.h     ****   }
 854:./state.h     ****   return &state.enu_speed_i;
 855:./state.h     **** }
 856:./state.h     **** 
 857:./state.h     **** /// Get ground speed in ECEF coordinates (int).
 858:./state.h     **** static inline struct EcefCoor_i *stateGetSpeedEcef_i(void)
 859:./state.h     **** {
 860:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_I)) {
 861:./state.h     ****     stateCalcSpeedEcef_i();
 862:./state.h     ****   }
 863:./state.h     ****   return &state.ecef_speed_i;
 864:./state.h     **** }
 865:./state.h     **** 
 866:./state.h     **** /// Get norm of horizontal ground speed (int).
 867:./state.h     **** static inline uint32_t *stateGetHorizontalSpeedNorm_i(void)
 868:./state.h     **** {
 869:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_I)) {
 870:./state.h     ****     stateCalcHorizontalSpeedNorm_i();
 871:./state.h     ****   }
 872:./state.h     ****   return &state.h_speed_norm_i;
 873:./state.h     **** }
 874:./state.h     **** 
 875:./state.h     **** /// Get dir of horizontal ground speed (int).
 876:./state.h     **** static inline int32_t *stateGetHorizontalSpeedDir_i(void)
 877:./state.h     **** {
 878:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_I)) {
 879:./state.h     ****     stateCalcHorizontalSpeedDir_i();
 880:./state.h     ****   }
 881:./state.h     ****   return &state.h_speed_dir_i;
 882:./state.h     **** }
 883:./state.h     **** 
 884:./state.h     **** /// Get ground speed in local NED coordinates (float).
 885:./state.h     **** static inline struct NedCoor_f *stateGetSpeedNed_f(void)
 886:./state.h     **** {
 887:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_F)) {
 888:./state.h     ****     stateCalcSpeedNed_f();
 889:./state.h     ****   }
 890:./state.h     ****   return &state.ned_speed_f;
 891:./state.h     **** }
 892:./state.h     **** 
 893:./state.h     **** /// Get ground speed in local ENU coordinates (float).
 894:./state.h     **** static inline struct EnuCoor_f *stateGetSpeedEnu_f(void)
 895:./state.h     **** {
 896:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_F)) {
 897:./state.h     ****     stateCalcSpeedEnu_f();
 898:./state.h     ****   }
 899:./state.h     ****   return &state.enu_speed_f;
 900:./state.h     **** }
 901:./state.h     **** 
 902:./state.h     **** /// Get ground speed in ECEF coordinates (float).
 903:./state.h     **** static inline struct EcefCoor_f *stateGetSpeedEcef_f(void)
 904:./state.h     **** {
 905:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_F)) {
 906:./state.h     ****     stateCalcSpeedEcef_f();
 907:./state.h     ****   }
 908:./state.h     ****   return &state.ecef_speed_f;
 909:./state.h     **** }
 910:./state.h     **** 
 911:./state.h     **** /// Get norm of horizontal ground speed (float).
 912:./state.h     **** static inline float *stateGetHorizontalSpeedNorm_f(void)
 913:./state.h     **** {
 914:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_F)) {
 915:./state.h     ****     stateCalcHorizontalSpeedNorm_f();
 916:./state.h     ****   }
 917:./state.h     ****   return &state.h_speed_norm_f;
 918:./state.h     **** }
 919:./state.h     **** 
 920:./state.h     **** /// Get dir of horizontal ground speed (float).
 921:./state.h     **** static inline float *stateGetHorizontalSpeedDir_f(void)
 922:./state.h     **** {
 923:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_F)) {
 924:./state.h     ****     stateCalcHorizontalSpeedDir_f();
 925:./state.h     ****   }
 926:./state.h     ****   return &state.h_speed_dir_f;
 927:./state.h     **** }
 928:./state.h     **** /** @}*/
 929:./state.h     **** 
 930:./state.h     **** 
 931:./state.h     **** 
 932:./state.h     **** /******************************************************************************
 933:./state.h     ****  *                                                                            *
 934:./state.h     ****  * Set and Get functions for the ACCELERATION representations                 *
 935:./state.h     ****  *                                                                            *
 936:./state.h     ****  *****************************************************************************/
 937:./state.h     **** /** @addtogroup state_acceleration
 938:./state.h     ****  *  @{ */
 939:./state.h     **** 
 940:./state.h     **** /************* declaration of transformation functions ************/
 941:./state.h     **** extern void stateCalcAccelNed_i(void);
 942:./state.h     **** extern void stateCalcAccelEcef_i(void);
 943:./state.h     **** extern void stateCalcAccelNed_f(void);
 944:./state.h     **** extern void stateCalcAccelEcef_f(void);
 945:./state.h     **** 
 946:./state.h     **** /*********************** validity test functions ******************/
 947:./state.h     **** 
 948:./state.h     **** /// Test if accelerations are valid.
 949:./state.h     **** static inline bool_t stateIsAccelValid(void)
 950:./state.h     **** {
 951:./state.h     ****   return (state.accel_status);
 952:./state.h     **** }
 953:./state.h     **** 
 954:./state.h     **** /************************ Set functions ****************************/
 955:./state.h     **** 
 956:./state.h     **** /// Set acceleration in NED coordinates (int).
 957:./state.h     **** static inline void stateSetAccelNed_i(struct NedCoor_i *ned_accel)
 958:./state.h     **** {
 959:./state.h     ****   VECT3_COPY(state.ned_accel_i, *ned_accel);
 960:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 961:./state.h     ****   state.accel_status = (1 << ACCEL_NED_I);
 962:./state.h     **** }
 963:./state.h     **** 
 964:./state.h     **** /// Set acceleration in ECEF coordinates (int).
 965:./state.h     **** static inline void stateSetAccelEcef_i(struct EcefCoor_i *ecef_accel)
 966:./state.h     **** {
 967:./state.h     ****   VECT3_COPY(state.ecef_accel_i, *ecef_accel);
 968:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 969:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_I);
 970:./state.h     **** }
 971:./state.h     **** 
 972:./state.h     **** /// Set acceleration in NED coordinates (float).
 973:./state.h     **** static inline void stateSetAccelNed_f(struct NedCoor_f *ned_accel)
 974:./state.h     **** {
 975:./state.h     ****   VECT3_COPY(state.ned_accel_f, *ned_accel);
 976:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 977:./state.h     ****   state.accel_status = (1 << ACCEL_NED_F);
 978:./state.h     **** }
 979:./state.h     **** 
 980:./state.h     **** /// Set acceleration in ECEF coordinates (float).
 981:./state.h     **** static inline void stateSetAccelEcef_f(struct EcefCoor_f *ecef_accel)
 982:./state.h     **** {
 983:./state.h     ****   VECT3_COPY(state.ecef_accel_f, *ecef_accel);
 984:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 985:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_F);
 986:./state.h     **** }
 987:./state.h     **** 
 988:./state.h     **** /************************ Get functions ****************************/
 989:./state.h     **** 
 990:./state.h     **** /// Get acceleration in NED coordinates (int).
 991:./state.h     **** static inline struct NedCoor_i *stateGetAccelNed_i(void)
 992:./state.h     **** {
 993:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_I)) {
 994:./state.h     ****     stateCalcAccelNed_i();
 995:./state.h     ****   }
 996:./state.h     ****   return &state.ned_accel_i;
 997:./state.h     **** }
 998:./state.h     **** 
 999:./state.h     **** /// Get acceleration in ECEF coordinates (int).
1000:./state.h     **** static inline struct EcefCoor_i *stateGetAccelEcef_i(void)
1001:./state.h     **** {
1002:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_I)) {
1003:./state.h     ****     stateCalcAccelEcef_i();
1004:./state.h     ****   }
1005:./state.h     ****   return &state.ecef_accel_i;
1006:./state.h     **** }
1007:./state.h     **** 
1008:./state.h     **** /// Get acceleration in NED coordinates (float).
1009:./state.h     **** static inline struct NedCoor_f *stateGetAccelNed_f(void)
1010:./state.h     **** {
1011:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_F)) {
1012:./state.h     ****     stateCalcAccelNed_f();
1013:./state.h     ****   }
1014:./state.h     ****   return &state.ned_accel_f;
1015:./state.h     **** }
1016:./state.h     **** 
1017:./state.h     **** /// Get acceleration in ECEF coordinates (float).
1018:./state.h     **** static inline struct EcefCoor_f *stateGetAccelEcef_f(void)
1019:./state.h     **** {
1020:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_F)) {
1021:./state.h     ****     stateCalcAccelEcef_f();
1022:./state.h     ****   }
1023:./state.h     ****   return &state.ecef_accel_f;
1024:./state.h     **** }
1025:./state.h     **** /** @}*/
1026:./state.h     **** 
1027:./state.h     **** /******************************************************************************
1028:./state.h     **** *                                                                             *
1029:./state.h     **** * Set and Get functions for the ATTITUDE representations                      *
1030:./state.h     **** * (Calls the functions in math/pprz_orientation_conversion)                   *
1031:./state.h     **** *                                                                             *
1032:./state.h     **** *****************************************************************************/
1033:./state.h     **** /** @addtogroup state_attitude
1034:./state.h     **** * @{ */
1035:./state.h     **** /*********************** validity test functions ******************/
1036:./state.h     **** 
1037:./state.h     **** /// Test if attitudes are valid.
1038:./state.h     **** static inline bool_t stateIsAttitudeValid(void)
1039:./state.h     **** {
1040:./state.h     ****   return (orienationCheckValid(&state.ned_to_body_orientation));
1041:./state.h     **** }
1042:./state.h     **** 
1043:./state.h     **** /************************ Set functions ****************************/
1044:./state.h     **** 
1045:./state.h     **** /// Set vehicle body attitude from quaternion (int).
1046:./state.h     **** static inline void stateSetNedToBodyQuat_i(struct Int32Quat *ned_to_body_quat)
1047:./state.h     **** {
1048:./state.h     ****   orientationSetQuat_i(&state.ned_to_body_orientation, ned_to_body_quat);
1049:./state.h     **** }
1050:./state.h     **** 
1051:./state.h     **** /// Set vehicle body attitude from rotation matrix (int).
1052:./state.h     **** static inline void stateSetNedToBodyRMat_i(struct Int32RMat *ned_to_body_rmat)
1053:./state.h     **** {
1054:./state.h     ****   orientationSetRMat_i(&state.ned_to_body_orientation, ned_to_body_rmat);
1055:./state.h     **** }
1056:./state.h     **** 
1057:./state.h     **** /// Set vehicle body attitude from euler angles (int).
1058:./state.h     **** static inline void stateSetNedToBodyEulers_i(struct Int32Eulers *ned_to_body_eulers)
1059:./state.h     **** {
1060:./state.h     ****   orientationSetEulers_i(&state.ned_to_body_orientation, ned_to_body_eulers);
1061:./state.h     **** }
1062:./state.h     **** 
1063:./state.h     **** /// Set vehicle body attitude from quaternion (float).
1064:./state.h     **** static inline void stateSetNedToBodyQuat_f(struct FloatQuat *ned_to_body_quat)
1065:./state.h     **** {
1066:./state.h     ****   orientationSetQuat_f(&state.ned_to_body_orientation, ned_to_body_quat);
1067:./state.h     **** }
1068:./state.h     **** 
1069:./state.h     **** /// Set vehicle body attitude from rotation matrix (float).
1070:./state.h     **** static inline void stateSetNedToBodyRMat_f(struct FloatRMat *ned_to_body_rmat)
1071:./state.h     **** {
1072:./state.h     ****   orientationSetRMat_f(&state.ned_to_body_orientation, ned_to_body_rmat);
1073:./state.h     **** }
1074:./state.h     **** 
1075:./state.h     **** /// Set vehicle body attitude from euler angles (float).
1076:./state.h     **** static inline void stateSetNedToBodyEulers_f(struct FloatEulers *ned_to_body_eulers)
1077:./state.h     **** {
1078:./state.h     ****   orientationSetEulers_f(&state.ned_to_body_orientation, ned_to_body_eulers);
1079:./state.h     **** }
1080:./state.h     **** 
1081:./state.h     **** /************************ Get functions ****************************/
1082:./state.h     **** 
1083:./state.h     **** /// Get vehicle body attitude quaternion (int).
1084:./state.h     **** static inline struct Int32Quat *stateGetNedToBodyQuat_i(void)
1085:./state.h     **** {
1086:./state.h     ****   return orientationGetQuat_i(&state.ned_to_body_orientation);
1087:./state.h     **** }
1088:./state.h     **** 
1089:./state.h     **** /// Get vehicle body attitude rotation matrix (int).
1090:./state.h     **** static inline struct Int32RMat *stateGetNedToBodyRMat_i(void)
1091:./state.h     **** {
1092:./state.h     ****   return orientationGetRMat_i(&state.ned_to_body_orientation);
1093:./state.h     **** }
1094:./state.h     **** 
1095:./state.h     **** /// Get vehicle body attitude euler angles (int).
1096:./state.h     **** static inline struct Int32Eulers *stateGetNedToBodyEulers_i(void)
1097:./state.h     **** {
1098:./state.h     ****   return orientationGetEulers_i(&state.ned_to_body_orientation);
1099:./state.h     **** }
1100:./state.h     **** 
1101:./state.h     **** /// Get vehicle body attitude quaternion (float).
1102:./state.h     **** static inline struct FloatQuat *stateGetNedToBodyQuat_f(void)
1103:./state.h     **** {
1104:./state.h     ****   return orientationGetQuat_f(&state.ned_to_body_orientation);
1105:./state.h     **** }
1106:./state.h     **** 
1107:./state.h     **** /// Get vehicle body attitude rotation matrix (float).
1108:./state.h     **** static inline struct FloatRMat *stateGetNedToBodyRMat_f(void)
1109:./state.h     **** {
1110:./state.h     ****   return orientationGetRMat_f(&state.ned_to_body_orientation);
1111:./state.h     **** }
1112:./state.h     **** 
1113:./state.h     **** /// Get vehicle body attitude euler angles (float).
1114:./state.h     **** static inline struct FloatEulers *stateGetNedToBodyEulers_f(void)
1115:./state.h     **** {
1116:./state.h     ****   return orientationGetEulers_f(&state.ned_to_body_orientation);
 2192              		.loc 5 1116 0
 2193 003e 05F5D270 		add	r0, r5, #420
 2194 0042 FFF7FEFF 		bl	orientationGetEulers_f
 2195              	.LVL241:
 2196              	.LBE115:
 2197              	.LBE114:
 190:subsystems/imu.c ****       // adjust imu_to_body roll and pitch by current NedToBody roll and pitch
 191:subsystems/imu.c ****       body_to_imu_eulers.phi += stateGetNedToBodyEulers_f()->phi;
 2198              		.loc 2 191 0
 2199 0046 DDED037A 		flds	s15, [sp, #12]
 2200 004a 90ED008A 		flds	s16, [r0]
 2201              	.LBB116:
 2202              	.LBB117:
 2203              		.loc 5 1116 0
 2204 004e 05F5D270 		add	r0, r5, #420
 2205              	.LBE117:
 2206              	.LBE116:
 2207              		.loc 2 191 0
 2208 0052 37EE888A 		fadds	s16, s15, s16
 2209              	.LBB119:
 2210              	.LBB118:
 2211              		.loc 5 1116 0
 2212 0056 FFF7FEFF 		bl	orientationGetEulers_f
 2213              	.LVL242:
 2214              	.LBE118:
 2215              	.LBE119:
 192:subsystems/imu.c ****       body_to_imu_eulers.theta += stateGetNedToBodyEulers_f()->theta;
 2216              		.loc 2 192 0
 2217 005a DDED047A 		flds	s15, [sp, #16]
 2218 005e 90ED017A 		flds	s14, [r0, #4]
 2219              	.LBB120:
 2220              	.LBB121:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 2221              		.loc 1 183 0
 2222 0062 059B     		ldr	r3, [sp, #20]	@ float
 2223 0064 84ED368A 		fsts	s16, [r4, #216]
 2224              	.LBE121:
 2225              	.LBE120:
 2226              		.loc 2 192 0
 2227 0068 77EE877A 		fadds	s15, s15, s14
 2228              	.LVL243:
 2229              	.LBB123:
 2230              	.LBB122:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 2231              		.loc 1 183 0
 2232 006c C4ED377A 		fsts	s15, [r4, #220]
 2233 0070 0BE0     		b	.L86
 2234              	.LVL244:
 2235              	.L83:
 2236              	.LBE122:
 2237              	.LBE123:
 193:subsystems/imu.c ****       orientationSetEulers_f(&imu.body_to_imu, &body_to_imu_eulers);
 194:subsystems/imu.c ****       AbiSendMsgBODY_TO_IMU_QUAT(1, orientationGetQuat_f(&imu.body_to_imu));
 195:subsystems/imu.c ****     } else {
 196:subsystems/imu.c ****       // indicate that we couldn't set to current roll/pitch
 197:subsystems/imu.c ****       imu.b2i_set_current = FALSE;
 2238              		.loc 2 197 0
 2239 0072 84F80831 		strb	r3, [r4, #264]
 2240              	.LBE113:
 198:subsystems/imu.c ****     }
 199:subsystems/imu.c ****   } else {
 200:subsystems/imu.c ****     // reset to BODY_TO_IMU as defined in airframe file
 201:subsystems/imu.c ****     struct FloatEulers body_to_imu_eulers =
 202:subsystems/imu.c ****     {IMU_BODY_TO_IMU_PHI, IMU_BODY_TO_IMU_THETA, IMU_BODY_TO_IMU_PSI};
 203:subsystems/imu.c ****     orientationSetEulers_f(&imu.body_to_imu, &body_to_imu_eulers);
 204:subsystems/imu.c ****     AbiSendMsgBODY_TO_IMU_QUAT(1, orientationGetQuat_f(&imu.body_to_imu));
 205:subsystems/imu.c ****   }
 206:subsystems/imu.c **** }
 2241              		.loc 2 206 0
 2242 0076 07B0     		add	sp, sp, #28
 2243              		.cfi_remember_state
 2244              		.cfi_def_cfa_offset 20
 2245              		@ sp needed
 2246 0078 BDEC028B 		fldmfdd	sp!, {d8}
 2247              		.cfi_restore 80
 2248              		.cfi_restore 81
 2249              		.cfi_def_cfa_offset 12
 2250 007c 30BD     		pop	{r4, r5, pc}
 2251              	.LVL245:
 2252              	.L82:
 2253              		.cfi_restore_state
 2254              	.LBB124:
 2255              	.LBB125:
 2256              	.LBB126:
 183:./math/pprz_orientation_conversion.h ****   /* clear bits for all attitude representations and only set the new one */
 2257              		.loc 1 183 0
 2258 007e 0C4B     		ldr	r3, .L87+8
 2259 0080 C4F8D830 		str	r3, [r4, #216]	@ float
 2260 0084 0023     		movs	r3, #0
 2261 0086 C4F8DC30 		str	r3, [r4, #220]	@ float
 2262              	.LVL246:
 2263              	.L86:
 2264 008a C4F8E030 		str	r3, [r4, #224]	@ float
 185:./math/pprz_orientation_conversion.h **** }
 2265              		.loc 1 185 0
 2266 008e 1023     		movs	r3, #16
 2267 0090 84F88430 		strb	r3, [r4, #132]
 2268              	.LBE126:
 2269              	.LBE125:
 204:subsystems/imu.c ****   }
 2270              		.loc 2 204 0
 2271 0094 FFF7FEFF 		bl	orientationGetQuat_f.constprop.11
 2272              	.LVL247:
 2273              	.LBE124:
 2274              		.loc 2 206 0
 2275 0098 07B0     		add	sp, sp, #28
 2276              		.cfi_def_cfa_offset 20
 2277              		@ sp needed
 2278 009a BDEC028B 		fldmfdd	sp!, {d8}
 2279              		.cfi_restore 80
 2280              		.cfi_restore 81
 2281              		.cfi_def_cfa_offset 12
 2282 009e BDE83040 		pop	{r4, r5, lr}
 2283              		.cfi_restore 14
 2284              		.cfi_restore 5
 2285              		.cfi_restore 4
 2286              		.cfi_def_cfa_offset 0
 2287              	.LBB127:
 204:subsystems/imu.c ****   }
 2288              		.loc 2 204 0
 2289 00a2 FFF7FEBF 		b	AbiSendMsgBODY_TO_IMU_QUAT.constprop.10
 2290              	.LVL248:
 2291              	.L88:
 2292 00a6 00BF     		.align	2
 2293              	.L87:
 2294 00a8 00000000 		.word	.LANCHOR0
 2295 00ac 00000000 		.word	state
 2296 00b0 DB0F4940 		.word	1078530011
 2297              	.LBE127:
 2298              		.cfi_endproc
 2299              	.LFE490:
 2301              		.section	.text.imu_periodic,"ax",%progbits
 2302              		.align	1
 2303              		.weak	imu_periodic
 2304              		.thumb
 2305              		.thumb_func
 2307              	imu_periodic:
 2308              	.LFB491:
 207:subsystems/imu.c **** 
 208:subsystems/imu.c **** 
 209:subsystems/imu.c **** // weak functions, used if not explicitly provided by implementation
 210:subsystems/imu.c **** 
 211:subsystems/imu.c **** void WEAK imu_periodic(void)
 212:subsystems/imu.c **** {
 2309              		.loc 2 212 0
 2310              		.cfi_startproc
 2311              		@ args = 0, pretend = 0, frame = 0
 2312              		@ frame_needed = 0, uses_anonymous_args = 0
 2313              		@ link register save eliminated.
 2314 0000 7047     		bx	lr
 2315              		.cfi_endproc
 2316              	.LFE491:
 2318              		.section	.text.imu_scale_gyro,"ax",%progbits
 2319              		.align	1
 2320              		.weak	imu_scale_gyro
 2321              		.thumb
 2322              		.thumb_func
 2324              	imu_scale_gyro:
 2325              	.LFB492:
 213:subsystems/imu.c **** }
 214:subsystems/imu.c **** 
 215:subsystems/imu.c **** void WEAK imu_scale_gyro(struct Imu *_imu)
 216:subsystems/imu.c **** {
 2326              		.loc 2 216 0
 2327              		.cfi_startproc
 2328              		@ args = 0, pretend = 0, frame = 0
 2329              		@ frame_needed = 0, uses_anonymous_args = 0
 2330              	.LVL249:
 217:subsystems/imu.c ****   RATES_COPY(_imu->gyro_prev, _imu->gyro);
 2331              		.loc 2 217 0
 2332 0000 0368     		ldr	r3, [r0]
 2333 0002 4362     		str	r3, [r0, #36]
 2334 0004 4368     		ldr	r3, [r0, #4]
 2335 0006 8362     		str	r3, [r0, #40]
 2336 0008 8368     		ldr	r3, [r0, #8]
 2337 000a C362     		str	r3, [r0, #44]
 218:subsystems/imu.c ****   _imu->gyro.p = ((_imu->gyro_unscaled.p - _imu->gyro_neutral.p) * IMU_GYRO_P_SIGN *
 2338              		.loc 2 218 0
 2339 000c C26B     		ldr	r2, [r0, #60]
 2340 000e 036E     		ldr	r3, [r0, #96]
 2341 0010 9A1A     		subs	r2, r3, r2
 2342 0012 44F25F73 		movw	r3, #18271
 219:subsystems/imu.c ****                   IMU_GYRO_P_SENS_NUM) / IMU_GYRO_P_SENS_DEN;
 2343              		.loc 2 219 0
 2344 0016 42F2BF01 		movw	r1, #8383
 218:subsystems/imu.c ****   _imu->gyro.p = ((_imu->gyro_unscaled.p - _imu->gyro_neutral.p) * IMU_GYRO_P_SIGN *
 2345              		.loc 2 218 0
 2346 001a 5A43     		muls	r2, r3, r2
 216:subsystems/imu.c ****   RATES_COPY(_imu->gyro_prev, _imu->gyro);
 2347              		.loc 2 216 0
 2348 001c 10B5     		push	{r4, lr}
 2349              		.cfi_def_cfa_offset 8
 2350              		.cfi_offset 4, -8
 2351              		.cfi_offset 14, -4
 2352              		.loc 2 219 0
 2353 001e 92FBF1F2 		sdiv	r2, r2, r1
 220:subsystems/imu.c ****   _imu->gyro.q = ((_imu->gyro_unscaled.q - _imu->gyro_neutral.q) * IMU_GYRO_Q_SIGN *
 2354              		.loc 2 220 0
 2355 0022 046C     		ldr	r4, [r0, #64]
 218:subsystems/imu.c ****                   IMU_GYRO_P_SENS_NUM) / IMU_GYRO_P_SENS_DEN;
 2356              		.loc 2 218 0
 2357 0024 0260     		str	r2, [r0]
 2358              		.loc 2 220 0
 2359 0026 426E     		ldr	r2, [r0, #100]
 2360 0028 121B     		subs	r2, r2, r4
 2361 002a 5A43     		muls	r2, r3, r2
 221:subsystems/imu.c ****                   IMU_GYRO_Q_SENS_NUM) / IMU_GYRO_Q_SENS_DEN;
 222:subsystems/imu.c ****   _imu->gyro.r = ((_imu->gyro_unscaled.r - _imu->gyro_neutral.r) * IMU_GYRO_R_SIGN *
 2362              		.loc 2 222 0
 2363 002c 446C     		ldr	r4, [r0, #68]
 221:subsystems/imu.c ****                   IMU_GYRO_Q_SENS_NUM) / IMU_GYRO_Q_SENS_DEN;
 2364              		.loc 2 221 0
 2365 002e 92FBF1F2 		sdiv	r2, r2, r1
 220:subsystems/imu.c ****                   IMU_GYRO_Q_SENS_NUM) / IMU_GYRO_Q_SENS_DEN;
 2366              		.loc 2 220 0
 2367 0032 4260     		str	r2, [r0, #4]
 2368              		.loc 2 222 0
 2369 0034 826E     		ldr	r2, [r0, #104]
 2370 0036 121B     		subs	r2, r2, r4
 2371 0038 5343     		muls	r3, r2, r3
 223:subsystems/imu.c ****                   IMU_GYRO_R_SENS_NUM) / IMU_GYRO_R_SENS_DEN;
 2372              		.loc 2 223 0
 2373 003a 93FBF1F3 		sdiv	r3, r3, r1
 222:subsystems/imu.c ****                   IMU_GYRO_R_SENS_NUM) / IMU_GYRO_R_SENS_DEN;
 2374              		.loc 2 222 0
 2375 003e 8360     		str	r3, [r0, #8]
 2376 0040 10BD     		pop	{r4, pc}
 2377              		.cfi_endproc
 2378              	.LFE492:
 2380              		.section	.text.imu_scale_accel,"ax",%progbits
 2381              		.align	1
 2382              		.weak	imu_scale_accel
 2383              		.thumb
 2384              		.thumb_func
 2386              	imu_scale_accel:
 2387              	.LFB493:
 224:subsystems/imu.c **** }
 225:subsystems/imu.c **** 
 226:subsystems/imu.c **** void WEAK imu_scale_accel(struct Imu *_imu)
 227:subsystems/imu.c **** {
 2388              		.loc 2 227 0
 2389              		.cfi_startproc
 2390              		@ args = 0, pretend = 0, frame = 0
 2391              		@ frame_needed = 0, uses_anonymous_args = 0
 2392              		@ link register save eliminated.
 2393              	.LVL250:
 228:subsystems/imu.c ****   VECT3_COPY(_imu->accel_prev, _imu->accel);
 2394              		.loc 2 228 0
 2395 0000 C368     		ldr	r3, [r0, #12]
 2396 0002 0363     		str	r3, [r0, #48]
 2397 0004 0369     		ldr	r3, [r0, #16]
 2398 0006 4363     		str	r3, [r0, #52]
 2399 0008 4369     		ldr	r3, [r0, #20]
 229:subsystems/imu.c ****   _imu->accel.x = ((_imu->accel_unscaled.x - _imu->accel_neutral.x) * IMU_ACCEL_X_SIGN *
 2400              		.loc 2 229 0
 2401 000a 826C     		ldr	r2, [r0, #72]
 228:subsystems/imu.c ****   VECT3_COPY(_imu->accel_prev, _imu->accel);
 2402              		.loc 2 228 0
 2403 000c 8363     		str	r3, [r0, #56]
 2404              		.loc 2 229 0
 2405 000e C36E     		ldr	r3, [r0, #108]
 2406 0010 9B1A     		subs	r3, r3, r2
 2407 0012 4CF24942 		movw	r2, #50249
 2408 0016 5343     		muls	r3, r2, r3
 230:subsystems/imu.c ****                    IMU_ACCEL_X_SENS_NUM) / IMU_ACCEL_X_SENS_DEN;
 2409              		.loc 2 230 0
 2410 0018 44F6C672 		movw	r2, #20422
 2411 001c 93FBF2F3 		sdiv	r3, r3, r2
 231:subsystems/imu.c ****   _imu->accel.y = ((_imu->accel_unscaled.y - _imu->accel_neutral.y) * IMU_ACCEL_Y_SIGN *
 2412              		.loc 2 231 0
 2413 0020 C26C     		ldr	r2, [r0, #76]
 229:subsystems/imu.c ****   _imu->accel.x = ((_imu->accel_unscaled.x - _imu->accel_neutral.x) * IMU_ACCEL_X_SIGN *
 2414              		.loc 2 229 0
 2415 0022 C360     		str	r3, [r0, #12]
 2416              		.loc 2 231 0
 2417 0024 036F     		ldr	r3, [r0, #112]
 2418 0026 9B1A     		subs	r3, r3, r2
 2419 0028 46F25A22 		movw	r2, #25178
 2420 002c 5343     		muls	r3, r2, r3
 232:subsystems/imu.c ****                    IMU_ACCEL_Y_SENS_NUM) / IMU_ACCEL_Y_SENS_DEN;
 2421              		.loc 2 232 0
 2422 002e 42F60D02 		movw	r2, #10253
 2423 0032 93FBF2F3 		sdiv	r3, r3, r2
 233:subsystems/imu.c ****   _imu->accel.z = ((_imu->accel_unscaled.z - _imu->accel_neutral.z) * IMU_ACCEL_Z_SIGN *
 2424              		.loc 2 233 0
 2425 0036 026D     		ldr	r2, [r0, #80]
 231:subsystems/imu.c ****   _imu->accel.y = ((_imu->accel_unscaled.y - _imu->accel_neutral.y) * IMU_ACCEL_Y_SIGN *
 2426              		.loc 2 231 0
 2427 0038 0361     		str	r3, [r0, #16]
 2428              		.loc 2 233 0
 2429 003a 436F     		ldr	r3, [r0, #116]
 2430 003c 9B1A     		subs	r3, r3, r2
 2431 003e 42F62E42 		movw	r2, #11310
 2432 0042 5343     		muls	r3, r2, r3
 234:subsystems/imu.c ****                    IMU_ACCEL_Z_SENS_NUM) / IMU_ACCEL_Z_SENS_DEN;
 2433              		.loc 2 234 0
 2434 0044 41F21722 		movw	r2, #4631
 2435 0048 93FBF2F3 		sdiv	r3, r3, r2
 233:subsystems/imu.c ****   _imu->accel.z = ((_imu->accel_unscaled.z - _imu->accel_neutral.z) * IMU_ACCEL_Z_SIGN *
 2436              		.loc 2 233 0
 2437 004c 4361     		str	r3, [r0, #20]
 2438 004e 7047     		bx	lr
 2439              		.cfi_endproc
 2440              	.LFE493:
 2442              		.section	.text.imu_scale_mag,"ax",%progbits
 2443              		.align	1
 2444              		.weak	imu_scale_mag
 2445              		.thumb
 2446              		.thumb_func
 2448              	imu_scale_mag:
 2449              	.LFB494:
 235:subsystems/imu.c **** }
 236:subsystems/imu.c **** 
 237:subsystems/imu.c **** #if defined IMU_MAG_X_CURRENT_COEF && defined IMU_MAG_Y_CURRENT_COEF && defined IMU_MAG_Z_CURRENT_C
 238:subsystems/imu.c **** #include "subsystems/electrical.h"
 239:subsystems/imu.c **** void WEAK imu_scale_mag(struct Imu *_imu)
 240:subsystems/imu.c **** {
 241:subsystems/imu.c ****   struct Int32Vect3 mag_correction;
 242:subsystems/imu.c ****   mag_correction.x = (int32_t)(IMU_MAG_X_CURRENT_COEF * (float) electrical.current);
 243:subsystems/imu.c ****   mag_correction.y = (int32_t)(IMU_MAG_Y_CURRENT_COEF * (float) electrical.current);
 244:subsystems/imu.c ****   mag_correction.z = (int32_t)(IMU_MAG_Z_CURRENT_COEF * (float) electrical.current);
 245:subsystems/imu.c ****   _imu->mag.x = (((_imu->mag_unscaled.x - mag_correction.x) - _imu->mag_neutral.x) *
 246:subsystems/imu.c ****                  IMU_MAG_X_SIGN * IMU_MAG_X_SENS_NUM) / IMU_MAG_X_SENS_DEN;
 247:subsystems/imu.c ****   _imu->mag.y = (((_imu->mag_unscaled.y - mag_correction.y) - _imu->mag_neutral.y) *
 248:subsystems/imu.c ****                  IMU_MAG_Y_SIGN * IMU_MAG_Y_SENS_NUM) / IMU_MAG_Y_SENS_DEN;
 249:subsystems/imu.c ****   _imu->mag.z = (((_imu->mag_unscaled.z - mag_correction.z) - _imu->mag_neutral.z) *
 250:subsystems/imu.c ****                  IMU_MAG_Z_SIGN * IMU_MAG_Z_SENS_NUM) / IMU_MAG_Z_SENS_DEN;
 251:subsystems/imu.c **** }
 252:subsystems/imu.c **** #elif USE_MAGNETOMETER
 253:subsystems/imu.c **** void WEAK imu_scale_mag(struct Imu *_imu)
 254:subsystems/imu.c **** {
 2450              		.loc 2 254 0
 2451              		.cfi_startproc
 2452              		@ args = 0, pretend = 0, frame = 0
 2453              		@ frame_needed = 0, uses_anonymous_args = 0
 2454              		@ link register save eliminated.
 2455              	.LVL251:
 255:subsystems/imu.c ****   _imu->mag.x = ((_imu->mag_unscaled.x - _imu->mag_neutral.x) * IMU_MAG_X_SIGN *
 2456              		.loc 2 255 0
 2457 0000 426D     		ldr	r2, [r0, #84]
 2458 0002 836F     		ldr	r3, [r0, #120]
 2459 0004 9B1A     		subs	r3, r3, r2
 2460 0006 43F6F512 		movw	r2, #14837
 2461 000a 5343     		muls	r3, r2, r3
 256:subsystems/imu.c ****                  IMU_MAG_X_SENS_NUM) / IMU_MAG_X_SENS_DEN;
 2462              		.loc 2 256 0
 2463 000c 41F2B212 		movw	r2, #4530
 2464 0010 93FBF2F3 		sdiv	r3, r3, r2
 257:subsystems/imu.c ****   _imu->mag.y = ((_imu->mag_unscaled.y - _imu->mag_neutral.y) * IMU_MAG_Y_SIGN *
 2465              		.loc 2 257 0
 2466 0014 C26F     		ldr	r2, [r0, #124]
 255:subsystems/imu.c ****   _imu->mag.x = ((_imu->mag_unscaled.x - _imu->mag_neutral.x) * IMU_MAG_X_SIGN *
 2467              		.loc 2 255 0
 2468 0016 8361     		str	r3, [r0, #24]
 2469              		.loc 2 257 0
 2470 0018 836D     		ldr	r3, [r0, #88]
 2471 001a 9B1A     		subs	r3, r3, r2
 2472 001c 41F25922 		movw	r2, #4697
 2473 0020 5343     		muls	r3, r2, r3
 258:subsystems/imu.c ****                  IMU_MAG_Y_SENS_NUM) / IMU_MAG_Y_SENS_DEN;
 2474              		.loc 2 258 0
 2475 0022 40F27952 		movw	r2, #1401
 2476 0026 93FBF2F3 		sdiv	r3, r3, r2
 259:subsystems/imu.c ****   _imu->mag.z = ((_imu->mag_unscaled.z - _imu->mag_neutral.z) * IMU_MAG_Z_SIGN *
 2477              		.loc 2 259 0
 2478 002a C26D     		ldr	r2, [r0, #92]
 257:subsystems/imu.c ****   _imu->mag.y = ((_imu->mag_unscaled.y - _imu->mag_neutral.y) * IMU_MAG_Y_SIGN *
 2479              		.loc 2 257 0
 2480 002c C361     		str	r3, [r0, #28]
 2481              		.loc 2 259 0
 2482 002e D0F88030 		ldr	r3, [r0, #128]
 2483 0032 9B1A     		subs	r3, r3, r2
 2484 0034 41F6D962 		movw	r2, #7897
 2485 0038 5343     		muls	r3, r2, r3
 260:subsystems/imu.c ****                  IMU_MAG_Z_SENS_NUM) / IMU_MAG_Z_SENS_DEN;
 2486              		.loc 2 260 0
 2487 003a 40F67802 		movw	r2, #2168
 2488 003e 93FBF2F3 		sdiv	r3, r3, r2
 259:subsystems/imu.c ****   _imu->mag.z = ((_imu->mag_unscaled.z - _imu->mag_neutral.z) * IMU_MAG_Z_SIGN *
 2489              		.loc 2 259 0
 2490 0042 0362     		str	r3, [r0, #32]
 2491 0044 7047     		bx	lr
 2492              		.cfi_endproc
 2493              	.LFE494:
 2495              		.global	imu
 2496              		.section	.rodata.str1.1,"aMS",%progbits,1
 2497              	.LC0:
 2498 0000 494D555F 		.ascii	"IMU_MAG_RAW\000"
 2498      4D41475F 
 2498      52415700 
 2499              	.LC1:
 2500 000c 494D555F 		.ascii	"IMU_ACCEL_RAW\000"
 2500      41434345 
 2500      4C5F5241 
 2500      5700
 2501              	.LC2:
 2502 001a 494D555F 		.ascii	"IMU_GYRO_RAW\000"
 2502      4759524F 
 2502      5F524157 
 2502      00
 2503              	.LC3:
 2504 0027 494D555F 		.ascii	"IMU_ACCEL\000"
 2504      41434345 
 2504      4C00
 2505              	.LC4:
 2506 0031 494D555F 		.ascii	"IMU_MAG\000"
 2506      4D414700 
 2507              	.LC5:
 2508 0039 494D555F 		.ascii	"IMU_GYRO\000"
 2508      4759524F 
 2508      00
 2509              	.LC6:
 2510 0042 494D555F 		.ascii	"IMU_MAG_SCALED\000"
 2510      4D41475F 
 2510      5343414C 
 2510      454400
 2511              	.LC7:
 2512 0051 494D555F 		.ascii	"IMU_ACCEL_SCALED\000"
 2512      41434345 
 2512      4C5F5343 
 2512      414C4544 
 2512      00
 2513              	.LC8:
 2514 0062 494D555F 		.ascii	"IMU_GYRO_SCALED\000"
 2514      4759524F 
 2514      5F534341 
 2514      4C454400 
 2515              		.section	.bss.imu,"aw",%nobits
 2516              		.align	2
 2517              		.set	.LANCHOR0,. + 0
 2520              	imu:
 2521 0000 00000000 		.space	268
 2521      00000000 
 2521      00000000 
 2521      00000000 
 2521      00000000 
 2522              		.text
 2523              	.Letext0:
 2524              		.file 6 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2525              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2526              		.file 8 "/home/dino/paparazzi/sw/include/std.h"
 2527              		.file 9 "./math/pprz_algebra_int.h"
 2528              		.file 10 "./math/pprz_algebra_float.h"
 2529              		.file 11 "./subsystems/imu.h"
 2530              		.file 12 "./math/pprz_geodetic_int.h"
 2531              		.file 13 "./math/pprz_geodetic_float.h"
 2532              		.file 14 "./mcu_periph/sys_time.h"
 2533              		.file 15 "./mcu_periph/link_device.h"
 2534              		.file 16 "./mcu_periph/uart.h"
 2535              		.file 17 "./subsystems/gps/gps_ubx.h"
 2536              		.file 18 "./subsystems/gps.h"
 2537              		.file 19 "./subsystems/abi_common.h"
 2538              		.file 20 "./subsystems/datalink/transport.h"
 2539              		.file 21 "./subsystems/datalink/xbee.h"
 2540              		.file 22 "./subsystems/datalink/telemetry_common.h"
 2541              		.file 23 "./subsystems/datalink/datalink.h"
 2542              		.file 24 "./subsystems/datalink/w5100.h"
 2543              		.file 25 "/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/periodic_telemetry.h"
 2544              		.file 26 "./subsystems/datalink/telemetry.h"
 2545              		.file 27 "../ext/libopencm3/include/libopencm3/stm32/f4/rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 imu.c
     /tmp/ccWSYFcW.s:20     .text.orientationGetEulers_f:00000000 $t
     /tmp/ccWSYFcW.s:24     .text.orientationGetEulers_f:00000000 orientationGetEulers_f
     /tmp/ccWSYFcW.s:54     .text.send_mag_raw:00000000 $t
     /tmp/ccWSYFcW.s:58     .text.send_mag_raw:00000000 send_mag_raw
     /tmp/ccWSYFcW.s:211    .text.send_mag_raw:000000c4 $d
     /tmp/ccWSYFcW.s:217    .text.send_accel_raw:00000000 $t
     /tmp/ccWSYFcW.s:221    .text.send_accel_raw:00000000 send_accel_raw
     /tmp/ccWSYFcW.s:372    .text.send_accel_raw:000000c4 $d
     /tmp/ccWSYFcW.s:378    .text.send_gyro_raw:00000000 $t
     /tmp/ccWSYFcW.s:382    .text.send_gyro_raw:00000000 send_gyro_raw
     /tmp/ccWSYFcW.s:533    .text.send_gyro_raw:000000c4 $d
     /tmp/ccWSYFcW.s:539    .text.send_accel:00000000 $t
     /tmp/ccWSYFcW.s:543    .text.send_accel:00000000 send_accel
     /tmp/ccWSYFcW.s:730    .text.send_accel:000000f4 $d
     /tmp/ccWSYFcW.s:737    .text.send_mag:00000000 $t
     /tmp/ccWSYFcW.s:741    .text.send_mag:00000000 send_mag
     /tmp/ccWSYFcW.s:928    .text.send_mag:000000f4 $d
     /tmp/ccWSYFcW.s:935    .text.send_gyro:00000000 $t
     /tmp/ccWSYFcW.s:939    .text.send_gyro:00000000 send_gyro
     /tmp/ccWSYFcW.s:1126   .text.send_gyro:000000f4 $d
     /tmp/ccWSYFcW.s:1133   .text.send_mag_scaled:00000000 $t
     /tmp/ccWSYFcW.s:1137   .text.send_mag_scaled:00000000 send_mag_scaled
     /tmp/ccWSYFcW.s:1288   .text.send_mag_scaled:000000c4 $d
     /tmp/ccWSYFcW.s:1294   .text.send_accel_scaled:00000000 $t
     /tmp/ccWSYFcW.s:1298   .text.send_accel_scaled:00000000 send_accel_scaled
     /tmp/ccWSYFcW.s:1449   .text.send_accel_scaled:000000c4 $d
     /tmp/ccWSYFcW.s:1455   .text.send_gyro_scaled:00000000 $t
     /tmp/ccWSYFcW.s:1459   .text.send_gyro_scaled:00000000 send_gyro_scaled
     /tmp/ccWSYFcW.s:1610   .text.send_gyro_scaled:000000c4 $d
     /tmp/ccWSYFcW.s:1616   .text.AbiSendMsgBODY_TO_IMU_QUAT.constprop.10:00000000 $t
     /tmp/ccWSYFcW.s:1620   .text.AbiSendMsgBODY_TO_IMU_QUAT.constprop.10:00000000 AbiSendMsgBODY_TO_IMU_QUAT.constprop.10
     /tmp/ccWSYFcW.s:1669   .text.AbiSendMsgBODY_TO_IMU_QUAT.constprop.10:00000020 $d
     /tmp/ccWSYFcW.s:1674   .text.orientationGetQuat_f.constprop.11:00000000 $t
     /tmp/ccWSYFcW.s:1678   .text.orientationGetQuat_f.constprop.11:00000000 orientationGetQuat_f.constprop.11
     /tmp/ccWSYFcW.s:1705   .text.orientationGetQuat_f.constprop.11:00000018 $d
     /tmp/ccWSYFcW.s:1711   .text.imu_init:00000000 $t
     /tmp/ccWSYFcW.s:1716   .text.imu_init:00000000 imu_init
     /tmp/ccWSYFcW.s:1879   .text.imu_init:000000c0 $d
     /tmp/ccWSYFcW.s:1904   .text.imu_SetBodyToImuPhi:00000000 $t
     /tmp/ccWSYFcW.s:1909   .text.imu_SetBodyToImuPhi:00000000 imu_SetBodyToImuPhi
     /tmp/ccWSYFcW.s:1976   .text.imu_SetBodyToImuPhi:00000044 $d
     /tmp/ccWSYFcW.s:1981   .text.imu_SetBodyToImuTheta:00000000 $t
     /tmp/ccWSYFcW.s:1986   .text.imu_SetBodyToImuTheta:00000000 imu_SetBodyToImuTheta
     /tmp/ccWSYFcW.s:2053   .text.imu_SetBodyToImuTheta:00000044 $d
     /tmp/ccWSYFcW.s:2058   .text.imu_SetBodyToImuPsi:00000000 $t
     /tmp/ccWSYFcW.s:2063   .text.imu_SetBodyToImuPsi:00000000 imu_SetBodyToImuPsi
     /tmp/ccWSYFcW.s:2130   .text.imu_SetBodyToImuPsi:00000044 $d
     /tmp/ccWSYFcW.s:2135   .text.imu_SetBodyToImuCurrent:00000000 $t
     /tmp/ccWSYFcW.s:2140   .text.imu_SetBodyToImuCurrent:00000000 imu_SetBodyToImuCurrent
     /tmp/ccWSYFcW.s:2294   .text.imu_SetBodyToImuCurrent:000000a8 $d
     /tmp/ccWSYFcW.s:2302   .text.imu_periodic:00000000 $t
     /tmp/ccWSYFcW.s:2307   .text.imu_periodic:00000000 imu_periodic
     /tmp/ccWSYFcW.s:2319   .text.imu_scale_gyro:00000000 $t
     /tmp/ccWSYFcW.s:2324   .text.imu_scale_gyro:00000000 imu_scale_gyro
     /tmp/ccWSYFcW.s:2381   .text.imu_scale_accel:00000000 $t
     /tmp/ccWSYFcW.s:2386   .text.imu_scale_accel:00000000 imu_scale_accel
     /tmp/ccWSYFcW.s:2443   .text.imu_scale_mag:00000000 $t
     /tmp/ccWSYFcW.s:2448   .text.imu_scale_mag:00000000 imu_scale_mag
     /tmp/ccWSYFcW.s:2520   .bss.imu:00000000 imu
     /tmp/ccWSYFcW.s:2516   .bss.imu:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.7f506cdee5614e5fae524d20989ad8c8
                           .group:00000000 wm4.apogee_1.0.h.2.34ab7bb688056eecb54e2e3ffff48ca6
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.stddef.h.263.49e44f5ee9cdd8820580fc4aa239e32a
                           .group:00000000 wm4.inttypes.h.23.a096771aacee9aba4b33c2d04aacc9b1
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4._ansi.h.13.1b5575dc7921a4c0cff7dbaa2f33e670
                           .group:00000000 wm4.stddef.h.39.2b75ea897b59bf67f50e970d678806e4
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.math.h.35.ad242c9287d2217c7d2035216e5d04ca
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_trig_int.h.28.b756be608c9d9f3092a41321446e5fa2
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.pprz_algebra_int.h.68.04ac162ae1e1d94f716d0bb402062624
                           .group:00000000 wm4.pprz_algebra_float.h.98.bb035bcbfa66bb186e7ea81143fd64bc
                           .group:00000000 wm4.pprz_orientation_conversion.h.57.c0c8f5187bc056807e507011653281f4
                           .group:00000000 wm4.airframe.h.5.55ffe79377b235d0a97162ed16ec170d
                           .group:00000000 wm4.actuators_pwm_arch.h.27.5a737f85d71223e6481c4ba4068c062a
                           .group:00000000 wm4.airframe.h.14.814d9a421a57ec2d434c7b6efc262c4b
                           .group:00000000 wm4.common.h.21.22efaac882611267214d0a36f6f15e74
                           .group:00000000 wm4.memorymap.h.21.0c01d18fc5814f65c6ceb1822d4030fa
                           .group:00000000 wm4.memorymap.h.28.85f6f5de65b1d4294c70f79052a0b8c0
                           .group:00000000 wm4.i2c_common_all.h.33.0891c362b103dbf9b3c797a7eb8c45dd
                           .group:00000000 wm4.i2c.h.84.d7c95ef3b7385a54cace86b9fe5b1585
                           .group:00000000 wm4.mpu60x0_regs.h.29.354741a377e41e863a6f15c8045a1631
                           .group:00000000 wm4.mpu60x0.h.37.d6af4975dcfadd714415f3475e68a5c4
                           .group:00000000 wm4.imu_apogee.h.41.eaba5d50ac38038e3f36ac8303d3a98d
                           .group:00000000 wm4.pprz_geodetic.h.35.f7fdb5d11659b92d11c7ce67b6317005
                           .group:00000000 wm4.pprz_geodetic_int.h.127.8e737bed5ba4468e470311184b1fca7f
                           .group:00000000 wm4.state.h.65.b18954aacb3801ec3e27b4e857d620d3
                           .group:00000000 wm4.sys_time.h.31.454ffebb4f6baf6e87ab8a60104a5808
                           .group:00000000 wm4.gpio_common_all.h.37.fedbbcb9179f773c905aa3c3e4b7dbdd
                           .group:00000000 wm4.gpio_common_f234.h.48.ee30692f386eaf6801df27cae93943b1
                           .group:00000000 wm4.gpio_common_f24.h.48.4e4be5e3ebe26aee10d604e2d0fecde8
                           .group:00000000 wm4.rcc.h.46.c4bbaa886b7ca1bd1829424ae12e70af
                           .group:00000000 wm4.systick.h.44.34e759e1f218a187b07e9a617cb1d556
                           .group:00000000 wm4.sys_time.h.213.4ee43452c5934214134db56488f53299
                           .group:00000000 wm4.uart_arch.h.30.cb8e70feae0b6afe250750f6c1439671
                           .group:00000000 wm4.uart.h.35.4345324d45fae43faace58e743d48e42
                           .group:00000000 wm4.gps_ubx.h.36.d4183b0b154441c99ce352aae50967b5
                           .group:00000000 wm4.gps.h.41.79d1c69e44dd427f855100ff8e932fbe
                           .group:00000000 wm4.abi_sender_ids.h.29.e18315036ac250e614ad78ed4bcb93da
                           .group:00000000 wm4.abi_common.h.46.0bb6611719a01752e88980049d8d5177
                           .group:00000000 wm4.abi_messages.h.14.a63139ccdcd5241f8ab897fe12fc8134
                           .group:00000000 wm4.transport.h.27.9215bbc09b6a8d08d228c20740408d47
                           .group:00000000 wm4.messages.h.9.c7f125c5dbec47e7d7f58ef9afe50d8b
                           .group:00000000 wm4.modules.h.5.3647ee45f49511088e2f33d88288be64
                           .group:00000000 wm4.gps_ubx_ucenter.h.29.30a3f1ed020dbc7085e412c29746d829
                           .group:00000000 wm4.modules.h.23.3d04ad9f740a156fcd476d18714df592
                           .group:00000000 wm4.datalink.h.28.0d234a7c203533b2ec538be3e18eddf4
                           .group:00000000 wm4.dl_protocol.h.5.a12fe27a4b4a3cbb46fbca8acf33e3dd
                           .group:00000000 wm4.datalink.h.46.36a5e0f36fb7d0784f1e7af767537c84
                           .group:00000000 wm4.pprz_transport.h.57.167db0ee96032e142f5d6e570b3339aa
                           .group:00000000 wm4.xbee24.h.29.a6677f8bcb71d3b07e11290a2de0e179
                           .group:00000000 wm4.xbee.h.41.f36be817f95b74f883aef9324b53817b
                           .group:00000000 wm4.w5100.h.29.d3529bed8de657ab3944b343be960f10
                           .group:00000000 wm4.downlink.h.76.41034157e32fc9012166fd95ec7418fc
                           .group:00000000 wm4.periodic_telemetry.h.11.f25aadf344a171d516cf4756f716329b

UNDEFINED SYMBOLS
orientationCalcEulers_f
abi_queues
orientationCalcQuat_f
register_periodic_telemetry
imu_impl_init
pprz_telemetry
state
