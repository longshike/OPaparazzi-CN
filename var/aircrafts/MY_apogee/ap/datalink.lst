   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"datalink.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.pprz_msg_send_DL_VALUE.constprop.4,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	pprz_msg_send_DL_VALUE.constprop.4:
  25              	.LFB466:
  26              		.file 1 "/home/dino/paparazzi/var/include/messages.h"
   1:/home/dino/paparazzi/var/include/messages.h **** /* Automatically generated by gen_messages from /home/dino/paparazzi/conf/messages.xml */
   2:/home/dino/paparazzi/var/include/messages.h **** /* Please DO NOT EDIT */
   3:/home/dino/paparazzi/var/include/messages.h **** /* Macros to send and receive messages of class telemetry */
   4:/home/dino/paparazzi/var/include/messages.h **** #ifndef _VAR_MESSAGES_telemetry_H_
   5:/home/dino/paparazzi/var/include/messages.h **** #define _VAR_MESSAGES_telemetry_H_
   6:/home/dino/paparazzi/var/include/messages.h **** #include "subsystems/datalink/transport.h"
   7:/home/dino/paparazzi/var/include/messages.h **** #include "mcu_periph/link_device.h"
   8:/home/dino/paparazzi/var/include/messages.h **** #if DOWNLINK
   9:/home/dino/paparazzi/var/include/messages.h **** #define DL_AUTOPILOT_VERSION 1
  10:/home/dino/paparazzi/var/include/messages.h **** #define DL_ALIVE 2
  11:/home/dino/paparazzi/var/include/messages.h **** #define DL_PONG 3
  12:/home/dino/paparazzi/var/include/messages.h **** #define DL_TAKEOFF 4
  13:/home/dino/paparazzi/var/include/messages.h **** #define DL_ARDRONE_NAVDATA 5
  14:/home/dino/paparazzi/var/include/messages.h **** #define DL_ATTITUDE 6
  15:/home/dino/paparazzi/var/include/messages.h **** #define DL_IR_SENSORS 7
  16:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS 8
  17:/home/dino/paparazzi/var/include/messages.h **** #define DL_NAVIGATION_REF 9
  18:/home/dino/paparazzi/var/include/messages.h **** #define DL_NAVIGATION 10
  19:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPRZ_MODE 11
  20:/home/dino/paparazzi/var/include/messages.h **** #define DL_BAT 12
  21:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG_MCU_LINK 13
  22:/home/dino/paparazzi/var/include/messages.h **** #define DL_CALIBRATION 14
  23:/home/dino/paparazzi/var/include/messages.h **** #define DL_SETTINGS 15
  24:/home/dino/paparazzi/var/include/messages.h **** #define DL_DESIRED 16
  25:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_SOL 17
  26:/home/dino/paparazzi/var/include/messages.h **** #define DL_ADC_GENERIC 18
  27:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_FORMAT 19
  28:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAM 20
  29:/home/dino/paparazzi/var/include/messages.h **** #define DL_CIRCLE 21
  30:/home/dino/paparazzi/var/include/messages.h **** #define DL_SEGMENT 22
  31:/home/dino/paparazzi/var/include/messages.h **** #define DL_SVINFO 25
  32:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG 26
  33:/home/dino/paparazzi/var/include/messages.h **** #define DL_SURVEY 27
  34:/home/dino/paparazzi/var/include/messages.h **** #define DL_WC_RSSI 28
  35:/home/dino/paparazzi/var/include/messages.h **** #define DL_RANGEFINDER 29
  36:/home/dino/paparazzi/var/include/messages.h **** #define DL_DATALINK_REPORT 30
  37:/home/dino/paparazzi/var/include/messages.h **** #define DL_DL_VALUE 31
  38:/home/dino/paparazzi/var/include/messages.h **** #define DL_MARK 32
  39:/home/dino/paparazzi/var/include/messages.h **** #define DL_SYS_MON 33
  40:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR 34
  41:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED 35
  42:/home/dino/paparazzi/var/include/messages.h **** #define DL_MKK 36
  43:/home/dino/paparazzi/var/include/messages.h **** #define DL_ENERGY 37
  44:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_BMP85_CALIB 38
  45:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_BMP85 39
  46:/home/dino/paparazzi/var/include/messages.h **** #define DL_SPEED_LOOP 40
  47:/home/dino/paparazzi/var/include/messages.h **** #define DL_ALT_KALMAN 41
  48:/home/dino/paparazzi/var/include/messages.h **** #define DL_ESTIMATOR 42
  49:/home/dino/paparazzi/var/include/messages.h **** #define DL_TUNE_ROLL 43
  50:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_MS5534A 44
  51:/home/dino/paparazzi/var/include/messages.h **** #define DL_PRESSURE 45
  52:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_WORDS 46
  53:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED_LLA 47
  54:/home/dino/paparazzi/var/include/messages.h **** #define DL_CHRONO 48
  55:/home/dino/paparazzi/var/include/messages.h **** #define DL_WP_MOVED_ENU 49
  56:/home/dino/paparazzi/var/include/messages.h **** #define DL_WINDTURBINE_STATUS_ 50
  57:/home/dino/paparazzi/var/include/messages.h **** #define DL_RC_3CH_ 51
  58:/home/dino/paparazzi/var/include/messages.h **** #define DL_MPPT 52
  59:/home/dino/paparazzi/var/include/messages.h **** #define DL_DEBUG_IR_I2C 53
  60:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED 54
  61:/home/dino/paparazzi/var/include/messages.h **** #define DL_XSENS 55
  62:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_ETS 56
  63:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED_ETS 57
  64:/home/dino/paparazzi/var/include/messages.h **** #define DL_PBN 58
  65:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_LLA 59
  66:/home/dino/paparazzi/var/include/messages.h **** #define DL_H_CTL_A 60
  67:/home/dino/paparazzi/var/include/messages.h **** #define DL_TURB_PRESSURE_RAW 61
  68:/home/dino/paparazzi/var/include/messages.h **** #define DL_TURB_PRESSURE_VOLTAGE 62
  69:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAM_POINT 63
  70:/home/dino/paparazzi/var/include/messages.h **** #define DL_DC_INFO 64
  71:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSYS_BARO 65
  72:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSYS_AIRSPEED 66
  73:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLIGHT_BENCHMARK 67
  74:/home/dino/paparazzi/var/include/messages.h **** #define DL_MPL3115_BARO 68
  75:/home/dino/paparazzi/var/include/messages.h **** #define DL_AOA_ADC 69
  76:/home/dino/paparazzi/var/include/messages.h **** #define DL_XTEND_RSSI 70
  77:/home/dino/paparazzi/var/include/messages.h **** #define DL_SUPERBITRF 72
  78:/home/dino/paparazzi/var/include/messages.h **** #define DL_GX3_INFO 73
  79:/home/dino/paparazzi/var/include/messages.h **** #define DL_EXPLAIN 74
  80:/home/dino/paparazzi/var/include/messages.h **** #define DL_VIDEO_TELEMETRY 75
  81:/home/dino/paparazzi/var/include/messages.h **** #define DL_VF_UPDATE 76
  82:/home/dino/paparazzi/var/include/messages.h **** #define DL_VF_PREDICT 77
  83:/home/dino/paparazzi/var/include/messages.h **** #define DL_INV_FILTER 78
  84:/home/dino/paparazzi/var/include/messages.h **** #define DL_MISSION_STATUS 79
  85:/home/dino/paparazzi/var/include/messages.h **** #define DL_CROSS_TRACK_ERROR 80
  86:/home/dino/paparazzi/var/include/messages.h **** #define DL_GENERIC_COM 81
  87:/home/dino/paparazzi/var/include/messages.h **** #define DL_FORMATION_SLOT_TM 82
  88:/home/dino/paparazzi/var/include/messages.h **** #define DL_FORMATION_STATUS_TM 83
  89:/home/dino/paparazzi/var/include/messages.h **** #define DL_BMP_STATUS 84
  90:/home/dino/paparazzi/var/include/messages.h **** #define DL_MLX_STATUS 85
  91:/home/dino/paparazzi/var/include/messages.h **** #define DL_TMP_STATUS 86
  92:/home/dino/paparazzi/var/include/messages.h **** #define DL_WIND_INFO_RET 87
  93:/home/dino/paparazzi/var/include/messages.h **** #define DL_SCP_STATUS 88
  94:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_STATUS 89
  95:/home/dino/paparazzi/var/include/messages.h **** #define DL_ENOSE_STATUS 90
  96:/home/dino/paparazzi/var/include/messages.h **** #define DL_DPICCO_STATUS 91
  97:/home/dino/paparazzi/var/include/messages.h **** #define DL_ANTENNA_DEBUG 92
  98:/home/dino/paparazzi/var/include/messages.h **** #define DL_ANTENNA_STATUS 93
  99:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR_BENCH_STATUS 94
 100:/home/dino/paparazzi/var/include/messages.h **** #define DL_MOTOR_BENCH_STATIC 95
 101:/home/dino/paparazzi/var/include/messages.h **** #define DL_HIH_STATUS 96
 102:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMT_STATUS 97
 103:/home/dino/paparazzi/var/include/messages.h **** #define DL_GP2Y_STATUS 98
 104:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_I2C_SERIAL 99
 105:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPM 100
 106:/home/dino/paparazzi/var/include/messages.h **** #define DL_RC 101
 107:/home/dino/paparazzi/var/include/messages.h **** #define DL_COMMANDS 102
 108:/home/dino/paparazzi/var/include/messages.h **** #define DL_FBW_STATUS 103
 109:/home/dino/paparazzi/var/include/messages.h **** #define DL_ADC 104
 110:/home/dino/paparazzi/var/include/messages.h **** #define DL_ACTUATORS 105
 111:/home/dino/paparazzi/var/include/messages.h **** #define DL_DC_SHOT 110
 112:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_BOARD_RESULTS 111
 113:/home/dino/paparazzi/var/include/messages.h **** #define DL_MLX_SERIAL 113
 114:/home/dino/paparazzi/var/include/messages.h **** #define DL_PAYLOAD 114
 115:/home/dino/paparazzi/var/include/messages.h **** #define DL_HTM_STATUS 115
 116:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_MS5611 116
 117:/home/dino/paparazzi/var/include/messages.h **** #define DL_MS5611_COEFF 117
 118:/home/dino/paparazzi/var/include/messages.h **** #define DL_ATMOSPHERE_CHARGE 118
 119:/home/dino/paparazzi/var/include/messages.h **** #define DL_SOLAR_RADIATION 119
 120:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_TA 120
 121:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_RA 121
 122:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_RESOLVED 122
 123:/home/dino/paparazzi/var/include/messages.h **** #define DL_TCAS_DEBUG 123
 124:/home/dino/paparazzi/var/include/messages.h **** #define DL_POTENTIAL 124
 125:/home/dino/paparazzi/var/include/messages.h **** #define DL_VERTICAL_ENERGY 125
 126:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMP_TCOUPLE 126
 127:/home/dino/paparazzi/var/include/messages.h **** #define DL_SHT_I2C_STATUS 127
 128:/home/dino/paparazzi/var/include/messages.h **** #define DL_CAMERA_SNAPSHOT 128
 129:/home/dino/paparazzi/var/include/messages.h **** #define DL_TIMESTAMP 129
 130:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_FLOAT 130
 131:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_SCALED 131
 132:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL_SCALED 132
 133:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_SCALED 133
 134:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER 134
 135:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER2 135
 136:/home/dino/paparazzi/var/include/messages.h **** #define DL_RATE_LOOP 136
 137:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER_ALIGNER 137
 138:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIRSPEED_MS45XX 138
 139:/home/dino/paparazzi/var/include/messages.h **** #define DL_FILTER_COR 139
 140:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_INT 140
 141:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_REF_INT 141
 142:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_REF_FLOAT 142
 143:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_CMD 143
 144:/home/dino/paparazzi/var/include/messages.h **** #define DL_GUIDANCE_H_INT 144
 145:/home/dino/paparazzi/var/include/messages.h **** #define DL_VERT_LOOP 145
 146:/home/dino/paparazzi/var/include/messages.h **** #define DL_HOVER_LOOP 146
 147:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_FP 147
 148:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEMP_ADC 148
 149:/home/dino/paparazzi/var/include/messages.h **** #define DL_GUIDANCE_H_REF_INT 149
 150:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_TUNE_HOVER 150
 151:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_Z 151
 152:/home/dino/paparazzi/var/include/messages.h **** #define DL_PCAP01_STATUS 152
 153:/home/dino/paparazzi/var/include/messages.h **** #define DL_GEIGER_COUNTER 153
 154:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_REF 154
 155:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_INT 155
 156:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_EULER_INT 156
 157:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_QUAT_INT 157
 158:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_RMAT_INT 158
 159:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_NAV_STATUS 159
 160:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_RADIO_CONTROL 160
 161:/home/dino/paparazzi/var/include/messages.h **** #define DL_VFF_EXTENDED 161
 162:/home/dino/paparazzi/var/include/messages.h **** #define DL_VFF 162
 163:/home/dino/paparazzi/var/include/messages.h **** #define DL_GEO_MAG 163
 164:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF 164
 165:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF_DBG 165
 166:/home/dino/paparazzi/var/include/messages.h **** #define DL_HFF_GPS 166
 167:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS_SONAR 167
 168:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_CAM 168
 169:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_REF_QUAT 169
 170:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_XHAT 170
 171:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_Y 171
 172:/home/dino/paparazzi/var/include/messages.h **** #define DL_EKF7_P_DIAG 172
 173:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_EULER 173
 174:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_MEASUREMENT_EULER 174
 175:/home/dino/paparazzi/var/include/messages.h **** #define DL_WT 175
 176:/home/dino/paparazzi/var/include/messages.h **** #define DL_CSC_CAN_DEBUG 176
 177:/home/dino/paparazzi/var/include/messages.h **** #define DL_CSC_CAN_MSG 177
 178:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_GYRO_BIAS_INT 178
 179:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLOW_AP_OTF 179
 180:/home/dino/paparazzi/var/include/messages.h **** #define DL_FMS_TIME 180
 181:/home/dino/paparazzi/var/include/messages.h **** #define DL_LOADCELL 181
 182:/home/dino/paparazzi/var/include/messages.h **** #define DL_FLA_DEBUG 182
 183:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_FAULT_STATUS 183
 184:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_SPEEDS 184
 185:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_DEBUG_QUAT 185
 186:/home/dino/paparazzi/var/include/messages.h **** #define DL_BLMC_BUSVOLTS 186
 187:/home/dino/paparazzi/var/include/messages.h **** #define DL_SYSTEM_STATUS 187
 188:/home/dino/paparazzi/var/include/messages.h **** #define DL_DYNAMIXEL 188
 189:/home/dino/paparazzi/var/include/messages.h **** #define DL_RMAT_DEBUG 189
 190:/home/dino/paparazzi/var/include/messages.h **** #define DL_SIMPLE_COMMANDS 190
 191:/home/dino/paparazzi/var/include/messages.h **** #define DL_VANE_SENSOR 191
 192:/home/dino/paparazzi/var/include/messages.h **** #define DL_CONTROLLER_GAINS 192
 193:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF 193
 194:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_DEBUG 194
 195:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_ACC_DBG 195
 196:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_LKF_MAG_DBG 196
 197:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_SENSORS_SCALED 197
 198:/home/dino/paparazzi/var/include/messages.h **** #define DL_INS 198
 199:/home/dino/paparazzi/var/include/messages.h **** #define DL_GPS_ERROR 199
 200:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO 200
 201:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG 201
 202:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL 202
 203:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_RAW 203
 204:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_ACCEL_RAW 204
 205:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_RAW 205
 206:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_SETTINGS 206
 207:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_MAG_CURRENT_CALIBRATION 207
 208:/home/dino/paparazzi/var/include/messages.h **** #define DL_UART_ERRORS 208
 209:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_GYRO_LP 209
 210:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_PRESSURE 210
 211:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_HS_GYRO 211
 212:/home/dino/paparazzi/var/include/messages.h **** #define DL_TEST_PASSTHROUGH_STATUS 212
 213:/home/dino/paparazzi/var/include/messages.h **** #define DL_TUNE_VERT 213
 214:/home/dino/paparazzi/var/include/messages.h **** #define DL_MF_DAQ_STATE 214
 215:/home/dino/paparazzi/var/include/messages.h **** #define DL_INFO_MSG 215
 216:/home/dino/paparazzi/var/include/messages.h **** #define DL_STAB_ATTITUDE_INDI 216
 217:/home/dino/paparazzi/var/include/messages.h **** #define DL_BEBOP_ACTUATORS 218
 218:/home/dino/paparazzi/var/include/messages.h **** #define DL_WEATHER 219
 219:/home/dino/paparazzi/var/include/messages.h **** #define DL_IMU_TURNTABLE 220
 220:/home/dino/paparazzi/var/include/messages.h **** #define DL_BARO_RAW 221
 221:/home/dino/paparazzi/var/include/messages.h **** #define DL_AIR_DATA 222
 222:/home/dino/paparazzi/var/include/messages.h **** #define DL_AMSL 223
 223:/home/dino/paparazzi/var/include/messages.h **** #define DL_VIDEO_SYNC 225
 224:/home/dino/paparazzi/var/include/messages.h **** #define DL_PERIODIC_TELEMETRY_ERR 226
 225:/home/dino/paparazzi/var/include/messages.h **** #define DL_TIME 227
 226:/home/dino/paparazzi/var/include/messages.h **** #define DL_OPTIC_FLOW_EST 228
 227:/home/dino/paparazzi/var/include/messages.h **** #define DL_AHRS_ARDRONE2 230
 228:/home/dino/paparazzi/var/include/messages.h **** #define DL_ROTORCRAFT_STATUS 231
 229:/home/dino/paparazzi/var/include/messages.h **** #define DL_STATE_FILTER_STATUS 232
 230:/home/dino/paparazzi/var/include/messages.h **** #define DL_PX4FLOW 233
 231:/home/dino/paparazzi/var/include/messages.h **** #define DL_OPTICFLOW 234
 232:/home/dino/paparazzi/var/include/messages.h **** #define DL_VISUALTARGET 235
 233:/home/dino/paparazzi/var/include/messages.h **** #define DL_SONAR 236
 234:/home/dino/paparazzi/var/include/messages.h **** #define DL_PAYLOAD_FLOAT 237
 235:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_POS_LLH 238
 236:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RPMS 239
 237:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_SPEED_POS 240
 238:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RATE_ATTITUDE 241
 239:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_GYRO_BIAS 242
 240:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_RANGE_METER 243
 241:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_WIND 244
 242:/home/dino/paparazzi/var/include/messages.h **** #define DL_PPRZ_DEBUG 247
 243:/home/dino/paparazzi/var/include/messages.h **** #define DL_NPS_ACCEL_LTP 248
 244:/home/dino/paparazzi/var/include/messages.h **** #define DL_LOOSE_INS_GPS 249
 245:/home/dino/paparazzi/var/include/messages.h **** #define DL_AFL_COEFFS 250
 246:/home/dino/paparazzi/var/include/messages.h **** #define DL_I2C_ERRORS 253
 247:/home/dino/paparazzi/var/include/messages.h **** #define DL_RDYB_TRAJECTORY 254
 248:/home/dino/paparazzi/var/include/messages.h **** #define DL_HENRY_GNSS 255
 249:/home/dino/paparazzi/var/include/messages.h **** #define DL_MSG_telemetry_NB 240
 250:/home/dino/paparazzi/var/include/messages.h **** 
 251:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_AUTOPILOT_VERSION(_trans, _dev, version, nb_desc, desc) pprz_msg_send_AUTOPIL
 252:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_AUTOPILOT_VERSION(struct transport_tx *trans, struct link_device *
 253:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 
 254:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1+nb_desc*1 +2 /* msg heade
 255:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1+nb_desc*1 +2 /* msg header overhead */);
 256:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 257:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AUTOPILOT_VERSION, "
 258:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _version);
 259:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_desc)
 260:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * nb_desc, (void *) _desc);
 261:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 262:/home/dino/paparazzi/var/include/messages.h **** 	} else
 263:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 264:/home/dino/paparazzi/var/include/messages.h **** }
 265:/home/dino/paparazzi/var/include/messages.h **** 
 266:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ALIVE(_trans, _dev, nb_md5sum, md5sum) pprz_msg_send_ALIVE(&((_trans).trans_t
 267:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ALIVE(struct transport_tx *trans, struct link_device *dev, uint8_t
 268:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 
 269:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_md5sum*1 +2 /* msg heade
 270:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_md5sum*1 +2 /* msg header overhead */);
 271:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 272:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ALIVE, "ALIVE");
 273:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_md5su
 274:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_md5sum, (void *) _md5s
 275:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 276:/home/dino/paparazzi/var/include/messages.h **** 	} else
 277:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 278:/home/dino/paparazzi/var/include/messages.h **** }
 279:/home/dino/paparazzi/var/include/messages.h **** 
 280:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PONG(_trans, _dev) pprz_msg_send_PONG(&((_trans).trans_tx), &((_dev).device),
 281:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PONG(struct transport_tx *trans, struct link_device *dev, uint8_t 
 282:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0 +2 /* msg header 
 283:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0 +2 /* msg header overhead */)
 284:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0 +2 /* msg header overhead */);
 285:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 286:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PONG, "PONG");
 287:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 288:/home/dino/paparazzi/var/include/messages.h **** 	} else
 289:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 290:/home/dino/paparazzi/var/include/messages.h **** }
 291:/home/dino/paparazzi/var/include/messages.h **** 
 292:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TAKEOFF(_trans, _dev, cpu_time) pprz_msg_send_TAKEOFF(&((_trans).trans_tx), &
 293:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TAKEOFF(struct transport_tx *trans, struct link_device *dev, uint8
 294:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg heade
 295:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg header overhead *
 296:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2 +2 /* msg header overhead */);
 297:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 298:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TAKEOFF, "TAKEOFF");
 299:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _cpu_time);
 300:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 301:/home/dino/paparazzi/var/include/messages.h **** 	} else
 302:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 303:/home/dino/paparazzi/var/include/messages.h **** }
 304:/home/dino/paparazzi/var/include/messages.h **** 
 305:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ARDRONE_NAVDATA(_trans, _dev, taille, nu_trame, ax, ay, az, vx, vy, vz, tempe
 306:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ARDRONE_NAVDATA(struct transport_tx *trans, struct link_device *de
 307:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2
 308:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2
 309:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+4+2+2+4+2+2+2+2+2
 310:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 311:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ARDRONE_NAVDATA, "AR
 312:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _taille);
 313:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _nu_trame);
 314:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ax);
 315:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ay);
 316:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _az);
 317:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vx);
 318:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vy);
 319:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vz);
 320:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_ac
 321:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_gy
 322:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _ultrasound);
 323:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_debut_echo)
 324:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_fin_echo);
 325:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_association
 326:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_distance_ec
 327:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_time)
 328:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_value
 329:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _us_curve_ref);
 330:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _nb_echo);
 331:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _sum_echo);
 332:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _gradient);
 333:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flag_echo_ini)
 334:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _pressure);
 335:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _temperature_pr
 336:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mx);
 337:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _my);
 338:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _mz);
 339:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _chksum);
 340:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _checksum_error
 341:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 342:/home/dino/paparazzi/var/include/messages.h **** 	} else
 343:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 344:/home/dino/paparazzi/var/include/messages.h **** }
 345:/home/dino/paparazzi/var/include/messages.h **** 
 346:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ATTITUDE(_trans, _dev, phi, psi, theta) pprz_msg_send_ATTITUDE(&((_trans).tra
 347:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ATTITUDE(struct transport_tx *trans, struct link_device *dev, uint
 348:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
 349:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 350:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 351:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 352:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ATTITUDE, "ATTITUDE"
 353:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _phi);
 354:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _psi);
 355:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _theta);
 356:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 357:/home/dino/paparazzi/var/include/messages.h **** 	} else
 358:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 359:/home/dino/paparazzi/var/include/messages.h **** }
 360:/home/dino/paparazzi/var/include/messages.h **** 
 361:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_IR_SENSORS(_trans, _dev, ir1, ir2, longitudinal, lateral, vertical) pprz_msg_
 362:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_IR_SENSORS(struct transport_tx *trans, struct link_device *dev, ui
 363:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2 +2 /* m
 364:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2 +2 /* msg header ov
 365:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2 +2 /* msg header overhead */);
 366:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 367:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IR_SENSORS, "IR_SENS
 368:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir1);
 369:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _ir2);
 370:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _longitudinal);
 371:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _lateral);
 372:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _vertical);
 373:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 374:/home/dino/paparazzi/var/include/messages.h **** 	} else
 375:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 376:/home/dino/paparazzi/var/include/messages.h **** }
 377:/home/dino/paparazzi/var/include/messages.h **** 
 378:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS(_trans, _dev, mode, utm_east, utm_north, course, alt, speed, climb, week,
 379:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS(struct transport_tx *trans, struct link_device *dev, uint8_t a
 380:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+2+4+2+2+2+4
 381:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+2+4+2+2+2+4+1+1 +2 /* m
 382:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+2+4+2+2+2+4+1+1 +2 /* msg header overhead */);
 383:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 384:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS, "GPS");
 385:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mode);
 386:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 387:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 388:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _course);
 389:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _alt);
 390:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _speed);
 391:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _climb);
 392:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _week);
 393:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _itow);
 394:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 395:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _gps_nb_err);
 396:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 397:/home/dino/paparazzi/var/include/messages.h **** 	} else
 398:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 399:/home/dino/paparazzi/var/include/messages.h **** }
 400:/home/dino/paparazzi/var/include/messages.h **** 
 401:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_NAVIGATION_REF(_trans, _dev, utm_east, utm_north, utm_zone, ground_alt) pprz_
 402:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_NAVIGATION_REF(struct transport_tx *trans, struct link_device *dev
 403:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+4 +2 /* msg
 404:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+1+4 +2 /* msg header over
 405:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+1+4 +2 /* msg header overhead */);
 406:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 407:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NAVIGATION_REF, "NAV
 408:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 409:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 410:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 411:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _ground_alt);
 412:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 413:/home/dino/paparazzi/var/include/messages.h **** 	} else
 414:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 415:/home/dino/paparazzi/var/include/messages.h **** }
 416:/home/dino/paparazzi/var/include/messages.h **** 
 417:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_NAVIGATION(_trans, _dev, cur_block, cur_stage, pos_x, pos_y, dist_wp, dist_ho
 418:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_NAVIGATION(struct transport_tx *trans, struct link_device *dev, ui
 419:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +
 420:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +2 /* msg hea
 421:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4+4+4+1+1 +2 /* msg header overhead */);
 422:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 423:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NAVIGATION, "NAVIGAT
 424:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_block);
 425:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_stage);
 426:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_x);
 427:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_y);
 428:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_wp);
 429:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_home);
 430:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _circle_count);
 431:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _oval_count);
 432:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 433:/home/dino/paparazzi/var/include/messages.h **** 	} else
 434:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 435:/home/dino/paparazzi/var/include/messages.h **** }
 436:/home/dino/paparazzi/var/include/messages.h **** 
 437:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_PPRZ_MODE(_trans, _dev, ap_mode, ap_gaz, ap_lateral, ap_horizontal, if_calib_
 438:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_PPRZ_MODE(struct transport_tx *trans, struct link_device *dev, uin
 439:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /*
 440:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1 +2 /* msg header 
 441:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+1 +2 /* msg header overhead */);
 442:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 443:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PPRZ_MODE, "PPRZ_MOD
 444:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_mode);
 445:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_gaz);
 446:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_lateral);
 447:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ap_horizontal);
 448:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _if_calib_mode);
 449:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _mcu1_status);
 450:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 451:/home/dino/paparazzi/var/include/messages.h **** 	} else
 452:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 453:/home/dino/paparazzi/var/include/messages.h **** }
 454:/home/dino/paparazzi/var/include/messages.h **** 
 455:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_BAT(_trans, _dev, throttle, voltage, amps, flight_time, kill_auto_throttle, b
 456:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_BAT(struct transport_tx *trans, struct link_device *dev, uint8_t a
 457:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +
 458:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1+2+2+2 +2 /* msg hea
 459:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+1+2+2+2 +2 /* msg header overhead */);
 460:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 461:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BAT, "BAT");
 462:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _throttle);
 463:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _voltage);
 464:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _amps);
 465:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flight_time);
 466:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _kill_auto_throt
 467:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _block_time);
 468:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _stage_time);
 469:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _energy);
 470:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 471:/home/dino/paparazzi/var/include/messages.h **** 	} else
 472:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 473:/home/dino/paparazzi/var/include/messages.h **** }
 474:/home/dino/paparazzi/var/include/messages.h **** 
 475:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DEBUG_MCU_LINK(_trans, _dev, i2c_nb_err, i2c_mcu1_nb_err, ppm_rate) pprz_msg_
 476:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DEBUG_MCU_LINK(struct transport_tx *trans, struct link_device *dev
 477:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg h
 478:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhe
 479:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
 480:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 481:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DEBUG_MCU_LINK, "DEB
 482:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _i2c_nb_err);
 483:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _i2c_mcu1_nb_err
 484:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ppm_rate);
 485:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 486:/home/dino/paparazzi/var/include/messages.h **** 	} else
 487:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 488:/home/dino/paparazzi/var/include/messages.h **** }
 489:/home/dino/paparazzi/var/include/messages.h **** 
 490:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CALIBRATION(_trans, _dev, climb_sum_err, climb_gaz_submode) pprz_msg_send_CAL
 491:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CALIBRATION(struct transport_tx *trans, struct link_device *dev, u
 492:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+1 +2 /* msg hea
 493:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+1 +2 /* msg header overhead
 494:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+1 +2 /* msg header overhead */);
 495:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 496:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CALIBRATION, "CALIBR
 497:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _climb_sum_err);
 498:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _climb_gaz_submo
 499:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 500:/home/dino/paparazzi/var/include/messages.h **** 	} else
 501:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 502:/home/dino/paparazzi/var/include/messages.h **** }
 503:/home/dino/paparazzi/var/include/messages.h **** 
 504:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SETTINGS(_trans, _dev, slider_1_val, slider_2_val) pprz_msg_send_SETTINGS(&((
 505:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SETTINGS(struct transport_tx *trans, struct link_device *dev, uint
 506:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg hea
 507:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4 +2 /* msg header overhead
 508:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4 +2 /* msg header overhead */);
 509:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 510:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SETTINGS, "SETTINGS"
 511:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _slider_1_val);
 512:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _slider_2_val);
 513:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 514:/home/dino/paparazzi/var/include/messages.h **** 	} else
 515:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 516:/home/dino/paparazzi/var/include/messages.h **** }
 517:/home/dino/paparazzi/var/include/messages.h **** 
 518:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DESIRED(_trans, _dev, roll, pitch, course, x, y, altitude, climb, airspeed) p
 519:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DESIRED(struct transport_tx *trans, struct link_device *dev, uint8
 520:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +
 521:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4+4+4+4+4 +2 /* msg hea
 522:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4+4+4+4+4 +2 /* msg header overhead */);
 523:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 524:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DESIRED, "DESIRED");
 525:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _roll);
 526:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pitch);
 527:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _course);
 528:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _x);
 529:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _y);
 530:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _altitude);
 531:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _climb);
 532:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _airspeed);
 533:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 534:/home/dino/paparazzi/var/include/messages.h **** 	} else
 535:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 536:/home/dino/paparazzi/var/include/messages.h **** }
 537:/home/dino/paparazzi/var/include/messages.h **** 
 538:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_GPS_SOL(_trans, _dev, Pacc, Sacc, PDOP, numSV) pprz_msg_send_GPS_SOL(&((_tran
 539:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_GPS_SOL(struct transport_tx *trans, struct link_device *dev, uint8
 540:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+1 +2 /* msg
 541:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+2+1 +2 /* msg header over
 542:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+2+1 +2 /* msg header overhead */);
 543:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 544:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GPS_SOL, "GPS_SOL");
 545:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _Pacc);
 546:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _Sacc);
 547:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _PDOP);
 548:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _numSV);
 549:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 550:/home/dino/paparazzi/var/include/messages.h **** 	} else
 551:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 552:/home/dino/paparazzi/var/include/messages.h **** }
 553:/home/dino/paparazzi/var/include/messages.h **** 
 554:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_ADC_GENERIC(_trans, _dev, val1, val2) pprz_msg_send_ADC_GENERIC(&((_trans).tr
 555:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_ADC_GENERIC(struct transport_tx *trans, struct link_device *dev, u
 556:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2 +2 /* msg hea
 557:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2 +2 /* msg header overhead
 558:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2 +2 /* msg header overhead */);
 559:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 560:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ADC_GENERIC, "ADC_GE
 561:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val1);
 562:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _val2);
 563:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 564:/home/dino/paparazzi/var/include/messages.h **** 	} else
 565:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 566:/home/dino/paparazzi/var/include/messages.h **** }
 567:/home/dino/paparazzi/var/include/messages.h **** 
 568:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_TEST_FORMAT(_trans, _dev, val1, val2) pprz_msg_send_TEST_FORMAT(&((_trans).tr
 569:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_TEST_FORMAT(struct transport_tx *trans, struct link_device *dev, u
 570:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+8+4 +2 /* msg hea
 571:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+8+4 +2 /* msg header overhead
 572:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+8+4 +2 /* msg header overhead */);
 573:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 574:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TEST_FORMAT, "TEST_F
 575:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_DOUBLE, DL_FORMAT_SCALAR, 8, (void *) _val1);
 576:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _val2);
 577:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 578:/home/dino/paparazzi/var/include/messages.h **** 	} else
 579:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 580:/home/dino/paparazzi/var/include/messages.h **** }
 581:/home/dino/paparazzi/var/include/messages.h **** 
 582:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CAM(_trans, _dev, phi, theta, target_x, target_y) pprz_msg_send_CAM(&((_trans
 583:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CAM(struct transport_tx *trans, struct link_device *dev, uint8_t a
 584:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg
 585:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2 +2 /* msg header over
 586:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2 +2 /* msg header overhead */);
 587:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 588:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CAM, "CAM");
 589:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _phi);
 590:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _theta);
 591:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _target_x);
 592:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _target_y);
 593:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 594:/home/dino/paparazzi/var/include/messages.h **** 	} else
 595:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 596:/home/dino/paparazzi/var/include/messages.h **** }
 597:/home/dino/paparazzi/var/include/messages.h **** 
 598:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_CIRCLE(_trans, _dev, center_east, center_north, radius) pprz_msg_send_CIRCLE(
 599:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_CIRCLE(struct transport_tx *trans, struct link_device *dev, uint8_
 600:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg h
 601:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4 +2 /* msg header overhe
 602:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4 +2 /* msg header overhead */);
 603:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 604:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CIRCLE, "CIRCLE");
 605:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _center_east);
 606:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _center_north);
 607:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _radius);
 608:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 609:/home/dino/paparazzi/var/include/messages.h **** 	} else
 610:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 611:/home/dino/paparazzi/var/include/messages.h **** }
 612:/home/dino/paparazzi/var/include/messages.h **** 
 613:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SEGMENT(_trans, _dev, segment_east_1, segment_north_1, segment_east_2, segmen
 614:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SEGMENT(struct transport_tx *trans, struct link_device *dev, uint8
 615:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 616:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 617:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 618:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 619:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SEGMENT, "SEGMENT");
 620:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_east_1)
 621:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_north_1
 622:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_east_2)
 623:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _segment_north_2
 624:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 625:/home/dino/paparazzi/var/include/messages.h **** 	} else
 626:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 627:/home/dino/paparazzi/var/include/messages.h **** }
 628:/home/dino/paparazzi/var/include/messages.h **** 
 629:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SVINFO(_trans, _dev, chn, SVID, Flags, QI, CNO, Elev, Azim) pprz_msg_send_SVI
 630:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SVINFO(struct transport_tx *trans, struct link_device *dev, uint8_
 631:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1+2 +2 
 632:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1+2 +2 /* msg heade
 633:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+1+2 +2 /* msg header overhead */);
 634:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 635:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SVINFO, "SVINFO");
 636:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _chn);
 637:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _SVID);
 638:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _Flags);
 639:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _QI);
 640:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _CNO);
 641:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _Elev);
 642:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _Azim);
 643:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 644:/home/dino/paparazzi/var/include/messages.h **** 	} else
 645:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 646:/home/dino/paparazzi/var/include/messages.h **** }
 647:/home/dino/paparazzi/var/include/messages.h **** 
 648:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DEBUG(_trans, _dev, nb_msg, msg) pprz_msg_send_DEBUG(&((_trans).trans_tx), &(
 649:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DEBUG(struct transport_tx *trans, struct link_device *dev, uint8_t
 650:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_msg*1 +2 /* 
 651:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+nb_msg*1 +2 /* msg header o
 652:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+nb_msg*1 +2 /* msg header overhead */);
 653:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 654:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DEBUG, "DEBUG");
 655:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_msg);
 656:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_msg, (void *) _msg);
 657:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 658:/home/dino/paparazzi/var/include/messages.h **** 	} else
 659:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 660:/home/dino/paparazzi/var/include/messages.h **** }
 661:/home/dino/paparazzi/var/include/messages.h **** 
 662:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SURVEY(_trans, _dev, east, north, west, south) pprz_msg_send_SURVEY(&((_trans
 663:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SURVEY(struct transport_tx *trans, struct link_device *dev, uint8_
 664:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg
 665:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+4+4+4+4 +2 /* msg header over
 666:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+4+4+4+4 +2 /* msg header overhead */);
 667:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 668:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SURVEY, "SURVEY");
 669:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _east);
 670:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _north);
 671:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _west);
 672:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _south);
 673:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 674:/home/dino/paparazzi/var/include/messages.h **** 	} else
 675:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 676:/home/dino/paparazzi/var/include/messages.h **** }
 677:/home/dino/paparazzi/var/include/messages.h **** 
 678:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WC_RSSI(_trans, _dev, raw_level) pprz_msg_send_WC_RSSI(&((_trans).trans_tx), 
 679:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WC_RSSI(struct transport_tx *trans, struct link_device *dev, uint8
 680:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg heade
 681:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead *
 682:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1 +2 /* msg header overhead */);
 683:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 684:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WC_RSSI, "WC_RSSI");
 685:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _raw_level);
 686:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 687:/home/dino/paparazzi/var/include/messages.h **** 	} else
 688:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 689:/home/dino/paparazzi/var/include/messages.h **** }
 690:/home/dino/paparazzi/var/include/messages.h **** 
 691:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_RANGEFINDER(_trans, _dev, range, z_dot, z_dot_sum_err, z_dot_setpoint, z_sum_
 692:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_RANGEFINDER(struct transport_tx *trans, struct link_device *dev, u
 693:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+1 +2 
 694:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4+4+4+4+4+1 +2 /* msg heade
 695:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4+4+4+4+4+1 +2 /* msg header overhead */);
 696:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 697:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_RANGEFINDER, "RANGEF
 698:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _range);
 699:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot);
 700:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot_sum_err);
 701:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_dot_setpoint)
 702:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_sum_err);
 703:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _z_setpoint);
 704:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _flying);
 705:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 706:/home/dino/paparazzi/var/include/messages.h **** 	} else
 707:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 708:/home/dino/paparazzi/var/include/messages.h **** }
 709:/home/dino/paparazzi/var/include/messages.h **** 
 710:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DATALINK_REPORT(_trans, _dev, uplink_lost_time, uplink_nb_msgs, downlink_nb_m
 711:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DATALINK_REPORT(struct transport_tx *trans, struct link_device *de
 712:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1 +2 /* m
 713:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+1 +2 /* msg header ov
 714:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+1 +2 /* msg header overhead */);
 715:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 716:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DATALINK_REPORT, "DA
 717:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _uplink_lost_ti
 718:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _uplink_nb_msgs
 719:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _downlink_nb_ms
 720:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _downlink_rate)
 721:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _downlink_ovrn);
 722:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 723:/home/dino/paparazzi/var/include/messages.h **** 	} else
 724:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 725:/home/dino/paparazzi/var/include/messages.h **** }
 726:/home/dino/paparazzi/var/include/messages.h **** 
 727:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_DL_VALUE(_trans, _dev, index, value) pprz_msg_send_DL_VALUE(&((_trans).trans_
 728:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_DL_VALUE(struct transport_tx *trans, struct link_device *dev, uint
  27              		.loc 1 728 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  33              		.cfi_def_cfa_offset 28
  34              		.cfi_offset 4, -28
  35              		.cfi_offset 5, -24
  36              		.cfi_offset 6, -20
  37              		.cfi_offset 7, -16
  38              		.cfi_offset 8, -12
  39              		.cfi_offset 9, -8
  40              		.cfi_offset 14, -4
 729:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg hea
  41              		.loc 1 729 0
  42 0004 314C     		ldr	r4, .L6
 728:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg hea
  43              		.loc 1 728 0
  44 0006 85B0     		sub	sp, sp, #20
  45              		.cfi_def_cfa_offset 48
  46              		.loc 1 729 0
  47 0008 D4F82861 		ldr	r6, [r4, #296]
  48 000c D4F80831 		ldr	r3, [r4, #264]
  49 0010 D4F80C91 		ldr	r9, [r4, #268]
  50 0014 0125     		movs	r5, #1
 728:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg hea
  51              		.loc 1 728 0
  52 0016 8046     		mov	r8, r0
  53 0018 0F46     		mov	r7, r1
  54 001a 8DF80F50 		strb	r5, [sp, #15]
  55              	.LVL1:
  56              		.loc 1 729 0
  57 001e 0721     		movs	r1, #7
  58              	.LVL2:
  59 0020 3046     		mov	r0, r6
  60              	.LVL3:
  61 0022 9847     		blx	r3
  62              	.LVL4:
  63 0024 2A49     		ldr	r1, .L6+4
  64              	.LVL5:
  65 0026 0246     		mov	r2, r0
  66 0028 3046     		mov	r0, r6
  67 002a C847     		blx	r9
  68              	.LVL6:
  69 002c 0028     		cmp	r0, #0
  70 002e 43D0     		beq	.L2
 730:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4 +2 /* msg header overhead
  71              		.loc 1 730 0
  72 0030 D4F82861 		ldr	r6, [r4, #296]
  73 0034 D4F80831 		ldr	r3, [r4, #264]
  74 0038 D4F82491 		ldr	r9, [r4, #292]
  75 003c 3046     		mov	r0, r6
  76 003e 0721     		movs	r1, #7
  77 0040 9847     		blx	r3
  78              	.LVL7:
  79 0042 2349     		ldr	r1, .L6+4
  80              	.LVL8:
  81 0044 0246     		mov	r2, r0
  82 0046 3046     		mov	r0, r6
  83 0048 C847     		blx	r9
  84              	.LVL9:
 731:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4 +2 /* msg header overhead */);
  85              		.loc 1 731 0
  86 004a D4F81831 		ldr	r3, [r4, #280]
  87 004e D4F82801 		ldr	r0, [r4, #296]
  88 0052 1F49     		ldr	r1, .L6+4
  89              	.LVL10:
  90 0054 0722     		movs	r2, #7
  91 0056 9847     		blx	r3
  92              	.LVL11:
 732:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
  93              		.loc 1 732 0
  94 0058 0DF10F03 		add	r3, sp, #15
  95 005c 0095     		str	r5, [sp]
  96 005e 0193     		str	r3, [sp, #4]
  97 0060 D4F81061 		ldr	r6, [r4, #272]
  98 0064 D4F82801 		ldr	r0, [r4, #296]
  99 0068 1949     		ldr	r1, .L6+4
 100              	.LVL12:
 101 006a 0222     		movs	r2, #2
 102 006c 0023     		movs	r3, #0
 103 006e B047     		blx	r6
 104              	.LVL13:
 733:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DL_VALUE, "DL_VALUE"
 105              		.loc 1 733 0
 106 0070 1F23     		movs	r3, #31
 107 0072 0093     		str	r3, [sp]
 108 0074 174B     		ldr	r3, .L6+8
 109 0076 0193     		str	r3, [sp, #4]
 110 0078 D4F82801 		ldr	r0, [r4, #296]
 111 007c 1449     		ldr	r1, .L6+4
 112              	.LVL14:
 113 007e D4F81461 		ldr	r6, [r4, #276]
 114 0082 0222     		movs	r2, #2
 115 0084 0023     		movs	r3, #0
 116 0086 B047     		blx	r6
 117              	.LVL15:
 734:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _index);
 118              		.loc 1 734 0
 119 0088 8DE82001 		stmia	sp, {r5, r8}
 120 008c D4F82801 		ldr	r0, [r4, #296]
 121 0090 D4F81051 		ldr	r5, [r4, #272]
 122              	.LVL16:
 123 0094 0E49     		ldr	r1, .L6+4
 124              	.LVL17:
 125 0096 0222     		movs	r2, #2
 126 0098 0023     		movs	r3, #0
 127 009a A847     		blx	r5
 128              	.LVL18:
 735:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _value);
 129              		.loc 1 735 0
 130 009c 0423     		movs	r3, #4
 131 009e 8DE88800 		stmia	sp, {r3, r7}
 132 00a2 D4F81051 		ldr	r5, [r4, #272]
 133 00a6 D4F82801 		ldr	r0, [r4, #296]
 134 00aa 0949     		ldr	r1, .L6+4
 135              	.LVL19:
 136 00ac 0023     		movs	r3, #0
 137 00ae 0A22     		movs	r2, #10
 138 00b0 A847     		blx	r5
 139              	.LVL20:
 736:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 140              		.loc 1 736 0
 141 00b2 D4F81C31 		ldr	r3, [r4, #284]
 142 00b6 01E0     		b	.L4
 143              	.L2:
 144              	.LVL21:
 145              	.LBB16:
 146              	.LBB17:
 737:/home/dino/paparazzi/var/include/messages.h **** 	} else
 738:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 147              		.loc 1 738 0
 148 00b8 D4F82031 		ldr	r3, [r4, #288]
 149              	.LVL22:
 150              	.L4:
 151 00bc D4F82801 		ldr	r0, [r4, #296]
 152 00c0 0349     		ldr	r1, .L6+4
 153              	.LVL23:
 154 00c2 9847     		blx	r3
 155              	.LVL24:
 156              	.LBE17:
 157              	.LBE16:
 739:/home/dino/paparazzi/var/include/messages.h **** }
 158              		.loc 1 739 0
 159 00c4 05B0     		add	sp, sp, #20
 160              		.cfi_def_cfa_offset 28
 161              		@ sp needed
 162 00c6 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 163              	.LVL25:
 164              	.L7:
 165 00ca 00BF     		.align	2
 166              	.L6:
 167 00cc 00000000 		.word	pprz_tp
 168 00d0 2C010000 		.word	uart1+300
 169 00d4 00000000 		.word	.LC0
 170              		.cfi_endproc
 171              	.LFE466:
 173              		.global	__aeabi_f2d
 174              		.global	__aeabi_ddiv
 175              		.global	__aeabi_dmul
 176              		.global	__aeabi_d2f
 177              		.global	__aeabi_i2d
 178              		.global	__aeabi_d2uiz
 179              		.section	.text.dl_parse_msg,"ax",%progbits
 180              		.align	1
 181              		.global	dl_parse_msg
 182              		.thumb
 183              		.thumb_func
 185              	dl_parse_msg:
 186              	.LFB459:
 187              		.file 2 "firmwares/fixedwing/datalink.c"
   1:firmwares/fixedwing/datalink.c **** /*
   2:firmwares/fixedwing/datalink.c ****  * Copyright (C) 2005  Pascal Brisset, Antoine Drouin
   3:firmwares/fixedwing/datalink.c ****  *
   4:firmwares/fixedwing/datalink.c ****  * This file is part of paparazzi.
   5:firmwares/fixedwing/datalink.c ****  *
   6:firmwares/fixedwing/datalink.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:firmwares/fixedwing/datalink.c ****  * it under the terms of the GNU General Public License as published by
   8:firmwares/fixedwing/datalink.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:firmwares/fixedwing/datalink.c ****  * any later version.
  10:firmwares/fixedwing/datalink.c ****  *
  11:firmwares/fixedwing/datalink.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:firmwares/fixedwing/datalink.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:firmwares/fixedwing/datalink.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:firmwares/fixedwing/datalink.c ****  * GNU General Public License for more details.
  15:firmwares/fixedwing/datalink.c ****  *
  16:firmwares/fixedwing/datalink.c ****  * You should have received a copy of the GNU General Public License
  17:firmwares/fixedwing/datalink.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:firmwares/fixedwing/datalink.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:firmwares/fixedwing/datalink.c ****  * Boston, MA 02111-1307, USA.
  20:firmwares/fixedwing/datalink.c ****  */
  21:firmwares/fixedwing/datalink.c **** 
  22:firmwares/fixedwing/datalink.c **** /**
  23:firmwares/fixedwing/datalink.c ****  * @file firmwares/fixedwing/datalink.c
  24:firmwares/fixedwing/datalink.c ****  * Handling of messages coming from ground and other A/Cs.
  25:firmwares/fixedwing/datalink.c ****  *
  26:firmwares/fixedwing/datalink.c ****  */
  27:firmwares/fixedwing/datalink.c **** 
  28:firmwares/fixedwing/datalink.c **** #define DATALINK_C
  29:firmwares/fixedwing/datalink.c **** 
  30:firmwares/fixedwing/datalink.c **** #define MODULES_DATALINK_C
  31:firmwares/fixedwing/datalink.c **** 
  32:firmwares/fixedwing/datalink.c **** #include <inttypes.h>
  33:firmwares/fixedwing/datalink.c **** #include <string.h>
  34:firmwares/fixedwing/datalink.c **** #include "subsystems/datalink/datalink.h"
  35:firmwares/fixedwing/datalink.c **** 
  36:firmwares/fixedwing/datalink.c **** #include "generated/modules.h"
  37:firmwares/fixedwing/datalink.c **** 
  38:firmwares/fixedwing/datalink.c **** #ifdef TRAFFIC_INFO
  39:firmwares/fixedwing/datalink.c **** #include "subsystems/navigation/traffic_info.h"
  40:firmwares/fixedwing/datalink.c **** #endif // TRAFFIC_INFO
  41:firmwares/fixedwing/datalink.c **** 
  42:firmwares/fixedwing/datalink.c **** #if defined NAV || defined WIND_INFO
  43:firmwares/fixedwing/datalink.c **** #include "state.h"
  44:firmwares/fixedwing/datalink.c **** #include "firmwares/fixedwing/nav.h"
  45:firmwares/fixedwing/datalink.c **** #endif
  46:firmwares/fixedwing/datalink.c **** 
  47:firmwares/fixedwing/datalink.c **** #ifdef HITL
  48:firmwares/fixedwing/datalink.c **** #include "subsystems/gps.h"
  49:firmwares/fixedwing/datalink.c **** #endif
  50:firmwares/fixedwing/datalink.c **** 
  51:firmwares/fixedwing/datalink.c **** 
  52:firmwares/fixedwing/datalink.c **** #include "subsystems/navigation/common_nav.h"
  53:firmwares/fixedwing/datalink.c **** #include "generated/settings.h"
  54:firmwares/fixedwing/datalink.c **** #include "math/pprz_geodetic_float.h"
  55:firmwares/fixedwing/datalink.c **** 
  56:firmwares/fixedwing/datalink.c **** #include "mcu_periph/uart.h"
  57:firmwares/fixedwing/datalink.c **** #include "subsystems/datalink/telemetry.h"
  58:firmwares/fixedwing/datalink.c **** 
  59:firmwares/fixedwing/datalink.c **** 
  60:firmwares/fixedwing/datalink.c **** #if USE_JOYSTICK
  61:firmwares/fixedwing/datalink.c **** #include "firmwares/fixedwing/stabilization/stabilization_attitude.h"
  62:firmwares/fixedwing/datalink.c **** #include "autopilot.h"
  63:firmwares/fixedwing/datalink.c **** uint8_t joystick_block;
  64:firmwares/fixedwing/datalink.c **** #define JoystickHandeDatalink(_roll_int8, _pitch_int8, _throttle_int8) { \
  65:firmwares/fixedwing/datalink.c ****     if (pprz_mode == PPRZ_MODE_AUTO2 && nav_block == joystick_block) {  \
  66:firmwares/fixedwing/datalink.c ****       h_ctl_roll_setpoint = _roll_int8 * (AUTO1_MAX_ROLL / 0x7f);       \
  67:firmwares/fixedwing/datalink.c ****       h_ctl_pitch_setpoint = _pitch_int8 * (AUTO1_MAX_PITCH / 0x7f);    \
  68:firmwares/fixedwing/datalink.c ****       v_ctl_throttle_setpoint = (MAX_PPRZ/0x7f) * _throttle_int8;       \
  69:firmwares/fixedwing/datalink.c ****     }                                                                   \
  70:firmwares/fixedwing/datalink.c ****   }
  71:firmwares/fixedwing/datalink.c **** #endif
  72:firmwares/fixedwing/datalink.c **** 
  73:firmwares/fixedwing/datalink.c **** #if defined RADIO_CONTROL && defined RADIO_CONTROL_TYPE_DATALINK
  74:firmwares/fixedwing/datalink.c **** #include "subsystems/radio_control/rc_datalink.h"
  75:firmwares/fixedwing/datalink.c **** #endif
  76:firmwares/fixedwing/datalink.c **** 
  77:firmwares/fixedwing/datalink.c **** #define MOfCm(_x) (((float)(_x))/100.)
  78:firmwares/fixedwing/datalink.c **** #define MOfMM(_x) (((float)(_x))/1000.)
  79:firmwares/fixedwing/datalink.c **** 
  80:firmwares/fixedwing/datalink.c **** #define SenderIdOfMsg(x) (x[0])
  81:firmwares/fixedwing/datalink.c **** #define IdOfMsg(x) (x[1])
  82:firmwares/fixedwing/datalink.c **** 
  83:firmwares/fixedwing/datalink.c **** void dl_parse_msg(void)
  84:firmwares/fixedwing/datalink.c **** {
 188              		.loc 2 84 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 96
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 193              		.cfi_def_cfa_offset 36
 194              		.cfi_offset 4, -36
 195              		.cfi_offset 5, -32
 196              		.cfi_offset 6, -28
 197              		.cfi_offset 7, -24
 198              		.cfi_offset 8, -20
 199              		.cfi_offset 9, -16
 200              		.cfi_offset 10, -12
 201              		.cfi_offset 11, -8
 202              		.cfi_offset 14, -4
 203 0004 2DED028B 		fstmfdd	sp!, {d8}
 204              		.cfi_def_cfa_offset 44
 205              		.cfi_offset 80, -44
 206              		.cfi_offset 81, -40
  85:firmwares/fixedwing/datalink.c ****   datalink_time = 0;
  86:firmwares/fixedwing/datalink.c ****   uint8_t msg_id = IdOfMsg(dl_buffer);
 207              		.loc 2 86 0
 208 0008 8B4C     		ldr	r4, .L74+8
  85:firmwares/fixedwing/datalink.c ****   datalink_time = 0;
 209              		.loc 2 85 0
 210 000a 8C4B     		ldr	r3, .L74+12
 211              		.loc 2 86 0
 212 000c 94F80190 		ldrb	r9, [r4, #1]	@ zero_extendqisi2
 213              	.LVL26:
  85:firmwares/fixedwing/datalink.c ****   datalink_time = 0;
 214              		.loc 2 85 0
 215 0010 0025     		movs	r5, #0
  87:firmwares/fixedwing/datalink.c **** #if 0 // not ready yet
  88:firmwares/fixedwing/datalink.c ****   uint8_t sender_id = SenderIdOfMsg(dl_buffer);
  89:firmwares/fixedwing/datalink.c **** 
  90:firmwares/fixedwing/datalink.c ****   /* parse telemetry messages coming from other AC */
  91:firmwares/fixedwing/datalink.c ****   if (sender_id != 0) {
  92:firmwares/fixedwing/datalink.c ****     switch (msg_id) {
  93:firmwares/fixedwing/datalink.c **** #ifdef TCAS
  94:firmwares/fixedwing/datalink.c ****       case DL_TCAS_RA: {
  95:firmwares/fixedwing/datalink.c ****         if (DL_TCAS_RESOLVE_ac_id(dl_buffer) == AC_ID && SenderIdOfMsg(dl_buffer) != AC_ID) {
  96:firmwares/fixedwing/datalink.c ****           uint8_t ac_id_conflict = SenderIdOfMsg(dl_buffer);
  97:firmwares/fixedwing/datalink.c ****           tcas_acs_status[the_acs_id[ac_id_conflict]].resolve = DL_TCAS_RA_resolve(dl_buffer);
  98:firmwares/fixedwing/datalink.c ****         }
  99:firmwares/fixedwing/datalink.c ****       }
 100:firmwares/fixedwing/datalink.c **** #endif
 101:firmwares/fixedwing/datalink.c ****     }
 102:firmwares/fixedwing/datalink.c ****     return;
 103:firmwares/fixedwing/datalink.c ****   }
 104:firmwares/fixedwing/datalink.c **** #endif
 105:firmwares/fixedwing/datalink.c **** 
 106:firmwares/fixedwing/datalink.c ****   if (msg_id == DL_PING) {
 216              		.loc 2 106 0
 217 0012 B9F1080F 		cmp	r9, #8
  84:firmwares/fixedwing/datalink.c ****   datalink_time = 0;
 218              		.loc 2 84 0
 219 0016 9BB0     		sub	sp, sp, #108
 220              		.cfi_def_cfa_offset 152
  85:firmwares/fixedwing/datalink.c ****   datalink_time = 0;
 221              		.loc 2 85 0
 222 0018 1D80     		strh	r5, [r3]	@ movhi
 223              		.loc 2 106 0
 224 001a 42D1     		bne	.L9
 225              	.LBB42:
 226              	.LBB43:
 282:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0 +2 /* msg header overhead */)
 227              		.loc 1 282 0
 228 001c 884C     		ldr	r4, .L74+16
 229 001e D4F82871 		ldr	r7, [r4, #296]
 230 0022 D4F80831 		ldr	r3, [r4, #264]
 231 0026 D4F80C81 		ldr	r8, [r4, #268]
 232 002a 0126     		movs	r6, #1
 233 002c 0221     		movs	r1, #2
 234 002e 8DF85860 		strb	r6, [sp, #88]
 235              	.LVL27:
 236 0032 3846     		mov	r0, r7
 237 0034 9847     		blx	r3
 238              	.LVL28:
 239 0036 8349     		ldr	r1, .L74+20
 240              	.LVL29:
 241 0038 0246     		mov	r2, r0
 242 003a 3846     		mov	r0, r7
 243 003c C047     		blx	r8
 244              	.LVL30:
 245 003e 48B3     		cbz	r0, .L10
 283:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0 +2 /* msg header overhead */);
 246              		.loc 1 283 0
 247 0040 D4F82871 		ldr	r7, [r4, #296]
 248 0044 D4F80831 		ldr	r3, [r4, #264]
 249 0048 D4F82481 		ldr	r8, [r4, #292]
 250 004c 0221     		movs	r1, #2
 251 004e 3846     		mov	r0, r7
 252 0050 9847     		blx	r3
 253              	.LVL31:
 254 0052 7C49     		ldr	r1, .L74+20
 255              	.LVL32:
 256 0054 0246     		mov	r2, r0
 257 0056 3846     		mov	r0, r7
 258 0058 C047     		blx	r8
 259              	.LVL33:
 284:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 260              		.loc 1 284 0
 261 005a D4F81831 		ldr	r3, [r4, #280]
 262 005e D4F82801 		ldr	r0, [r4, #296]
 263 0062 7849     		ldr	r1, .L74+20
 264              	.LVL34:
 265 0064 0222     		movs	r2, #2
 266 0066 9847     		blx	r3
 267              	.LVL35:
 285:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_PONG, "PONG");
 268              		.loc 1 285 0
 269 0068 16AB     		add	r3, sp, #88
 270 006a 0193     		str	r3, [sp, #4]
 271 006c 0096     		str	r6, [sp]
 272 006e D4F81061 		ldr	r6, [r4, #272]
 273              	.LVL36:
 274 0072 D4F82801 		ldr	r0, [r4, #296]
 275 0076 7349     		ldr	r1, .L74+20
 276              	.LVL37:
 277 0078 0222     		movs	r2, #2
 278 007a 2B46     		mov	r3, r5
 279              	.LVL38:
 280 007c B047     		blx	r6
 281              	.LVL39:
 286:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 282              		.loc 1 286 0
 283 007e 0323     		movs	r3, #3
 284 0080 0093     		str	r3, [sp]
 285 0082 714B     		ldr	r3, .L74+24
 286 0084 0193     		str	r3, [sp, #4]
 287 0086 D4F81461 		ldr	r6, [r4, #276]
 288 008a D4F82801 		ldr	r0, [r4, #296]
 289 008e 6D49     		ldr	r1, .L74+20
 290              	.LVL40:
 291 0090 0222     		movs	r2, #2
 292 0092 ECE1     		b	.L72
 293              	.LVL41:
 294              	.L10:
 289:/home/dino/paparazzi/var/include/messages.h **** }
 295              		.loc 1 289 0
 296 0094 D4F82031 		ldr	r3, [r4, #288]
 297              	.LVL42:
 298              	.L70:
 299 0098 D4F82801 		ldr	r0, [r4, #296]
 300 009c 6949     		ldr	r1, .L74+20
 301 009e 9847     		blx	r3
 302              	.LVL43:
 303 00a0 F0E3     		b	.L8
 304              	.LVL44:
 305              	.L9:
 306              	.LBE43:
 307              	.LBE42:
 107:firmwares/fixedwing/datalink.c ****     DOWNLINK_SEND_PONG(DefaultChannel, DefaultDevice);
 108:firmwares/fixedwing/datalink.c ****   } else
 109:firmwares/fixedwing/datalink.c **** #ifdef TRAFFIC_INFO
 110:firmwares/fixedwing/datalink.c ****     if (msg_id == DL_ACINFO && DL_ACINFO_ac_id(dl_buffer) != AC_ID) {
 308              		.loc 2 110 0
 309 00a2 B9F1010F 		cmp	r9, #1
 310 00a6 40F0E180 		bne	.L12
 311              		.loc 2 110 0 is_stmt 0 discriminator 1
 312 00aa 217E     		ldrb	r1, [r4, #24]	@ zero_extendqisi2
 313 00ac 0129     		cmp	r1, #1
 314 00ae 00F0E983 		beq	.L8
 315              	.LVL45:
 316              	.LBB44:
 111:firmwares/fixedwing/datalink.c ****       uint8_t id = DL_ACINFO_ac_id(dl_buffer);
 112:firmwares/fixedwing/datalink.c ****       float ux = MOfCm(DL_ACINFO_utm_east(dl_buffer));
 113:firmwares/fixedwing/datalink.c ****       float uy = MOfCm(DL_ACINFO_utm_north(dl_buffer));
 114:firmwares/fixedwing/datalink.c ****       float a = MOfCm(DL_ACINFO_alt(dl_buffer));
 115:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 116:firmwares/fixedwing/datalink.c ****       float s = MOfCm(DL_ACINFO_speed(dl_buffer));
 317              		.loc 2 116 0 is_stmt 1
 318 00b2 277D     		ldrb	r7, [r4, #20]	@ zero_extendqisi2
 319 00b4 0897     		str	r7, [sp, #32]
 320 00b6 677D     		ldrb	r7, [r4, #21]	@ zero_extendqisi2
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 321              		.loc 2 114 0
 322 00b8 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 323              		.loc 2 116 0
 324 00ba 0997     		str	r7, [sp, #36]
 117:firmwares/fixedwing/datalink.c ****       float cl = MOfCm(DL_ACINFO_climb(dl_buffer));
 325              		.loc 2 117 0
 326 00bc A77D     		ldrb	r7, [r4, #22]	@ zero_extendqisi2
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 327              		.loc 2 114 0
 328 00be 0390     		str	r0, [sp, #12]
 329              		.loc 2 117 0
 330 00c0 0A97     		str	r7, [sp, #40]
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 331              		.loc 2 114 0
 332 00c2 607B     		ldrb	r0, [r4, #13]	@ zero_extendqisi2
 333              		.loc 2 117 0
 334 00c4 E77D     		ldrb	r7, [r4, #23]	@ zero_extendqisi2
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 335              		.loc 2 114 0
 336 00c6 0490     		str	r0, [sp, #16]
 337              		.loc 2 117 0
 338 00c8 0B97     		str	r7, [sp, #44]
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 339              		.loc 2 114 0
 340 00ca A07B     		ldrb	r0, [r4, #14]	@ zero_extendqisi2
 118:firmwares/fixedwing/datalink.c ****       uint32_t t = DL_ACINFO_itow(dl_buffer);
 341              		.loc 2 118 0
 342 00cc 277C     		ldrb	r7, [r4, #16]	@ zero_extendqisi2
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 343              		.loc 2 114 0
 344 00ce 0590     		str	r0, [sp, #20]
 345              		.loc 2 118 0
 346 00d0 0C97     		str	r7, [sp, #48]
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 347              		.loc 2 114 0
 348 00d2 E07B     		ldrb	r0, [r4, #15]	@ zero_extendqisi2
 349              		.loc 2 118 0
 350 00d4 677C     		ldrb	r7, [r4, #17]	@ zero_extendqisi2
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 351              		.loc 2 114 0
 352 00d6 0690     		str	r0, [sp, #24]
 353              		.loc 2 118 0
 354 00d8 0D97     		str	r7, [sp, #52]
 115:firmwares/fixedwing/datalink.c ****       float s = MOfCm(DL_ACINFO_speed(dl_buffer));
 355              		.loc 2 115 0
 356 00da A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 357              		.loc 2 118 0
 358 00dc A77C     		ldrb	r7, [r4, #18]	@ zero_extendqisi2
 119:firmwares/fixedwing/datalink.c ****       SetAcInfo(id, ux, uy, c, a, s, cl, t);
 359              		.loc 2 119 0
 360 00de DFF884A1 		ldr	r10, .L74+52
 115:firmwares/fixedwing/datalink.c ****       float s = MOfCm(DL_ACINFO_speed(dl_buffer));
 361              		.loc 2 115 0
 362 00e2 0790     		str	r0, [sp, #28]
 112:firmwares/fixedwing/datalink.c ****       float uy = MOfCm(DL_ACINFO_utm_north(dl_buffer));
 363              		.loc 2 112 0
 364 00e4 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 365 00e6 94F80580 		ldrb	r8, [r4, #5]	@ zero_extendqisi2
 366 00ea 94F80690 		ldrb	r9, [r4, #6]	@ zero_extendqisi2
 367              	.LVL46:
 368 00ee E679     		ldrb	r6, [r4, #7]	@ zero_extendqisi2
 369              	.LVL47:
 113:firmwares/fixedwing/datalink.c ****       float a = MOfCm(DL_ACINFO_alt(dl_buffer));
 370              		.loc 2 113 0
 371 00f0 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 372 00f2 94F809E0 		ldrb	lr, [r4, #9]	@ zero_extendqisi2
 373 00f6 94F80AC0 		ldrb	ip, [r4, #10]	@ zero_extendqisi2
 374 00fa E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
 375              	.LVL48:
 115:firmwares/fixedwing/datalink.c ****       float s = MOfCm(DL_ACINFO_speed(dl_buffer));
 376              		.loc 2 115 0
 377 00fc E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 378              	.LVL49:
 118:firmwares/fixedwing/datalink.c ****       SetAcInfo(id, ux, uy, c, a, s, cl, t);
 379              		.loc 2 118 0
 380 00fe 0E97     		str	r7, [sp, #56]
 381 0100 E47C     		ldrb	r4, [r4, #19]	@ zero_extendqisi2
 382 0102 0F94     		str	r4, [sp, #60]
 383              	.LVL50:
 384              		.loc 2 119 0
 385 0104 9AF80040 		ldrb	r4, [r10]	@ zero_extendqisi2
 386 0108 172C     		cmp	r4, #23
 387 010a 00F2BB83 		bhi	.L8
 388 010e 4F4F     		ldr	r7, .L74+28
 389              		.loc 2 119 0 is_stmt 0 discriminator 1
 390 0110 71B1     		cbz	r1, .L13
 391              		.loc 2 119 0 discriminator 2
 392 0112 17F801B0 		ldrb	fp, [r7, r1]	@ zero_extendqisi2
 393 0116 BBF1000F 		cmp	fp, #0
 394 011a 09D1     		bne	.L13
 395              		.loc 2 119 0 discriminator 4
 396 011c 04F1010B 		add	fp, r4, #1
 397 0120 8AF800B0 		strb	fp, [r10]
 398 0124 7C54     		strb	r4, [r7, r1]
 399 0126 DFF830A1 		ldr	r10, .L74+40
 400 012a 6401     		lsls	r4, r4, #5
 401 012c 0AF80410 		strb	r1, [r10, r4]
 402              	.L13:
 112:firmwares/fixedwing/datalink.c ****       float uy = MOfCm(DL_ACINFO_utm_north(dl_buffer));
 403              		.loc 2 112 0 is_stmt 1 discriminator 6
 404 0130 3606     		lsls	r6, r6, #24
 405              	.LVL51:
 406 0132 42EA0822 		orr	r2, r2, r8, lsl #8
 407              	.LVL52:
 408 0136 46EA0946 		orr	r6, r6, r9, lsl #16
 409 013a 1643     		orrs	r6, r6, r2
 410 013c 07EE906A 		fmsr	s15, r6	@ int
 411 0140 9FED438A 		flds	s16, .L74+32
 412              		.loc 2 119 0 discriminator 6
 413 0144 434A     		ldr	r2, .L74+36
 414 0146 7C5C     		ldrb	r4, [r7, r1]	@ zero_extendqisi2
 415 0148 4349     		ldr	r1, .L74+40
 416              	.LVL53:
 112:firmwares/fixedwing/datalink.c ****       float uy = MOfCm(DL_ACINFO_utm_north(dl_buffer));
 417              		.loc 2 112 0 discriminator 6
 418 014a F8EEE77A 		fsitos	s15, s15
 113:firmwares/fixedwing/datalink.c ****       float a = MOfCm(DL_ACINFO_alt(dl_buffer));
 419              		.loc 2 113 0 discriminator 6
 420 014e 2D06     		lsls	r5, r5, #24
 421              	.LVL54:
 112:firmwares/fixedwing/datalink.c ****       float uy = MOfCm(DL_ACINFO_utm_north(dl_buffer));
 422              		.loc 2 112 0 discriminator 6
 423 0150 87EE887A 		fdivs	s14, s15, s16
 113:firmwares/fixedwing/datalink.c ****       float a = MOfCm(DL_ACINFO_alt(dl_buffer));
 424              		.loc 2 113 0 discriminator 6
 425 0154 43EA0E23 		orr	r3, r3, lr, lsl #8
 426              	.LVL55:
 427 0158 45EA0C45 		orr	r5, r5, ip, lsl #16
 428              		.loc 2 119 0 discriminator 6
 429 015c 01EB4414 		add	r4, r1, r4, lsl #5
 113:firmwares/fixedwing/datalink.c ****       float a = MOfCm(DL_ACINFO_alt(dl_buffer));
 430              		.loc 2 113 0 discriminator 6
 431 0160 1D43     		orrs	r5, r5, r3
 432              		.loc 2 119 0 discriminator 6
 433 0162 3E4B     		ldr	r3, .L74+44
 434 0164 D2ED007A 		flds	s15, [r2]	@ int
 435 0168 F8EEE77A 		fsitos	s15, s15
 436 016c 77EE677A 		fsubs	s15, s14, s15
 437 0170 C4ED017A 		fsts	s15, [r4, #4]
 113:firmwares/fixedwing/datalink.c ****       float a = MOfCm(DL_ACINFO_alt(dl_buffer));
 438              		.loc 2 113 0 discriminator 6
 439 0174 07EE905A 		fmsr	s15, r5	@ int
 440 0178 F8EEE77A 		fsitos	s15, s15
 441 017c 87EE887A 		fdivs	s14, s15, s16
 442              		.loc 2 119 0 discriminator 6
 443 0180 D3ED007A 		flds	s15, [r3]	@ int
 115:firmwares/fixedwing/datalink.c ****       float s = MOfCm(DL_ACINFO_speed(dl_buffer));
 444              		.loc 2 115 0 discriminator 6
 445 0184 079B     		ldr	r3, [sp, #28]
 446              		.loc 2 119 0 discriminator 6
 447 0186 F8EEE77A 		fsitos	s15, s15
 115:firmwares/fixedwing/datalink.c ****       float s = MOfCm(DL_ACINFO_speed(dl_buffer));
 448              		.loc 2 115 0 discriminator 6
 449 018a 43EA0020 		orr	r0, r3, r0, lsl #8
 450              	.LVL56:
 451              		.loc 2 119 0 discriminator 6
 452 018e 77EE677A 		fsubs	s15, s14, s15
 115:firmwares/fixedwing/datalink.c ****       float s = MOfCm(DL_ACINFO_speed(dl_buffer));
 453              		.loc 2 115 0 discriminator 6
 454 0192 00B2     		sxth	r0, r0
 455              		.loc 2 119 0 discriminator 6
 456 0194 C4ED027A 		fsts	s15, [r4, #8]
 115:firmwares/fixedwing/datalink.c ****       float s = MOfCm(DL_ACINFO_speed(dl_buffer));
 457              		.loc 2 115 0 discriminator 6
 458 0198 07EE900A 		fmsr	s15, r0	@ int
 459 019c F8EEE77A 		fsitos	s15, s15
 460 01a0 17EE900A 		fmrs	r0, s15
 461 01a4 FFF7FEFF 		bl	__aeabi_f2d
 462              	.LVL57:
 463 01a8 0022     		movs	r2, #0
 464 01aa 2D4B     		ldr	r3, .L74+48
 465 01ac FFF7FEFF 		bl	__aeabi_ddiv
 466              	.LVL58:
 467 01b0 1FA3     		adr	r3, .L74
 468 01b2 D3E90023 		ldrd	r2, [r3]
 469 01b6 FFF7FEFF 		bl	__aeabi_dmul
 470              	.LVL59:
 471 01ba FFF7FEFF 		bl	__aeabi_d2f
 472              	.LVL60:
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 473              		.loc 2 114 0 discriminator 6
 474 01be 069B     		ldr	r3, [sp, #24]
 475 01c0 0499     		ldr	r1, [sp, #16]
 115:firmwares/fixedwing/datalink.c ****       float s = MOfCm(DL_ACINFO_speed(dl_buffer));
 476              		.loc 2 115 0 discriminator 6
 477 01c2 E060     		str	r0, [r4, #12]	@ float
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 478              		.loc 2 114 0 discriminator 6
 479 01c4 1A06     		lsls	r2, r3, #24
 480 01c6 059B     		ldr	r3, [sp, #20]
 481 01c8 42EA0342 		orr	r2, r2, r3, lsl #16
 482 01cc 039B     		ldr	r3, [sp, #12]
 483 01ce 43EA0123 		orr	r3, r3, r1, lsl #8
 484 01d2 1343     		orrs	r3, r3, r2
 485 01d4 07EE903A 		fmsr	s15, r3	@ int
 486 01d8 F8EEE77A 		fsitos	s15, s15
 116:firmwares/fixedwing/datalink.c ****       float cl = MOfCm(DL_ACINFO_climb(dl_buffer));
 487              		.loc 2 116 0 discriminator 6
 488 01dc 099A     		ldr	r2, [sp, #36]
 489 01de 089B     		ldr	r3, [sp, #32]
 118:firmwares/fixedwing/datalink.c ****       SetAcInfo(id, ux, uy, c, a, s, cl, t);
 490              		.loc 2 118 0 discriminator 6
 491 01e0 0D99     		ldr	r1, [sp, #52]
 114:firmwares/fixedwing/datalink.c ****       float c = RadOfDeg(((float)DL_ACINFO_course(dl_buffer)) / 10.);
 492              		.loc 2 114 0 discriminator 6
 493 01e2 C7EE887A 		fdivs	s15, s15, s16
 116:firmwares/fixedwing/datalink.c ****       float cl = MOfCm(DL_ACINFO_climb(dl_buffer));
 494              		.loc 2 116 0 discriminator 6
 495 01e6 43EA0223 		orr	r3, r3, r2, lsl #8
 117:firmwares/fixedwing/datalink.c ****       uint32_t t = DL_ACINFO_itow(dl_buffer);
 496              		.loc 2 117 0 discriminator 6
 497 01ea 0B9A     		ldr	r2, [sp, #44]
 498              		.loc 2 119 0 discriminator 6
 499 01ec C4ED047A 		fsts	s15, [r4, #16]
 116:firmwares/fixedwing/datalink.c ****       float cl = MOfCm(DL_ACINFO_climb(dl_buffer));
 500              		.loc 2 116 0 discriminator 6
 501 01f0 07EE903A 		fmsr	s15, r3	@ int
 502 01f4 F8EE677A 		fuitos	s15, s15
 117:firmwares/fixedwing/datalink.c ****       uint32_t t = DL_ACINFO_itow(dl_buffer);
 503              		.loc 2 117 0 discriminator 6
 504 01f8 0A9B     		ldr	r3, [sp, #40]
 116:firmwares/fixedwing/datalink.c ****       float cl = MOfCm(DL_ACINFO_climb(dl_buffer));
 505              		.loc 2 116 0 discriminator 6
 506 01fa C7EE887A 		fdivs	s15, s15, s16
 117:firmwares/fixedwing/datalink.c ****       uint32_t t = DL_ACINFO_itow(dl_buffer);
 507              		.loc 2 117 0 discriminator 6
 508 01fe 43EA0223 		orr	r3, r3, r2, lsl #8
 509 0202 1BB2     		sxth	r3, r3
 510 0204 0E9A     		ldr	r2, [sp, #56]
 511              		.loc 2 119 0 discriminator 6
 512 0206 C4ED057A 		fsts	s15, [r4, #20]
 117:firmwares/fixedwing/datalink.c ****       uint32_t t = DL_ACINFO_itow(dl_buffer);
 513              		.loc 2 117 0 discriminator 6
 514 020a 07EE903A 		fmsr	s15, r3	@ int
 515 020e F8EEE77A 		fsitos	s15, s15
 118:firmwares/fixedwing/datalink.c ****       SetAcInfo(id, ux, uy, c, a, s, cl, t);
 516              		.loc 2 118 0 discriminator 6
 517 0212 0F9B     		ldr	r3, [sp, #60]
 117:firmwares/fixedwing/datalink.c ****       uint32_t t = DL_ACINFO_itow(dl_buffer);
 518              		.loc 2 117 0 discriminator 6
 519 0214 C7EE887A 		fdivs	s15, s15, s16
 118:firmwares/fixedwing/datalink.c ****       SetAcInfo(id, ux, uy, c, a, s, cl, t);
 520              		.loc 2 118 0 discriminator 6
 521 0218 1B06     		lsls	r3, r3, #24
 522 021a 43EA0242 		orr	r2, r3, r2, lsl #16
 523 021e 0C9B     		ldr	r3, [sp, #48]
 524 0220 43EA0123 		orr	r3, r3, r1, lsl #8
 525 0224 1343     		orrs	r3, r3, r2
 526              		.loc 2 119 0 discriminator 6
 527 0226 E361     		str	r3, [r4, #28]
 528 0228 C4ED067A 		fsts	s15, [r4, #24]
 529 022c 2AE3     		b	.L8
 530              	.L75:
 531 022e 00BF     		.align	3
 532              	.L74:
 533 0230 399D52A2 		.word	-1571644103
 534 0234 46DF913F 		.word	1066524486
 535 0238 00000000 		.word	.LANCHOR1
 536 023c 00000000 		.word	.LANCHOR0
 537 0240 00000000 		.word	pprz_tp
 538 0244 2C010000 		.word	uart1+300
 539 0248 09000000 		.word	.LC1
 540 024c 00000000 		.word	the_acs_id
 541 0250 0000C842 		.word	1120403456
 542 0254 00000000 		.word	nav_utm_east0
 543 0258 00000000 		.word	the_acs
 544 025c 00000000 		.word	nav_utm_north0
 545 0260 00002440 		.word	1076101120
 546 0264 00000000 		.word	acs_idx
 547 0268 00007A44 		.word	1148846080
 548              	.LVL61:
 549              	.L12:
 550              	.LBE44:
 120:firmwares/fixedwing/datalink.c ****     } else
 121:firmwares/fixedwing/datalink.c **** #endif
 122:firmwares/fixedwing/datalink.c **** #ifdef NAV
 123:firmwares/fixedwing/datalink.c ****       if (msg_id == DL_MOVE_WP && DL_MOVE_WP_ac_id(dl_buffer) == AC_ID) {
 551              		.loc 2 123 0
 552 026c B9F1020F 		cmp	r9, #2
 553 0270 40F01881 		bne	.L14
 554              		.loc 2 123 0 is_stmt 0 discriminator 1
 555 0274 E678     		ldrb	r6, [r4, #3]	@ zero_extendqisi2
 556 0276 012E     		cmp	r6, #1
 557 0278 40F00483 		bne	.L8
 558              	.LBB45:
 124:firmwares/fixedwing/datalink.c ****         uint8_t wp_id = DL_MOVE_WP_wp_id(dl_buffer);
 559              		.loc 2 124 0 is_stmt 1
 560 027c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 561 027e 8DF84630 		strb	r3, [sp, #70]
 125:firmwares/fixedwing/datalink.c ****         float a = MOfMM(DL_MOVE_WP_alt(dl_buffer));
 562              		.loc 2 125 0
 563 0282 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 564 0284 E17B     		ldrb	r1, [r4, #15]	@ zero_extendqisi2
 565 0286 227B     		ldrb	r2, [r4, #12]	@ zero_extendqisi2
 566 0288 1FED097A 		flds	s14, .L74+56
 126:firmwares/fixedwing/datalink.c **** 
 127:firmwares/fixedwing/datalink.c ****         /* Computes from (lat, long) in the referenced UTM zone */
 128:firmwares/fixedwing/datalink.c ****         struct LlaCoor_f lla;
 129:firmwares/fixedwing/datalink.c ****         lla.lat = RadOfDeg((float)(DL_MOVE_WP_lat(dl_buffer) / 1e7));
 567              		.loc 2 129 0
 568 028c E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 130:firmwares/fixedwing/datalink.c ****         lla.lon = RadOfDeg((float)(DL_MOVE_WP_lon(dl_buffer) / 1e7));
 131:firmwares/fixedwing/datalink.c ****         struct UtmCoor_f utm;
 132:firmwares/fixedwing/datalink.c ****         utm.zone = nav_utm_zone0;
 569              		.loc 2 132 0
 570 028e DFF810B2 		ldr	fp, .L76+40
 125:firmwares/fixedwing/datalink.c **** 
 571              		.loc 2 125 0
 572 0292 1B04     		lsls	r3, r3, #16
 573 0294 43EA0161 		orr	r1, r3, r1, lsl #24
 574 0298 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 575 029a 42EA0323 		orr	r3, r2, r3, lsl #8
 576 029e 0B43     		orrs	r3, r3, r1
 577 02a0 07EE903A 		fmsr	s15, r3	@ int
 578 02a4 F8EEE77A 		fsitos	s15, s15
 129:firmwares/fixedwing/datalink.c ****         lla.lon = RadOfDeg((float)(DL_MOVE_WP_lon(dl_buffer) / 1e7));
 579              		.loc 2 129 0
 580 02a8 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 581 02aa 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 125:firmwares/fixedwing/datalink.c **** 
 582              		.loc 2 125 0
 583 02ac C7EE877A 		fdivs	s15, s15, s14
 129:firmwares/fixedwing/datalink.c ****         lla.lon = RadOfDeg((float)(DL_MOVE_WP_lon(dl_buffer) / 1e7));
 584              		.loc 2 129 0
 585 02b0 1B04     		lsls	r3, r3, #16
 586 02b2 43EA0063 		orr	r3, r3, r0, lsl #24
 587 02b6 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 588 02b8 42EA0020 		orr	r0, r2, r0, lsl #8
 589 02bc 1843     		orrs	r0, r0, r3
 133:firmwares/fixedwing/datalink.c ****         utm_of_lla_f(&utm, &lla);
 590              		.loc 2 133 0
 591 02be 0DF15808 		add	r8, sp, #88
 125:firmwares/fixedwing/datalink.c **** 
 592              		.loc 2 125 0
 593 02c2 CDED127A 		fsts	s15, [sp, #72]
 129:firmwares/fixedwing/datalink.c ****         lla.lon = RadOfDeg((float)(DL_MOVE_WP_lon(dl_buffer) / 1e7));
 594              		.loc 2 129 0
 595 02c6 FFF7FEFF 		bl	__aeabi_i2d
 596              	.LVL62:
 597 02ca 6BA3     		adr	r3, .L76
 598 02cc D3E90023 		ldrd	r2, [r3]
 599 02d0 FFF7FEFF 		bl	__aeabi_ddiv
 600              	.LVL63:
 601 02d4 FFF7FEFF 		bl	__aeabi_d2f
 602              	.LVL64:
 603 02d8 FFF7FEFF 		bl	__aeabi_f2d
 604              	.LVL65:
 605 02dc 68A3     		adr	r3, .L76+8
 606 02de D3E90023 		ldrd	r2, [r3]
 607 02e2 FFF7FEFF 		bl	__aeabi_dmul
 608              	.LVL66:
 609 02e6 FFF7FEFF 		bl	__aeabi_d2f
 610              	.LVL67:
 130:firmwares/fixedwing/datalink.c ****         struct UtmCoor_f utm;
 611              		.loc 2 130 0
 612 02ea A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 129:firmwares/fixedwing/datalink.c ****         lla.lon = RadOfDeg((float)(DL_MOVE_WP_lon(dl_buffer) / 1e7));
 613              		.loc 2 129 0
 614 02ec 1390     		str	r0, [sp, #76]	@ float
 130:firmwares/fixedwing/datalink.c ****         struct UtmCoor_f utm;
 615              		.loc 2 130 0
 616 02ee E07A     		ldrb	r0, [r4, #11]	@ zero_extendqisi2
 617 02f0 227A     		ldrb	r2, [r4, #8]	@ zero_extendqisi2
 618 02f2 1B04     		lsls	r3, r3, #16
 619 02f4 43EA0063 		orr	r3, r3, r0, lsl #24
 620 02f8 607A     		ldrb	r0, [r4, #9]	@ zero_extendqisi2
 621              	.LBB46:
 622              	.LBB47:
 740:/home/dino/paparazzi/var/include/messages.h **** 
 741:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MARK(_trans, _dev, ac_id, lat, long) pprz_msg_send_MARK(&((_trans).trans_tx),
 742:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MARK(struct transport_tx *trans, struct link_device *dev, uint8_t 
 743:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4 +2 /* msg h
 744:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4 +2 /* msg header overhe
 745:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4 +2 /* msg header overhead */);
 746:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 747:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MARK, "MARK");
 748:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_id);
 749:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _lat);
 750:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _long);
 751:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 752:/home/dino/paparazzi/var/include/messages.h **** 	} else
 753:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 754:/home/dino/paparazzi/var/include/messages.h **** }
 755:/home/dino/paparazzi/var/include/messages.h **** 
 756:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_SYS_MON(_trans, _dev, periodic_time, periodic_time_min, periodic_time_max, pe
 757:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_SYS_MON(struct transport_tx *trans, struct link_device *dev, uint8
 758:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+1 +
 759:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+2+2+2+2+2+2+1 +2 /* msg hea
 760:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+2+2+2+2+2+2+1 +2 /* msg header overhead */);
 761:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 762:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SYS_MON, "SYS_MON");
 763:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_time)
 764:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_time_
 765:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_time_
 766:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_cycle
 767:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_cycle
 768:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _periodic_cycle
 769:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _event_number);
 770:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cpu_load);
 771:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 772:/home/dino/paparazzi/var/include/messages.h **** 	} else
 773:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 774:/home/dino/paparazzi/var/include/messages.h **** }
 775:/home/dino/paparazzi/var/include/messages.h **** 
 776:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_MOTOR(_trans, _dev, rpm, current) pprz_msg_send_MOTOR(&((_trans).trans_tx), &
 777:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_MOTOR(struct transport_tx *trans, struct link_device *dev, uint8_t
 778:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg hea
 779:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+4 +2 /* msg header overhead
 780:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+2+4 +2 /* msg header overhead */);
 781:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 782:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_MOTOR, "MOTOR");
 783:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _rpm);
 784:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _current);
 785:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 786:/home/dino/paparazzi/var/include/messages.h **** 	} else
 787:/home/dino/paparazzi/var/include/messages.h **** 	  trans->overrun(trans->impl, dev);
 788:/home/dino/paparazzi/var/include/messages.h **** }
 789:/home/dino/paparazzi/var/include/messages.h **** 
 790:/home/dino/paparazzi/var/include/messages.h **** #define DOWNLINK_SEND_WP_MOVED(_trans, _dev, wp_id, utm_east, utm_north, alt, utm_zone) pprz_msg_se
 791:/home/dino/paparazzi/var/include/messages.h **** static inline void pprz_msg_send_WP_MOVED(struct transport_tx *trans, struct link_device *dev, uint
 792:/home/dino/paparazzi/var/include/messages.h **** 	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4+1 +2 /* m
 623              		.loc 1 792 0
 624 02fa 634C     		ldr	r4, .L76+16
 625              	.LBE47:
 626              	.LBE46:
 130:firmwares/fixedwing/datalink.c ****         struct UtmCoor_f utm;
 627              		.loc 2 130 0
 628 02fc 42EA0020 		orr	r0, r2, r0, lsl #8
 629 0300 1843     		orrs	r0, r0, r3
 630 0302 FFF7FEFF 		bl	__aeabi_i2d
 631              	.LVL68:
 632 0306 5CA3     		adr	r3, .L76
 633 0308 D3E90023 		ldrd	r2, [r3]
 634 030c FFF7FEFF 		bl	__aeabi_ddiv
 635              	.LVL69:
 636 0310 FFF7FEFF 		bl	__aeabi_d2f
 637              	.LVL70:
 638 0314 FFF7FEFF 		bl	__aeabi_f2d
 639              	.LVL71:
 640 0318 59A3     		adr	r3, .L76+8
 641 031a D3E90023 		ldrd	r2, [r3]
 642 031e FFF7FEFF 		bl	__aeabi_dmul
 643              	.LVL72:
 644 0322 FFF7FEFF 		bl	__aeabi_d2f
 645              	.LVL73:
 132:firmwares/fixedwing/datalink.c ****         utm_of_lla_f(&utm, &lla);
 646              		.loc 2 132 0
 647 0326 9BF80030 		ldrb	r3, [fp]	@ zero_extendqisi2
 130:firmwares/fixedwing/datalink.c ****         struct UtmCoor_f utm;
 648              		.loc 2 130 0
 649 032a 1490     		str	r0, [sp, #80]	@ float
 650              		.loc 2 133 0
 651 032c 13A9     		add	r1, sp, #76
 652 032e 4046     		mov	r0, r8
 132:firmwares/fixedwing/datalink.c ****         utm_of_lla_f(&utm, &lla);
 653              		.loc 2 132 0
 654 0330 8DF86430 		strb	r3, [sp, #100]
 655              		.loc 2 133 0
 656 0334 FFF7FEFF 		bl	utm_of_lla_f
 657              	.LVL74:
 134:firmwares/fixedwing/datalink.c ****         nav_move_waypoint(wp_id, utm.east, utm.north, a);
 658              		.loc 2 134 0
 659 0338 9DF84600 		ldrb	r0, [sp, #70]	@ zero_extendqisi2
 660 033c 1799     		ldr	r1, [sp, #92]	@ float
 661 033e 169A     		ldr	r2, [sp, #88]	@ float
 662 0340 129B     		ldr	r3, [sp, #72]	@ float
 663 0342 FFF7FEFF 		bl	nav_move_waypoint
 664              	.LVL75:
 135:firmwares/fixedwing/datalink.c **** 
 136:firmwares/fixedwing/datalink.c ****         /* Waypoint range is limited. Computes the UTM pos back from the relative
 137:firmwares/fixedwing/datalink.c ****            coordinates */
 138:firmwares/fixedwing/datalink.c ****         utm.east = waypoints[wp_id].x + nav_utm_east0;
 665              		.loc 2 138 0
 666 0346 9DF84620 		ldrb	r2, [sp, #70]	@ zero_extendqisi2
 667 034a 504B     		ldr	r3, .L76+20
 668              	.LBB53:
 669              	.LBB48:
 670              		.loc 1 792 0
 671 034c D4F82871 		ldr	r7, [r4, #296]
 672 0350 D4F80CA1 		ldr	r10, [r4, #268]
 673              	.LBE48:
 674              	.LBE53:
 675              		.loc 2 138 0
 676 0354 0C21     		movs	r1, #12
 677 0356 01FB0233 		mla	r3, r1, r2, r3
 678 035a 4D4A     		ldr	r2, .L76+24
 679 035c 93ED007A 		flds	s14, [r3]
 680 0360 D2ED007A 		flds	s15, [r2]	@ int
 139:firmwares/fixedwing/datalink.c ****         utm.north = waypoints[wp_id].y + nav_utm_north0;
 681              		.loc 2 139 0
 682 0364 4B4A     		ldr	r2, .L76+28
 138:firmwares/fixedwing/datalink.c ****         utm.north = waypoints[wp_id].y + nav_utm_north0;
 683              		.loc 2 138 0
 684 0366 F8EEE77A 		fsitos	s15, s15
 685              	.LBB54:
 686              	.LBB49:
 687              		.loc 1 792 0
 688 036a 1021     		movs	r1, #16
 689              	.LBE49:
 690              	.LBE54:
 138:firmwares/fixedwing/datalink.c ****         utm.north = waypoints[wp_id].y + nav_utm_north0;
 691              		.loc 2 138 0
 692 036c 77EE277A 		fadds	s15, s14, s15
 693              	.LBB55:
 694              	.LBB50:
 695              		.loc 1 792 0
 696 0370 3846     		mov	r0, r7
 697              	.LBE50:
 698              	.LBE55:
 138:firmwares/fixedwing/datalink.c ****         utm.north = waypoints[wp_id].y + nav_utm_north0;
 699              		.loc 2 138 0
 700 0372 CDED177A 		fsts	s15, [sp, #92]
 701              		.loc 2 139 0
 702 0376 D2ED007A 		flds	s15, [r2]	@ int
 703 037a 93ED017A 		flds	s14, [r3, #4]
 704 037e 8DF84760 		strb	r6, [sp, #71]
 705 0382 F8EEE77A 		fsitos	s15, s15
 706              	.LBB56:
 707              	.LBB51:
 708              		.loc 1 792 0
 709 0386 D4F80831 		ldr	r3, [r4, #264]
 710              	.LBE51:
 711              	.LBE56:
 712              		.loc 2 139 0
 713 038a 77EE277A 		fadds	s15, s14, s15
 714 038e CDED167A 		fsts	s15, [sp, #88]
 715              	.LVL76:
 716              	.LBB57:
 717              	.LBB52:
 718              		.loc 1 792 0
 719 0392 9847     		blx	r3
 720              	.LVL77:
 721 0394 4049     		ldr	r1, .L76+32
 722              	.LVL78:
 723 0396 0246     		mov	r2, r0
 724 0398 3846     		mov	r0, r7
 725 039a D047     		blx	r10
 726              	.LVL79:
 727 039c 0028     		cmp	r0, #0
 728 039e 3FF479AE 		beq	.L10
 793:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+4+4+4+1 +2 /* msg header ov
 729              		.loc 1 793 0
 730 03a2 D4F82871 		ldr	r7, [r4, #296]
 731 03a6 D4F80831 		ldr	r3, [r4, #264]
 732 03aa D4F824A1 		ldr	r10, [r4, #292]
 733 03ae 3846     		mov	r0, r7
 734 03b0 1021     		movs	r1, #16
 735 03b2 9847     		blx	r3
 736              	.LVL80:
 737 03b4 3849     		ldr	r1, .L76+32
 738              	.LVL81:
 739 03b6 0246     		mov	r2, r0
 740 03b8 3846     		mov	r0, r7
 741 03ba D047     		blx	r10
 742              	.LVL82:
 794:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+4+4+4+1 +2 /* msg header overhead */);
 743              		.loc 1 794 0
 744 03bc D4F81831 		ldr	r3, [r4, #280]
 745 03c0 D4F82801 		ldr	r0, [r4, #296]
 746 03c4 3449     		ldr	r1, .L76+32
 747              	.LVL83:
 748 03c6 1022     		movs	r2, #16
 749 03c8 9847     		blx	r3
 750              	.LVL84:
 795:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 751              		.loc 1 795 0
 752 03ca 0DF14703 		add	r3, sp, #71
 753 03ce 0096     		str	r6, [sp]
 754 03d0 0193     		str	r3, [sp, #4]
 755 03d2 D4F81071 		ldr	r7, [r4, #272]
 756 03d6 D4F82801 		ldr	r0, [r4, #296]
 757 03da 2F49     		ldr	r1, .L76+32
 758              	.LVL85:
 759 03dc 4A46     		mov	r2, r9
 760 03de 2B46     		mov	r3, r5
 761 03e0 B847     		blx	r7
 762              	.LVL86:
 796:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_WP_MOVED, "WP_MOVED"
 763              		.loc 1 796 0
 764 03e2 2323     		movs	r3, #35
 765 03e4 0093     		str	r3, [sp]
 766 03e6 2D4B     		ldr	r3, .L76+36
 767 03e8 0193     		str	r3, [sp, #4]
 768 03ea D4F81471 		ldr	r7, [r4, #276]
 769 03ee D4F82801 		ldr	r0, [r4, #296]
 770 03f2 2949     		ldr	r1, .L76+32
 771              	.LVL87:
 772 03f4 4A46     		mov	r2, r9
 773 03f6 2B46     		mov	r3, r5
 774 03f8 B847     		blx	r7
 775              	.LVL88:
 797:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_id);
 776              		.loc 1 797 0
 777 03fa 0DF14603 		add	r3, sp, #70
 778              	.LVL89:
 779 03fe 0096     		str	r6, [sp]
 780 0400 0193     		str	r3, [sp, #4]
 781 0402 D4F81071 		ldr	r7, [r4, #272]
 782 0406 D4F82801 		ldr	r0, [r4, #296]
 783 040a 2349     		ldr	r1, .L76+32
 784              	.LVL90:
 785 040c 4A46     		mov	r2, r9
 786 040e 2B46     		mov	r3, r5
 787              	.LVL91:
 788 0410 B847     		blx	r7
 789              	.LVL92:
 798:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _utm_east);
 790              		.loc 1 798 0
 791 0412 4FF0040A 		mov	r10, #4
 792 0416 17AB     		add	r3, sp, #92
 793              	.LVL93:
 794 0418 0193     		str	r3, [sp, #4]
 795 041a CDF800A0 		str	r10, [sp]
 796 041e D4F82801 		ldr	r0, [r4, #296]
 797 0422 1D49     		ldr	r1, .L76+32
 798              	.LVL94:
 799 0424 D4F81071 		ldr	r7, [r4, #272]
 800 0428 0A22     		movs	r2, #10
 801 042a 2B46     		mov	r3, r5
 802              	.LVL95:
 803 042c B847     		blx	r7
 804              	.LVL96:
 799:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _utm_north);
 805              		.loc 1 799 0
 806 042e CDF800A0 		str	r10, [sp]
 807 0432 CDF80480 		str	r8, [sp, #4]
 808 0436 D4F82801 		ldr	r0, [r4, #296]
 809 043a 1749     		ldr	r1, .L76+32
 810              	.LVL97:
 811 043c D4F81071 		ldr	r7, [r4, #272]
 812 0440 0A22     		movs	r2, #10
 813 0442 2B46     		mov	r3, r5
 814 0444 B847     		blx	r7
 815              	.LVL98:
 800:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _alt);
 816              		.loc 1 800 0
 817 0446 12AB     		add	r3, sp, #72
 818              	.LVL99:
 819 0448 0193     		str	r3, [sp, #4]
 820 044a CDF800A0 		str	r10, [sp]
 821 044e D4F82801 		ldr	r0, [r4, #296]
 822 0452 1149     		ldr	r1, .L76+32
 823              	.LVL100:
 824 0454 D4F81071 		ldr	r7, [r4, #272]
 825 0458 0A22     		movs	r2, #10
 826 045a 2B46     		mov	r3, r5
 827              	.LVL101:
 828 045c B847     		blx	r7
 829              	.LVL102:
 801:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _utm_zone);
 830              		.loc 1 801 0
 831 045e 8DE84008 		stmia	sp, {r6, fp}
 832 0462 0D49     		ldr	r1, .L76+32
 833              	.LVL103:
 834 0464 D4F81061 		ldr	r6, [r4, #272]
 835              	.LVL104:
 836 0468 D4F82801 		ldr	r0, [r4, #296]
 837 046c 4A46     		mov	r2, r9
 838              	.LVL105:
 839              	.L72:
 840 046e 2B46     		mov	r3, r5
 841 0470 B047     		blx	r6
 842              	.LVL106:
 843              	.L73:
 802:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 844              		.loc 1 802 0
 845 0472 D4F81C31 		ldr	r3, [r4, #284]
 846 0476 0FE6     		b	.L70
 847              	.L77:
 848              		.align	3
 849              	.L76:
 850 0478 00000000 		.word	0
 851 047c D0126341 		.word	1097011920
 852 0480 399D52A2 		.word	-1571644103
 853 0484 46DF913F 		.word	1066524486
 854 0488 00000000 		.word	pprz_tp
 855 048c 00000000 		.word	waypoints
 856 0490 00000000 		.word	nav_utm_east0
 857 0494 00000000 		.word	nav_utm_north0
 858 0498 2C010000 		.word	uart1+300
 859 049c 0E000000 		.word	.LC2
 860 04a0 00000000 		.word	nav_utm_zone0
 861              	.LVL107:
 862              	.L14:
 863              	.LBE52:
 864              	.LBE57:
 865              	.LBE45:
 140:firmwares/fixedwing/datalink.c ****         DOWNLINK_SEND_WP_MOVED(DefaultChannel, DefaultDevice, &wp_id, &utm.east, &utm.north, &a, &n
 141:firmwares/fixedwing/datalink.c ****       } else if (msg_id == DL_BLOCK && DL_BLOCK_ac_id(dl_buffer) == AC_ID) {
 866              		.loc 2 141 0
 867 04a4 B9F1050F 		cmp	r9, #5
 868 04a8 40F0CB80 		bne	.L17
 869              		.loc 2 141 0 is_stmt 0 discriminator 1
 870 04ac E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 871 04ae 012B     		cmp	r3, #1
 872 04b0 40F0E881 		bne	.L8
 142:firmwares/fixedwing/datalink.c ****         nav_goto_block(DL_BLOCK_block_id(dl_buffer));
 873              		.loc 2 142 0 is_stmt 1
 874 04b4 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 875 04b6 FFF7FEFF 		bl	nav_goto_block
 876              	.LVL108:
 877              	.LBB58:
 143:firmwares/fixedwing/datalink.c ****         SEND_NAVIGATION(&(DefaultChannel).trans_tx, &(DefaultDevice).device);
 878              		.loc 2 143 0
 879 04ba B74B     		ldr	r3, .L78+8
 880 04bc D3ED007A 		flds	s15, [r3]
 881 04c0 F0EEE77A 		fabss	s15, s15
 882 04c4 17EE900A 		fmrs	r0, s15
 883 04c8 FFF7FEFF 		bl	__aeabi_f2d
 884              	.LVL109:
 885 04cc B0A3     		adr	r3, .L78
 886 04ce D3E90023 		ldrd	r2, [r3]
 887 04d2 FFF7FEFF 		bl	__aeabi_ddiv
 888              	.LVL110:
 889 04d6 FFF7FEFF 		bl	__aeabi_d2uiz
 890              	.LVL111:
 891              	.LBB59:
 892              	.LBB60:
 893              		.file 3 "./state.h"
   1:./state.h     **** /*
   2:./state.h     ****  * Copyright (C) 2011-2012 Felix Ruess <felix.ruess@gmail.com>
   3:./state.h     ****  *
   4:./state.h     ****  * This file is part of paparazzi.
   5:./state.h     ****  *
   6:./state.h     ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./state.h     ****  * it under the terms of the GNU General Public License as published by
   8:./state.h     ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./state.h     ****  * any later version.
  10:./state.h     ****  *
  11:./state.h     ****  * paparazzi is distributed in the hope that it will be useful,
  12:./state.h     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./state.h     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./state.h     ****  * GNU General Public License for more details.
  15:./state.h     ****  *
  16:./state.h     ****  * You should have received a copy of the GNU General Public License
  17:./state.h     ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./state.h     ****  * <http://www.gnu.org/licenses/>.
  19:./state.h     ****  */
  20:./state.h     **** 
  21:./state.h     **** /**
  22:./state.h     ****  * @file state.h
  23:./state.h     ****  *
  24:./state.h     ****  * API to get/set the generic vehicle states.
  25:./state.h     ****  *
  26:./state.h     ****  * Also see the @ref state_interface "State Interface" page.
  27:./state.h     ****  *
  28:./state.h     ****  * @author Felix Ruess <felix.ruess@gmail.com>
  29:./state.h     ****  */
  30:./state.h     **** 
  31:./state.h     **** #ifndef STATE_H
  32:./state.h     **** #define STATE_H
  33:./state.h     **** 
  34:./state.h     **** #include "math/pprz_algebra_int.h"
  35:./state.h     **** #include "math/pprz_algebra_float.h"
  36:./state.h     **** #include "math/pprz_geodetic_int.h"
  37:./state.h     **** #include "math/pprz_geodetic_float.h"
  38:./state.h     **** #include "math/pprz_orientation_conversion.h"
  39:./state.h     **** 
  40:./state.h     **** #include "std.h"
  41:./state.h     **** #include <string.h>
  42:./state.h     **** 
  43:./state.h     **** /**
  44:./state.h     ****  * This general state interface holds all the most important vehicle states like
  45:./state.h     ****  * position, velocity, attitude, etc. It handles coordinate system and
  46:./state.h     ****  * fixed-/floating-point conversion on the fly when needed.
  47:./state.h     ****  *
  48:./state.h     ****  * You can set e.g. the position in any coordinate system you wish:
  49:./state.h     ****  * stateSetPositionNed_i() to set the position in fixed-point NED coordinates.
  50:./state.h     ****  * If you need to read the position somewhere else in a different representation,
  51:./state.h     ****  * call: stateGetPositionLla_f() and only then the LLA float position representation
  52:./state.h     ****  * is calculated on the fly and returned. It's also only calculated once,
  53:./state.h     ****  * until a new position is set which invalidates all the other representations again.
  54:./state.h     ****  */
  55:./state.h     **** 
  56:./state.h     **** /**
  57:./state.h     ****  * @defgroup state_interface State interface
  58:./state.h     ****  * @{
  59:./state.h     ****  */
  60:./state.h     **** 
  61:./state.h     **** /**
  62:./state.h     ****  * @defgroup state_position Position representations
  63:./state.h     ****  * @{
  64:./state.h     ****  */
  65:./state.h     **** #define POS_ECEF_I 0
  66:./state.h     **** #define POS_NED_I  1
  67:./state.h     **** #define POS_ENU_I  2
  68:./state.h     **** #define POS_LLA_I  3
  69:./state.h     **** #define POS_UTM_I  4
  70:./state.h     **** #define POS_ECEF_F 5
  71:./state.h     **** #define POS_NED_F  6
  72:./state.h     **** #define POS_ENU_F  7
  73:./state.h     **** #define POS_LLA_F  8
  74:./state.h     **** #define POS_UTM_F  9
  75:./state.h     **** #define POS_LOCAL_COORD ((1<<POS_NED_I)|(1<<POS_NED_F)|(1<<POS_ENU_I)|(1<<POS_ENU_F))
  76:./state.h     **** #define POS_GLOBAL_COORD ((1<<POS_ECEF_I)|(1<<POS_ECEF_F)|(1<<POS_LLA_I)|(1<<POS_LLA_F)|(1<<POS_UTM
  77:./state.h     **** /**@}*/
  78:./state.h     **** 
  79:./state.h     **** /**
  80:./state.h     ****  * @defgroup state_velocity Speed representations
  81:./state.h     ****  * @{
  82:./state.h     ****  */
  83:./state.h     **** #define SPEED_ECEF_I  0
  84:./state.h     **** #define SPEED_NED_I   1
  85:./state.h     **** #define SPEED_ENU_I   2
  86:./state.h     **** #define SPEED_HNORM_I 3
  87:./state.h     **** #define SPEED_HDIR_I  4
  88:./state.h     **** #define SPEED_ECEF_F  5
  89:./state.h     **** #define SPEED_NED_F   6
  90:./state.h     **** #define SPEED_ENU_F   7
  91:./state.h     **** #define SPEED_HNORM_F 8
  92:./state.h     **** #define SPEED_HDIR_F  9
  93:./state.h     **** #define SPEED_LOCAL_COORD ((1<<SPEED_NED_I)|(1<<SPEED_ENU_I)|(1<<SPEED_NED_F)|(1<<SPEED_ENU_F))
  94:./state.h     **** /**@}*/
  95:./state.h     **** 
  96:./state.h     **** /**
  97:./state.h     ****  * @defgroup state_acceleration Acceleration representations
  98:./state.h     ****  * @{
  99:./state.h     ****  */
 100:./state.h     **** #define ACCEL_ECEF_I 0
 101:./state.h     **** #define ACCEL_NED_I  1
 102:./state.h     **** #define ACCEL_ECEF_F 2
 103:./state.h     **** #define ACCEL_NED_F  3
 104:./state.h     **** /**@}*/
 105:./state.h     **** 
 106:./state.h     **** /**
 107:./state.h     ****  * @defgroup state_rate Angular rate representations
 108:./state.h     ****  * @{
 109:./state.h     ****  */
 110:./state.h     **** #define RATE_I 0
 111:./state.h     **** #define RATE_F 1
 112:./state.h     **** /**@}*/
 113:./state.h     **** 
 114:./state.h     **** /**
 115:./state.h     ****  * @defgroup state_wind_airspeed Wind- and airspeed representations
 116:./state.h     ****  * @{
 117:./state.h     ****  */
 118:./state.h     **** #define WINDSPEED_I 0
 119:./state.h     **** #define AIRSPEED_I  1
 120:./state.h     **** #define WINDSPEED_F 2
 121:./state.h     **** #define AIRSPEED_F  3
 122:./state.h     **** #define AOA_F       4
 123:./state.h     **** #define SIDESLIP_F  5
 124:./state.h     **** /**@}*/
 125:./state.h     **** 
 126:./state.h     **** 
 127:./state.h     **** /**
 128:./state.h     ****  * Structure holding vehicle state data.
 129:./state.h     ****  */
 130:./state.h     **** struct State {
 131:./state.h     **** 
 132:./state.h     ****   /** @addtogroup state_position
 133:./state.h     ****    *  @{ */
 134:./state.h     **** 
 135:./state.h     ****   /**
 136:./state.h     ****    * Holds the status bits for all position representations.
 137:./state.h     ****    * When the corresponding bit is set the representation
 138:./state.h     ****    * is already computed.
 139:./state.h     ****    */
 140:./state.h     ****   uint16_t pos_status;
 141:./state.h     **** 
 142:./state.h     ****   /**
 143:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 144:./state.h     ****    * Units: centimeters
 145:./state.h     ****    */
 146:./state.h     ****   struct EcefCoor_i ecef_pos_i;
 147:./state.h     **** 
 148:./state.h     ****   /**
 149:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 150:./state.h     ****    * Units lat,lon: degrees*1e7
 151:./state.h     ****    * Units alt: milimeters above reference ellipsoid
 152:./state.h     ****    */
 153:./state.h     ****   struct LlaCoor_i lla_pos_i;
 154:./state.h     **** 
 155:./state.h     ****   /**
 156:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 157:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 158:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 159:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 160:./state.h     ****    * (int version)
 161:./state.h     ****    */
 162:./state.h     ****   struct LtpDef_i ned_origin_i;
 163:./state.h     **** 
 164:./state.h     ****   /**
 165:./state.h     ****    * true if local int coordinate frame is initialsed
 166:./state.h     ****    */
 167:./state.h     ****   bool_t ned_initialized_i;
 168:./state.h     **** 
 169:./state.h     ****   /**
 170:./state.h     ****    * Position in North East Down coordinates.
 171:./state.h     ****    * with respect to ned_origin_i (flat earth)
 172:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 173:./state.h     ****    */
 174:./state.h     ****   struct NedCoor_i ned_pos_i;
 175:./state.h     **** 
 176:./state.h     ****   /**
 177:./state.h     ****    * Position in East North Up coordinates.
 178:./state.h     ****    * with respect to ned_origin_i (flat earth)
 179:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 180:./state.h     ****    */
 181:./state.h     ****   struct EnuCoor_i enu_pos_i;
 182:./state.h     **** 
 183:./state.h     ****   /**
 184:./state.h     ****    * Position in UTM coordinates.
 185:./state.h     ****    * Units x,y: meters.
 186:./state.h     ****    * Units z: meters above MSL
 187:./state.h     ****    */
 188:./state.h     ****   struct UtmCoor_f utm_pos_f;
 189:./state.h     **** 
 190:./state.h     ****   /**
 191:./state.h     ****    * Altitude above ground level.
 192:./state.h     ****    * Unit: meters
 193:./state.h     ****    */
 194:./state.h     ****   float alt_agl_f;
 195:./state.h     **** 
 196:./state.h     ****   /**
 197:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 198:./state.h     ****    * Units lat,lon: radians
 199:./state.h     ****    * Units alt: meters above reference ellipsoid
 200:./state.h     ****    */
 201:./state.h     ****   struct LlaCoor_f lla_pos_f;
 202:./state.h     **** 
 203:./state.h     ****   /**
 204:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 205:./state.h     ****    * Units: meters
 206:./state.h     ****    */
 207:./state.h     ****   struct EcefCoor_f ecef_pos_f;
 208:./state.h     **** 
 209:./state.h     ****   /**
 210:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 211:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 212:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 213:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 214:./state.h     ****    * (float version)
 215:./state.h     ****    */
 216:./state.h     ****   struct LtpDef_f ned_origin_f;
 217:./state.h     **** 
 218:./state.h     ****   /// True if local float coordinate frame is initialsed
 219:./state.h     ****   bool_t ned_initialized_f;
 220:./state.h     **** 
 221:./state.h     ****   /**
 222:./state.h     ****    * Definition of the origin of Utm coordinate system.
 223:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 224:./state.h     ****    * in UTM coordinates, used as a reference when ned_origin is not
 225:./state.h     ****    * initialized.
 226:./state.h     ****    * (float version)
 227:./state.h     ****    */
 228:./state.h     ****   struct UtmCoor_f utm_origin_f;
 229:./state.h     **** 
 230:./state.h     ****   /// True if utm origin (float) coordinate frame is initialsed
 231:./state.h     ****   bool_t utm_initialized_f;
 232:./state.h     **** 
 233:./state.h     ****   /**
 234:./state.h     ****    * Position in North East Down coordinates.
 235:./state.h     ****    * with respect to ned_origin_i (flat earth)
 236:./state.h     ****    * Units: meters
 237:./state.h     ****    */
 238:./state.h     ****   struct NedCoor_f ned_pos_f;
 239:./state.h     **** 
 240:./state.h     ****   /**
 241:./state.h     ****    * Position in East North Up coordinates.
 242:./state.h     ****    * with respect to ned_origin_i (flat earth)
 243:./state.h     ****    * Units: meters
 244:./state.h     ****    */
 245:./state.h     ****   struct EnuCoor_f enu_pos_f;
 246:./state.h     ****   /** @}*/
 247:./state.h     **** 
 248:./state.h     **** 
 249:./state.h     ****   /** @addtogroup state_velocity
 250:./state.h     ****    *  @{ */
 251:./state.h     ****   /**
 252:./state.h     ****    * Holds the status bits for all ground speed representations.
 253:./state.h     ****    * When the corresponding bit is one the representation
 254:./state.h     ****    * is already computed.
 255:./state.h     ****    */
 256:./state.h     ****   uint16_t speed_status;
 257:./state.h     **** 
 258:./state.h     ****   /**
 259:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 260:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 261:./state.h     ****    */
 262:./state.h     ****   struct EcefCoor_i ecef_speed_i;
 263:./state.h     **** 
 264:./state.h     ****   /**
 265:./state.h     ****    * Velocity in North East Down coordinates.
 266:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 267:./state.h     ****    */
 268:./state.h     ****   struct NedCoor_i ned_speed_i;
 269:./state.h     **** 
 270:./state.h     ****   /**
 271:./state.h     ****    * Velocity in East North Up coordinates.
 272:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 273:./state.h     ****    */
 274:./state.h     ****   struct EnuCoor_i enu_speed_i;
 275:./state.h     **** 
 276:./state.h     ****   /**
 277:./state.h     ****    * Norm of horizontal ground speed.
 278:./state.h     ****    * Unit: m/s in BFP with #INT32_SPEED_FRAC
 279:./state.h     ****    */
 280:./state.h     ****   uint32_t h_speed_norm_i;
 281:./state.h     **** 
 282:./state.h     ****   /**
 283:./state.h     ****    * Direction of horizontal ground speed.
 284:./state.h     ****    * Unit: rad in BFP with #INT32_ANGLE_FRAC
 285:./state.h     ****    * (clockwise, zero=north)
 286:./state.h     ****    */
 287:./state.h     ****   int32_t h_speed_dir_i;
 288:./state.h     **** 
 289:./state.h     ****   /**
 290:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 291:./state.h     ****    * Units: m/s
 292:./state.h     ****    */
 293:./state.h     ****   struct EcefCoor_f ecef_speed_f;
 294:./state.h     **** 
 295:./state.h     ****   /**
 296:./state.h     ****    * @brief speed in North East Down coordinates
 297:./state.h     ****    * @details Units: m/s */
 298:./state.h     ****   struct NedCoor_f ned_speed_f;
 299:./state.h     **** 
 300:./state.h     ****   /**
 301:./state.h     ****    * Velocity in East North Up coordinates.
 302:./state.h     ****    * Units: m/s
 303:./state.h     ****    */
 304:./state.h     ****   struct EnuCoor_f enu_speed_f;
 305:./state.h     **** 
 306:./state.h     ****   /**
 307:./state.h     ****    * Norm of horizontal ground speed.
 308:./state.h     ****    * Unit: m/s
 309:./state.h     ****    */
 310:./state.h     ****   float h_speed_norm_f;
 311:./state.h     **** 
 312:./state.h     ****   /**
 313:./state.h     ****    * Direction of horizontal ground speed.
 314:./state.h     ****    * Unit: rad (clockwise, zero=north)
 315:./state.h     ****    */
 316:./state.h     ****   float h_speed_dir_f;
 317:./state.h     ****   /** @}*/
 318:./state.h     **** 
 319:./state.h     **** 
 320:./state.h     ****   /** @addtogroup state_acceleration
 321:./state.h     ****    *  @{ */
 322:./state.h     ****   /**
 323:./state.h     ****    * Holds the status bits for all acceleration representations.
 324:./state.h     ****    * When the corresponding bit is one the representation
 325:./state.h     ****    * is already computed.
 326:./state.h     ****    */
 327:./state.h     ****   uint8_t accel_status;
 328:./state.h     **** 
 329:./state.h     ****   /**
 330:./state.h     ****    * Acceleration in North East Down coordinates.
 331:./state.h     ****    * Units: m/s^2 in BFP with #INT32_ACCEL_FRAC
 332:./state.h     ****    */
 333:./state.h     ****   struct NedCoor_i ned_accel_i;
 334:./state.h     **** 
 335:./state.h     ****   /**
 336:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 337:./state.h     ****    * Units: m/s^2 in BFP with INT32_ACCEL_FRAC
 338:./state.h     ****    */
 339:./state.h     ****   struct EcefCoor_i ecef_accel_i;
 340:./state.h     **** 
 341:./state.h     ****   /**
 342:./state.h     ****    * Acceleration in North East Down coordinates.
 343:./state.h     ****    * Units: m/s^2
 344:./state.h     ****    */
 345:./state.h     ****   struct NedCoor_f ned_accel_f;
 346:./state.h     **** 
 347:./state.h     ****   /**
 348:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 349:./state.h     ****    * Units: m/s^2
 350:./state.h     ****    */
 351:./state.h     ****   struct EcefCoor_f ecef_accel_f;
 352:./state.h     ****   /** @}*/
 353:./state.h     **** 
 354:./state.h     **** 
 355:./state.h     ****   /** @defgroup state_attitude Attitude representations
 356:./state.h     ****    */
 357:./state.h     ****   struct OrientationReps ned_to_body_orientation;
 358:./state.h     **** 
 359:./state.h     **** 
 360:./state.h     ****   /** @addtogroup state_rate
 361:./state.h     ****    *  @{ */
 362:./state.h     ****   /**
 363:./state.h     ****    * Holds the status bits for all angular rate representations.
 364:./state.h     ****    * When the corresponding bit is one the representation
 365:./state.h     ****    * is already computed.
 366:./state.h     ****    */
 367:./state.h     ****   uint8_t rate_status;
 368:./state.h     **** 
 369:./state.h     ****   /**
 370:./state.h     ****    * Angular rates in body frame.
 371:./state.h     ****    * Units: rad/s in BFP with #INT32_RATE_FRAC
 372:./state.h     ****    */
 373:./state.h     ****   struct Int32Rates  body_rates_i;
 374:./state.h     **** 
 375:./state.h     ****   /**
 376:./state.h     ****    * Angular rates in body frame.
 377:./state.h     ****    * Units: rad/s
 378:./state.h     ****    */
 379:./state.h     ****   struct FloatRates  body_rates_f;
 380:./state.h     ****   /** @}*/
 381:./state.h     **** 
 382:./state.h     **** 
 383:./state.h     ****   /** @addtogroup state_wind_airspeed
 384:./state.h     ****    *  @{ */
 385:./state.h     ****   /**
 386:./state.h     ****    * Holds the status bits for all wind- and airspeed representations.
 387:./state.h     ****    * When the corresponding bit is one the representation
 388:./state.h     ****    * is already computed.
 389:./state.h     ****    */
 390:./state.h     ****   uint8_t wind_air_status;
 391:./state.h     **** 
 392:./state.h     ****   /**
 393:./state.h     ****    * Horizontal windspeed in north/east.
 394:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 395:./state.h     ****    */
 396:./state.h     ****   struct Int32Vect2 h_windspeed_i;
 397:./state.h     **** 
 398:./state.h     ****   /**
 399:./state.h     ****    * Norm of horizontal ground speed.
 400:./state.h     ****    * @details Unit: m/s in BFP with #INT32_SPEED_FRAC
 401:./state.h     ****    */
 402:./state.h     ****   int32_t airspeed_i;
 403:./state.h     **** 
 404:./state.h     ****   /**
 405:./state.h     ****    * Horizontal windspeed.
 406:./state.h     ****    * Units: m/s with x=north, y=east
 407:./state.h     ****    */
 408:./state.h     ****   struct FloatVect2 h_windspeed_f;
 409:./state.h     **** 
 410:./state.h     ****   /**
 411:./state.h     ****    * Norm of relative air speed.
 412:./state.h     ****    * Unit: m/s
 413:./state.h     ****    */
 414:./state.h     ****   float airspeed_f;
 415:./state.h     **** 
 416:./state.h     ****   /**
 417:./state.h     ****    * Angle of attack
 418:./state.h     ****    * Unit: rad
 419:./state.h     ****    */
 420:./state.h     ****   float angle_of_attack_f;
 421:./state.h     **** 
 422:./state.h     ****   /**
 423:./state.h     ****    * Sideslip angle
 424:./state.h     ****    * Unit: rad
 425:./state.h     ****    */
 426:./state.h     ****   float sideslip_f;
 427:./state.h     **** 
 428:./state.h     ****   /** @}*/
 429:./state.h     **** 
 430:./state.h     **** };
 431:./state.h     **** 
 432:./state.h     **** extern struct State state;
 433:./state.h     **** 
 434:./state.h     **** extern void stateInit(void);
 435:./state.h     **** 
 436:./state.h     **** /** @addtogroup state_position
 437:./state.h     ****  *  @{ */
 438:./state.h     **** 
 439:./state.h     **** /// Set the local (flat earth) coordinate frame origin (int).
 440:./state.h     **** static inline void stateSetLocalOrigin_i(struct LtpDef_i *ltp_def)
 441:./state.h     **** {
 442:./state.h     ****   memcpy(&state.ned_origin_i, ltp_def, sizeof(struct LtpDef_i));
 443:./state.h     ****   /* convert to float */
 444:./state.h     ****   ECEF_FLOAT_OF_BFP(state.ned_origin_f.ecef, state.ned_origin_i.ecef);
 445:./state.h     ****   LLA_FLOAT_OF_BFP(state.ned_origin_f.lla, state.ned_origin_i.lla);
 446:./state.h     ****   HIGH_RES_RMAT_FLOAT_OF_BFP(state.ned_origin_f.ltp_of_ecef, state.ned_origin_i.ltp_of_ecef);
 447:./state.h     ****   state.ned_origin_f.hmsl = M_OF_MM(state.ned_origin_i.hmsl);
 448:./state.h     **** 
 449:./state.h     ****   /* clear bits for all local frame representations */
 450:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 451:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 452:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 453:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 454:./state.h     **** 
 455:./state.h     ****   state.ned_initialized_i = TRUE;
 456:./state.h     ****   state.ned_initialized_f = TRUE;
 457:./state.h     **** }
 458:./state.h     **** 
 459:./state.h     **** /// Set the local (flat earth) coordinate frame origin from UTM (float).
 460:./state.h     **** static inline void stateSetLocalUtmOrigin_f(struct UtmCoor_f *utm_def)
 461:./state.h     **** {
 462:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
 463:./state.h     ****   state.utm_initialized_f = TRUE;
 464:./state.h     **** 
 465:./state.h     ****   /* clear bits for all local frame representations */
 466:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 467:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 468:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 469:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 470:./state.h     **** }
 471:./state.h     **** /*******************************************************************************
 472:./state.h     ****  *                                                                             *
 473:./state.h     ****  * Set and Get functions for the POSITION representations                      *
 474:./state.h     ****  *                                                                             *
 475:./state.h     ****  ******************************************************************************/
 476:./state.h     **** 
 477:./state.h     **** /************* declaration of transformation functions ************/
 478:./state.h     **** extern void stateCalcPositionEcef_i(void);
 479:./state.h     **** extern void stateCalcPositionNed_i(void);
 480:./state.h     **** extern void stateCalcPositionEnu_i(void);
 481:./state.h     **** extern void stateCalcPositionLla_i(void);
 482:./state.h     **** extern void stateCalcPositionUtm_f(void);
 483:./state.h     **** extern void stateCalcPositionEcef_f(void);
 484:./state.h     **** extern void stateCalcPositionNed_f(void);
 485:./state.h     **** extern void stateCalcPositionEnu_f(void);
 486:./state.h     **** extern void stateCalcPositionLla_f(void);
 487:./state.h     **** 
 488:./state.h     **** /*********************** validity test functions ******************/
 489:./state.h     **** 
 490:./state.h     **** /// Test if local coordinates are valid.
 491:./state.h     **** static inline bool_t stateIsLocalCoordinateValid(void)
 492:./state.h     **** {
 493:./state.h     ****   return ((state.ned_initialized_i || state.ned_initialized_f || state.utm_initialized_f)
 494:./state.h     ****           && (state.pos_status & (POS_LOCAL_COORD)));
 495:./state.h     **** }
 496:./state.h     **** 
 497:./state.h     **** /// Test if global coordinates are valid.
 498:./state.h     **** static inline bool_t stateIsGlobalCoordinateValid(void)
 499:./state.h     **** {
 500:./state.h     ****   return ((state.pos_status & (POS_GLOBAL_COORD)) || stateIsLocalCoordinateValid());
 501:./state.h     **** }
 502:./state.h     **** 
 503:./state.h     **** /************************ Set functions ****************************/
 504:./state.h     **** 
 505:./state.h     **** /// Set position from ECEF coordinates (int).
 506:./state.h     **** static inline void stateSetPositionEcef_i(struct EcefCoor_i *ecef_pos)
 507:./state.h     **** {
 508:./state.h     ****   VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 509:./state.h     ****   /* clear bits for all position representations and only set the new one */
 510:./state.h     ****   state.pos_status = (1 << POS_ECEF_I);
 511:./state.h     **** }
 512:./state.h     **** 
 513:./state.h     **** /// Set position from local NED coordinates (int).
 514:./state.h     **** static inline void stateSetPositionNed_i(struct NedCoor_i *ned_pos)
 515:./state.h     **** {
 516:./state.h     ****   VECT3_COPY(state.ned_pos_i, *ned_pos);
 517:./state.h     ****   /* clear bits for all position representations and only set the new one */
 518:./state.h     ****   state.pos_status = (1 << POS_NED_I);
 519:./state.h     **** }
 520:./state.h     **** 
 521:./state.h     **** /// Set position from local ENU coordinates (int).
 522:./state.h     **** static inline void stateSetPositionEnu_i(struct EnuCoor_i *enu_pos)
 523:./state.h     **** {
 524:./state.h     ****   VECT3_COPY(state.enu_pos_i, *enu_pos);
 525:./state.h     ****   /* clear bits for all position representations and only set the new one */
 526:./state.h     ****   state.pos_status = (1 << POS_ENU_I);
 527:./state.h     **** }
 528:./state.h     **** 
 529:./state.h     **** /// Set position from LLA coordinates (int).
 530:./state.h     **** static inline void stateSetPositionLla_i(struct LlaCoor_i *lla_pos)
 531:./state.h     **** {
 532:./state.h     ****   LLA_COPY(state.lla_pos_i, *lla_pos);
 533:./state.h     ****   /* clear bits for all position representations and only set the new one */
 534:./state.h     ****   state.pos_status = (1 << POS_LLA_I);
 535:./state.h     **** }
 536:./state.h     **** 
 537:./state.h     **** /// Set multiple position coordinates (int).
 538:./state.h     **** static inline void stateSetPosition_i(
 539:./state.h     ****   struct EcefCoor_i *ecef_pos,
 540:./state.h     ****   struct NedCoor_i *ned_pos,
 541:./state.h     ****   struct EnuCoor_i *enu_pos,
 542:./state.h     ****   struct LlaCoor_i *lla_pos)
 543:./state.h     **** {
 544:./state.h     ****   /* clear all status bit */
 545:./state.h     ****   state.pos_status = 0;
 546:./state.h     ****   if (ecef_pos != NULL) {
 547:./state.h     ****     VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 548:./state.h     ****     state.pos_status |= (1 << POS_ECEF_I);
 549:./state.h     ****   }
 550:./state.h     ****   if (ned_pos != NULL) {
 551:./state.h     ****     VECT3_COPY(state.ned_pos_i, *ned_pos);
 552:./state.h     ****     state.pos_status |= (1 << POS_NED_I);
 553:./state.h     ****   }
 554:./state.h     ****   if (enu_pos != NULL) {
 555:./state.h     ****     VECT3_COPY(state.enu_pos_i, *enu_pos);
 556:./state.h     ****     state.pos_status |= (1 << POS_ENU_I);
 557:./state.h     ****   }
 558:./state.h     ****   if (lla_pos != NULL) {
 559:./state.h     ****     LLA_COPY(state.lla_pos_i, *lla_pos);
 560:./state.h     ****     state.pos_status |= (1 << POS_LLA_I);
 561:./state.h     ****   }
 562:./state.h     **** }
 563:./state.h     **** 
 564:./state.h     **** /// Set position from UTM coordinates (float).
 565:./state.h     **** static inline void stateSetPositionUtm_f(struct UtmCoor_f *utm_pos)
 566:./state.h     **** {
 567:./state.h     ****   memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 568:./state.h     ****   /* clear bits for all position representations and only set the new one */
 569:./state.h     ****   state.pos_status = (1 << POS_UTM_F);
 570:./state.h     **** }
 571:./state.h     **** 
 572:./state.h     **** /// Set position from ECEF coordinates (float).
 573:./state.h     **** static inline void stateSetPositionEcef_f(struct EcefCoor_f *ecef_pos)
 574:./state.h     **** {
 575:./state.h     ****   VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 576:./state.h     ****   /* clear bits for all position representations and only set the new one */
 577:./state.h     ****   state.pos_status = (1 << POS_ECEF_F);
 578:./state.h     **** }
 579:./state.h     **** 
 580:./state.h     **** /// Set position from local NED coordinates (float).
 581:./state.h     **** static inline void stateSetPositionNed_f(struct NedCoor_f *ned_pos)
 582:./state.h     **** {
 583:./state.h     ****   VECT3_COPY(state.ned_pos_f, *ned_pos);
 584:./state.h     ****   /* clear bits for all position representations and only set the new one */
 585:./state.h     ****   state.pos_status = (1 << POS_NED_F);
 586:./state.h     **** }
 587:./state.h     **** 
 588:./state.h     **** /// Set position from local ENU coordinates (float).
 589:./state.h     **** static inline void stateSetPositionEnu_f(struct EnuCoor_f *enu_pos)
 590:./state.h     **** {
 591:./state.h     ****   VECT3_COPY(state.enu_pos_f, *enu_pos);
 592:./state.h     ****   /* clear bits for all position representations and only set the new one */
 593:./state.h     ****   state.pos_status = (1 << POS_ENU_F);
 594:./state.h     **** }
 595:./state.h     **** 
 596:./state.h     **** /// Set position from LLA coordinates (float).
 597:./state.h     **** static inline void stateSetPositionLla_f(struct LlaCoor_f *lla_pos)
 598:./state.h     **** {
 599:./state.h     ****   LLA_COPY(state.lla_pos_f, *lla_pos);
 600:./state.h     ****   /* clear bits for all position representations and only set the new one */
 601:./state.h     ****   state.pos_status = (1 << POS_LLA_F);
 602:./state.h     **** }
 603:./state.h     **** 
 604:./state.h     **** /// Set multiple position coordinates (float).
 605:./state.h     **** static inline void stateSetPosition_f(
 606:./state.h     ****   struct EcefCoor_f *ecef_pos,
 607:./state.h     ****   struct NedCoor_f *ned_pos,
 608:./state.h     ****   struct EnuCoor_f *enu_pos,
 609:./state.h     ****   struct LlaCoor_f *lla_pos,
 610:./state.h     ****   struct UtmCoor_f *utm_pos)
 611:./state.h     **** {
 612:./state.h     ****   /* clear all status bit */
 613:./state.h     ****   state.pos_status = 0;
 614:./state.h     ****   if (ecef_pos != NULL) {
 615:./state.h     ****     VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 616:./state.h     ****     state.pos_status |= (1 << POS_ECEF_F);
 617:./state.h     ****   }
 618:./state.h     ****   if (ned_pos != NULL) {
 619:./state.h     ****     VECT3_COPY(state.ned_pos_f, *ned_pos);
 620:./state.h     ****     state.pos_status |= (1 << POS_NED_F);
 621:./state.h     ****   }
 622:./state.h     ****   if (enu_pos != NULL) {
 623:./state.h     ****     VECT3_COPY(state.enu_pos_f, *enu_pos);
 624:./state.h     ****     state.pos_status |= (1 << POS_ENU_F);
 625:./state.h     ****   }
 626:./state.h     ****   if (lla_pos != NULL) {
 627:./state.h     ****     LLA_COPY(state.lla_pos_f, *lla_pos);
 628:./state.h     ****     state.pos_status |= (1 << POS_LLA_F);
 629:./state.h     ****   }
 630:./state.h     ****   if (utm_pos != NULL) {
 631:./state.h     ****     memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 632:./state.h     ****     state.pos_status |= (1 << POS_UTM_F);
 633:./state.h     ****   }
 634:./state.h     **** }
 635:./state.h     **** 
 636:./state.h     **** /************************ Get functions ****************************/
 637:./state.h     **** 
 638:./state.h     **** /// Get position in ECEF coordinates (int).
 639:./state.h     **** static inline struct EcefCoor_i *stateGetPositionEcef_i(void)
 640:./state.h     **** {
 641:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_I)) {
 642:./state.h     ****     stateCalcPositionEcef_i();
 643:./state.h     ****   }
 644:./state.h     ****   return &state.ecef_pos_i;
 645:./state.h     **** }
 646:./state.h     **** 
 647:./state.h     **** /// Get position in local NED coordinates (int).
 648:./state.h     **** static inline struct NedCoor_i *stateGetPositionNed_i(void)
 649:./state.h     **** {
 650:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_I)) {
 651:./state.h     ****     stateCalcPositionNed_i();
 652:./state.h     ****   }
 653:./state.h     ****   return &state.ned_pos_i;
 654:./state.h     **** }
 655:./state.h     **** 
 656:./state.h     **** /// Get position in local ENU coordinates (int).
 657:./state.h     **** static inline struct EnuCoor_i *stateGetPositionEnu_i(void)
 658:./state.h     **** {
 659:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_I)) {
 660:./state.h     ****     stateCalcPositionEnu_i();
 661:./state.h     ****   }
 662:./state.h     ****   return &state.enu_pos_i;
 663:./state.h     **** }
 664:./state.h     **** 
 665:./state.h     **** /// Get position in LLA coordinates (int).
 666:./state.h     **** static inline struct LlaCoor_i *stateGetPositionLla_i(void)
 667:./state.h     **** {
 668:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_I)) {
 669:./state.h     ****     stateCalcPositionLla_i();
 670:./state.h     ****   }
 671:./state.h     ****   return &state.lla_pos_i;
 672:./state.h     **** }
 673:./state.h     **** 
 674:./state.h     **** /// Get position in UTM coordinates (float).
 675:./state.h     **** static inline struct UtmCoor_f *stateGetPositionUtm_f(void)
 676:./state.h     **** {
 677:./state.h     ****   if (!bit_is_set(state.pos_status, POS_UTM_F)) {
 678:./state.h     ****     stateCalcPositionUtm_f();
 679:./state.h     ****   }
 680:./state.h     ****   return &state.utm_pos_f;
 681:./state.h     **** }
 682:./state.h     **** 
 683:./state.h     **** /// Get position in ECEF coordinates (float).
 684:./state.h     **** static inline struct EcefCoor_f *stateGetPositionEcef_f(void)
 685:./state.h     **** {
 686:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_F)) {
 687:./state.h     ****     stateCalcPositionEcef_f();
 688:./state.h     ****   }
 689:./state.h     ****   return &state.ecef_pos_f;
 690:./state.h     **** }
 691:./state.h     **** 
 692:./state.h     **** /// Get position in local NED coordinates (float).
 693:./state.h     **** static inline struct NedCoor_f *stateGetPositionNed_f(void)
 694:./state.h     **** {
 695:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_F)) {
 696:./state.h     ****     stateCalcPositionNed_f();
 697:./state.h     ****   }
 698:./state.h     ****   return &state.ned_pos_f;
 699:./state.h     **** }
 700:./state.h     **** 
 701:./state.h     **** /// Get position in local ENU coordinates (float).
 702:./state.h     **** static inline struct EnuCoor_f *stateGetPositionEnu_f(void)
 703:./state.h     **** {
 704:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_F)) {
 894              		.loc 3 704 0
 895 04da B04B     		ldr	r3, .L78+12
 896              	.LBE60:
 897              	.LBE59:
 898              		.loc 2 143 0
 899 04dc 8DF84700 		strb	r0, [sp, #71]
 900              	.LBB62:
 901              	.LBB61:
 902              		.loc 3 704 0
 903 04e0 1B88     		ldrh	r3, [r3]
 904 04e2 1B06     		lsls	r3, r3, #24
 905 04e4 01D4     		bmi	.L18
 705:./state.h     ****     stateCalcPositionEnu_f();
 906              		.loc 3 705 0
 907 04e6 FFF7FEFF 		bl	stateCalcPositionEnu_f
 908              	.LVL112:
 909              	.L18:
 910              	.LBE61:
 911              	.LBE62:
 912              		.loc 2 143 0
 913 04ea AD4B     		ldr	r3, .L78+16
 914              	.LBB63:
 915              	.LBB64:
 419:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +2 /* msg hea
 916              		.loc 1 419 0
 917 04ec AD4C     		ldr	r4, .L78+20
 918              	.LBE64:
 919              	.LBE63:
 920              		.loc 2 143 0
 921 04ee 1868     		ldr	r0, [r3]	@ float
 922 04f0 FFF7FEFF 		bl	sqrtf
 923              	.LVL113:
 924 04f4 AC4B     		ldr	r3, .L78+24
 925 04f6 1390     		str	r0, [sp, #76]	@ float
 926 04f8 1868     		ldr	r0, [r3]	@ float
 927 04fa FFF7FEFF 		bl	sqrtf
 928              	.LVL114:
 929              	.LBB67:
 930              	.LBB65:
 419:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +2 /* msg hea
 931              		.loc 1 419 0
 932 04fe D4F82861 		ldr	r6, [r4, #296]
 933              	.LBE65:
 934              	.LBE67:
 935              		.loc 2 143 0
 936 0502 1690     		str	r0, [sp, #88]	@ float
 937              	.LVL115:
 938 0504 0125     		movs	r5, #1
 939              	.LBB68:
 940              	.LBB66:
 419:/home/dino/paparazzi/var/include/messages.h **** 	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4+4+4+1+1 +2 /* msg hea
 941              		.loc 1 419 0
 942 0506 1621     		movs	r1, #22
 943 0508 8DF84850 		strb	r5, [sp, #72]
 944              	.LVL116:
 945 050c D4F80831 		ldr	r3, [r4, #264]
 946 0510 D4F80C71 		ldr	r7, [r4, #268]
 947 0514 3046     		mov	r0, r6
 948 0516 9847     		blx	r3
 949              	.LVL117:
 950 0518 A449     		ldr	r1, .L78+28
 951              	.LVL118:
 952 051a 0246     		mov	r2, r0
 953 051c 3046     		mov	r0, r6
 954 051e B847     		blx	r7
 955              	.LVL119:
 956 0520 0028     		cmp	r0, #0
 957 0522 3FF4B7AD 		beq	.L10
 420:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4+4+4+1+1 +2 /* msg header overhead */);
 958              		.loc 1 420 0
 959 0526 D4F82861 		ldr	r6, [r4, #296]
 960 052a D4F80831 		ldr	r3, [r4, #264]
 961 052e D4F82471 		ldr	r7, [r4, #292]
 426:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_y);
 962              		.loc 1 426 0
 963 0532 DFF8B892 		ldr	r9, .L78+92
 964              	.LVL120:
 420:/home/dino/paparazzi/var/include/messages.h **** 	  trans->start_message(trans->impl, dev, 0+1+1+4+4+4+4+1+1 +2 /* msg header overhead */);
 965              		.loc 1 420 0
 966 0536 3046     		mov	r0, r6
 967 0538 1621     		movs	r1, #22
 968 053a 9847     		blx	r3
 969              	.LVL121:
 970 053c 9B49     		ldr	r1, .L78+28
 971              	.LVL122:
 972 053e 0246     		mov	r2, r0
 973 0540 3046     		mov	r0, r6
 974 0542 B847     		blx	r7
 975              	.LVL123:
 421:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
 976              		.loc 1 421 0
 977 0544 D4F81831 		ldr	r3, [r4, #280]
 978 0548 D4F82801 		ldr	r0, [r4, #296]
 979 054c 9749     		ldr	r1, .L78+28
 980              	.LVL124:
 981 054e 1622     		movs	r2, #22
 982 0550 9847     		blx	r3
 983              	.LVL125:
 422:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_NAVIGATION, "NAVIGAT
 984              		.loc 1 422 0
 985 0552 12AB     		add	r3, sp, #72
 986 0554 0095     		str	r5, [sp]
 987 0556 0193     		str	r3, [sp, #4]
 988 0558 D4F81061 		ldr	r6, [r4, #272]
 989 055c D4F82801 		ldr	r0, [r4, #296]
 990 0560 9249     		ldr	r1, .L78+28
 991              	.LVL126:
 992 0562 0222     		movs	r2, #2
 993 0564 0023     		movs	r3, #0
 994 0566 B047     		blx	r6
 995              	.LVL127:
 423:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_block);
 996              		.loc 1 423 0
 997 0568 0A26     		movs	r6, #10
 998 056a 914B     		ldr	r3, .L78+32
 999 056c 0096     		str	r6, [sp]
 1000 056e 0193     		str	r3, [sp, #4]
 1001 0570 D4F81471 		ldr	r7, [r4, #276]
 1002 0574 D4F82801 		ldr	r0, [r4, #296]
 1003 0578 8C49     		ldr	r1, .L78+28
 1004              	.LVL128:
 1005 057a 0222     		movs	r2, #2
 1006 057c 0023     		movs	r3, #0
 1007 057e B847     		blx	r7
 1008              	.LVL129:
 424:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _cur_stage);
 1009              		.loc 1 424 0
 1010 0580 8C4B     		ldr	r3, .L78+36
 1011 0582 0095     		str	r5, [sp]
 1012 0584 0193     		str	r3, [sp, #4]
 1013 0586 D4F81071 		ldr	r7, [r4, #272]
 1014 058a D4F82801 		ldr	r0, [r4, #296]
 1015 058e 8749     		ldr	r1, .L78+28
 1016              	.LVL130:
 1017 0590 0222     		movs	r2, #2
 1018 0592 0023     		movs	r3, #0
 1019 0594 B847     		blx	r7
 1020              	.LVL131:
 425:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_x);
 1021              		.loc 1 425 0
 1022 0596 884B     		ldr	r3, .L78+40
 1023 0598 0095     		str	r5, [sp]
 1024 059a 0193     		str	r3, [sp, #4]
 426:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_y);
 1025              		.loc 1 426 0
 1026 059c 4FF00408 		mov	r8, #4
 425:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_x);
 1027              		.loc 1 425 0
 1028 05a0 D4F81071 		ldr	r7, [r4, #272]
 1029 05a4 D4F82801 		ldr	r0, [r4, #296]
 1030 05a8 8049     		ldr	r1, .L78+28
 1031              	.LVL132:
 1032 05aa 0222     		movs	r2, #2
 1033 05ac 0023     		movs	r3, #0
 1034 05ae B847     		blx	r7
 1035              	.LVL133:
 426:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _pos_y);
 1036              		.loc 1 426 0
 1037 05b0 CDF80080 		str	r8, [sp]
 1038 05b4 CDF80490 		str	r9, [sp, #4]
 1039 05b8 D4F82801 		ldr	r0, [r4, #296]
 1040 05bc D4F81071 		ldr	r7, [r4, #272]
 1041 05c0 7A49     		ldr	r1, .L78+28
 1042              	.LVL134:
 1043 05c2 3246     		mov	r2, r6
 1044 05c4 0023     		movs	r3, #0
 1045 05c6 B847     		blx	r7
 1046              	.LVL135:
 427:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_wp);
 1047              		.loc 1 427 0
 1048 05c8 09EB0803 		add	r3, r9, r8
 1049 05cc 0193     		str	r3, [sp, #4]
 1050 05ce CDF80080 		str	r8, [sp]
 1051 05d2 D4F82801 		ldr	r0, [r4, #296]
 1052 05d6 D4F81071 		ldr	r7, [r4, #272]
 1053 05da 7449     		ldr	r1, .L78+28
 1054              	.LVL136:
 1055 05dc 3246     		mov	r2, r6
 1056 05de 0023     		movs	r3, #0
 1057 05e0 B847     		blx	r7
 1058              	.LVL137:
 428:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _dist_home);
 1059              		.loc 1 428 0
 1060 05e2 13AB     		add	r3, sp, #76
 1061              	.LVL138:
 1062 05e4 0193     		str	r3, [sp, #4]
 1063 05e6 CDF80080 		str	r8, [sp]
 1064 05ea D4F82801 		ldr	r0, [r4, #296]
 1065 05ee D4F81071 		ldr	r7, [r4, #272]
 1066 05f2 6E49     		ldr	r1, .L78+28
 1067              	.LVL139:
 1068 05f4 3246     		mov	r2, r6
 1069 05f6 0023     		movs	r3, #0
 1070              	.LVL140:
 1071 05f8 B847     		blx	r7
 1072              	.LVL141:
 429:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _circle_count);
 1073              		.loc 1 429 0
 1074 05fa 16AB     		add	r3, sp, #88
 1075              	.LVL142:
 1076 05fc 0193     		str	r3, [sp, #4]
 1077 05fe CDF80080 		str	r8, [sp]
 1078 0602 D4F82801 		ldr	r0, [r4, #296]
 1079 0606 D4F81071 		ldr	r7, [r4, #272]
 1080 060a 6849     		ldr	r1, .L78+28
 1081              	.LVL143:
 1082 060c 3246     		mov	r2, r6
 1083 060e 0023     		movs	r3, #0
 1084              	.LVL144:
 1085 0610 B847     		blx	r7
 1086              	.LVL145:
 430:/home/dino/paparazzi/var/include/messages.h **** 	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _oval_count);
 1087              		.loc 1 430 0
 1088 0612 0DF14703 		add	r3, sp, #71
 1089              	.LVL146:
 1090 0616 0095     		str	r5, [sp]
 1091 0618 0193     		str	r3, [sp, #4]
 1092 061a D4F82801 		ldr	r0, [r4, #296]
 1093 061e D4F81061 		ldr	r6, [r4, #272]
 1094 0622 6249     		ldr	r1, .L78+28
 1095              	.LVL147:
 1096 0624 0222     		movs	r2, #2
 1097 0626 0023     		movs	r3, #0
 1098              	.LVL148:
 1099 0628 B047     		blx	r6
 1100              	.LVL149:
 431:/home/dino/paparazzi/var/include/messages.h **** 	  trans->end_message(trans->impl, dev);
 1101              		.loc 1 431 0
 1102 062a 644B     		ldr	r3, .L78+44
 1103 062c 0193     		str	r3, [sp, #4]
 1104 062e 0095     		str	r5, [sp]
 1105 0630 D4F81051 		ldr	r5, [r4, #272]
 1106              	.LVL150:
 1107 0634 D4F82801 		ldr	r0, [r4, #296]
 1108 0638 5C49     		ldr	r1, .L78+28
 1109              	.LVL151:
 1110 063a 0222     		movs	r2, #2
 1111 063c 0023     		movs	r3, #0
 1112 063e A847     		blx	r5
 1113              	.LVL152:
 1114 0640 17E7     		b	.L73
 1115              	.LVL153:
 1116              	.L17:
 1117              	.LBE66:
 1118              	.LBE68:
 1119              	.LBE58:
 144:firmwares/fixedwing/datalink.c ****       } else
 145:firmwares/fixedwing/datalink.c **** #endif /** NAV */
 146:firmwares/fixedwing/datalink.c **** #ifdef WIND_INFO
 147:firmwares/fixedwing/datalink.c ****         if (msg_id == DL_WIND_INFO && DL_WIND_INFO_ac_id(dl_buffer) == AC_ID) {
 1120              		.loc 2 147 0
 1121 0642 B9F1030F 		cmp	r9, #3
 1122 0646 32D1     		bne	.L21
 1123              		.loc 2 147 0 is_stmt 0 discriminator 1
 1124 0648 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1125 064a 012B     		cmp	r3, #1
 1126 064c 40F01A81 		bne	.L8
 1127              	.LVL154:
 1128              	.LBB69:
 1129              	.LBB70:
 148:firmwares/fixedwing/datalink.c ****           struct FloatVect2 wind;
 149:firmwares/fixedwing/datalink.c ****           wind.x = DL_WIND_INFO_north(dl_buffer);
 150:firmwares/fixedwing/datalink.c ****           wind.y = DL_WIND_INFO_east(dl_buffer);
 1130              		.loc 2 150 0 is_stmt 1
 1131 0650 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 1132 0652 E179     		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 1133 0654 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1134              	.LBE70:
 1135              	.LBB71:
 149:firmwares/fixedwing/datalink.c ****           wind.y = DL_WIND_INFO_east(dl_buffer);
 1136              		.loc 2 149 0
 1137 0656 E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
 1138 0658 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 1139              	.LBE71:
 1140              	.LBB72:
 1141              		.loc 2 150 0
 1142 065a 1204     		lsls	r2, r2, #16
 1143 065c 42EA0161 		orr	r1, r2, r1, lsl #24
 1144 0660 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 1145 0662 43EA0223 		orr	r3, r3, r2, lsl #8
 1146 0666 41EA0302 		orr	r2, r1, r3
 1147              	.LVL155:
 1148              	.LBE72:
 1149              	.LBB73:
 149:firmwares/fixedwing/datalink.c ****           wind.y = DL_WIND_INFO_east(dl_buffer);
 1150              		.loc 2 149 0
 1151 066a A17A     		ldrb	r1, [r4, #10]	@ zero_extendqisi2
 1152              	.LBE73:
 1153              	.LBB74:
 1154              	.LBB75:
 706:./state.h     ****   }
 707:./state.h     ****   return &state.enu_pos_f;
 708:./state.h     **** }
 709:./state.h     **** 
 710:./state.h     **** /// Get position in LLA coordinates (float).
 711:./state.h     **** static inline struct LlaCoor_f *stateGetPositionLla_f(void)
 712:./state.h     **** {
 713:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_F)) {
 714:./state.h     ****     stateCalcPositionLla_f();
 715:./state.h     ****   }
 716:./state.h     ****   return &state.lla_pos_f;
 717:./state.h     **** }
 718:./state.h     **** 
 719:./state.h     **** /** @}*/
 720:./state.h     **** 
 721:./state.h     **** 
 722:./state.h     **** 
 723:./state.h     **** /******************************************************************************
 724:./state.h     ****  *                                                                            *
 725:./state.h     ****  * Set and Get functions for the SPEED representations                        *
 726:./state.h     ****  *                                                                            *
 727:./state.h     ****  *****************************************************************************/
 728:./state.h     **** /** @addtogroup state_velocity
 729:./state.h     ****  *  @{ */
 730:./state.h     **** 
 731:./state.h     **** /************* declaration of transformation functions ************/
 732:./state.h     **** extern void stateCalcSpeedNed_i(void);
 733:./state.h     **** extern void stateCalcSpeedEnu_i(void);
 734:./state.h     **** extern void stateCalcSpeedEcef_i(void);
 735:./state.h     **** extern void stateCalcHorizontalSpeedNorm_i(void);
 736:./state.h     **** extern void stateCalcHorizontalSpeedDir_i(void);
 737:./state.h     **** extern void stateCalcSpeedNed_f(void);
 738:./state.h     **** extern void stateCalcSpeedEnu_f(void);
 739:./state.h     **** extern void stateCalcSpeedEcef_f(void);
 740:./state.h     **** extern void stateCalcHorizontalSpeedNorm_f(void);
 741:./state.h     **** extern void stateCalcHorizontalSpeedDir_f(void);
 742:./state.h     **** 
 743:./state.h     **** /************************ Set functions ****************************/
 744:./state.h     **** 
 745:./state.h     **** /// Set ground speed in local NED coordinates (int).
 746:./state.h     **** static inline void stateSetSpeedNed_i(struct NedCoor_i *ned_speed)
 747:./state.h     **** {
 748:./state.h     ****   VECT3_COPY(state.ned_speed_i, *ned_speed);
 749:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 750:./state.h     ****   state.speed_status = (1 << SPEED_NED_I);
 751:./state.h     **** }
 752:./state.h     **** 
 753:./state.h     **** /// Set ground speed in local ENU coordinates (int).
 754:./state.h     **** static inline void stateSetSpeedEnu_i(struct EnuCoor_i *enu_speed)
 755:./state.h     **** {
 756:./state.h     ****   VECT3_COPY(state.enu_speed_i, *enu_speed);
 757:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 758:./state.h     ****   state.speed_status = (1 << SPEED_ENU_I);
 759:./state.h     **** }
 760:./state.h     **** 
 761:./state.h     **** /// Set ground speed in ECEF coordinates (int).
 762:./state.h     **** static inline void stateSetSpeedEcef_i(struct EcefCoor_i *ecef_speed)
 763:./state.h     **** {
 764:./state.h     ****   VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 765:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 766:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_I);
 767:./state.h     **** }
 768:./state.h     **** 
 769:./state.h     **** /// Set multiple speed coordinates (int).
 770:./state.h     **** static inline void stateSetSpeed_i(
 771:./state.h     ****   struct EcefCoor_i *ecef_speed,
 772:./state.h     ****   struct NedCoor_i *ned_speed,
 773:./state.h     ****   struct EnuCoor_i *enu_speed)
 774:./state.h     **** {
 775:./state.h     ****   /* clear all status bit */
 776:./state.h     ****   state.speed_status = 0;
 777:./state.h     ****   if (ecef_speed != NULL) {
 778:./state.h     ****     VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 779:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_I);
 780:./state.h     ****   }
 781:./state.h     ****   if (ned_speed != NULL) {
 782:./state.h     ****     VECT3_COPY(state.ned_speed_i, *ned_speed);
 783:./state.h     ****     state.speed_status |= (1 << SPEED_NED_I);
 784:./state.h     ****   }
 785:./state.h     ****   if (enu_speed != NULL) {
 786:./state.h     ****     VECT3_COPY(state.enu_speed_i, *enu_speed);
 787:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_I);
 788:./state.h     ****   }
 789:./state.h     **** }
 790:./state.h     **** 
 791:./state.h     **** /// Set ground speed in local NED coordinates (float).
 792:./state.h     **** static inline void stateSetSpeedNed_f(struct NedCoor_f *ned_speed)
 793:./state.h     **** {
 794:./state.h     ****   VECT3_COPY(state.ned_speed_f, *ned_speed);
 795:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 796:./state.h     ****   state.speed_status = (1 << SPEED_NED_F);
 797:./state.h     **** }
 798:./state.h     **** 
 799:./state.h     **** /// Set ground speed in local ENU coordinates (float).
 800:./state.h     **** static inline void stateSetSpeedEnu_f(struct EnuCoor_f *enu_speed)
 801:./state.h     **** {
 802:./state.h     ****   VECT3_COPY(state.enu_speed_f, *enu_speed);
 803:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 804:./state.h     ****   state.speed_status = (1 << SPEED_ENU_F);
 805:./state.h     **** }
 806:./state.h     **** 
 807:./state.h     **** /// Set ground speed in ECEF coordinates (float).
 808:./state.h     **** static inline void stateSetSpeedEcef_f(struct EcefCoor_f *ecef_speed)
 809:./state.h     **** {
 810:./state.h     ****   VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 811:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 812:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_F);
 813:./state.h     **** }
 814:./state.h     **** 
 815:./state.h     **** /// Set multiple speed coordinates (float).
 816:./state.h     **** static inline void stateSetSpeed_f(
 817:./state.h     ****   struct EcefCoor_f *ecef_speed,
 818:./state.h     ****   struct NedCoor_f *ned_speed,
 819:./state.h     ****   struct EnuCoor_f *enu_speed)
 820:./state.h     **** {
 821:./state.h     ****   /* clear all status bit */
 822:./state.h     ****   state.speed_status = 0;
 823:./state.h     ****   if (ecef_speed != NULL) {
 824:./state.h     ****     VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 825:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_F);
 826:./state.h     ****   }
 827:./state.h     ****   if (ned_speed != NULL) {
 828:./state.h     ****     VECT3_COPY(state.ned_speed_f, *ned_speed);
 829:./state.h     ****     state.speed_status |= (1 << SPEED_NED_F);
 830:./state.h     ****   }
 831:./state.h     ****   if (enu_speed != NULL) {
 832:./state.h     ****     VECT3_COPY(state.enu_speed_f, *enu_speed);
 833:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_F);
 834:./state.h     ****   }
 835:./state.h     **** }
 836:./state.h     **** 
 837:./state.h     **** /************************ Get functions ****************************/
 838:./state.h     **** 
 839:./state.h     **** /// Get ground speed in local NED coordinates (int).
 840:./state.h     **** static inline struct NedCoor_i *stateGetSpeedNed_i(void)
 841:./state.h     **** {
 842:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_I)) {
 843:./state.h     ****     stateCalcSpeedNed_i();
 844:./state.h     ****   }
 845:./state.h     ****   return &state.ned_speed_i;
 846:./state.h     **** }
 847:./state.h     **** 
 848:./state.h     **** /// Get ground speed in local ENU coordinates (int).
 849:./state.h     **** static inline struct EnuCoor_i *stateGetSpeedEnu_i(void)
 850:./state.h     **** {
 851:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_I)) {
 852:./state.h     ****     stateCalcSpeedEnu_i();
 853:./state.h     ****   }
 854:./state.h     ****   return &state.enu_speed_i;
 855:./state.h     **** }
 856:./state.h     **** 
 857:./state.h     **** /// Get ground speed in ECEF coordinates (int).
 858:./state.h     **** static inline struct EcefCoor_i *stateGetSpeedEcef_i(void)
 859:./state.h     **** {
 860:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_I)) {
 861:./state.h     ****     stateCalcSpeedEcef_i();
 862:./state.h     ****   }
 863:./state.h     ****   return &state.ecef_speed_i;
 864:./state.h     **** }
 865:./state.h     **** 
 866:./state.h     **** /// Get norm of horizontal ground speed (int).
 867:./state.h     **** static inline uint32_t *stateGetHorizontalSpeedNorm_i(void)
 868:./state.h     **** {
 869:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_I)) {
 870:./state.h     ****     stateCalcHorizontalSpeedNorm_i();
 871:./state.h     ****   }
 872:./state.h     ****   return &state.h_speed_norm_i;
 873:./state.h     **** }
 874:./state.h     **** 
 875:./state.h     **** /// Get dir of horizontal ground speed (int).
 876:./state.h     **** static inline int32_t *stateGetHorizontalSpeedDir_i(void)
 877:./state.h     **** {
 878:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_I)) {
 879:./state.h     ****     stateCalcHorizontalSpeedDir_i();
 880:./state.h     ****   }
 881:./state.h     ****   return &state.h_speed_dir_i;
 882:./state.h     **** }
 883:./state.h     **** 
 884:./state.h     **** /// Get ground speed in local NED coordinates (float).
 885:./state.h     **** static inline struct NedCoor_f *stateGetSpeedNed_f(void)
 886:./state.h     **** {
 887:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_F)) {
 888:./state.h     ****     stateCalcSpeedNed_f();
 889:./state.h     ****   }
 890:./state.h     ****   return &state.ned_speed_f;
 891:./state.h     **** }
 892:./state.h     **** 
 893:./state.h     **** /// Get ground speed in local ENU coordinates (float).
 894:./state.h     **** static inline struct EnuCoor_f *stateGetSpeedEnu_f(void)
 895:./state.h     **** {
 896:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_F)) {
 897:./state.h     ****     stateCalcSpeedEnu_f();
 898:./state.h     ****   }
 899:./state.h     ****   return &state.enu_speed_f;
 900:./state.h     **** }
 901:./state.h     **** 
 902:./state.h     **** /// Get ground speed in ECEF coordinates (float).
 903:./state.h     **** static inline struct EcefCoor_f *stateGetSpeedEcef_f(void)
 904:./state.h     **** {
 905:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_F)) {
 906:./state.h     ****     stateCalcSpeedEcef_f();
 907:./state.h     ****   }
 908:./state.h     ****   return &state.ecef_speed_f;
 909:./state.h     **** }
 910:./state.h     **** 
 911:./state.h     **** /// Get norm of horizontal ground speed (float).
 912:./state.h     **** static inline float *stateGetHorizontalSpeedNorm_f(void)
 913:./state.h     **** {
 914:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_F)) {
 915:./state.h     ****     stateCalcHorizontalSpeedNorm_f();
 916:./state.h     ****   }
 917:./state.h     ****   return &state.h_speed_norm_f;
 918:./state.h     **** }
 919:./state.h     **** 
 920:./state.h     **** /// Get dir of horizontal ground speed (float).
 921:./state.h     **** static inline float *stateGetHorizontalSpeedDir_f(void)
 922:./state.h     **** {
 923:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_F)) {
 924:./state.h     ****     stateCalcHorizontalSpeedDir_f();
 925:./state.h     ****   }
 926:./state.h     ****   return &state.h_speed_dir_f;
 927:./state.h     **** }
 928:./state.h     **** /** @}*/
 929:./state.h     **** 
 930:./state.h     **** 
 931:./state.h     **** 
 932:./state.h     **** /******************************************************************************
 933:./state.h     ****  *                                                                            *
 934:./state.h     ****  * Set and Get functions for the ACCELERATION representations                 *
 935:./state.h     ****  *                                                                            *
 936:./state.h     ****  *****************************************************************************/
 937:./state.h     **** /** @addtogroup state_acceleration
 938:./state.h     ****  *  @{ */
 939:./state.h     **** 
 940:./state.h     **** /************* declaration of transformation functions ************/
 941:./state.h     **** extern void stateCalcAccelNed_i(void);
 942:./state.h     **** extern void stateCalcAccelEcef_i(void);
 943:./state.h     **** extern void stateCalcAccelNed_f(void);
 944:./state.h     **** extern void stateCalcAccelEcef_f(void);
 945:./state.h     **** 
 946:./state.h     **** /*********************** validity test functions ******************/
 947:./state.h     **** 
 948:./state.h     **** /// Test if accelerations are valid.
 949:./state.h     **** static inline bool_t stateIsAccelValid(void)
 950:./state.h     **** {
 951:./state.h     ****   return (state.accel_status);
 952:./state.h     **** }
 953:./state.h     **** 
 954:./state.h     **** /************************ Set functions ****************************/
 955:./state.h     **** 
 956:./state.h     **** /// Set acceleration in NED coordinates (int).
 957:./state.h     **** static inline void stateSetAccelNed_i(struct NedCoor_i *ned_accel)
 958:./state.h     **** {
 959:./state.h     ****   VECT3_COPY(state.ned_accel_i, *ned_accel);
 960:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 961:./state.h     ****   state.accel_status = (1 << ACCEL_NED_I);
 962:./state.h     **** }
 963:./state.h     **** 
 964:./state.h     **** /// Set acceleration in ECEF coordinates (int).
 965:./state.h     **** static inline void stateSetAccelEcef_i(struct EcefCoor_i *ecef_accel)
 966:./state.h     **** {
 967:./state.h     ****   VECT3_COPY(state.ecef_accel_i, *ecef_accel);
 968:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 969:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_I);
 970:./state.h     **** }
 971:./state.h     **** 
 972:./state.h     **** /// Set acceleration in NED coordinates (float).
 973:./state.h     **** static inline void stateSetAccelNed_f(struct NedCoor_f *ned_accel)
 974:./state.h     **** {
 975:./state.h     ****   VECT3_COPY(state.ned_accel_f, *ned_accel);
 976:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 977:./state.h     ****   state.accel_status = (1 << ACCEL_NED_F);
 978:./state.h     **** }
 979:./state.h     **** 
 980:./state.h     **** /// Set acceleration in ECEF coordinates (float).
 981:./state.h     **** static inline void stateSetAccelEcef_f(struct EcefCoor_f *ecef_accel)
 982:./state.h     **** {
 983:./state.h     ****   VECT3_COPY(state.ecef_accel_f, *ecef_accel);
 984:./state.h     ****   /* clear bits for all accel representations and only set the new one */
 985:./state.h     ****   state.accel_status = (1 << ACCEL_ECEF_F);
 986:./state.h     **** }
 987:./state.h     **** 
 988:./state.h     **** /************************ Get functions ****************************/
 989:./state.h     **** 
 990:./state.h     **** /// Get acceleration in NED coordinates (int).
 991:./state.h     **** static inline struct NedCoor_i *stateGetAccelNed_i(void)
 992:./state.h     **** {
 993:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_I)) {
 994:./state.h     ****     stateCalcAccelNed_i();
 995:./state.h     ****   }
 996:./state.h     ****   return &state.ned_accel_i;
 997:./state.h     **** }
 998:./state.h     **** 
 999:./state.h     **** /// Get acceleration in ECEF coordinates (int).
1000:./state.h     **** static inline struct EcefCoor_i *stateGetAccelEcef_i(void)
1001:./state.h     **** {
1002:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_I)) {
1003:./state.h     ****     stateCalcAccelEcef_i();
1004:./state.h     ****   }
1005:./state.h     ****   return &state.ecef_accel_i;
1006:./state.h     **** }
1007:./state.h     **** 
1008:./state.h     **** /// Get acceleration in NED coordinates (float).
1009:./state.h     **** static inline struct NedCoor_f *stateGetAccelNed_f(void)
1010:./state.h     **** {
1011:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_NED_F)) {
1012:./state.h     ****     stateCalcAccelNed_f();
1013:./state.h     ****   }
1014:./state.h     ****   return &state.ned_accel_f;
1015:./state.h     **** }
1016:./state.h     **** 
1017:./state.h     **** /// Get acceleration in ECEF coordinates (float).
1018:./state.h     **** static inline struct EcefCoor_f *stateGetAccelEcef_f(void)
1019:./state.h     **** {
1020:./state.h     ****   if (!bit_is_set(state.accel_status, ACCEL_ECEF_F)) {
1021:./state.h     ****     stateCalcAccelEcef_f();
1022:./state.h     ****   }
1023:./state.h     ****   return &state.ecef_accel_f;
1024:./state.h     **** }
1025:./state.h     **** /** @}*/
1026:./state.h     **** 
1027:./state.h     **** /******************************************************************************
1028:./state.h     **** *                                                                             *
1029:./state.h     **** * Set and Get functions for the ATTITUDE representations                      *
1030:./state.h     **** * (Calls the functions in math/pprz_orientation_conversion)                   *
1031:./state.h     **** *                                                                             *
1032:./state.h     **** *****************************************************************************/
1033:./state.h     **** /** @addtogroup state_attitude
1034:./state.h     **** * @{ */
1035:./state.h     **** /*********************** validity test functions ******************/
1036:./state.h     **** 
1037:./state.h     **** /// Test if attitudes are valid.
1038:./state.h     **** static inline bool_t stateIsAttitudeValid(void)
1039:./state.h     **** {
1040:./state.h     ****   return (orienationCheckValid(&state.ned_to_body_orientation));
1041:./state.h     **** }
1042:./state.h     **** 
1043:./state.h     **** /************************ Set functions ****************************/
1044:./state.h     **** 
1045:./state.h     **** /// Set vehicle body attitude from quaternion (int).
1046:./state.h     **** static inline void stateSetNedToBodyQuat_i(struct Int32Quat *ned_to_body_quat)
1047:./state.h     **** {
1048:./state.h     ****   orientationSetQuat_i(&state.ned_to_body_orientation, ned_to_body_quat);
1049:./state.h     **** }
1050:./state.h     **** 
1051:./state.h     **** /// Set vehicle body attitude from rotation matrix (int).
1052:./state.h     **** static inline void stateSetNedToBodyRMat_i(struct Int32RMat *ned_to_body_rmat)
1053:./state.h     **** {
1054:./state.h     ****   orientationSetRMat_i(&state.ned_to_body_orientation, ned_to_body_rmat);
1055:./state.h     **** }
1056:./state.h     **** 
1057:./state.h     **** /// Set vehicle body attitude from euler angles (int).
1058:./state.h     **** static inline void stateSetNedToBodyEulers_i(struct Int32Eulers *ned_to_body_eulers)
1059:./state.h     **** {
1060:./state.h     ****   orientationSetEulers_i(&state.ned_to_body_orientation, ned_to_body_eulers);
1061:./state.h     **** }
1062:./state.h     **** 
1063:./state.h     **** /// Set vehicle body attitude from quaternion (float).
1064:./state.h     **** static inline void stateSetNedToBodyQuat_f(struct FloatQuat *ned_to_body_quat)
1065:./state.h     **** {
1066:./state.h     ****   orientationSetQuat_f(&state.ned_to_body_orientation, ned_to_body_quat);
1067:./state.h     **** }
1068:./state.h     **** 
1069:./state.h     **** /// Set vehicle body attitude from rotation matrix (float).
1070:./state.h     **** static inline void stateSetNedToBodyRMat_f(struct FloatRMat *ned_to_body_rmat)
1071:./state.h     **** {
1072:./state.h     ****   orientationSetRMat_f(&state.ned_to_body_orientation, ned_to_body_rmat);
1073:./state.h     **** }
1074:./state.h     **** 
1075:./state.h     **** /// Set vehicle body attitude from euler angles (float).
1076:./state.h     **** static inline void stateSetNedToBodyEulers_f(struct FloatEulers *ned_to_body_eulers)
1077:./state.h     **** {
1078:./state.h     ****   orientationSetEulers_f(&state.ned_to_body_orientation, ned_to_body_eulers);
1079:./state.h     **** }
1080:./state.h     **** 
1081:./state.h     **** /************************ Get functions ****************************/
1082:./state.h     **** 
1083:./state.h     **** /// Get vehicle body attitude quaternion (int).
1084:./state.h     **** static inline struct Int32Quat *stateGetNedToBodyQuat_i(void)
1085:./state.h     **** {
1086:./state.h     ****   return orientationGetQuat_i(&state.ned_to_body_orientation);
1087:./state.h     **** }
1088:./state.h     **** 
1089:./state.h     **** /// Get vehicle body attitude rotation matrix (int).
1090:./state.h     **** static inline struct Int32RMat *stateGetNedToBodyRMat_i(void)
1091:./state.h     **** {
1092:./state.h     ****   return orientationGetRMat_i(&state.ned_to_body_orientation);
1093:./state.h     **** }
1094:./state.h     **** 
1095:./state.h     **** /// Get vehicle body attitude euler angles (int).
1096:./state.h     **** static inline struct Int32Eulers *stateGetNedToBodyEulers_i(void)
1097:./state.h     **** {
1098:./state.h     ****   return orientationGetEulers_i(&state.ned_to_body_orientation);
1099:./state.h     **** }
1100:./state.h     **** 
1101:./state.h     **** /// Get vehicle body attitude quaternion (float).
1102:./state.h     **** static inline struct FloatQuat *stateGetNedToBodyQuat_f(void)
1103:./state.h     **** {
1104:./state.h     ****   return orientationGetQuat_f(&state.ned_to_body_orientation);
1105:./state.h     **** }
1106:./state.h     **** 
1107:./state.h     **** /// Get vehicle body attitude rotation matrix (float).
1108:./state.h     **** static inline struct FloatRMat *stateGetNedToBodyRMat_f(void)
1109:./state.h     **** {
1110:./state.h     ****   return orientationGetRMat_f(&state.ned_to_body_orientation);
1111:./state.h     **** }
1112:./state.h     **** 
1113:./state.h     **** /// Get vehicle body attitude euler angles (float).
1114:./state.h     **** static inline struct FloatEulers *stateGetNedToBodyEulers_f(void)
1115:./state.h     **** {
1116:./state.h     ****   return orientationGetEulers_f(&state.ned_to_body_orientation);
1117:./state.h     **** }
1118:./state.h     **** /** @}*/
1119:./state.h     **** 
1120:./state.h     **** 
1121:./state.h     **** /******************************************************************************
1122:./state.h     ****  *                                                                            *
1123:./state.h     ****  * Set and Get functions for the ANGULAR RATE representations                 *
1124:./state.h     ****  *                                                                            *
1125:./state.h     ****  *****************************************************************************/
1126:./state.h     **** /** @addtogroup state_rate
1127:./state.h     ****  *  @{ */
1128:./state.h     **** 
1129:./state.h     **** /************* declaration of transformation functions ************/
1130:./state.h     **** extern void stateCalcBodyRates_i(void);
1131:./state.h     **** extern void stateCalcBodyRates_f(void);
1132:./state.h     **** 
1133:./state.h     **** /*********************** validity test functions ******************/
1134:./state.h     **** 
1135:./state.h     **** /// Test if rates are valid.
1136:./state.h     **** static inline bool_t stateIsRateValid(void)
1137:./state.h     **** {
1138:./state.h     ****   return (state.rate_status);
1139:./state.h     **** }
1140:./state.h     **** 
1141:./state.h     **** /************************ Set functions ****************************/
1142:./state.h     **** 
1143:./state.h     **** /// Set vehicle body angular rate (int).
1144:./state.h     **** static inline void stateSetBodyRates_i(struct Int32Rates *body_rate)
1145:./state.h     **** {
1146:./state.h     ****   RATES_COPY(state.body_rates_i, *body_rate);
1147:./state.h     ****   /* clear bits for all attitude representations and only set the new one */
1148:./state.h     ****   state.rate_status = (1 << RATE_I);
1149:./state.h     **** }
1150:./state.h     **** 
1151:./state.h     **** /// Set vehicle body angular rate (float).
1152:./state.h     **** static inline void stateSetBodyRates_f(struct FloatRates *body_rate)
1153:./state.h     **** {
1154:./state.h     ****   RATES_COPY(state.body_rates_f, *body_rate);
1155:./state.h     ****   /* clear bits for all attitude representations and only set the new one */
1156:./state.h     ****   state.rate_status = (1 << RATE_F);
1157:./state.h     **** }
1158:./state.h     **** 
1159:./state.h     **** /************************ Get functions ****************************/
1160:./state.h     **** 
1161:./state.h     **** /// Get vehicle body angular rate (int).
1162:./state.h     **** static inline struct Int32Rates *stateGetBodyRates_i(void)
1163:./state.h     **** {
1164:./state.h     ****   if (!bit_is_set(state.rate_status, RATE_I)) {
1165:./state.h     ****     stateCalcBodyRates_i();
1166:./state.h     ****   }
1167:./state.h     ****   return &state.body_rates_i;
1168:./state.h     **** }
1169:./state.h     **** 
1170:./state.h     **** /// Get vehicle body angular rate (float).
1171:./state.h     **** static inline struct FloatRates *stateGetBodyRates_f(void)
1172:./state.h     **** {
1173:./state.h     ****   if (!bit_is_set(state.rate_status, RATE_F)) {
1174:./state.h     ****     stateCalcBodyRates_f();
1175:./state.h     ****   }
1176:./state.h     ****   return &state.body_rates_f;
1177:./state.h     **** }
1178:./state.h     **** 
1179:./state.h     **** /** @}*/
1180:./state.h     **** 
1181:./state.h     **** 
1182:./state.h     **** 
1183:./state.h     **** /******************************************************************************
1184:./state.h     ****  *                                                                            *
1185:./state.h     ****  * Set and Get functions for the WIND- AND AIRSPEED representations           *
1186:./state.h     ****  *                                                                            *
1187:./state.h     ****  *****************************************************************************/
1188:./state.h     **** /** @addtogroup state_wind_airspeed
1189:./state.h     ****  *  @{ */
1190:./state.h     **** 
1191:./state.h     **** /************* declaration of transformation functions ************/
1192:./state.h     **** extern void stateCalcHorizontalWindspeed_i(void);
1193:./state.h     **** extern void stateCalcAirspeed_i(void);
1194:./state.h     **** extern void stateCalcHorizontalWindspeed_f(void);
1195:./state.h     **** extern void stateCalcAirspeed_f(void);
1196:./state.h     **** 
1197:./state.h     **** 
1198:./state.h     **** /************************ validity test function *******************/
1199:./state.h     **** 
1200:./state.h     **** /// test if wind speed is available.
1201:./state.h     **** static inline bool_t stateIsWindspeedValid(void)
1202:./state.h     **** {
1203:./state.h     ****   return (state.wind_air_status &= ~((1 << WINDSPEED_I) | (1 << WINDSPEED_F)));
1204:./state.h     **** }
1205:./state.h     **** 
1206:./state.h     **** /// test if air speed is available.
1207:./state.h     **** static inline bool_t stateIsAirspeedValid(void)
1208:./state.h     **** {
1209:./state.h     ****   return (state.wind_air_status &= ~((1 << AIRSPEED_I) | (1 << AIRSPEED_F)));
1210:./state.h     **** }
1211:./state.h     **** 
1212:./state.h     **** /// test if angle of attack is available.
1213:./state.h     **** static inline bool_t stateIsAngleOfAttackValid(void)
1214:./state.h     **** {
1215:./state.h     ****   return (state.wind_air_status &= ~(1 << AOA_F));
1216:./state.h     **** }
1217:./state.h     **** 
1218:./state.h     **** /// test if sideslip is available.
1219:./state.h     **** static inline bool_t stateIsSideslipValid(void)
1220:./state.h     **** {
1221:./state.h     ****   return (state.wind_air_status &= ~(1 << SIDESLIP_F));
1222:./state.h     **** }
1223:./state.h     **** 
1224:./state.h     **** /************************ Set functions ****************************/
1225:./state.h     **** 
1226:./state.h     **** /// Set horizontal windspeed (int).
1227:./state.h     **** static inline void stateSetHorizontalWindspeed_i(struct Int32Vect2 *h_windspeed)
1228:./state.h     **** {
1229:./state.h     ****   VECT2_COPY(state.h_windspeed_i, *h_windspeed);
1230:./state.h     ****   /* clear bits for all windspeed representations and only set the new one */
1231:./state.h     ****   ClearBit(state.wind_air_status, WINDSPEED_F);
1232:./state.h     ****   SetBit(state.wind_air_status, WINDSPEED_I);
1233:./state.h     **** }
1234:./state.h     **** 
1235:./state.h     **** /// Set airspeed (int).
1236:./state.h     **** static inline void stateSetAirspeed_i(int32_t *airspeed)
1237:./state.h     **** {
1238:./state.h     ****   state.airspeed_i = *airspeed;
1239:./state.h     ****   /* clear bits for all airspeed representations and only set the new one */
1240:./state.h     ****   ClearBit(state.wind_air_status, AIRSPEED_F);
1241:./state.h     ****   SetBit(state.wind_air_status, AIRSPEED_I);
1242:./state.h     **** }
1243:./state.h     **** 
1244:./state.h     **** /// Set horizontal windspeed (float).
1245:./state.h     **** static inline void stateSetHorizontalWindspeed_f(struct FloatVect2 *h_windspeed)
1246:./state.h     **** {
1247:./state.h     ****   VECT2_COPY(state.h_windspeed_f, *h_windspeed);
 1155              		.loc 3 1247 0
 1156 066c 4B4B     		ldr	r3, .L78+12
 1157              	.LBE75:
 1158              	.LBE74:
 1159              	.LBB79:
 149:firmwares/fixedwing/datalink.c ****           wind.y = DL_WIND_INFO_east(dl_buffer);
 1160              		.loc 2 149 0
 1161 066e 0904     		lsls	r1, r1, #16
 1162              	.LVL156:
 1163 0670 41EA0565 		orr	r5, r1, r5, lsl #24
 1164 0674 617A     		ldrb	r1, [r4, #9]	@ zero_extendqisi2
 1165              	.LVL157:
 1166              	.LBE79:
 1167              	.LBB80:
 1168              	.LBB76:
 1169              		.loc 3 1247 0
 1170 0676 C3F85822 		str	r2, [r3, #600]	@ float
 1171              	.LBE76:
 1172              	.LBE80:
 1173              	.LBB81:
 149:firmwares/fixedwing/datalink.c ****           wind.y = DL_WIND_INFO_east(dl_buffer);
 1174              		.loc 2 149 0
 1175 067a 40EA0121 		orr	r1, r0, r1, lsl #8
 1176              	.LVL158:
 1177              	.LBE81:
 1178              	.LBB82:
 1179              	.LBB77:
 1180              		.loc 3 1247 0
 1181 067e 2943     		orrs	r1, r1, r5
 1182 0680 C3F85412 		str	r1, [r3, #596]	@ float
 1183              	.LBE77:
 1184              	.LBE82:
 1185              	.LBB83:
 151:firmwares/fixedwing/datalink.c ****           stateSetHorizontalWindspeed_f(&wind);
 152:firmwares/fixedwing/datalink.c **** #if !USE_AIRSPEED
 153:firmwares/fixedwing/datalink.c ****           float airspeed = DL_WIND_INFO_airspeed(dl_buffer);
 1186              		.loc 2 153 0
 1187 0684 A17B     		ldrb	r1, [r4, #14]	@ zero_extendqisi2
 1188 0686 E57B     		ldrb	r5, [r4, #15]	@ zero_extendqisi2
 1189              	.LBE83:
 1190              	.LBB84:
 1191              	.LBB78:
1248:./state.h     ****   /* clear bits for all windspeed representations and only set the new one */
1249:./state.h     ****   ClearBit(state.wind_air_status, WINDSPEED_I);
 1192              		.loc 3 1249 0
 1193 0688 93F84422 		ldrb	r2, [r3, #580]	@ zero_extendqisi2
 1194              	.LVL159:
 1195              	.LBE78:
 1196              	.LBE84:
 1197              	.LBB85:
 1198              		.loc 2 153 0
 1199 068c 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 1200 068e 0904     		lsls	r1, r1, #16
 1201              	.LVL160:
 1202 0690 41EA0565 		orr	r5, r1, r5, lsl #24
 1203 0694 617B     		ldrb	r1, [r4, #13]	@ zero_extendqisi2
 1204              	.LVL161:
 1205              	.LBE85:
 1206              	.LBB86:
 1207              	.LBB87:
1250:./state.h     ****   SetBit(state.wind_air_status, WINDSPEED_F);
1251:./state.h     **** }
1252:./state.h     **** 
1253:./state.h     **** /// Set airspeed (float).
1254:./state.h     **** static inline void stateSetAirspeed_f(float *airspeed)
1255:./state.h     **** {
1256:./state.h     ****   state.airspeed_f = *airspeed;
1257:./state.h     ****   /* clear bits for all airspeed representations and only set the new one */
1258:./state.h     ****   ClearBit(state.wind_air_status, AIRSPEED_I);
 1208              		.loc 3 1258 0
 1209 0696 22F00302 		bic	r2, r2, #3
 1210              	.LBE87:
 1211              	.LBE86:
 1212              	.LBB89:
 1213              		.loc 2 153 0
 1214 069a 40EA0121 		orr	r1, r0, r1, lsl #8
 1215              	.LVL162:
 1216              	.LBE89:
 1217              	.LBB90:
 1218              	.LBB88:
1256:./state.h     ****   /* clear bits for all airspeed representations and only set the new one */
 1219              		.loc 3 1256 0
 1220 069e 2943     		orrs	r1, r1, r5
1259:./state.h     ****   SetBit(state.wind_air_status, AIRSPEED_F);
 1221              		.loc 3 1259 0
 1222 06a0 42F00C02 		orr	r2, r2, #12
1256:./state.h     ****   /* clear bits for all airspeed representations and only set the new one */
 1223              		.loc 3 1256 0
 1224 06a4 C3F85C12 		str	r1, [r3, #604]	@ float
 1225              		.loc 3 1259 0
 1226 06a8 83F84422 		strb	r2, [r3, #580]
 1227              	.LBE88:
 1228              	.LBE90:
 1229              	.LBE69:
 147:firmwares/fixedwing/datalink.c ****           struct FloatVect2 wind;
 1230              		.loc 2 147 0
 1231 06ac EAE0     		b	.L8
 1232              	.LVL163:
 1233              	.L21:
 154:firmwares/fixedwing/datalink.c ****           stateSetAirspeed_f(&airspeed);
 155:firmwares/fixedwing/datalink.c **** #endif
 156:firmwares/fixedwing/datalink.c **** #ifdef WIND_INFO_RET
 157:firmwares/fixedwing/datalink.c ****           DOWNLINK_SEND_WIND_INFO_RET(DefaultChannel, DefaultDevice, &wind.y, &wind.x, stateGetAirs
 158:firmwares/fixedwing/datalink.c **** #endif
 159:firmwares/fixedwing/datalink.c ****         } else
 160:firmwares/fixedwing/datalink.c **** #endif /** WIND_INFO */
 161:firmwares/fixedwing/datalink.c **** 
 162:firmwares/fixedwing/datalink.c **** #ifdef HITL
 163:firmwares/fixedwing/datalink.c ****           /** Infrared and GPS sensors are replaced by messages on the datalink */
 164:firmwares/fixedwing/datalink.c ****           if (msg_id == DL_HITL_INFRARED) {
 165:firmwares/fixedwing/datalink.c ****             /** This code simulates infrared.c:ir_update() */
 166:firmwares/fixedwing/datalink.c ****             infrared.roll = DL_HITL_INFRARED_roll(dl_buffer);
 167:firmwares/fixedwing/datalink.c ****             infrared.pitch = DL_HITL_INFRARED_pitch(dl_buffer);
 168:firmwares/fixedwing/datalink.c ****             infrared.top = DL_HITL_INFRARED_top(dl_buffer);
 169:firmwares/fixedwing/datalink.c ****           } else if (msg_id == DL_HITL_UBX) {
 170:firmwares/fixedwing/datalink.c ****             /** This code simulates gps_ubx.c:parse_ubx() */
 171:firmwares/fixedwing/datalink.c ****             if (gps_msg_received) {
 172:firmwares/fixedwing/datalink.c ****               gps_nb_ovrn++;
 173:firmwares/fixedwing/datalink.c ****             } else {
 174:firmwares/fixedwing/datalink.c ****               ubx_class = DL_HITL_UBX_class(dl_buffer);
 175:firmwares/fixedwing/datalink.c ****               ubx_id = DL_HITL_UBX_id(dl_buffer);
 176:firmwares/fixedwing/datalink.c ****               uint8_t l = DL_HITL_UBX_ubx_payload_length(dl_buffer);
 177:firmwares/fixedwing/datalink.c ****               uint8_t *ubx_payload = DL_HITL_UBX_ubx_payload(dl_buffer);
 178:firmwares/fixedwing/datalink.c ****               memcpy(ubx_msg_buf, ubx_payload, l);
 179:firmwares/fixedwing/datalink.c ****               gps_msg_received = TRUE;
 180:firmwares/fixedwing/datalink.c ****             }
 181:firmwares/fixedwing/datalink.c ****           } else
 182:firmwares/fixedwing/datalink.c **** #endif
 183:firmwares/fixedwing/datalink.c **** #ifdef DlSetting
 184:firmwares/fixedwing/datalink.c ****             if (msg_id == DL_SETTING && DL_SETTING_ac_id(dl_buffer) == AC_ID) {
 1234              		.loc 2 184 0
 1235 06ae B9F1040F 		cmp	r9, #4
 1236 06b2 40F0AA80 		bne	.L22
 1237              		.loc 2 184 0 is_stmt 0 discriminator 1
 1238 06b6 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1239 06b8 012B     		cmp	r3, #1
 1240 06ba 40F0E380 		bne	.L8
 1241              	.LBB91:
 1242              	.LBB92:
 185:firmwares/fixedwing/datalink.c ****               uint8_t i = DL_SETTING_index(dl_buffer);
 186:firmwares/fixedwing/datalink.c ****               float val = DL_SETTING_value(dl_buffer);
 1243              		.loc 2 186 0 is_stmt 1
 1244 06be A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1245 06c0 E279     		ldrb	r2, [r4, #7]	@ zero_extendqisi2
 1246 06c2 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1247              	.LBE92:
 185:firmwares/fixedwing/datalink.c ****               uint8_t i = DL_SETTING_index(dl_buffer);
 1248              		.loc 2 185 0
 1249 06c4 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 1250 06c6 8DF84C10 		strb	r1, [sp, #76]
 1251              	.LBB93:
 1252              		.loc 2 186 0
 1253 06ca 1B04     		lsls	r3, r3, #16
 1254 06cc 43EA0262 		orr	r2, r3, r2, lsl #24
 1255 06d0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1256 06d2 43EA0023 		orr	r3, r3, r0, lsl #8
 1257 06d6 1343     		orrs	r3, r3, r2
 1258 06d8 07EE903A 		fmsr	s15, r3	@ int
 1259              	.LVL164:
 1260              	.LBE93:
 1261 06dc 1693     		str	r3, [sp, #88]	@ float
 187:firmwares/fixedwing/datalink.c ****               DlSetting(i, val);
 1262              		.loc 2 187 0
 1263 06de 0B29     		cmp	r1, #11
 1264 06e0 00F2CC80 		bhi	.L71
 1265 06e4 DFE801F0 		tbb	[pc, r1]
 1266              	.LVL165:
 1267              	.L25:
 1268 06e8 06       		.byte	(.L24-.L25)/2
 1269 06e9 0C       		.byte	(.L26-.L25)/2
 1270 06ea 12       		.byte	(.L27-.L25)/2
 1271 06eb 14       		.byte	(.L28-.L25)/2
 1272 06ec 18       		.byte	(.L29-.L25)/2
 1273 06ed 25       		.byte	(.L30-.L25)/2
 1274 06ee 2C       		.byte	(.L31-.L25)/2
 1275 06ef 45       		.byte	(.L32-.L25)/2
 1276 06f0 4B       		.byte	(.L33-.L25)/2
 1277 06f1 84       		.byte	(.L34-.L25)/2
 1278 06f2 BB       		.byte	(.L54-.L25)/2
 1279 06f3 8A       		.byte	(.L36-.L25)/2
 1280              		.p2align 1
 1281              	.L24:
 1282              		.loc 2 187 0 is_stmt 0 discriminator 1
 1283 06f4 FCEEE77A 		ftouizs	s15, s15
 1284              	.LVL166:
 1285 06f8 314A     		ldr	r2, .L78+48
 1286              	.LVL167:
 1287 06fa 17EE903A 		fmrs	r3, s15	@ int
 1288 06fe 82E0     		b	.L64
 1289              	.LVL168:
 1290              	.L26:
 1291              		.loc 2 187 0 discriminator 2
 1292 0700 FCEEE77A 		ftouizs	s15, s15
 1293              	.LVL169:
 1294 0704 2F4A     		ldr	r2, .L78+52
 1295              	.LVL170:
 1296 0706 17EE903A 		fmrs	r3, s15	@ int
 1297 070a 7CE0     		b	.L64
 1298              	.LVL171:
 1299              	.L27:
 1300              		.loc 2 187 0 discriminator 3
 1301 070c 2E4B     		ldr	r3, .L78+56
 1302 070e 00E0     		b	.L65
 1303              	.L28:
 1304              		.loc 2 187 0 discriminator 4
 1305 0710 2E4B     		ldr	r3, .L78+60
 1306              	.L65:
 1307 0712 C3ED007A 		fsts	s15, [r3]
 1308 0716 B1E0     		b	.L71
 1309              	.L29:
 1310              		.loc 2 187 0 discriminator 5
 1311 0718 F5EE407A 		fcmpzs	s15
 1312 071c F1EE10FA 		fmstat
 1313 0720 2B4B     		ldr	r3, .L78+64
 1314 0722 01D1     		bne	.L37
 1315              		.loc 2 187 0 discriminator 13
 1316 0724 0022     		movs	r2, #0
 1317 0726 1DE0     		b	.L63
 1318              	.L37:
 1319              		.loc 2 187 0 discriminator 14
 1320 0728 93ED007A 		flds	s14, [r3]
 1321 072c 77EE277A 		fadds	s15, s14, s15
 1322              	.LVL172:
 1323 0730 1AE0     		b	.L41
 1324              	.LVL173:
 1325              	.L30:
 1326              		.loc 2 187 0 discriminator 6
 1327 0732 284A     		ldr	r2, .L78+68
 1328 0734 0023     		movs	r3, #0
 1329 0736 1380     		strh	r3, [r2]	@ movhi
 1330 0738 274A     		ldr	r2, .L78+72
 1331 073a 1370     		strb	r3, [r2]
 1332 073c 0023     		movs	r3, #0
 1333 073e 16E0     		b	.L66
 1334              	.L31:
 1335              		.loc 2 187 0 discriminator 7
 1336 0740 B7EE007A 		fconsts	s14, #112
 1337 0744 F4EE477A 		fcmps	s15, s14
 1338 0748 F1EE10FA 		fmstat
 1339 074c 234B     		ldr	r3, .L78+76
 1340 074e 01D1     		bne	.L39
 1341              		.loc 2 187 0 discriminator 17
 1342 0750 234A     		ldr	r2, .L78+80
 1343 0752 07E0     		b	.L63
 1344              	.L39:
 1345              		.loc 2 187 0 discriminator 18
 1346 0754 BFEE007A 		fconsts	s14, #240
 1347 0758 F4EE477A 		fcmps	s15, s14
 1348 075c F1EE10FA 		fmstat
 1349 0760 02D1     		bne	.L41
 1350              		.loc 2 187 0 discriminator 20
 1351 0762 204A     		ldr	r2, .L78+84
 1352              	.L63:
 1353 0764 1A60     		str	r2, [r3]	@ float
 1354 0766 01E0     		b	.L40
 1355              	.LVL174:
 1356              	.L41:
 1357              		.loc 2 187 0 discriminator 21
 1358 0768 C3ED007A 		fsts	s15, [r3]
 1359              	.LVL175:
 1360              	.L40:
 1361              		.loc 2 187 0 discriminator 23
 1362 076c 1B68     		ldr	r3, [r3]	@ float
 1363              	.L66:
 1364 076e 1693     		str	r3, [sp, #88]	@ float
 1365 0770 84E0     		b	.L71
 1366              	.LVL176:
 1367              	.L32:
 1368              		.loc 2 187 0 discriminator 8
 1369 0772 FCEEE77A 		ftouizs	s15, s15
 1370              	.LVL177:
 1371 0776 1C4A     		ldr	r2, .L78+88
 1372              	.LVL178:
 1373 0778 17EE903A 		fmrs	r3, s15	@ int
 1374 077c 43E0     		b	.L64
 1375              	.LVL179:
 1376              	.L33:
 1377              		.loc 2 187 0 discriminator 9
 1378 077e FCEEE77A 		ftouizs	s15, s15
 1379              	.LVL180:
 1380 0782 154A     		ldr	r2, .L78+72
 1381              	.LVL181:
 1382 0784 17EE903A 		fmrs	r3, s15	@ int
 1383 0788 3DE0     		b	.L64
 1384              	.L79:
 1385 078a 00BFAFF3 		.align	3
 1385      0080
 1386              	.L78:
 1387 0790 182D4454 		.word	1413754136
 1388 0794 FB211940 		.word	1075388923
 1389 0798 00000000 		.word	nav_circle_radians
 1390 079c 00000000 		.word	state
 1391 07a0 00000000 		.word	dist2_to_wp
 1392 07a4 00000000 		.word	pprz_tp
 1393 07a8 00000000 		.word	dist2_to_home
 1394 07ac 2C010000 		.word	uart1+300
 1395 07b0 17000000 		.word	.LC3
 1396 07b4 00000000 		.word	nav_block
 1397 07b8 00000000 		.word	nav_stage
 1398 07bc 00000000 		.word	nav_oval_count
 1399 07c0 00000000 		.word	telemetry_mode_Ap
 1400 07c4 00000000 		.word	telemetry_mode_Fbw
 1401 07c8 00000000 		.word	flight_altitude
 1402 07cc 00000000 		.word	nav_course
 1403 07d0 00000000 		.word	nav_shift
 1404 07d4 00000000 		.word	autopilot_flight_time
 1405 07d8 00000000 		.word	launch
 1406 07dc 00000000 		.word	nav_radius
 1407 07e0 00008C42 		.word	1116471296
 1408 07e4 00008CC2 		.word	-1031012352
 1409 07e8 00000000 		.word	pprz_mode
 1410 07ec 08010000 		.word	state+264
 1411              	.LVL182:
 1412              	.L34:
 1413              		.loc 2 187 0 discriminator 10
 1414 07f0 FCEEE77A 		ftouizs	s15, s15
 1415              	.LVL183:
 1416 07f4 264A     		ldr	r2, .L80
 1417              	.LVL184:
 1418 07f6 17EE903A 		fmrs	r3, s15	@ int
 1419 07fa 04E0     		b	.L64
 1420              	.LVL185:
 1421              	.L36:
 1422              		.loc 2 187 0 discriminator 12
 1423 07fc FCEEE77A 		ftouizs	s15, s15
 1424              	.LVL186:
 1425 0800 244A     		ldr	r2, .L80+4
 1426              	.LVL187:
 1427 0802 17EE903A 		fmrs	r3, s15	@ int
 1428              	.L64:
 1429 0806 1370     		strb	r3, [r2]
 1430              	.LVL188:
 1431 0808 38E0     		b	.L71
 1432              	.L22:
 1433              	.LBE91:
 188:firmwares/fixedwing/datalink.c ****               DOWNLINK_SEND_DL_VALUE(DefaultChannel, DefaultDevice, &i, &val);
 189:firmwares/fixedwing/datalink.c ****             } else if (msg_id == DL_GET_SETTING && DL_GET_SETTING_ac_id(dl_buffer) == AC_ID) {
 1434              		.loc 2 189 0 is_stmt 1
 1435 080a B9F1100F 		cmp	r9, #16
 1436 080e 39D1     		bne	.L8
 1437              		.loc 2 189 0 is_stmt 0 discriminator 1
 1438 0810 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1439 0812 012B     		cmp	r3, #1
 1440 0814 36D1     		bne	.L8
 1441              	.LBB94:
 190:firmwares/fixedwing/datalink.c ****               uint8_t i = DL_GET_SETTING_index(dl_buffer);
 1442              		.loc 2 190 0 is_stmt 1
 1443 0816 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1444 0818 8DF84C30 		strb	r3, [sp, #76]
 1445              	.LVL189:
 1446              	.LBB95:
 1447              	.LBB96:
 1448              		.file 4 "/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h"
   1:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** /* This file has been generated by gen_settings from /home/dino/paparazzi/var/aircrafts/MY_apogee/s
   2:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** /* Please DO NOT EDIT */
   3:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** 
   4:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #ifndef SETTINGS_H
   5:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #define SETTINGS_H
   6:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** 
   7:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #define RCSettings(mode_changed) { \
   8:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** }
   9:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** 
  10:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #include "autopilot.h"
  11:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #include "firmwares/fixedwing/nav.h"
  12:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #include "generated/periodic_telemetry.h"
  13:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #include "subsystems/gps.h"
  14:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #include "generated/modules.h"
  15:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** 
  16:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #define SETTINGS_NAMES { \
  17:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "telemetry_mode_Ap" }, \
  18:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "telemetry_mode_Fbw" }, \
  19:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "flight_altitude" }, \
  20:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "nav_course" }, \
  21:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "nav_shift" }, \
  22:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "autopilot_flight_time" }, \
  23:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "nav_radius" }, \
  24:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "pprz_mode" }, \
  25:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "launch" }, \
  26:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "kill_throttle" }, \
  27:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "gps.reset" }, \
  28:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  { "gps_ubx_gps_ubx_ucenter_periodic_status" }, \
  29:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** };
  30:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #define SETTINGS_NAMES_SHORT { \
  31:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "tel_mod_Ap" , \
  32:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "tel_mod_Fbw" , \
  33:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "fli_alt" , \
  34:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "nav_cou" , \
  35:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "nav_shi" , \
  36:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "aut_fli_tim" , \
  37:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "nav_rad" , \
  38:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "ppr_mod" , \
  39:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "lau" , \
  40:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "kil_thr" , \
  41:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "gps_res" , \
  42:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****  "gps_ubx_gps_ubx_" , \
  43:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** };
  44:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #define NB_SETTING 12
  45:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #define DlSetting(_idx, _value) { \
  46:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   switch (_idx) { \
  47:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 0: telemetry_mode_Ap = _value; break;\
  48:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 1: telemetry_mode_Fbw = _value; break;\
  49:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 2: flight_altitude = _value; break;\
  50:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 3: nav_course = _value; break;\
  51:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 4: nav_IncreaseShift( _value ); _value = nav_shift; break;\
  52:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 5: autopilot_ResetFlightTimeAndLaunch( _value ); _value = autopilot_flight_time; break;\
  53:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 6: nav_SetNavRadius( _value ); _value = nav_radius; break;\
  54:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 7: pprz_mode = _value; break;\
  55:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 8: launch = _value; break;\
  56:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 9: kill_throttle = _value; break;\
  57:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 10: gps_Reset( _value ); _value = gps.reset; break;\
  58:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 11: gps_ubx_gps_ubx_ucenter_periodic_status = _value; break;\
  59:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     default: break;\
  60:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   }\
  61:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** }
  62:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** #define PeriodicSendDlValue(_trans, _dev) { \
  63:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   static uint8_t i;\
  64:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   float var;\
  65:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   if (i >= 12) i = 0;\
  66:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   switch (i) { \
  67:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 0: var = telemetry_mode_Ap; break;\
  68:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 1: var = telemetry_mode_Fbw; break;\
  69:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 2: var = flight_altitude; break;\
  70:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 3: var = nav_course; break;\
  71:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 4: var = nav_shift; break;\
  72:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 5: var = autopilot_flight_time; break;\
  73:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 6: var = nav_radius; break;\
  74:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 7: var = pprz_mode; break;\
  75:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 8: var = launch; break;\
  76:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 9: var = kill_throttle; break;\
  77:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 10: var = gps.reset; break;\
  78:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 11: var = gps_ubx_gps_ubx_ucenter_periodic_status; break;\
  79:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     default: var = 0.; break;\
  80:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   }\
  81:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   pprz_msg_send_DL_VALUE(_trans, _dev, AC_ID, &i, &var);\
  82:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   i++;\
  83:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** }
  84:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h **** static inline float settings_get_value(uint8_t i) {
  85:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****   switch (i) { \
 1449              		.loc 4 85 0
 1450 081c 0B2B     		cmp	r3, #11
 1451 081e 29D8     		bhi	.L56
 1452 0820 DFE803F0 		tbb	[pc, r3]
 1453              	.L44:
 1454 0824 06       		.byte	(.L43-.L44)/2
 1455 0825 08       		.byte	(.L45-.L44)/2
 1456 0826 0A       		.byte	(.L46-.L44)/2
 1457 0827 0C       		.byte	(.L47-.L44)/2
 1458 0828 0E       		.byte	(.L48-.L44)/2
 1459 0829 10       		.byte	(.L49-.L44)/2
 1460 082a 13       		.byte	(.L50-.L44)/2
 1461 082b 17       		.byte	(.L51-.L44)/2
 1462 082c 19       		.byte	(.L52-.L44)/2
 1463 082d 1B       		.byte	(.L53-.L44)/2
 1464 082e 1D       		.byte	(.L54-.L44)/2
 1465 082f 21       		.byte	(.L55-.L44)/2
 1466              		.p2align 1
 1467              	.L43:
  86:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 0: return telemetry_mode_Ap;
 1468              		.loc 4 86 0
 1469 0830 194B     		ldr	r3, .L80+8
 1470              	.LVL190:
 1471 0832 19E0     		b	.L68
 1472              	.LVL191:
 1473              	.L45:
  87:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 1: return telemetry_mode_Fbw;
 1474              		.loc 4 87 0
 1475 0834 194B     		ldr	r3, .L80+12
 1476              	.LVL192:
 1477 0836 17E0     		b	.L68
 1478              	.LVL193:
 1479              	.L46:
  88:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 2: return flight_altitude;
 1480              		.loc 4 88 0
 1481 0838 194B     		ldr	r3, .L80+16
 1482              	.LVL194:
 1483 083a 07E0     		b	.L69
 1484              	.LVL195:
 1485              	.L47:
  89:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 3: return nav_course;
 1486              		.loc 4 89 0
 1487 083c 194B     		ldr	r3, .L80+20
 1488              	.LVL196:
 1489 083e 05E0     		b	.L69
 1490              	.LVL197:
 1491              	.L48:
  90:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 4: return nav_shift;
 1492              		.loc 4 90 0
 1493 0840 194B     		ldr	r3, .L80+24
 1494              	.LVL198:
 1495 0842 03E0     		b	.L69
 1496              	.LVL199:
 1497              	.L49:
  91:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 5: return autopilot_flight_time;
 1498              		.loc 4 91 0
 1499 0844 194B     		ldr	r3, .L80+28
 1500              	.LVL200:
 1501 0846 1B88     		ldrh	r3, [r3]
 1502 0848 0FE0     		b	.L67
 1503              	.LVL201:
 1504              	.L50:
  92:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 6: return nav_radius;
 1505              		.loc 4 92 0
 1506 084a 194B     		ldr	r3, .L80+32
 1507              	.LVL202:
 1508              	.L69:
 1509 084c D3ED007A 		flds	s15, [r3]
 1510 0850 12E0     		b	.L42
 1511              	.LVL203:
 1512              	.L51:
  93:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 7: return pprz_mode;
 1513              		.loc 4 93 0
 1514 0852 184B     		ldr	r3, .L80+36
 1515              	.LVL204:
 1516 0854 08E0     		b	.L68
 1517              	.LVL205:
 1518              	.L52:
  94:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 8: return launch;
 1519              		.loc 4 94 0
 1520 0856 184B     		ldr	r3, .L80+40
 1521              	.LVL206:
 1522 0858 06E0     		b	.L68
 1523              	.LVL207:
 1524              	.L53:
  95:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 9: return kill_throttle;
 1525              		.loc 4 95 0
 1526 085a 0D4B     		ldr	r3, .L80
 1527              	.LVL208:
 1528 085c 04E0     		b	.L68
 1529              	.LVL209:
 1530              	.L54:
  96:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 10: return gps.reset;
 1531              		.loc 4 96 0
 1532 085e 174B     		ldr	r3, .L80+44
 1533 0860 B3F8F830 		ldrh	r3, [r3, #248]
 1534 0864 01E0     		b	.L67
 1535              	.LVL210:
 1536              	.L55:
  97:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     case 11: return gps_ubx_gps_ubx_ucenter_periodic_status;
 1537              		.loc 4 97 0
 1538 0866 0B4B     		ldr	r3, .L80+4
 1539              	.LVL211:
 1540              	.L68:
 1541 0868 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1542              	.LVL212:
 1543              	.L67:
 1544 086a 07EE903A 		fmsr	s15, r3	@ int
 1545 086e F8EE677A 		fuitos	s15, s15
 1546 0872 01E0     		b	.L42
 1547              	.LVL213:
 1548              	.L56:
  98:/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/settings.h ****     default: return 0.;
 1549              		.loc 4 98 0
 1550 0874 DFED127A 		flds	s15, .L80+48
 1551              	.LVL214:
 1552              	.L42:
 1553              	.LBE96:
 1554              	.LBE95:
 191:firmwares/fixedwing/datalink.c ****               float val = settings_get_value(i);
 1555              		.loc 2 191 0
 1556 0878 CDED167A 		fsts	s15, [sp, #88]
 1557              	.L71:
 192:firmwares/fixedwing/datalink.c ****               DOWNLINK_SEND_DL_VALUE(DefaultChannel, DefaultDevice, &i, &val);
 1558              		.loc 2 192 0
 1559 087c 13A8     		add	r0, sp, #76
 1560 087e 16A9     		add	r1, sp, #88
 1561 0880 FFF7FEFF 		bl	pprz_msg_send_DL_VALUE.constprop.4
 1562              	.LVL215:
 1563              	.L8:
 1564              	.LBE94:
 193:firmwares/fixedwing/datalink.c ****             } else
 194:firmwares/fixedwing/datalink.c **** #endif /** Else there is no dl_settings section in the flight plan */
 195:firmwares/fixedwing/datalink.c **** #if USE_JOYSTICK
 196:firmwares/fixedwing/datalink.c ****               if (msg_id == DL_JOYSTICK_RAW && DL_JOYSTICK_RAW_ac_id(dl_buffer) == AC_ID) {
 197:firmwares/fixedwing/datalink.c ****                 JoystickHandeDatalink(DL_JOYSTICK_RAW_roll(dl_buffer),
 198:firmwares/fixedwing/datalink.c ****                                       DL_JOYSTICK_RAW_pitch(dl_buffer),
 199:firmwares/fixedwing/datalink.c ****                                       DL_JOYSTICK_RAW_throttle(dl_buffer));
 200:firmwares/fixedwing/datalink.c ****               } else
 201:firmwares/fixedwing/datalink.c **** #endif // USE_JOYSTICK
 202:firmwares/fixedwing/datalink.c **** #if defined RADIO_CONTROL && defined RADIO_CONTROL_TYPE_DATALINK
 203:firmwares/fixedwing/datalink.c ****                 if (msg_id == DL_RC_3CH /*&& DL_RC_3CH_ac_id(dl_buffer) == TX_ID*/) {
 204:firmwares/fixedwing/datalink.c **** #ifdef RADIO_CONTROL_DATALINK_LED
 205:firmwares/fixedwing/datalink.c ****                   LED_TOGGLE(RADIO_CONTROL_DATALINK_LED);
 206:firmwares/fixedwing/datalink.c **** #endif
 207:firmwares/fixedwing/datalink.c ****                   parse_rc_3ch_datalink(
 208:firmwares/fixedwing/datalink.c ****                     DL_RC_3CH_throttle_mode(dl_buffer),
 209:firmwares/fixedwing/datalink.c ****                     DL_RC_3CH_roll(dl_buffer),
 210:firmwares/fixedwing/datalink.c ****                     DL_RC_3CH_pitch(dl_buffer));
 211:firmwares/fixedwing/datalink.c ****                 } else if (msg_id == DL_RC_4CH && DL_RC_4CH_ac_id(dl_buffer) == AC_ID) {
 212:firmwares/fixedwing/datalink.c **** #ifdef RADIO_CONTROL_DATALINK_LED
 213:firmwares/fixedwing/datalink.c ****                   LED_TOGGLE(RADIO_CONTROL_DATALINK_LED);
 214:firmwares/fixedwing/datalink.c **** #endif
 215:firmwares/fixedwing/datalink.c ****                   parse_rc_4ch_datalink(
 216:firmwares/fixedwing/datalink.c ****                     DL_RC_4CH_mode(dl_buffer),
 217:firmwares/fixedwing/datalink.c ****                     DL_RC_4CH_throttle(dl_buffer),
 218:firmwares/fixedwing/datalink.c ****                     DL_RC_4CH_roll(dl_buffer),
 219:firmwares/fixedwing/datalink.c ****                     DL_RC_4CH_pitch(dl_buffer),
 220:firmwares/fixedwing/datalink.c ****                     DL_RC_4CH_yaw(dl_buffer));
 221:firmwares/fixedwing/datalink.c ****                 } else
 222:firmwares/fixedwing/datalink.c **** #endif // RC_DATALINK
 223:firmwares/fixedwing/datalink.c ****                 { /* Last else */
 224:firmwares/fixedwing/datalink.c ****                   /* Parse modules datalink */
 225:firmwares/fixedwing/datalink.c ****                   modules_parse_datalink(msg_id);
 226:firmwares/fixedwing/datalink.c ****                 }
 227:firmwares/fixedwing/datalink.c **** }
 1565              		.loc 2 227 0
 1566 0884 1BB0     		add	sp, sp, #108
 1567              		.cfi_def_cfa_offset 44
 1568              		@ sp needed
 1569 0886 BDEC028B 		fldmfdd	sp!, {d8}
 1570              		.cfi_restore 80
 1571              		.cfi_restore 81
 1572              		.cfi_def_cfa_offset 36
 1573 088a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1574              	.L81:
 1575 088e 00BF     		.align	2
 1576              	.L80:
 1577 0890 00000000 		.word	kill_throttle
 1578 0894 00000000 		.word	gps_ubx_gps_ubx_ucenter_periodic_status
 1579 0898 00000000 		.word	telemetry_mode_Ap
 1580 089c 00000000 		.word	telemetry_mode_Fbw
 1581 08a0 00000000 		.word	flight_altitude
 1582 08a4 00000000 		.word	nav_course
 1583 08a8 00000000 		.word	nav_shift
 1584 08ac 00000000 		.word	autopilot_flight_time
 1585 08b0 00000000 		.word	nav_radius
 1586 08b4 00000000 		.word	pprz_mode
 1587 08b8 00000000 		.word	launch
 1588 08bc 00000000 		.word	gps
 1589 08c0 00000000 		.word	0
 1590              		.cfi_endproc
 1591              	.LFE459:
 1593              		.global	dl_buffer
 1594              		.global	datalink_time
 1595              		.global	dl_msg_available
 1596              		.section	.bss.dl_msg_available,"aw",%nobits
 1599              	dl_msg_available:
 1600 0000 00       		.space	1
 1601              		.section	.bss.dl_buffer,"aw",%nobits
 1602              		.align	3
 1603              		.set	.LANCHOR1,. + 0
 1606              	dl_buffer:
 1607 0000 00000000 		.space	128
 1607      00000000 
 1607      00000000 
 1607      00000000 
 1607      00000000 
 1608              		.section	.bss.datalink_time,"aw",%nobits
 1609              		.align	1
 1610              		.set	.LANCHOR0,. + 0
 1613              	datalink_time:
 1614 0000 0000     		.space	2
 1615              		.section	.rodata.str1.1,"aMS",%progbits,1
 1616              	.LC0:
 1617 0000 444C5F56 		.ascii	"DL_VALUE\000"
 1617      414C5545 
 1617      00
 1618              	.LC1:
 1619 0009 504F4E47 		.ascii	"PONG\000"
 1619      00
 1620              	.LC2:
 1621 000e 57505F4D 		.ascii	"WP_MOVED\000"
 1621      4F564544 
 1621      00
 1622              	.LC3:
 1623 0017 4E415649 		.ascii	"NAVIGATION\000"
 1623      47415449 
 1623      4F4E00
 1624              		.text
 1625              	.Letext0:
 1626              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1627              		.file 6 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1628              		.file 7 "/home/dino/paparazzi/sw/include/std.h"
 1629              		.file 8 "./mcu_periph/link_device.h"
 1630              		.file 9 "./subsystems/datalink/transport.h"
 1631              		.file 10 "./subsystems/navigation/traffic_info.h"
 1632              		.file 11 "./math/pprz_algebra_int.h"
 1633              		.file 12 "./math/pprz_algebra_float.h"
 1634              		.file 13 "./math/pprz_geodetic_int.h"
 1635              		.file 14 "./math/pprz_geodetic_float.h"
 1636              		.file 15 "./math/pprz_orientation_conversion.h"
 1637              		.file 16 "./subsystems/navigation/common_nav.h"
 1638              		.file 17 "./mcu_periph/sys_time.h"
 1639              		.file 18 "./mcu_periph/uart.h"
 1640              		.file 19 "./subsystems/gps/gps_ubx.h"
 1641              		.file 20 "./subsystems/gps.h"
 1642              		.file 21 "./subsystems/datalink/pprz_transport.h"
 1643              		.file 22 "./subsystems/datalink/xbee.h"
 1644              		.file 23 "/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/modules.h"
 1645              		.file 24 "./subsystems/datalink/datalink.h"
 1646              		.file 25 "./subsystems/navigation/common_flight_plan.h"
 1647              		.file 26 "./firmwares/fixedwing/nav.h"
 1648              		.file 27 "firmwares/fixedwing/autopilot.h"
 1649              		.file 28 "./subsystems/settings.h"
 1650              		.file 29 "/home/dino/paparazzi/var/aircrafts/MY_apogee/ap/generated/periodic_telemetry.h"
 1651              		.file 30 "./subsystems/datalink/w5100.h"
 1652              		.file 31 "/usr/arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 datalink.c
     /tmp/ccj3SQT4.s:20     .text.pprz_msg_send_DL_VALUE.constprop.4:00000000 $t
     /tmp/ccj3SQT4.s:24     .text.pprz_msg_send_DL_VALUE.constprop.4:00000000 pprz_msg_send_DL_VALUE.constprop.4
     /tmp/ccj3SQT4.s:167    .text.pprz_msg_send_DL_VALUE.constprop.4:000000cc $d
     /tmp/ccj3SQT4.s:180    .text.dl_parse_msg:00000000 $t
     /tmp/ccj3SQT4.s:185    .text.dl_parse_msg:00000000 dl_parse_msg
     /tmp/ccj3SQT4.s:533    .text.dl_parse_msg:00000230 $d
     /tmp/ccj3SQT4.s:552    .text.dl_parse_msg:0000026c $t
     /tmp/ccj3SQT4.s:850    .text.dl_parse_msg:00000478 $d
     /tmp/ccj3SQT4.s:867    .text.dl_parse_msg:000004a4 $t
     /tmp/ccj3SQT4.s:1268   .text.dl_parse_msg:000006e8 $d
     /tmp/ccj3SQT4.s:1280   .text.dl_parse_msg:000006f4 $t
     /tmp/ccj3SQT4.s:1387   .text.dl_parse_msg:00000790 $d
     /tmp/ccj3SQT4.s:1414   .text.dl_parse_msg:000007f0 $t
     /tmp/ccj3SQT4.s:1454   .text.dl_parse_msg:00000824 $d
     /tmp/ccj3SQT4.s:1466   .text.dl_parse_msg:00000830 $t
     /tmp/ccj3SQT4.s:1577   .text.dl_parse_msg:00000890 $d
     /tmp/ccj3SQT4.s:1606   .bss.dl_buffer:00000000 dl_buffer
     /tmp/ccj3SQT4.s:1613   .bss.datalink_time:00000000 datalink_time
     /tmp/ccj3SQT4.s:1599   .bss.dl_msg_available:00000000 dl_msg_available
     /tmp/ccj3SQT4.s:1600   .bss.dl_msg_available:00000000 $d
     /tmp/ccj3SQT4.s:1602   .bss.dl_buffer:00000000 $d
     /tmp/ccj3SQT4.s:1609   .bss.datalink_time:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.7f506cdee5614e5fae524d20989ad8c8
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.stddef.h.263.49e44f5ee9cdd8820580fc4aa239e32a
                           .group:00000000 wm4.inttypes.h.23.a096771aacee9aba4b33c2d04aacc9b1
                           .group:00000000 wm4._ansi.h.13.1b5575dc7921a4c0cff7dbaa2f33e670
                           .group:00000000 wm4.stddef.h.39.2b75ea897b59bf67f50e970d678806e4
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.datalink.h.28.55e86835afe94883ed1f31544f56bdae
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.math.h.35.ad242c9287d2217c7d2035216e5d04ca
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.dl_protocol.h.8.ff49f2162ca39aa3b0519a0581b3d19d
                           .group:00000000 wm4.datalink.h.46.36a5e0f36fb7d0784f1e7af767537c84
                           .group:00000000 wm4.modules.h.5.3647ee45f49511088e2f33d88288be64
                           .group:00000000 wm4.gps_ubx_ucenter.h.29.30a3f1ed020dbc7085e412c29746d829
                           .group:00000000 wm4.modules.h.23.3d04ad9f740a156fcd476d18714df592
                           .group:00000000 wm4.messages.h.5.f850659c40a03ab37f86f316388d85a9
                           .group:00000000 wm4.airframe.h.5.55ffe79377b235d0a97162ed16ec170d
                           .group:00000000 wm4.apogee_1.0.h.2.34ab7bb688056eecb54e2e3ffff48ca6
                           .group:00000000 wm4.actuators_pwm_arch.h.27.5a737f85d71223e6481c4ba4068c062a
                           .group:00000000 wm4.airframe.h.14.814d9a421a57ec2d434c7b6efc262c4b
                           .group:00000000 wm4.traffic_info.h.30.4e7408a0732781cb79b4a633fe717a53
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_trig_int.h.28.b756be608c9d9f3092a41321446e5fa2
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.pprz_algebra_int.h.68.04ac162ae1e1d94f716d0bb402062624
                           .group:00000000 wm4.pprz_algebra_float.h.98.bb035bcbfa66bb186e7ea81143fd64bc
                           .group:00000000 wm4.pprz_geodetic.h.35.f7fdb5d11659b92d11c7ce67b6317005
                           .group:00000000 wm4.pprz_geodetic_int.h.127.8e737bed5ba4468e470311184b1fca7f
                           .group:00000000 wm4.pprz_orientation_conversion.h.69.5cce798fefad8bb761767fd414e61db5
                           .group:00000000 wm4.state.h.65.b18954aacb3801ec3e27b4e857d620d3
                           .group:00000000 wm4.paparazzi.h.2.eeb1c9dc8e5acded3c1d3014b2b23af3
                           .group:00000000 wm4.guidance_common.h.29.1bf3aadf5e973d07dcbb9e181585cee6
                           .group:00000000 wm4.nav_survey_rectangle.h.40.be8d41ad6903a05cab94fc858d7a6899
                           .group:00000000 wm4.common_flight_plan.h.28.998f628cac1ef266b3e88de20c1aaea2
                           .group:00000000 wm4.common_nav.h.28.8e6fb87079f62fdfc188e60962e671bb
                           .group:00000000 wm4.nav.h.44.3eb88fcdae84be242ba32ecd12ce1b48
                           .group:00000000 wm4.settings.h.5.5877f558a7c62e845a89616ec72f9a96
                           .group:00000000 wm4.autopilot.h.30.340d635d311f125ac0430a6b5533bef7
                           .group:00000000 wm4.common.h.21.22efaac882611267214d0a36f6f15e74
                           .group:00000000 wm4.memorymap.h.21.0c01d18fc5814f65c6ceb1822d4030fa
                           .group:00000000 wm4.memorymap.h.28.85f6f5de65b1d4294c70f79052a0b8c0
                           .group:00000000 wm4.gpio_common_all.h.37.fedbbcb9179f773c905aa3c3e4b7dbdd
                           .group:00000000 wm4.gpio_common_f234.h.48.ee30692f386eaf6801df27cae93943b1
                           .group:00000000 wm4.gpio_common_f24.h.48.4e4be5e3ebe26aee10d604e2d0fecde8
                           .group:00000000 wm4.autopilot.h.122.a7c58c4b7871349616be315a4b094581
                           .group:00000000 wm4.settings.h.29.dff4b7c685fcd0dfb04f9f8de0a69e75
                           .group:00000000 wm4.periodic_telemetry.h.11.f25aadf344a171d516cf4756f716329b
                           .group:00000000 wm4.sys_time.h.31.454ffebb4f6baf6e87ab8a60104a5808
                           .group:00000000 wm4.rcc.h.46.c4bbaa886b7ca1bd1829424ae12e70af
                           .group:00000000 wm4.systick.h.44.34e759e1f218a187b07e9a617cb1d556
                           .group:00000000 wm4.sys_time.h.213.4ee43452c5934214134db56488f53299
                           .group:00000000 wm4.uart_arch.h.30.cb8e70feae0b6afe250750f6c1439671
                           .group:00000000 wm4.uart.h.35.4345324d45fae43faace58e743d48e42
                           .group:00000000 wm4.gps_ubx.h.36.d4183b0b154441c99ce352aae50967b5
                           .group:00000000 wm4.gps.h.41.79d1c69e44dd427f855100ff8e932fbe
                           .group:00000000 wm4.settings.h.16.cc7af4a027d854e072de07f1d1f20417
                           .group:00000000 wm4.pprz_transport.h.42.85f722102d4f6618b3cf40ce3c652d4b
                           .group:00000000 wm4.xbee24.h.29.a6677f8bcb71d3b07e11290a2de0e179
                           .group:00000000 wm4.xbee.h.41.f36be817f95b74f883aef9324b53817b
                           .group:00000000 wm4.w5100.h.29.d3529bed8de657ab3944b343be960f10
                           .group:00000000 wm4.downlink.h.76.41034157e32fc9012166fd95ec7418fc

UNDEFINED SYMBOLS
pprz_tp
uart1
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
__aeabi_i2d
__aeabi_d2uiz
the_acs_id
nav_utm_east0
the_acs
nav_utm_north0
acs_idx
utm_of_lla_f
nav_move_waypoint
waypoints
nav_utm_zone0
nav_goto_block
stateCalcPositionEnu_f
sqrtf
nav_circle_radians
state
dist2_to_wp
dist2_to_home
nav_block
nav_stage
nav_oval_count
telemetry_mode_Ap
telemetry_mode_Fbw
flight_altitude
nav_course
nav_shift
autopilot_flight_time
launch
nav_radius
pprz_mode
kill_throttle
gps_ubx_gps_ubx_ucenter_periodic_status
gps
