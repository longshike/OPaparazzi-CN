   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"ins.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.stateSetLocalUtmOrigin_f,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	stateSetLocalUtmOrigin_f:
  25              	.LFB55:
  26              		.file 1 "./state.h"
   1:./state.h     **** /*
   2:./state.h     ****  * Copyright (C) 2011-2012 Felix Ruess <felix.ruess@gmail.com>
   3:./state.h     ****  *
   4:./state.h     ****  * This file is part of paparazzi.
   5:./state.h     ****  *
   6:./state.h     ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./state.h     ****  * it under the terms of the GNU General Public License as published by
   8:./state.h     ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./state.h     ****  * any later version.
  10:./state.h     ****  *
  11:./state.h     ****  * paparazzi is distributed in the hope that it will be useful,
  12:./state.h     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./state.h     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./state.h     ****  * GNU General Public License for more details.
  15:./state.h     ****  *
  16:./state.h     ****  * You should have received a copy of the GNU General Public License
  17:./state.h     ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./state.h     ****  * <http://www.gnu.org/licenses/>.
  19:./state.h     ****  */
  20:./state.h     **** 
  21:./state.h     **** /**
  22:./state.h     ****  * @file state.h
  23:./state.h     ****  *
  24:./state.h     ****  * API to get/set the generic vehicle states.
  25:./state.h     ****  *
  26:./state.h     ****  * Also see the @ref state_interface "State Interface" page.
  27:./state.h     ****  *
  28:./state.h     ****  * @author Felix Ruess <felix.ruess@gmail.com>
  29:./state.h     ****  */
  30:./state.h     **** 
  31:./state.h     **** #ifndef STATE_H
  32:./state.h     **** #define STATE_H
  33:./state.h     **** 
  34:./state.h     **** #include "math/pprz_algebra_int.h"
  35:./state.h     **** #include "math/pprz_algebra_float.h"
  36:./state.h     **** #include "math/pprz_geodetic_int.h"
  37:./state.h     **** #include "math/pprz_geodetic_float.h"
  38:./state.h     **** #include "math/pprz_orientation_conversion.h"
  39:./state.h     **** 
  40:./state.h     **** #include "std.h"
  41:./state.h     **** #include <string.h>
  42:./state.h     **** 
  43:./state.h     **** /**
  44:./state.h     ****  * This general state interface holds all the most important vehicle states like
  45:./state.h     ****  * position, velocity, attitude, etc. It handles coordinate system and
  46:./state.h     ****  * fixed-/floating-point conversion on the fly when needed.
  47:./state.h     ****  *
  48:./state.h     ****  * You can set e.g. the position in any coordinate system you wish:
  49:./state.h     ****  * stateSetPositionNed_i() to set the position in fixed-point NED coordinates.
  50:./state.h     ****  * If you need to read the position somewhere else in a different representation,
  51:./state.h     ****  * call: stateGetPositionLla_f() and only then the LLA float position representation
  52:./state.h     ****  * is calculated on the fly and returned. It's also only calculated once,
  53:./state.h     ****  * until a new position is set which invalidates all the other representations again.
  54:./state.h     ****  */
  55:./state.h     **** 
  56:./state.h     **** /**
  57:./state.h     ****  * @defgroup state_interface State interface
  58:./state.h     ****  * @{
  59:./state.h     ****  */
  60:./state.h     **** 
  61:./state.h     **** /**
  62:./state.h     ****  * @defgroup state_position Position representations
  63:./state.h     ****  * @{
  64:./state.h     ****  */
  65:./state.h     **** #define POS_ECEF_I 0
  66:./state.h     **** #define POS_NED_I  1
  67:./state.h     **** #define POS_ENU_I  2
  68:./state.h     **** #define POS_LLA_I  3
  69:./state.h     **** #define POS_UTM_I  4
  70:./state.h     **** #define POS_ECEF_F 5
  71:./state.h     **** #define POS_NED_F  6
  72:./state.h     **** #define POS_ENU_F  7
  73:./state.h     **** #define POS_LLA_F  8
  74:./state.h     **** #define POS_UTM_F  9
  75:./state.h     **** #define POS_LOCAL_COORD ((1<<POS_NED_I)|(1<<POS_NED_F)|(1<<POS_ENU_I)|(1<<POS_ENU_F))
  76:./state.h     **** #define POS_GLOBAL_COORD ((1<<POS_ECEF_I)|(1<<POS_ECEF_F)|(1<<POS_LLA_I)|(1<<POS_LLA_F)|(1<<POS_UTM
  77:./state.h     **** /**@}*/
  78:./state.h     **** 
  79:./state.h     **** /**
  80:./state.h     ****  * @defgroup state_velocity Speed representations
  81:./state.h     ****  * @{
  82:./state.h     ****  */
  83:./state.h     **** #define SPEED_ECEF_I  0
  84:./state.h     **** #define SPEED_NED_I   1
  85:./state.h     **** #define SPEED_ENU_I   2
  86:./state.h     **** #define SPEED_HNORM_I 3
  87:./state.h     **** #define SPEED_HDIR_I  4
  88:./state.h     **** #define SPEED_ECEF_F  5
  89:./state.h     **** #define SPEED_NED_F   6
  90:./state.h     **** #define SPEED_ENU_F   7
  91:./state.h     **** #define SPEED_HNORM_F 8
  92:./state.h     **** #define SPEED_HDIR_F  9
  93:./state.h     **** #define SPEED_LOCAL_COORD ((1<<SPEED_NED_I)|(1<<SPEED_ENU_I)|(1<<SPEED_NED_F)|(1<<SPEED_ENU_F))
  94:./state.h     **** /**@}*/
  95:./state.h     **** 
  96:./state.h     **** /**
  97:./state.h     ****  * @defgroup state_acceleration Acceleration representations
  98:./state.h     ****  * @{
  99:./state.h     ****  */
 100:./state.h     **** #define ACCEL_ECEF_I 0
 101:./state.h     **** #define ACCEL_NED_I  1
 102:./state.h     **** #define ACCEL_ECEF_F 2
 103:./state.h     **** #define ACCEL_NED_F  3
 104:./state.h     **** /**@}*/
 105:./state.h     **** 
 106:./state.h     **** /**
 107:./state.h     ****  * @defgroup state_rate Angular rate representations
 108:./state.h     ****  * @{
 109:./state.h     ****  */
 110:./state.h     **** #define RATE_I 0
 111:./state.h     **** #define RATE_F 1
 112:./state.h     **** /**@}*/
 113:./state.h     **** 
 114:./state.h     **** /**
 115:./state.h     ****  * @defgroup state_wind_airspeed Wind- and airspeed representations
 116:./state.h     ****  * @{
 117:./state.h     ****  */
 118:./state.h     **** #define WINDSPEED_I 0
 119:./state.h     **** #define AIRSPEED_I  1
 120:./state.h     **** #define WINDSPEED_F 2
 121:./state.h     **** #define AIRSPEED_F  3
 122:./state.h     **** #define AOA_F       4
 123:./state.h     **** #define SIDESLIP_F  5
 124:./state.h     **** /**@}*/
 125:./state.h     **** 
 126:./state.h     **** 
 127:./state.h     **** /**
 128:./state.h     ****  * Structure holding vehicle state data.
 129:./state.h     ****  */
 130:./state.h     **** struct State {
 131:./state.h     **** 
 132:./state.h     ****   /** @addtogroup state_position
 133:./state.h     ****    *  @{ */
 134:./state.h     **** 
 135:./state.h     ****   /**
 136:./state.h     ****    * Holds the status bits for all position representations.
 137:./state.h     ****    * When the corresponding bit is set the representation
 138:./state.h     ****    * is already computed.
 139:./state.h     ****    */
 140:./state.h     ****   uint16_t pos_status;
 141:./state.h     **** 
 142:./state.h     ****   /**
 143:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 144:./state.h     ****    * Units: centimeters
 145:./state.h     ****    */
 146:./state.h     ****   struct EcefCoor_i ecef_pos_i;
 147:./state.h     **** 
 148:./state.h     ****   /**
 149:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 150:./state.h     ****    * Units lat,lon: degrees*1e7
 151:./state.h     ****    * Units alt: milimeters above reference ellipsoid
 152:./state.h     ****    */
 153:./state.h     ****   struct LlaCoor_i lla_pos_i;
 154:./state.h     **** 
 155:./state.h     ****   /**
 156:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 157:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 158:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 159:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 160:./state.h     ****    * (int version)
 161:./state.h     ****    */
 162:./state.h     ****   struct LtpDef_i ned_origin_i;
 163:./state.h     **** 
 164:./state.h     ****   /**
 165:./state.h     ****    * true if local int coordinate frame is initialsed
 166:./state.h     ****    */
 167:./state.h     ****   bool_t ned_initialized_i;
 168:./state.h     **** 
 169:./state.h     ****   /**
 170:./state.h     ****    * Position in North East Down coordinates.
 171:./state.h     ****    * with respect to ned_origin_i (flat earth)
 172:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 173:./state.h     ****    */
 174:./state.h     ****   struct NedCoor_i ned_pos_i;
 175:./state.h     **** 
 176:./state.h     ****   /**
 177:./state.h     ****    * Position in East North Up coordinates.
 178:./state.h     ****    * with respect to ned_origin_i (flat earth)
 179:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 180:./state.h     ****    */
 181:./state.h     ****   struct EnuCoor_i enu_pos_i;
 182:./state.h     **** 
 183:./state.h     ****   /**
 184:./state.h     ****    * Position in UTM coordinates.
 185:./state.h     ****    * Units x,y: meters.
 186:./state.h     ****    * Units z: meters above MSL
 187:./state.h     ****    */
 188:./state.h     ****   struct UtmCoor_f utm_pos_f;
 189:./state.h     **** 
 190:./state.h     ****   /**
 191:./state.h     ****    * Altitude above ground level.
 192:./state.h     ****    * Unit: meters
 193:./state.h     ****    */
 194:./state.h     ****   float alt_agl_f;
 195:./state.h     **** 
 196:./state.h     ****   /**
 197:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 198:./state.h     ****    * Units lat,lon: radians
 199:./state.h     ****    * Units alt: meters above reference ellipsoid
 200:./state.h     ****    */
 201:./state.h     ****   struct LlaCoor_f lla_pos_f;
 202:./state.h     **** 
 203:./state.h     ****   /**
 204:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 205:./state.h     ****    * Units: meters
 206:./state.h     ****    */
 207:./state.h     ****   struct EcefCoor_f ecef_pos_f;
 208:./state.h     **** 
 209:./state.h     ****   /**
 210:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 211:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 212:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 213:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 214:./state.h     ****    * (float version)
 215:./state.h     ****    */
 216:./state.h     ****   struct LtpDef_f ned_origin_f;
 217:./state.h     **** 
 218:./state.h     ****   /// True if local float coordinate frame is initialsed
 219:./state.h     ****   bool_t ned_initialized_f;
 220:./state.h     **** 
 221:./state.h     ****   /**
 222:./state.h     ****    * Definition of the origin of Utm coordinate system.
 223:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 224:./state.h     ****    * in UTM coordinates, used as a reference when ned_origin is not
 225:./state.h     ****    * initialized.
 226:./state.h     ****    * (float version)
 227:./state.h     ****    */
 228:./state.h     ****   struct UtmCoor_f utm_origin_f;
 229:./state.h     **** 
 230:./state.h     ****   /// True if utm origin (float) coordinate frame is initialsed
 231:./state.h     ****   bool_t utm_initialized_f;
 232:./state.h     **** 
 233:./state.h     ****   /**
 234:./state.h     ****    * Position in North East Down coordinates.
 235:./state.h     ****    * with respect to ned_origin_i (flat earth)
 236:./state.h     ****    * Units: meters
 237:./state.h     ****    */
 238:./state.h     ****   struct NedCoor_f ned_pos_f;
 239:./state.h     **** 
 240:./state.h     ****   /**
 241:./state.h     ****    * Position in East North Up coordinates.
 242:./state.h     ****    * with respect to ned_origin_i (flat earth)
 243:./state.h     ****    * Units: meters
 244:./state.h     ****    */
 245:./state.h     ****   struct EnuCoor_f enu_pos_f;
 246:./state.h     ****   /** @}*/
 247:./state.h     **** 
 248:./state.h     **** 
 249:./state.h     ****   /** @addtogroup state_velocity
 250:./state.h     ****    *  @{ */
 251:./state.h     ****   /**
 252:./state.h     ****    * Holds the status bits for all ground speed representations.
 253:./state.h     ****    * When the corresponding bit is one the representation
 254:./state.h     ****    * is already computed.
 255:./state.h     ****    */
 256:./state.h     ****   uint16_t speed_status;
 257:./state.h     **** 
 258:./state.h     ****   /**
 259:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 260:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 261:./state.h     ****    */
 262:./state.h     ****   struct EcefCoor_i ecef_speed_i;
 263:./state.h     **** 
 264:./state.h     ****   /**
 265:./state.h     ****    * Velocity in North East Down coordinates.
 266:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 267:./state.h     ****    */
 268:./state.h     ****   struct NedCoor_i ned_speed_i;
 269:./state.h     **** 
 270:./state.h     ****   /**
 271:./state.h     ****    * Velocity in East North Up coordinates.
 272:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 273:./state.h     ****    */
 274:./state.h     ****   struct EnuCoor_i enu_speed_i;
 275:./state.h     **** 
 276:./state.h     ****   /**
 277:./state.h     ****    * Norm of horizontal ground speed.
 278:./state.h     ****    * Unit: m/s in BFP with #INT32_SPEED_FRAC
 279:./state.h     ****    */
 280:./state.h     ****   uint32_t h_speed_norm_i;
 281:./state.h     **** 
 282:./state.h     ****   /**
 283:./state.h     ****    * Direction of horizontal ground speed.
 284:./state.h     ****    * Unit: rad in BFP with #INT32_ANGLE_FRAC
 285:./state.h     ****    * (clockwise, zero=north)
 286:./state.h     ****    */
 287:./state.h     ****   int32_t h_speed_dir_i;
 288:./state.h     **** 
 289:./state.h     ****   /**
 290:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 291:./state.h     ****    * Units: m/s
 292:./state.h     ****    */
 293:./state.h     ****   struct EcefCoor_f ecef_speed_f;
 294:./state.h     **** 
 295:./state.h     ****   /**
 296:./state.h     ****    * @brief speed in North East Down coordinates
 297:./state.h     ****    * @details Units: m/s */
 298:./state.h     ****   struct NedCoor_f ned_speed_f;
 299:./state.h     **** 
 300:./state.h     ****   /**
 301:./state.h     ****    * Velocity in East North Up coordinates.
 302:./state.h     ****    * Units: m/s
 303:./state.h     ****    */
 304:./state.h     ****   struct EnuCoor_f enu_speed_f;
 305:./state.h     **** 
 306:./state.h     ****   /**
 307:./state.h     ****    * Norm of horizontal ground speed.
 308:./state.h     ****    * Unit: m/s
 309:./state.h     ****    */
 310:./state.h     ****   float h_speed_norm_f;
 311:./state.h     **** 
 312:./state.h     ****   /**
 313:./state.h     ****    * Direction of horizontal ground speed.
 314:./state.h     ****    * Unit: rad (clockwise, zero=north)
 315:./state.h     ****    */
 316:./state.h     ****   float h_speed_dir_f;
 317:./state.h     ****   /** @}*/
 318:./state.h     **** 
 319:./state.h     **** 
 320:./state.h     ****   /** @addtogroup state_acceleration
 321:./state.h     ****    *  @{ */
 322:./state.h     ****   /**
 323:./state.h     ****    * Holds the status bits for all acceleration representations.
 324:./state.h     ****    * When the corresponding bit is one the representation
 325:./state.h     ****    * is already computed.
 326:./state.h     ****    */
 327:./state.h     ****   uint8_t accel_status;
 328:./state.h     **** 
 329:./state.h     ****   /**
 330:./state.h     ****    * Acceleration in North East Down coordinates.
 331:./state.h     ****    * Units: m/s^2 in BFP with #INT32_ACCEL_FRAC
 332:./state.h     ****    */
 333:./state.h     ****   struct NedCoor_i ned_accel_i;
 334:./state.h     **** 
 335:./state.h     ****   /**
 336:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 337:./state.h     ****    * Units: m/s^2 in BFP with INT32_ACCEL_FRAC
 338:./state.h     ****    */
 339:./state.h     ****   struct EcefCoor_i ecef_accel_i;
 340:./state.h     **** 
 341:./state.h     ****   /**
 342:./state.h     ****    * Acceleration in North East Down coordinates.
 343:./state.h     ****    * Units: m/s^2
 344:./state.h     ****    */
 345:./state.h     ****   struct NedCoor_f ned_accel_f;
 346:./state.h     **** 
 347:./state.h     ****   /**
 348:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 349:./state.h     ****    * Units: m/s^2
 350:./state.h     ****    */
 351:./state.h     ****   struct EcefCoor_f ecef_accel_f;
 352:./state.h     ****   /** @}*/
 353:./state.h     **** 
 354:./state.h     **** 
 355:./state.h     ****   /** @defgroup state_attitude Attitude representations
 356:./state.h     ****    */
 357:./state.h     ****   struct OrientationReps ned_to_body_orientation;
 358:./state.h     **** 
 359:./state.h     **** 
 360:./state.h     ****   /** @addtogroup state_rate
 361:./state.h     ****    *  @{ */
 362:./state.h     ****   /**
 363:./state.h     ****    * Holds the status bits for all angular rate representations.
 364:./state.h     ****    * When the corresponding bit is one the representation
 365:./state.h     ****    * is already computed.
 366:./state.h     ****    */
 367:./state.h     ****   uint8_t rate_status;
 368:./state.h     **** 
 369:./state.h     ****   /**
 370:./state.h     ****    * Angular rates in body frame.
 371:./state.h     ****    * Units: rad/s in BFP with #INT32_RATE_FRAC
 372:./state.h     ****    */
 373:./state.h     ****   struct Int32Rates  body_rates_i;
 374:./state.h     **** 
 375:./state.h     ****   /**
 376:./state.h     ****    * Angular rates in body frame.
 377:./state.h     ****    * Units: rad/s
 378:./state.h     ****    */
 379:./state.h     ****   struct FloatRates  body_rates_f;
 380:./state.h     ****   /** @}*/
 381:./state.h     **** 
 382:./state.h     **** 
 383:./state.h     ****   /** @addtogroup state_wind_airspeed
 384:./state.h     ****    *  @{ */
 385:./state.h     ****   /**
 386:./state.h     ****    * Holds the status bits for all wind- and airspeed representations.
 387:./state.h     ****    * When the corresponding bit is one the representation
 388:./state.h     ****    * is already computed.
 389:./state.h     ****    */
 390:./state.h     ****   uint8_t wind_air_status;
 391:./state.h     **** 
 392:./state.h     ****   /**
 393:./state.h     ****    * Horizontal windspeed in north/east.
 394:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 395:./state.h     ****    */
 396:./state.h     ****   struct Int32Vect2 h_windspeed_i;
 397:./state.h     **** 
 398:./state.h     ****   /**
 399:./state.h     ****    * Norm of horizontal ground speed.
 400:./state.h     ****    * @details Unit: m/s in BFP with #INT32_SPEED_FRAC
 401:./state.h     ****    */
 402:./state.h     ****   int32_t airspeed_i;
 403:./state.h     **** 
 404:./state.h     ****   /**
 405:./state.h     ****    * Horizontal windspeed.
 406:./state.h     ****    * Units: m/s with x=north, y=east
 407:./state.h     ****    */
 408:./state.h     ****   struct FloatVect2 h_windspeed_f;
 409:./state.h     **** 
 410:./state.h     ****   /**
 411:./state.h     ****    * Norm of relative air speed.
 412:./state.h     ****    * Unit: m/s
 413:./state.h     ****    */
 414:./state.h     ****   float airspeed_f;
 415:./state.h     **** 
 416:./state.h     ****   /**
 417:./state.h     ****    * Angle of attack
 418:./state.h     ****    * Unit: rad
 419:./state.h     ****    */
 420:./state.h     ****   float angle_of_attack_f;
 421:./state.h     **** 
 422:./state.h     ****   /**
 423:./state.h     ****    * Sideslip angle
 424:./state.h     ****    * Unit: rad
 425:./state.h     ****    */
 426:./state.h     ****   float sideslip_f;
 427:./state.h     **** 
 428:./state.h     ****   /** @}*/
 429:./state.h     **** 
 430:./state.h     **** };
 431:./state.h     **** 
 432:./state.h     **** extern struct State state;
 433:./state.h     **** 
 434:./state.h     **** extern void stateInit(void);
 435:./state.h     **** 
 436:./state.h     **** /** @addtogroup state_position
 437:./state.h     ****  *  @{ */
 438:./state.h     **** 
 439:./state.h     **** /// Set the local (flat earth) coordinate frame origin (int).
 440:./state.h     **** static inline void stateSetLocalOrigin_i(struct LtpDef_i *ltp_def)
 441:./state.h     **** {
 442:./state.h     ****   memcpy(&state.ned_origin_i, ltp_def, sizeof(struct LtpDef_i));
 443:./state.h     ****   /* convert to float */
 444:./state.h     ****   ECEF_FLOAT_OF_BFP(state.ned_origin_f.ecef, state.ned_origin_i.ecef);
 445:./state.h     ****   LLA_FLOAT_OF_BFP(state.ned_origin_f.lla, state.ned_origin_i.lla);
 446:./state.h     ****   HIGH_RES_RMAT_FLOAT_OF_BFP(state.ned_origin_f.ltp_of_ecef, state.ned_origin_i.ltp_of_ecef);
 447:./state.h     ****   state.ned_origin_f.hmsl = M_OF_MM(state.ned_origin_i.hmsl);
 448:./state.h     **** 
 449:./state.h     ****   /* clear bits for all local frame representations */
 450:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 451:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 452:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 453:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 454:./state.h     **** 
 455:./state.h     ****   state.ned_initialized_i = TRUE;
 456:./state.h     ****   state.ned_initialized_f = TRUE;
 457:./state.h     **** }
 458:./state.h     **** 
 459:./state.h     **** /// Set the local (flat earth) coordinate frame origin from UTM (float).
 460:./state.h     **** static inline void stateSetLocalUtmOrigin_f(struct UtmCoor_f *utm_def)
 461:./state.h     **** {
  27              		.loc 1 461 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 30B5     		push	{r4, r5, lr}
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
 462:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
  37              		.loc 1 462 0
  38 0002 104C     		ldr	r4, .L5
 461:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
  39              		.loc 1 461 0
  40 0004 0346     		mov	r3, r0
  41              		.loc 1 462 0
  42 0006 00F11005 		add	r5, r0, #16
  43              	.LVL1:
  44              	.L2:
  45 000a 1868     		ldr	r0, [r3]	@ unaligned
  46 000c 5968     		ldr	r1, [r3, #4]	@ unaligned
  47 000e 2246     		mov	r2, r4
  48 0010 03C2     		stmia	r2!, {r0, r1}
  49 0012 0833     		adds	r3, r3, #8
  50 0014 AB42     		cmp	r3, r5
  51 0016 1446     		mov	r4, r2
  52 0018 F7D1     		bne	.L2
 463:./state.h     ****   state.utm_initialized_f = TRUE;
  53              		.loc 1 463 0
  54 001a 0B4B     		ldr	r3, .L5+4
  55 001c 0122     		movs	r2, #1
  56 001e 83F8F820 		strb	r2, [r3, #248]
 464:./state.h     **** 
 465:./state.h     ****   /* clear bits for all local frame representations */
 466:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
  57              		.loc 1 466 0
  58 0022 1A88     		ldrh	r2, [r3]
  59 0024 22F0C602 		bic	r2, r2, #198
  60 0028 1A80     		strh	r2, [r3]	@ movhi
 467:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
  61              		.loc 1 467 0
  62 002a B3F81421 		ldrh	r2, [r3, #276]
  63 002e 22F0C602 		bic	r2, r2, #198
  64 0032 A3F81421 		strh	r2, [r3, #276]	@ movhi
 468:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 469:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
  65              		.loc 1 469 0
  66 0036 93F87021 		ldrb	r2, [r3, #368]	@ zero_extendqisi2
  67 003a 22F00A02 		bic	r2, r2, #10
  68 003e 83F87021 		strb	r2, [r3, #368]
  69 0042 30BD     		pop	{r4, r5, pc}
  70              	.LVL2:
  71              	.L6:
  72              		.align	2
  73              	.L5:
  74 0044 E8000000 		.word	state+232
  75 0048 00000000 		.word	state
  76              		.cfi_endproc
  77              	.LFE55:
  79              		.section	.text.ins_register_impl,"ax",%progbits
  80              		.align	1
  81              		.global	ins_register_impl
  82              		.thumb
  83              		.thumb_func
  85              	ins_register_impl:
  86              	.LFB164:
  87              		.file 2 "subsystems/ins.c"
   1:subsystems/ins.c **** /*
   2:subsystems/ins.c ****  * Copyright (C) 2008-2012 The Paparazzi Team
   3:subsystems/ins.c ****  *
   4:subsystems/ins.c ****  * This file is part of paparazzi.
   5:subsystems/ins.c ****  *
   6:subsystems/ins.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:subsystems/ins.c ****  * it under the terms of the GNU General Public License as published by
   8:subsystems/ins.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:subsystems/ins.c ****  * any later version.
  10:subsystems/ins.c ****  *
  11:subsystems/ins.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:subsystems/ins.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:subsystems/ins.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:subsystems/ins.c ****  * GNU General Public License for more details.
  15:subsystems/ins.c ****  *
  16:subsystems/ins.c ****  * You should have received a copy of the GNU General Public License
  17:subsystems/ins.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:subsystems/ins.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:subsystems/ins.c ****  * Boston, MA 02111-1307, USA.
  20:subsystems/ins.c ****  */
  21:subsystems/ins.c **** 
  22:subsystems/ins.c **** /**
  23:subsystems/ins.c ****  * @file subsystems/ins.c
  24:subsystems/ins.c ****  * Integrated Navigation System interface.
  25:subsystems/ins.c ****  */
  26:subsystems/ins.c **** 
  27:subsystems/ins.c **** 
  28:subsystems/ins.c **** #include "subsystems/ins.h"
  29:subsystems/ins.c **** 
  30:subsystems/ins.c **** #if USE_GPS
  31:subsystems/ins.c **** // for ins_reset_utm_zone
  32:subsystems/ins.c **** #include "subsystems/gps.h"
  33:subsystems/ins.c **** #include "state.h"
  34:subsystems/ins.c **** #endif
  35:subsystems/ins.c **** 
  36:subsystems/ins.c **** #ifndef DefaultInsImpl
  37:subsystems/ins.c **** #warning "DefaultInsImpl not set!"
  38:subsystems/ins.c **** #else
  39:subsystems/ins.c **** PRINT_CONFIG_VAR(DefaultInsImpl)
  40:subsystems/ins.c **** #endif
  41:subsystems/ins.c **** 
  42:subsystems/ins.c **** #define __DefaultInsRegister(_x) _x ## _register()
  43:subsystems/ins.c **** #define _DefaultInsRegister(_x) __DefaultInsRegister(_x)
  44:subsystems/ins.c **** #define DefaultInsRegister() _DefaultInsRegister(DefaultInsImpl)
  45:subsystems/ins.c **** 
  46:subsystems/ins.c **** /** Inertial Navigation System state */
  47:subsystems/ins.c **** struct Ins {
  48:subsystems/ins.c ****   InsInit init;
  49:subsystems/ins.c **** };
  50:subsystems/ins.c **** 
  51:subsystems/ins.c **** struct Ins ins;
  52:subsystems/ins.c **** 
  53:subsystems/ins.c **** void ins_register_impl(InsInit init)
  54:subsystems/ins.c **** {
  88              		.loc 2 54 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.LVL3:
  55:subsystems/ins.c ****   ins.init = init;
  94              		.loc 2 55 0
  95 0000 014B     		ldr	r3, .L8
  96 0002 1860     		str	r0, [r3]
  56:subsystems/ins.c **** 
  57:subsystems/ins.c ****   ins.init();
  97              		.loc 2 57 0
  98 0004 0047     		bx	r0	@ indirect register sibling call
  99              	.LVL4:
 100              	.L9:
 101 0006 00BF     		.align	2
 102              	.L8:
 103 0008 00000000 		.word	.LANCHOR0
 104              		.cfi_endproc
 105              	.LFE164:
 107              		.section	.text.ins_init,"ax",%progbits
 108              		.align	1
 109              		.global	ins_init
 110              		.thumb
 111              		.thumb_func
 113              	ins_init:
 114              	.LFB165:
  58:subsystems/ins.c **** }
  59:subsystems/ins.c **** 
  60:subsystems/ins.c **** void ins_init(void)
  61:subsystems/ins.c **** {
 115              		.loc 2 61 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
  62:subsystems/ins.c ****   ins.init = NULL;
 120              		.loc 2 62 0
 121 0000 024B     		ldr	r3, .L11
 122 0002 0022     		movs	r2, #0
 123 0004 1A60     		str	r2, [r3]
  63:subsystems/ins.c **** 
  64:subsystems/ins.c **** #ifdef DefaultInsImpl
  65:subsystems/ins.c ****   DefaultInsRegister();
 124              		.loc 2 65 0
 125 0006 FFF7FEBF 		b	ins_altf_register
 126              	.LVL5:
 127              	.L12:
 128 000a 00BF     		.align	2
 129              	.L11:
 130 000c 00000000 		.word	.LANCHOR0
 131              		.cfi_endproc
 132              	.LFE165:
 134              		.global	__aeabi_f2d
 135              		.global	__aeabi_dmul
 136              		.global	__aeabi_ddiv
 137              		.global	__aeabi_d2f
 138              		.global	__aeabi_i2d
 139              		.global	__aeabi_dadd
 140              		.global	__aeabi_d2uiz
 141              		.section	.text.ins_reset_local_origin,"ax",%progbits
 142              		.align	1
 143              		.weak	ins_reset_local_origin
 144              		.thumb
 145              		.thumb_func
 147              	ins_reset_local_origin:
 148              	.LFB166:
  66:subsystems/ins.c **** #endif
  67:subsystems/ins.c **** }
  68:subsystems/ins.c **** 
  69:subsystems/ins.c **** 
  70:subsystems/ins.c **** // weak functions, used if not explicitly provided by implementation
  71:subsystems/ins.c **** 
  72:subsystems/ins.c **** void WEAK ins_reset_local_origin(void)
  73:subsystems/ins.c **** {
 149              		.loc 2 73 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 32
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153 0000 30B5     		push	{r4, r5, lr}
 154              		.cfi_def_cfa_offset 12
 155              		.cfi_offset 4, -12
 156              		.cfi_offset 5, -8
 157              		.cfi_offset 14, -4
  74:subsystems/ins.c **** #if USE_GPS
  75:subsystems/ins.c ****   struct UtmCoor_f utm;
  76:subsystems/ins.c **** #ifdef GPS_USE_LATLONG
  77:subsystems/ins.c ****   /* Recompute UTM coordinates in this zone */
  78:subsystems/ins.c ****   struct LlaCoor_f lla;
  79:subsystems/ins.c ****   LLA_FLOAT_OF_BFP(lla, gps.lla_pos);
 158              		.loc 2 79 0
 159 0002 374C     		ldr	r4, .L14+16
 160 0004 D4ED037A 		flds	s15, [r4, #12]	@ int
  73:subsystems/ins.c **** #if USE_GPS
 161              		.loc 2 73 0
 162 0008 2DED028B 		fstmfdd	sp!, {d8}
 163              		.cfi_def_cfa_offset 20
 164              		.cfi_offset 80, -20
 165              		.cfi_offset 81, -16
 166              		.loc 2 79 0
 167 000c F8EEE77A 		fsitos	s15, s15
  73:subsystems/ins.c **** #if USE_GPS
 168              		.loc 2 73 0
 169 0010 89B0     		sub	sp, sp, #36
 170              		.cfi_def_cfa_offset 56
 171              		.loc 2 79 0
 172 0012 17EE900A 		fmrs	r0, s15
 173 0016 FFF7FEFF 		bl	__aeabi_f2d
 174              	.LVL6:
 175 001a 2DA3     		adr	r3, .L14
 176 001c D3E90023 		ldrd	r2, [r3]
 177 0020 FFF7FEFF 		bl	__aeabi_dmul
 178              	.LVL7:
 179 0024 2CA3     		adr	r3, .L14+8
 180 0026 D3E90023 		ldrd	r2, [r3]
 181 002a FFF7FEFF 		bl	__aeabi_ddiv
 182              	.LVL8:
 183 002e FFF7FEFF 		bl	__aeabi_d2f
 184              	.LVL9:
 185 0032 2569     		ldr	r5, [r4, #16]
 186 0034 0190     		str	r0, [sp, #4]	@ float
 187 0036 07EE905A 		fmsr	s15, r5	@ int
 188 003a F8EEE77A 		fsitos	s15, s15
 189 003e 9FED298A 		flds	s16, .L14+20
 190 0042 17EE900A 		fmrs	r0, s15
 191 0046 FFF7FEFF 		bl	__aeabi_f2d
 192              	.LVL10:
 193 004a 21A3     		adr	r3, .L14
 194 004c D3E90023 		ldrd	r2, [r3]
 195 0050 FFF7FEFF 		bl	__aeabi_dmul
 196              	.LVL11:
 197 0054 20A3     		adr	r3, .L14+8
 198 0056 D3E90023 		ldrd	r2, [r3]
 199 005a FFF7FEFF 		bl	__aeabi_ddiv
 200              	.LVL12:
 201 005e FFF7FEFF 		bl	__aeabi_d2f
 202              	.LVL13:
 203 0062 D4ED057A 		flds	s15, [r4, #20]	@ int
 204 0066 0290     		str	r0, [sp, #8]	@ float
 205 0068 F8EEE77A 		fsitos	s15, s15
  80:subsystems/ins.c ****   utm.zone = (gps.lla_pos.lon / 1e7 + 180) / 6 + 1;
 206              		.loc 2 80 0
 207 006c 2846     		mov	r0, r5
  79:subsystems/ins.c ****   utm.zone = (gps.lla_pos.lon / 1e7 + 180) / 6 + 1;
 208              		.loc 2 79 0
 209 006e C7EE887A 		fdivs	s15, s15, s16
 210 0072 CDED037A 		fsts	s15, [sp, #12]
 211              		.loc 2 80 0
 212 0076 FFF7FEFF 		bl	__aeabi_i2d
 213              	.LVL14:
 214 007a 17A3     		adr	r3, .L14+8
 215 007c D3E90023 		ldrd	r2, [r3]
 216 0080 FFF7FEFF 		bl	__aeabi_ddiv
 217              	.LVL15:
 218 0084 0022     		movs	r2, #0
 219 0086 184B     		ldr	r3, .L14+24
 220 0088 FFF7FEFF 		bl	__aeabi_dadd
 221              	.LVL16:
 222 008c 0022     		movs	r2, #0
 223 008e 174B     		ldr	r3, .L14+28
 224 0090 FFF7FEFF 		bl	__aeabi_ddiv
 225              	.LVL17:
 226 0094 0022     		movs	r2, #0
 227 0096 164B     		ldr	r3, .L14+32
 228 0098 FFF7FEFF 		bl	__aeabi_dadd
 229              	.LVL18:
 230 009c FFF7FEFF 		bl	__aeabi_d2uiz
 231              	.LVL19:
  81:subsystems/ins.c ****   utm_of_lla_f(&utm, &lla);
 232              		.loc 2 81 0
 233 00a0 01A9     		add	r1, sp, #4
  80:subsystems/ins.c ****   utm.zone = (gps.lla_pos.lon / 1e7 + 180) / 6 + 1;
 234              		.loc 2 80 0
 235 00a2 8DF81C00 		strb	r0, [sp, #28]
 236              		.loc 2 81 0
 237 00a6 04A8     		add	r0, sp, #16
 238 00a8 FFF7FEFF 		bl	utm_of_lla_f
 239              	.LVL20:
  82:subsystems/ins.c **** #else
  83:subsystems/ins.c ****   utm.zone = gps.utm_pos.zone;
  84:subsystems/ins.c ****   utm.east = gps.utm_pos.east / 100.0f;
  85:subsystems/ins.c ****   utm.north = gps.utm_pos.north / 100.0f;
  86:subsystems/ins.c **** #endif
  87:subsystems/ins.c ****   // ground_alt
  88:subsystems/ins.c ****   utm.alt = gps.hmsl  / 1000.0f;
 240              		.loc 2 88 0
 241 00ac D4ED0A7A 		flds	s15, [r4, #40]	@ int
 242 00b0 F8EEE77A 		fsitos	s15, s15
  89:subsystems/ins.c **** 
  90:subsystems/ins.c ****   // reset state UTM ref
  91:subsystems/ins.c ****   stateSetLocalUtmOrigin_f(&utm);
 243              		.loc 2 91 0
 244 00b4 04A8     		add	r0, sp, #16
  88:subsystems/ins.c **** 
 245              		.loc 2 88 0
 246 00b6 C7EE887A 		fdivs	s15, s15, s16
 247 00ba CDED067A 		fsts	s15, [sp, #24]
 248              		.loc 2 91 0
 249 00be FFF7FEFF 		bl	stateSetLocalUtmOrigin_f
 250              	.LVL21:
  92:subsystems/ins.c **** #endif
  93:subsystems/ins.c **** }
 251              		.loc 2 93 0
 252 00c2 09B0     		add	sp, sp, #36
 253              		.cfi_def_cfa_offset 20
 254              		@ sp needed
 255 00c4 BDEC028B 		fldmfdd	sp!, {d8}
 256              		.cfi_restore 80
 257              		.cfi_restore 81
 258              		.cfi_def_cfa_offset 12
 259 00c8 30BD     		pop	{r4, r5, pc}
 260              	.L15:
 261 00ca 00BFAFF3 		.align	3
 261      0080
 262              	.L14:
 263 00d0 399D52A2 		.word	-1571644103
 264 00d4 46DF913F 		.word	1066524486
 265 00d8 00000000 		.word	0
 266 00dc D0126341 		.word	1097011920
 267 00e0 00000000 		.word	gps
 268 00e4 00007A44 		.word	1148846080
 269 00e8 00806640 		.word	1080459264
 270 00ec 00001840 		.word	1075314688
 271 00f0 0000F03F 		.word	1072693248
 272              		.cfi_endproc
 273              	.LFE166:
 275              		.section	.text.ins_reset_altitude_ref,"ax",%progbits
 276              		.align	1
 277              		.weak	ins_reset_altitude_ref
 278              		.thumb
 279              		.thumb_func
 281              	ins_reset_altitude_ref:
 282              	.LFB167:
  94:subsystems/ins.c **** 
  95:subsystems/ins.c **** void WEAK ins_reset_altitude_ref(void) {}
 283              		.loc 2 95 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 288 0000 7047     		bx	lr
 289              		.cfi_endproc
 290              	.LFE167:
 292              		.section	.text.ins_reset_utm_zone,"ax",%progbits
 293              		.align	1
 294              		.weak	ins_reset_utm_zone
 295              		.thumb
 296              		.thumb_func
 298              	ins_reset_utm_zone:
 299              	.LFB168:
  96:subsystems/ins.c **** 
  97:subsystems/ins.c **** #if USE_GPS
  98:subsystems/ins.c **** void WEAK ins_reset_utm_zone(struct UtmCoor_f *utm)
  99:subsystems/ins.c **** {
 300              		.loc 2 99 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 16
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              	.LVL22:
 305              		.loc 2 99 0
 306 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 307              		.cfi_def_cfa_offset 24
 308              		.cfi_offset 4, -8
 309              		.cfi_offset 14, -4
 310              		.loc 2 99 0
 311 0002 0446     		mov	r4, r0
 100:subsystems/ins.c ****   struct LlaCoor_f lla0;
 101:subsystems/ins.c ****   lla_of_utm_f(&lla0, utm);
 312              		.loc 2 101 0
 313 0004 2146     		mov	r1, r4
 314 0006 01A8     		add	r0, sp, #4
 315              	.LVL23:
 316 0008 FFF7FEFF 		bl	lla_of_utm_f
 317              	.LVL24:
 102:subsystems/ins.c **** #ifdef GPS_USE_LATLONG
 103:subsystems/ins.c ****   utm->zone = (gps.lla_pos.lon / 1e7 + 180) / 6 + 1;
 318              		.loc 2 103 0
 319 000c 124B     		ldr	r3, .L18+8
 320 000e 1869     		ldr	r0, [r3, #16]
 321 0010 FFF7FEFF 		bl	__aeabi_i2d
 322              	.LVL25:
 323 0014 0EA3     		adr	r3, .L18
 324 0016 D3E90023 		ldrd	r2, [r3]
 325 001a FFF7FEFF 		bl	__aeabi_ddiv
 326              	.LVL26:
 327 001e 0022     		movs	r2, #0
 328 0020 0E4B     		ldr	r3, .L18+12
 329 0022 FFF7FEFF 		bl	__aeabi_dadd
 330              	.LVL27:
 331 0026 0022     		movs	r2, #0
 332 0028 0D4B     		ldr	r3, .L18+16
 333 002a FFF7FEFF 		bl	__aeabi_ddiv
 334              	.LVL28:
 335 002e 0022     		movs	r2, #0
 336 0030 0C4B     		ldr	r3, .L18+20
 337 0032 FFF7FEFF 		bl	__aeabi_dadd
 338              	.LVL29:
 339 0036 FFF7FEFF 		bl	__aeabi_d2uiz
 340              	.LVL30:
 104:subsystems/ins.c **** #else
 105:subsystems/ins.c ****   utm->zone = gps.utm_pos.zone;
 106:subsystems/ins.c **** #endif
 107:subsystems/ins.c ****   utm_of_lla_f(utm, &lla0);
 341              		.loc 2 107 0
 342 003a 01A9     		add	r1, sp, #4
 103:subsystems/ins.c **** #else
 343              		.loc 2 103 0
 344 003c 2073     		strb	r0, [r4, #12]
 345              		.loc 2 107 0
 346 003e 2046     		mov	r0, r4
 347 0040 FFF7FEFF 		bl	utm_of_lla_f
 348              	.LVL31:
 108:subsystems/ins.c **** 
 109:subsystems/ins.c ****   stateSetLocalUtmOrigin_f(utm);
 349              		.loc 2 109 0
 350 0044 2046     		mov	r0, r4
 351 0046 FFF7FEFF 		bl	stateSetLocalUtmOrigin_f
 352              	.LVL32:
 110:subsystems/ins.c **** }
 353              		.loc 2 110 0
 354 004a 04B0     		add	sp, sp, #16
 355              		.cfi_def_cfa_offset 8
 356              		@ sp needed
 357 004c 10BD     		pop	{r4, pc}
 358              	.LVL33:
 359              	.L19:
 360 004e 00BF     		.align	3
 361              	.L18:
 362 0050 00000000 		.word	0
 363 0054 D0126341 		.word	1097011920
 364 0058 00000000 		.word	gps
 365 005c 00806640 		.word	1080459264
 366 0060 00001840 		.word	1075314688
 367 0064 0000F03F 		.word	1072693248
 368              		.cfi_endproc
 369              	.LFE168:
 371              		.global	ins
 372              		.section	.bss.ins,"aw",%nobits
 373              		.align	2
 374              		.set	.LANCHOR0,. + 0
 377              	ins:
 378 0000 00000000 		.space	4
 379              		.text
 380              	.Letext0:
 381              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 382              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 383              		.file 5 "/home/dino/paparazzi/sw/include/std.h"
 384              		.file 6 "./math/pprz_algebra_int.h"
 385              		.file 7 "./math/pprz_geodetic_int.h"
 386              		.file 8 "./math/pprz_algebra_float.h"
 387              		.file 9 "./math/pprz_geodetic_float.h"
 388              		.file 10 "./math/pprz_orientation_conversion.h"
 389              		.file 11 "./subsystems/ins.h"
 390              		.file 12 "./mcu_periph/sys_time.h"
 391              		.file 13 "./mcu_periph/link_device.h"
 392              		.file 14 "./mcu_periph/uart.h"
 393              		.file 15 "./subsystems/gps/gps_ubx.h"
 394              		.file 16 "./subsystems/gps.h"
 395              		.file 17 "../ext/libopencm3/include/libopencm3/stm32/f4/rcc.h"
 396              		.file 18 "./subsystems/ins/ins_alt_float.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ins.c
     /tmp/ccpLJcDx.s:20     .text.stateSetLocalUtmOrigin_f:00000000 $t
     /tmp/ccpLJcDx.s:24     .text.stateSetLocalUtmOrigin_f:00000000 stateSetLocalUtmOrigin_f
     /tmp/ccpLJcDx.s:74     .text.stateSetLocalUtmOrigin_f:00000044 $d
     /tmp/ccpLJcDx.s:80     .text.ins_register_impl:00000000 $t
     /tmp/ccpLJcDx.s:85     .text.ins_register_impl:00000000 ins_register_impl
     /tmp/ccpLJcDx.s:103    .text.ins_register_impl:00000008 $d
     /tmp/ccpLJcDx.s:108    .text.ins_init:00000000 $t
     /tmp/ccpLJcDx.s:113    .text.ins_init:00000000 ins_init
     /tmp/ccpLJcDx.s:130    .text.ins_init:0000000c $d
     /tmp/ccpLJcDx.s:142    .text.ins_reset_local_origin:00000000 $t
     /tmp/ccpLJcDx.s:147    .text.ins_reset_local_origin:00000000 ins_reset_local_origin
     /tmp/ccpLJcDx.s:263    .text.ins_reset_local_origin:000000d0 $d
     /tmp/ccpLJcDx.s:276    .text.ins_reset_altitude_ref:00000000 $t
     /tmp/ccpLJcDx.s:281    .text.ins_reset_altitude_ref:00000000 ins_reset_altitude_ref
     /tmp/ccpLJcDx.s:293    .text.ins_reset_utm_zone:00000000 $t
     /tmp/ccpLJcDx.s:298    .text.ins_reset_utm_zone:00000000 ins_reset_utm_zone
     /tmp/ccpLJcDx.s:362    .text.ins_reset_utm_zone:00000050 $d
     /tmp/ccpLJcDx.s:377    .bss.ins:00000000 ins
     /tmp/ccpLJcDx.s:373    .bss.ins:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.7f506cdee5614e5fae524d20989ad8c8
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.stddef.h.263.49e44f5ee9cdd8820580fc4aa239e32a
                           .group:00000000 wm4.inttypes.h.23.a096771aacee9aba4b33c2d04aacc9b1
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4._ansi.h.13.1b5575dc7921a4c0cff7dbaa2f33e670
                           .group:00000000 wm4.stddef.h.39.2b75ea897b59bf67f50e970d678806e4
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.math.h.35.ad242c9287d2217c7d2035216e5d04ca
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.pprz_geodetic.h.35.f7fdb5d11659b92d11c7ce67b6317005
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_trig_int.h.28.b756be608c9d9f3092a41321446e5fa2
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.pprz_algebra_int.h.68.04ac162ae1e1d94f716d0bb402062624
                           .group:00000000 wm4.pprz_geodetic_int.h.127.8e737bed5ba4468e470311184b1fca7f
                           .group:00000000 wm4.pprz_algebra_float.h.98.bb035bcbfa66bb186e7ea81143fd64bc
                           .group:00000000 wm4.pprz_orientation_conversion.h.69.5cce798fefad8bb761767fd414e61db5
                           .group:00000000 wm4.state.h.65.b18954aacb3801ec3e27b4e857d620d3
                           .group:00000000 wm4.apogee_1.0.h.2.34ab7bb688056eecb54e2e3ffff48ca6
                           .group:00000000 wm4.sys_time.h.40.92f532b5cea824e0ec5ea845e7275d34
                           .group:00000000 wm4.common.h.21.22efaac882611267214d0a36f6f15e74
                           .group:00000000 wm4.memorymap.h.21.0c01d18fc5814f65c6ceb1822d4030fa
                           .group:00000000 wm4.memorymap.h.28.85f6f5de65b1d4294c70f79052a0b8c0
                           .group:00000000 wm4.gpio_common_all.h.37.fedbbcb9179f773c905aa3c3e4b7dbdd
                           .group:00000000 wm4.gpio_common_f234.h.48.ee30692f386eaf6801df27cae93943b1
                           .group:00000000 wm4.gpio_common_f24.h.48.4e4be5e3ebe26aee10d604e2d0fecde8
                           .group:00000000 wm4.rcc.h.46.c4bbaa886b7ca1bd1829424ae12e70af
                           .group:00000000 wm4.systick.h.44.34e759e1f218a187b07e9a617cb1d556
                           .group:00000000 wm4.sys_time.h.213.4ee43452c5934214134db56488f53299
                           .group:00000000 wm4.uart_arch.h.30.cb8e70feae0b6afe250750f6c1439671
                           .group:00000000 wm4.uart.h.35.4345324d45fae43faace58e743d48e42
                           .group:00000000 wm4.gps_ubx.h.36.d4183b0b154441c99ce352aae50967b5
                           .group:00000000 wm4.gps.h.41.79d1c69e44dd427f855100ff8e932fbe

UNDEFINED SYMBOLS
state
ins_altf_register
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_i2d
__aeabi_dadd
__aeabi_d2uiz
utm_of_lla_f
gps
lla_of_utm_f
