   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"guidance_v.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.v_ctl_init,"ax",%progbits
  20              		.align	1
  21              		.global	v_ctl_init
  22              		.thumb
  23              		.thumb_func
  25              	v_ctl_init:
  26              	.LFB140:
  27              		.file 1 "firmwares/fixedwing/guidance/guidance_v.c"
   1:firmwares/fixedwing/guidance/guidance_v.c **** /*
   2:firmwares/fixedwing/guidance/guidance_v.c ****  * Copyright (C) 2006  Pascal Brisset, Antoine Drouin, Michel Gorraz
   3:firmwares/fixedwing/guidance/guidance_v.c ****  *
   4:firmwares/fixedwing/guidance/guidance_v.c ****  * This file is part of paparazzi.
   5:firmwares/fixedwing/guidance/guidance_v.c ****  *
   6:firmwares/fixedwing/guidance/guidance_v.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:firmwares/fixedwing/guidance/guidance_v.c ****  * it under the terms of the GNU General Public License as published by
   8:firmwares/fixedwing/guidance/guidance_v.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:firmwares/fixedwing/guidance/guidance_v.c ****  * any later version.
  10:firmwares/fixedwing/guidance/guidance_v.c ****  *
  11:firmwares/fixedwing/guidance/guidance_v.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:firmwares/fixedwing/guidance/guidance_v.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:firmwares/fixedwing/guidance/guidance_v.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:firmwares/fixedwing/guidance/guidance_v.c ****  * GNU General Public License for more details.
  15:firmwares/fixedwing/guidance/guidance_v.c ****  *
  16:firmwares/fixedwing/guidance/guidance_v.c ****  * You should have received a copy of the GNU General Public License
  17:firmwares/fixedwing/guidance/guidance_v.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:firmwares/fixedwing/guidance/guidance_v.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:firmwares/fixedwing/guidance/guidance_v.c ****  * Boston, MA 02111-1307, USA.
  20:firmwares/fixedwing/guidance/guidance_v.c ****  */
  21:firmwares/fixedwing/guidance/guidance_v.c **** 
  22:firmwares/fixedwing/guidance/guidance_v.c **** /**
  23:firmwares/fixedwing/guidance/guidance_v.c ****  *  @file firmwares/fixedwing/guidance/guidance_v.c
  24:firmwares/fixedwing/guidance/guidance_v.c ****  *  Vertical control for fixed wing vehicles.
  25:firmwares/fixedwing/guidance/guidance_v.c ****  *
  26:firmwares/fixedwing/guidance/guidance_v.c ****  */
  27:firmwares/fixedwing/guidance/guidance_v.c **** 
  28:firmwares/fixedwing/guidance/guidance_v.c **** #include "firmwares/fixedwing/guidance/guidance_v.h"
  29:firmwares/fixedwing/guidance/guidance_v.c **** #include "state.h"
  30:firmwares/fixedwing/guidance/guidance_v.c **** #include "firmwares/fixedwing/nav.h"
  31:firmwares/fixedwing/guidance/guidance_v.c **** #include "generated/airframe.h"
  32:firmwares/fixedwing/guidance/guidance_v.c **** #include "firmwares/fixedwing/autopilot.h"
  33:firmwares/fixedwing/guidance/guidance_v.c **** 
  34:firmwares/fixedwing/guidance/guidance_v.c **** /* mode */
  35:firmwares/fixedwing/guidance/guidance_v.c **** uint8_t v_ctl_mode;
  36:firmwares/fixedwing/guidance/guidance_v.c **** 
  37:firmwares/fixedwing/guidance/guidance_v.c **** /* outer loop */
  38:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_altitude_setpoint;
  39:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_altitude_pre_climb;
  40:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_altitude_pgain;
  41:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_altitude_error;
  42:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_altitude_pre_climb_correction;
  43:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_altitude_max_climb;
  44:firmwares/fixedwing/guidance/guidance_v.c **** 
  45:firmwares/fixedwing/guidance/guidance_v.c **** /* inner loop */
  46:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_climb_setpoint;
  47:firmwares/fixedwing/guidance/guidance_v.c **** uint8_t v_ctl_climb_mode;
  48:firmwares/fixedwing/guidance/guidance_v.c **** uint8_t v_ctl_auto_throttle_submode;
  49:firmwares/fixedwing/guidance/guidance_v.c **** 
  50:firmwares/fixedwing/guidance/guidance_v.c **** #ifndef V_CTL_AUTO_THROTTLE_DGAIN
  51:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_AUTO_THROTTLE_DGAIN 0.
  52:firmwares/fixedwing/guidance/guidance_v.c **** #endif
  53:firmwares/fixedwing/guidance/guidance_v.c **** 
  54:firmwares/fixedwing/guidance/guidance_v.c **** /* "auto throttle" inner loop parameters */
  55:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_cruise_throttle;
  56:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_nominal_cruise_throttle;
  57:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_min_cruise_throttle;
  58:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_max_cruise_throttle;
  59:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_climb_throttle_increment;
  60:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_pgain;
  61:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_igain;
  62:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_dgain;
  63:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_sum_err;
  64:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_AUTO_THROTTLE_MAX_SUM_ERR 150
  65:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_pitch_of_vz_pgain;
  66:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_throttle_pitch_of_vz_dgain;
  67:firmwares/fixedwing/guidance/guidance_v.c **** 
  68:firmwares/fixedwing/guidance/guidance_v.c **** #ifndef V_CTL_AUTO_THROTTLE_PITCH_OF_VZ_DGAIN
  69:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_AUTO_THROTTLE_PITCH_OF_VZ_DGAIN 0.
  70:firmwares/fixedwing/guidance/guidance_v.c **** #endif
  71:firmwares/fixedwing/guidance/guidance_v.c **** 
  72:firmwares/fixedwing/guidance/guidance_v.c **** /* agressive tuning */
  73:firmwares/fixedwing/guidance/guidance_v.c **** #ifdef TUNE_AGRESSIVE_CLIMB
  74:firmwares/fixedwing/guidance/guidance_v.c **** float agr_climb_throttle;
  75:firmwares/fixedwing/guidance/guidance_v.c **** float agr_climb_pitch;
  76:firmwares/fixedwing/guidance/guidance_v.c **** float agr_climb_nav_ratio;
  77:firmwares/fixedwing/guidance/guidance_v.c **** float agr_descent_throttle;
  78:firmwares/fixedwing/guidance/guidance_v.c **** float agr_descent_pitch;
  79:firmwares/fixedwing/guidance/guidance_v.c **** float agr_descent_nav_ratio;
  80:firmwares/fixedwing/guidance/guidance_v.c **** #endif
  81:firmwares/fixedwing/guidance/guidance_v.c **** 
  82:firmwares/fixedwing/guidance/guidance_v.c **** /* "auto pitch" inner loop parameters */
  83:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_pitch_pgain;
  84:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_pitch_igain;
  85:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_pitch_sum_err;
  86:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_AUTO_PITCH_MAX_SUM_ERR 100
  87:firmwares/fixedwing/guidance/guidance_v.c **** 
  88:firmwares/fixedwing/guidance/guidance_v.c **** pprz_t v_ctl_throttle_setpoint;
  89:firmwares/fixedwing/guidance/guidance_v.c **** pprz_t v_ctl_throttle_slewed;
  90:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_pitch_setpoint;
  91:firmwares/fixedwing/guidance/guidance_v.c **** #ifndef V_CTL_PITCH_TRIM
  92:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_PITCH_TRIM 0.
  93:firmwares/fixedwing/guidance/guidance_v.c **** #endif
  94:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_pitch_trim;
  95:firmwares/fixedwing/guidance/guidance_v.c **** 
  96:firmwares/fixedwing/guidance/guidance_v.c **** inline static void v_ctl_climb_auto_throttle_loop(void);
  97:firmwares/fixedwing/guidance/guidance_v.c **** #ifdef V_CTL_AUTO_PITCH_PGAIN
  98:firmwares/fixedwing/guidance/guidance_v.c **** inline static void v_ctl_climb_auto_pitch_loop(void);
  99:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 100:firmwares/fixedwing/guidance/guidance_v.c **** 
 101:firmwares/fixedwing/guidance/guidance_v.c **** #if USE_AIRSPEED
 102:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_airspeed_setpoint;
 103:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_airspeed_controlled;
 104:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_airspeed_pgain;
 105:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_airspeed_igain;
 106:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_airspeed_sum_err;
 107:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_groundspeed_setpoint;
 108:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_groundspeed_pgain;
 109:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_groundspeed_igain;
 110:firmwares/fixedwing/guidance/guidance_v.c **** float v_ctl_auto_groundspeed_sum_err;
 111:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_AUTO_AIRSPEED_MAX_SUM_ERR 200
 112:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_AUTO_GROUNDSPEED_MAX_SUM_ERR 100
 113:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_AUTO_CLIMB_LIMIT 0.5/4.0 // m/s/s
 114:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_AUTO_AGR_CLIMB_GAIN 2.0 // altitude gain multiplier while in aggressive climb mode
 115:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 116:firmwares/fixedwing/guidance/guidance_v.c **** 
 117:firmwares/fixedwing/guidance/guidance_v.c **** #ifndef V_CTL_ALTITUDE_PRE_CLIMB_CORRECTION
 118:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_ALTITUDE_PRE_CLIMB_CORRECTION 1.0f
 119:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 120:firmwares/fixedwing/guidance/guidance_v.c **** 
 121:firmwares/fixedwing/guidance/guidance_v.c **** 
 122:firmwares/fixedwing/guidance/guidance_v.c **** void v_ctl_init(void)
 123:firmwares/fixedwing/guidance/guidance_v.c **** {
  28              		.loc 1 123 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
 124:firmwares/fixedwing/guidance/guidance_v.c ****   /* mode */
 125:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_mode = V_CTL_MODE_MANUAL;
  32              		.loc 1 125 0
  33 0000 1F4B     		ldr	r3, .L2
 126:firmwares/fixedwing/guidance/guidance_v.c **** 
 127:firmwares/fixedwing/guidance/guidance_v.c ****   /* outer loop */
 128:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_altitude_setpoint = 0.;
  34              		.loc 1 128 0
  35 0002 2049     		ldr	r1, .L2+4
 129:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_altitude_pre_climb = 0.;
 130:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_altitude_pgain = V_CTL_ALTITUDE_PGAIN;
  36              		.loc 1 130 0
  37 0004 2048     		ldr	r0, .L2+8
 125:firmwares/fixedwing/guidance/guidance_v.c **** 
  38              		.loc 1 125 0
  39 0006 0022     		movs	r2, #0
 123:firmwares/fixedwing/guidance/guidance_v.c ****   /* mode */
  40              		.loc 1 123 0
  41 0008 10B5     		push	{r4, lr}
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 4, -8
  44              		.cfi_offset 14, -4
 125:firmwares/fixedwing/guidance/guidance_v.c **** 
  45              		.loc 1 125 0
  46 000a 1A70     		strb	r2, [r3]
 128:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_altitude_pre_climb = 0.;
  47              		.loc 1 128 0
  48 000c 0023     		movs	r3, #0
  49 000e 0B60     		str	r3, [r1]	@ float
 129:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_altitude_pgain = V_CTL_ALTITUDE_PGAIN;
  50              		.loc 1 129 0
  51 0010 1E49     		ldr	r1, .L2+12
  52 0012 0B60     		str	r3, [r1]	@ float
  53              		.loc 1 130 0
  54 0014 1E49     		ldr	r1, .L2+16
  55 0016 0860     		str	r0, [r1]	@ float
 131:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_altitude_error = 0.;
  56              		.loc 1 131 0
  57 0018 1E49     		ldr	r1, .L2+20
  58 001a 0B60     		str	r3, [r1]	@ float
 132:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_altitude_pre_climb_correction = V_CTL_ALTITUDE_PRE_CLIMB_CORRECTION;
  59              		.loc 1 132 0
  60 001c 1E49     		ldr	r1, .L2+24
  61 001e 4FF07E50 		mov	r0, #1065353216
  62 0022 0860     		str	r0, [r1]	@ float
 133:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_altitude_max_climb = V_CTL_ALTITUDE_MAX_CLIMB;
  63              		.loc 1 133 0
  64 0024 1D49     		ldr	r1, .L2+28
  65 0026 1E48     		ldr	r0, .L2+32
  66 0028 0860     		str	r0, [r1]	@ float
 134:firmwares/fixedwing/guidance/guidance_v.c **** 
 135:firmwares/fixedwing/guidance/guidance_v.c ****   /* inner loops */
 136:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_setpoint = 0.;
  67              		.loc 1 136 0
  68 002a 1E49     		ldr	r1, .L2+36
 137:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_mode = V_CTL_CLIMB_MODE_AUTO_THROTTLE;
 138:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_submode = V_CTL_AUTO_THROTTLE_STANDARD;
 139:firmwares/fixedwing/guidance/guidance_v.c **** 
 140:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_pitch_setpoint = 0.;
 141:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_pitch_trim = V_CTL_PITCH_TRIM;
 142:firmwares/fixedwing/guidance/guidance_v.c **** 
 143:firmwares/fixedwing/guidance/guidance_v.c ****   /* "auto throttle" inner loop parameters */
 144:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_nominal_cruise_throttle = V_CTL_AUTO_THROTTLE_NOMINAL_CRUISE_THROTTLE;
  69              		.loc 1 144 0
  70 002c 1E48     		ldr	r0, .L2+40
 136:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_mode = V_CTL_CLIMB_MODE_AUTO_THROTTLE;
  71              		.loc 1 136 0
  72 002e 0B60     		str	r3, [r1]	@ float
 137:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_mode = V_CTL_CLIMB_MODE_AUTO_THROTTLE;
  73              		.loc 1 137 0
  74 0030 1E49     		ldr	r1, .L2+44
  75 0032 0A70     		strb	r2, [r1]
 138:firmwares/fixedwing/guidance/guidance_v.c **** 
  76              		.loc 1 138 0
  77 0034 1E49     		ldr	r1, .L2+48
  78 0036 0A70     		strb	r2, [r1]
 140:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_pitch_trim = V_CTL_PITCH_TRIM;
  79              		.loc 1 140 0
  80 0038 1E49     		ldr	r1, .L2+52
  81 003a 0B60     		str	r3, [r1]	@ float
 141:firmwares/fixedwing/guidance/guidance_v.c **** 
  82              		.loc 1 141 0
  83 003c 1E49     		ldr	r1, .L2+56
  84 003e 0B60     		str	r3, [r1]	@ float
  85              		.loc 1 144 0
  86 0040 1E49     		ldr	r1, .L2+60
  87 0042 0160     		str	r1, [r0]	@ float
 145:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_min_cruise_throttle = V_CTL_AUTO_THROTTLE_MIN_CRUISE_THROTTLE;
  88              		.loc 1 145 0
  89 0044 1E48     		ldr	r0, .L2+64
  90 0046 4FF07A54 		mov	r4, #1048576000
  91 004a 0460     		str	r4, [r0]	@ float
 146:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_max_cruise_throttle = V_CTL_AUTO_THROTTLE_MAX_CRUISE_THROTTLE;
  92              		.loc 1 146 0
  93 004c 1D48     		ldr	r0, .L2+68
  94 004e 1E4C     		ldr	r4, .L2+72
  95 0050 0460     		str	r4, [r0]	@ float
 147:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_cruise_throttle = v_ctl_auto_throttle_nominal_cruise_throttle;
  96              		.loc 1 147 0
  97 0052 1E48     		ldr	r0, .L2+76
  98 0054 0160     		str	r1, [r0]	@ float
 148:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_climb_throttle_increment = V_CTL_AUTO_THROTTLE_CLIMB_THROTTLE_INCREMENT;
  99              		.loc 1 148 0
 100 0056 1E49     		ldr	r1, .L2+80
 101 0058 1E48     		ldr	r0, .L2+84
 102 005a 0860     		str	r0, [r1]	@ float
 149:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_pgain = V_CTL_AUTO_THROTTLE_PGAIN;
 103              		.loc 1 149 0
 104 005c 1E49     		ldr	r1, .L2+88
 105 005e 1F48     		ldr	r0, .L2+92
 106 0060 0860     		str	r0, [r1]	@ float
 150:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_igain = V_CTL_AUTO_THROTTLE_IGAIN;
 107              		.loc 1 150 0
 108 0062 1F49     		ldr	r1, .L2+96
 109 0064 1F48     		ldr	r0, .L2+100
 110 0066 0860     		str	r0, [r1]	@ float
 151:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_dgain = V_CTL_AUTO_THROTTLE_DGAIN;
 111              		.loc 1 151 0
 112 0068 1F49     		ldr	r1, .L2+104
 152:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_sum_err = 0.;
 153:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_pitch_of_vz_pgain = V_CTL_AUTO_THROTTLE_PITCH_OF_VZ_PGAIN;
 113              		.loc 1 153 0
 114 006a 2048     		ldr	r0, .L2+108
 151:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_dgain = V_CTL_AUTO_THROTTLE_DGAIN;
 115              		.loc 1 151 0
 116 006c 0B60     		str	r3, [r1]	@ float
 152:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_sum_err = 0.;
 117              		.loc 1 152 0
 118 006e 2049     		ldr	r1, .L2+112
 119 0070 0B60     		str	r3, [r1]	@ float
 120              		.loc 1 153 0
 121 0072 2049     		ldr	r1, .L2+116
 122 0074 0860     		str	r0, [r1]	@ float
 154:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_throttle_pitch_of_vz_dgain = V_CTL_AUTO_THROTTLE_PITCH_OF_VZ_DGAIN;
 123              		.loc 1 154 0
 124 0076 2049     		ldr	r1, .L2+120
 125 0078 0B60     		str	r3, [r1]	@ float
 155:firmwares/fixedwing/guidance/guidance_v.c **** 
 156:firmwares/fixedwing/guidance/guidance_v.c **** #ifdef V_CTL_AUTO_PITCH_PGAIN
 157:firmwares/fixedwing/guidance/guidance_v.c ****   /* "auto pitch" inner loop parameters */
 158:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_pitch_pgain = V_CTL_AUTO_PITCH_PGAIN;
 159:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_pitch_igain = V_CTL_AUTO_PITCH_IGAIN;
 160:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_pitch_sum_err = 0.;
 161:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 162:firmwares/fixedwing/guidance/guidance_v.c **** 
 163:firmwares/fixedwing/guidance/guidance_v.c **** #if USE_AIRSPEED
 164:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_airspeed_setpoint = V_CTL_AUTO_AIRSPEED_SETPOINT;
 165:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_airspeed_controlled = V_CTL_AUTO_AIRSPEED_SETPOINT;
 166:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_airspeed_pgain = V_CTL_AUTO_AIRSPEED_PGAIN;
 167:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_airspeed_igain = V_CTL_AUTO_AIRSPEED_IGAIN;
 168:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_airspeed_sum_err = 0.;
 169:firmwares/fixedwing/guidance/guidance_v.c **** 
 170:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_groundspeed_setpoint = V_CTL_AUTO_GROUNDSPEED_SETPOINT;
 171:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_groundspeed_pgain = V_CTL_AUTO_GROUNDSPEED_PGAIN;
 172:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_groundspeed_igain = V_CTL_AUTO_GROUNDSPEED_IGAIN;
 173:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_groundspeed_sum_err = 0.;
 174:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 175:firmwares/fixedwing/guidance/guidance_v.c **** 
 176:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_throttle_setpoint = 0;
 126              		.loc 1 176 0
 127 007a 204B     		ldr	r3, .L2+124
 128 007c 1A80     		strh	r2, [r3]	@ movhi
 129 007e 10BD     		pop	{r4, pc}
 130              	.L3:
 131              		.align	2
 132              	.L2:
 133 0080 00000000 		.word	.LANCHOR0
 134 0084 00000000 		.word	.LANCHOR1
 135 0088 EC51383E 		.word	1043878380
 136 008c 00000000 		.word	.LANCHOR2
 137 0090 00000000 		.word	.LANCHOR3
 138 0094 00000000 		.word	.LANCHOR4
 139 0098 00000000 		.word	.LANCHOR5
 140 009c 00000000 		.word	.LANCHOR6
 141 00a0 0000A040 		.word	1084227584
 142 00a4 00000000 		.word	.LANCHOR7
 143 00a8 00000000 		.word	.LANCHOR12
 144 00ac 00000000 		.word	.LANCHOR8
 145 00b0 00000000 		.word	.LANCHOR9
 146 00b4 00000000 		.word	.LANCHOR10
 147 00b8 00000000 		.word	.LANCHOR11
 148 00bc 6666E63E 		.word	1055286886
 149 00c0 00000000 		.word	.LANCHOR13
 150 00c4 00000000 		.word	.LANCHOR14
 151 00c8 9A99593F 		.word	1062836634
 152 00cc 00000000 		.word	.LANCHOR15
 153 00d0 00000000 		.word	.LANCHOR16
 154 00d4 9A99193E 		.word	1041865114
 155 00d8 00000000 		.word	.LANCHOR17
 156 00dc 0AD7233C 		.word	1008981770
 157 00e0 00000000 		.word	.LANCHOR18
 158 00e4 CDCCCC3D 		.word	1036831949
 159 00e8 00000000 		.word	.LANCHOR19
 160 00ec CDCC4C3D 		.word	1028443341
 161 00f0 00000000 		.word	.LANCHOR20
 162 00f4 00000000 		.word	.LANCHOR21
 163 00f8 00000000 		.word	.LANCHOR22
 164 00fc 00000000 		.word	.LANCHOR23
 165              		.cfi_endproc
 166              	.LFE140:
 168              		.section	.text.v_ctl_altitude_loop,"ax",%progbits
 169              		.align	1
 170              		.global	v_ctl_altitude_loop
 171              		.thumb
 172              		.thumb_func
 174              	v_ctl_altitude_loop:
 175              	.LFB141:
 177:firmwares/fixedwing/guidance/guidance_v.c **** 
 178:firmwares/fixedwing/guidance/guidance_v.c ****   /*agressive tuning*/
 179:firmwares/fixedwing/guidance/guidance_v.c **** #ifdef TUNE_AGRESSIVE_CLIMB
 180:firmwares/fixedwing/guidance/guidance_v.c ****   agr_climb_throttle = AGR_CLIMB_THROTTLE;
 181:firmwares/fixedwing/guidance/guidance_v.c **** #undef   AGR_CLIMB_THROTTLE
 182:firmwares/fixedwing/guidance/guidance_v.c **** #define AGR_CLIMB_THROTTLE agr_climb_throttle
 183:firmwares/fixedwing/guidance/guidance_v.c ****   agr_climb_pitch = AGR_CLIMB_PITCH;
 184:firmwares/fixedwing/guidance/guidance_v.c **** #undef   AGR_CLIMB_PITCH
 185:firmwares/fixedwing/guidance/guidance_v.c **** #define   AGR_CLIMB_PITCH agr_climb_pitch
 186:firmwares/fixedwing/guidance/guidance_v.c ****   agr_climb_nav_ratio = AGR_CLIMB_NAV_RATIO;
 187:firmwares/fixedwing/guidance/guidance_v.c **** #undef   AGR_CLIMB_NAV_RATIO
 188:firmwares/fixedwing/guidance/guidance_v.c **** #define   AGR_CLIMB_NAV_RATIO agr_climb_nav_ratio
 189:firmwares/fixedwing/guidance/guidance_v.c ****   agr_descent_throttle = AGR_DESCENT_THROTTLE;
 190:firmwares/fixedwing/guidance/guidance_v.c **** #undef   AGR_DESCENT_THROTTLE
 191:firmwares/fixedwing/guidance/guidance_v.c **** #define   AGR_DESCENT_THROTTLE agr_descent_throttle
 192:firmwares/fixedwing/guidance/guidance_v.c ****   agr_descent_pitch = AGR_DESCENT_PITCH;
 193:firmwares/fixedwing/guidance/guidance_v.c **** #undef   AGR_DESCENT_PITCH
 194:firmwares/fixedwing/guidance/guidance_v.c **** #define   AGR_DESCENT_PITCH agr_descent_pitch
 195:firmwares/fixedwing/guidance/guidance_v.c ****   agr_descent_nav_ratio = AGR_DESCENT_NAV_RATIO;
 196:firmwares/fixedwing/guidance/guidance_v.c **** #undef   AGR_DESCENT_NAV_RATIO
 197:firmwares/fixedwing/guidance/guidance_v.c **** #define   AGR_DESCENT_NAV_RATIO agr_descent_nav_ratio
 198:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 199:firmwares/fixedwing/guidance/guidance_v.c **** }
 200:firmwares/fixedwing/guidance/guidance_v.c **** 
 201:firmwares/fixedwing/guidance/guidance_v.c **** /**
 202:firmwares/fixedwing/guidance/guidance_v.c ****  * outer loop
 203:firmwares/fixedwing/guidance/guidance_v.c ****  * \brief Computes v_ctl_climb_setpoint and sets v_ctl_auto_throttle_submode
 204:firmwares/fixedwing/guidance/guidance_v.c ****  */
 205:firmwares/fixedwing/guidance/guidance_v.c **** void v_ctl_altitude_loop(void)
 206:firmwares/fixedwing/guidance/guidance_v.c **** {
 176              		.loc 1 206 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              	.LVL0:
 181 0000 10B5     		push	{r4, lr}
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 4, -8
 184              		.cfi_offset 14, -4
 207:firmwares/fixedwing/guidance/guidance_v.c ****   float altitude_pgain_boost = 1.0;
 208:firmwares/fixedwing/guidance/guidance_v.c **** 
 209:firmwares/fixedwing/guidance/guidance_v.c **** #if USE_AIRSPEED && defined(AGR_CLIMB)
 210:firmwares/fixedwing/guidance/guidance_v.c ****   // Aggressive climb mode (boost gain of altitude loop)
 211:firmwares/fixedwing/guidance/guidance_v.c ****   if (v_ctl_climb_mode == V_CTL_CLIMB_MODE_AUTO_THROTTLE) {
 212:firmwares/fixedwing/guidance/guidance_v.c ****     float dist = fabs(v_ctl_altitude_error);
 213:firmwares/fixedwing/guidance/guidance_v.c ****     altitude_pgain_boost = 1.0 + (V_CTL_AUTO_AGR_CLIMB_GAIN - 1.0) * (dist - AGR_BLEND_END) /
 214:firmwares/fixedwing/guidance/guidance_v.c ****                            (AGR_BLEND_START - AGR_BLEND_END);
 215:firmwares/fixedwing/guidance/guidance_v.c ****     Bound(altitude_pgain_boost, 1.0, V_CTL_AUTO_AGR_CLIMB_GAIN);
 216:firmwares/fixedwing/guidance/guidance_v.c ****   }
 217:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 218:firmwares/fixedwing/guidance/guidance_v.c **** 
 219:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_altitude_error = v_ctl_altitude_setpoint - stateGetPositionUtm_f()->alt;
 185              		.loc 1 219 0
 186 0002 274B     		ldr	r3, .L25
 206:firmwares/fixedwing/guidance/guidance_v.c ****   float altitude_pgain_boost = 1.0;
 187              		.loc 1 206 0
 188 0004 2DED028B 		fstmfdd	sp!, {d8}
 189              		.cfi_def_cfa_offset 16
 190              		.cfi_offset 80, -16
 191              		.cfi_offset 81, -12
 192              		.loc 1 219 0
 193 0008 93ED008A 		flds	s16, [r3]
 194              	.LBB5:
 195              	.LBB6:
 196              		.file 2 "./state.h"
   1:./state.h     **** /*
   2:./state.h     ****  * Copyright (C) 2011-2012 Felix Ruess <felix.ruess@gmail.com>
   3:./state.h     ****  *
   4:./state.h     ****  * This file is part of paparazzi.
   5:./state.h     ****  *
   6:./state.h     ****  * paparazzi is free software; you can redistribute it and/or modify
   7:./state.h     ****  * it under the terms of the GNU General Public License as published by
   8:./state.h     ****  * the Free Software Foundation; either version 2, or (at your option)
   9:./state.h     ****  * any later version.
  10:./state.h     ****  *
  11:./state.h     ****  * paparazzi is distributed in the hope that it will be useful,
  12:./state.h     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./state.h     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./state.h     ****  * GNU General Public License for more details.
  15:./state.h     ****  *
  16:./state.h     ****  * You should have received a copy of the GNU General Public License
  17:./state.h     ****  * along with paparazzi; see the file COPYING.  If not, see
  18:./state.h     ****  * <http://www.gnu.org/licenses/>.
  19:./state.h     ****  */
  20:./state.h     **** 
  21:./state.h     **** /**
  22:./state.h     ****  * @file state.h
  23:./state.h     ****  *
  24:./state.h     ****  * API to get/set the generic vehicle states.
  25:./state.h     ****  *
  26:./state.h     ****  * Also see the @ref state_interface "State Interface" page.
  27:./state.h     ****  *
  28:./state.h     ****  * @author Felix Ruess <felix.ruess@gmail.com>
  29:./state.h     ****  */
  30:./state.h     **** 
  31:./state.h     **** #ifndef STATE_H
  32:./state.h     **** #define STATE_H
  33:./state.h     **** 
  34:./state.h     **** #include "math/pprz_algebra_int.h"
  35:./state.h     **** #include "math/pprz_algebra_float.h"
  36:./state.h     **** #include "math/pprz_geodetic_int.h"
  37:./state.h     **** #include "math/pprz_geodetic_float.h"
  38:./state.h     **** #include "math/pprz_orientation_conversion.h"
  39:./state.h     **** 
  40:./state.h     **** #include "std.h"
  41:./state.h     **** #include <string.h>
  42:./state.h     **** 
  43:./state.h     **** /**
  44:./state.h     ****  * This general state interface holds all the most important vehicle states like
  45:./state.h     ****  * position, velocity, attitude, etc. It handles coordinate system and
  46:./state.h     ****  * fixed-/floating-point conversion on the fly when needed.
  47:./state.h     ****  *
  48:./state.h     ****  * You can set e.g. the position in any coordinate system you wish:
  49:./state.h     ****  * stateSetPositionNed_i() to set the position in fixed-point NED coordinates.
  50:./state.h     ****  * If you need to read the position somewhere else in a different representation,
  51:./state.h     ****  * call: stateGetPositionLla_f() and only then the LLA float position representation
  52:./state.h     ****  * is calculated on the fly and returned. It's also only calculated once,
  53:./state.h     ****  * until a new position is set which invalidates all the other representations again.
  54:./state.h     ****  */
  55:./state.h     **** 
  56:./state.h     **** /**
  57:./state.h     ****  * @defgroup state_interface State interface
  58:./state.h     ****  * @{
  59:./state.h     ****  */
  60:./state.h     **** 
  61:./state.h     **** /**
  62:./state.h     ****  * @defgroup state_position Position representations
  63:./state.h     ****  * @{
  64:./state.h     ****  */
  65:./state.h     **** #define POS_ECEF_I 0
  66:./state.h     **** #define POS_NED_I  1
  67:./state.h     **** #define POS_ENU_I  2
  68:./state.h     **** #define POS_LLA_I  3
  69:./state.h     **** #define POS_UTM_I  4
  70:./state.h     **** #define POS_ECEF_F 5
  71:./state.h     **** #define POS_NED_F  6
  72:./state.h     **** #define POS_ENU_F  7
  73:./state.h     **** #define POS_LLA_F  8
  74:./state.h     **** #define POS_UTM_F  9
  75:./state.h     **** #define POS_LOCAL_COORD ((1<<POS_NED_I)|(1<<POS_NED_F)|(1<<POS_ENU_I)|(1<<POS_ENU_F))
  76:./state.h     **** #define POS_GLOBAL_COORD ((1<<POS_ECEF_I)|(1<<POS_ECEF_F)|(1<<POS_LLA_I)|(1<<POS_LLA_F)|(1<<POS_UTM
  77:./state.h     **** /**@}*/
  78:./state.h     **** 
  79:./state.h     **** /**
  80:./state.h     ****  * @defgroup state_velocity Speed representations
  81:./state.h     ****  * @{
  82:./state.h     ****  */
  83:./state.h     **** #define SPEED_ECEF_I  0
  84:./state.h     **** #define SPEED_NED_I   1
  85:./state.h     **** #define SPEED_ENU_I   2
  86:./state.h     **** #define SPEED_HNORM_I 3
  87:./state.h     **** #define SPEED_HDIR_I  4
  88:./state.h     **** #define SPEED_ECEF_F  5
  89:./state.h     **** #define SPEED_NED_F   6
  90:./state.h     **** #define SPEED_ENU_F   7
  91:./state.h     **** #define SPEED_HNORM_F 8
  92:./state.h     **** #define SPEED_HDIR_F  9
  93:./state.h     **** #define SPEED_LOCAL_COORD ((1<<SPEED_NED_I)|(1<<SPEED_ENU_I)|(1<<SPEED_NED_F)|(1<<SPEED_ENU_F))
  94:./state.h     **** /**@}*/
  95:./state.h     **** 
  96:./state.h     **** /**
  97:./state.h     ****  * @defgroup state_acceleration Acceleration representations
  98:./state.h     ****  * @{
  99:./state.h     ****  */
 100:./state.h     **** #define ACCEL_ECEF_I 0
 101:./state.h     **** #define ACCEL_NED_I  1
 102:./state.h     **** #define ACCEL_ECEF_F 2
 103:./state.h     **** #define ACCEL_NED_F  3
 104:./state.h     **** /**@}*/
 105:./state.h     **** 
 106:./state.h     **** /**
 107:./state.h     ****  * @defgroup state_rate Angular rate representations
 108:./state.h     ****  * @{
 109:./state.h     ****  */
 110:./state.h     **** #define RATE_I 0
 111:./state.h     **** #define RATE_F 1
 112:./state.h     **** /**@}*/
 113:./state.h     **** 
 114:./state.h     **** /**
 115:./state.h     ****  * @defgroup state_wind_airspeed Wind- and airspeed representations
 116:./state.h     ****  * @{
 117:./state.h     ****  */
 118:./state.h     **** #define WINDSPEED_I 0
 119:./state.h     **** #define AIRSPEED_I  1
 120:./state.h     **** #define WINDSPEED_F 2
 121:./state.h     **** #define AIRSPEED_F  3
 122:./state.h     **** #define AOA_F       4
 123:./state.h     **** #define SIDESLIP_F  5
 124:./state.h     **** /**@}*/
 125:./state.h     **** 
 126:./state.h     **** 
 127:./state.h     **** /**
 128:./state.h     ****  * Structure holding vehicle state data.
 129:./state.h     ****  */
 130:./state.h     **** struct State {
 131:./state.h     **** 
 132:./state.h     ****   /** @addtogroup state_position
 133:./state.h     ****    *  @{ */
 134:./state.h     **** 
 135:./state.h     ****   /**
 136:./state.h     ****    * Holds the status bits for all position representations.
 137:./state.h     ****    * When the corresponding bit is set the representation
 138:./state.h     ****    * is already computed.
 139:./state.h     ****    */
 140:./state.h     ****   uint16_t pos_status;
 141:./state.h     **** 
 142:./state.h     ****   /**
 143:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 144:./state.h     ****    * Units: centimeters
 145:./state.h     ****    */
 146:./state.h     ****   struct EcefCoor_i ecef_pos_i;
 147:./state.h     **** 
 148:./state.h     ****   /**
 149:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 150:./state.h     ****    * Units lat,lon: degrees*1e7
 151:./state.h     ****    * Units alt: milimeters above reference ellipsoid
 152:./state.h     ****    */
 153:./state.h     ****   struct LlaCoor_i lla_pos_i;
 154:./state.h     **** 
 155:./state.h     ****   /**
 156:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 157:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 158:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 159:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 160:./state.h     ****    * (int version)
 161:./state.h     ****    */
 162:./state.h     ****   struct LtpDef_i ned_origin_i;
 163:./state.h     **** 
 164:./state.h     ****   /**
 165:./state.h     ****    * true if local int coordinate frame is initialsed
 166:./state.h     ****    */
 167:./state.h     ****   bool_t ned_initialized_i;
 168:./state.h     **** 
 169:./state.h     ****   /**
 170:./state.h     ****    * Position in North East Down coordinates.
 171:./state.h     ****    * with respect to ned_origin_i (flat earth)
 172:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 173:./state.h     ****    */
 174:./state.h     ****   struct NedCoor_i ned_pos_i;
 175:./state.h     **** 
 176:./state.h     ****   /**
 177:./state.h     ****    * Position in East North Up coordinates.
 178:./state.h     ****    * with respect to ned_origin_i (flat earth)
 179:./state.h     ****    * Units: m in BFP with INT32_POS_FRAC
 180:./state.h     ****    */
 181:./state.h     ****   struct EnuCoor_i enu_pos_i;
 182:./state.h     **** 
 183:./state.h     ****   /**
 184:./state.h     ****    * Position in UTM coordinates.
 185:./state.h     ****    * Units x,y: meters.
 186:./state.h     ****    * Units z: meters above MSL
 187:./state.h     ****    */
 188:./state.h     ****   struct UtmCoor_f utm_pos_f;
 189:./state.h     **** 
 190:./state.h     ****   /**
 191:./state.h     ****    * Altitude above ground level.
 192:./state.h     ****    * Unit: meters
 193:./state.h     ****    */
 194:./state.h     ****   float alt_agl_f;
 195:./state.h     **** 
 196:./state.h     ****   /**
 197:./state.h     ****    * Position in Latitude, Longitude and Altitude.
 198:./state.h     ****    * Units lat,lon: radians
 199:./state.h     ****    * Units alt: meters above reference ellipsoid
 200:./state.h     ****    */
 201:./state.h     ****   struct LlaCoor_f lla_pos_f;
 202:./state.h     **** 
 203:./state.h     ****   /**
 204:./state.h     ****    * Position in EarthCenteredEarthFixed coordinates.
 205:./state.h     ****    * Units: meters
 206:./state.h     ****    */
 207:./state.h     ****   struct EcefCoor_f ecef_pos_f;
 208:./state.h     **** 
 209:./state.h     ****   /**
 210:./state.h     ****    * Definition of the local (flat earth) coordinate system.
 211:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 212:./state.h     ****    * in ECEF (EarthCenteredEarthFixed) and LLA (LatitudeLongitudeAlt)
 213:./state.h     ****    * coordinates and the roation matrix from ECEF to local frame.
 214:./state.h     ****    * (float version)
 215:./state.h     ****    */
 216:./state.h     ****   struct LtpDef_f ned_origin_f;
 217:./state.h     **** 
 218:./state.h     ****   /// True if local float coordinate frame is initialsed
 219:./state.h     ****   bool_t ned_initialized_f;
 220:./state.h     **** 
 221:./state.h     ****   /**
 222:./state.h     ****    * Definition of the origin of Utm coordinate system.
 223:./state.h     ****    * Defines the origin of the local NorthEastDown coordinate system
 224:./state.h     ****    * in UTM coordinates, used as a reference when ned_origin is not
 225:./state.h     ****    * initialized.
 226:./state.h     ****    * (float version)
 227:./state.h     ****    */
 228:./state.h     ****   struct UtmCoor_f utm_origin_f;
 229:./state.h     **** 
 230:./state.h     ****   /// True if utm origin (float) coordinate frame is initialsed
 231:./state.h     ****   bool_t utm_initialized_f;
 232:./state.h     **** 
 233:./state.h     ****   /**
 234:./state.h     ****    * Position in North East Down coordinates.
 235:./state.h     ****    * with respect to ned_origin_i (flat earth)
 236:./state.h     ****    * Units: meters
 237:./state.h     ****    */
 238:./state.h     ****   struct NedCoor_f ned_pos_f;
 239:./state.h     **** 
 240:./state.h     ****   /**
 241:./state.h     ****    * Position in East North Up coordinates.
 242:./state.h     ****    * with respect to ned_origin_i (flat earth)
 243:./state.h     ****    * Units: meters
 244:./state.h     ****    */
 245:./state.h     ****   struct EnuCoor_f enu_pos_f;
 246:./state.h     ****   /** @}*/
 247:./state.h     **** 
 248:./state.h     **** 
 249:./state.h     ****   /** @addtogroup state_velocity
 250:./state.h     ****    *  @{ */
 251:./state.h     ****   /**
 252:./state.h     ****    * Holds the status bits for all ground speed representations.
 253:./state.h     ****    * When the corresponding bit is one the representation
 254:./state.h     ****    * is already computed.
 255:./state.h     ****    */
 256:./state.h     ****   uint16_t speed_status;
 257:./state.h     **** 
 258:./state.h     ****   /**
 259:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 260:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 261:./state.h     ****    */
 262:./state.h     ****   struct EcefCoor_i ecef_speed_i;
 263:./state.h     **** 
 264:./state.h     ****   /**
 265:./state.h     ****    * Velocity in North East Down coordinates.
 266:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 267:./state.h     ****    */
 268:./state.h     ****   struct NedCoor_i ned_speed_i;
 269:./state.h     **** 
 270:./state.h     ****   /**
 271:./state.h     ****    * Velocity in East North Up coordinates.
 272:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 273:./state.h     ****    */
 274:./state.h     ****   struct EnuCoor_i enu_speed_i;
 275:./state.h     **** 
 276:./state.h     ****   /**
 277:./state.h     ****    * Norm of horizontal ground speed.
 278:./state.h     ****    * Unit: m/s in BFP with #INT32_SPEED_FRAC
 279:./state.h     ****    */
 280:./state.h     ****   uint32_t h_speed_norm_i;
 281:./state.h     **** 
 282:./state.h     ****   /**
 283:./state.h     ****    * Direction of horizontal ground speed.
 284:./state.h     ****    * Unit: rad in BFP with #INT32_ANGLE_FRAC
 285:./state.h     ****    * (clockwise, zero=north)
 286:./state.h     ****    */
 287:./state.h     ****   int32_t h_speed_dir_i;
 288:./state.h     **** 
 289:./state.h     ****   /**
 290:./state.h     ****    * Velocity in EarthCenteredEarthFixed coordinates.
 291:./state.h     ****    * Units: m/s
 292:./state.h     ****    */
 293:./state.h     ****   struct EcefCoor_f ecef_speed_f;
 294:./state.h     **** 
 295:./state.h     ****   /**
 296:./state.h     ****    * @brief speed in North East Down coordinates
 297:./state.h     ****    * @details Units: m/s */
 298:./state.h     ****   struct NedCoor_f ned_speed_f;
 299:./state.h     **** 
 300:./state.h     ****   /**
 301:./state.h     ****    * Velocity in East North Up coordinates.
 302:./state.h     ****    * Units: m/s
 303:./state.h     ****    */
 304:./state.h     ****   struct EnuCoor_f enu_speed_f;
 305:./state.h     **** 
 306:./state.h     ****   /**
 307:./state.h     ****    * Norm of horizontal ground speed.
 308:./state.h     ****    * Unit: m/s
 309:./state.h     ****    */
 310:./state.h     ****   float h_speed_norm_f;
 311:./state.h     **** 
 312:./state.h     ****   /**
 313:./state.h     ****    * Direction of horizontal ground speed.
 314:./state.h     ****    * Unit: rad (clockwise, zero=north)
 315:./state.h     ****    */
 316:./state.h     ****   float h_speed_dir_f;
 317:./state.h     ****   /** @}*/
 318:./state.h     **** 
 319:./state.h     **** 
 320:./state.h     ****   /** @addtogroup state_acceleration
 321:./state.h     ****    *  @{ */
 322:./state.h     ****   /**
 323:./state.h     ****    * Holds the status bits for all acceleration representations.
 324:./state.h     ****    * When the corresponding bit is one the representation
 325:./state.h     ****    * is already computed.
 326:./state.h     ****    */
 327:./state.h     ****   uint8_t accel_status;
 328:./state.h     **** 
 329:./state.h     ****   /**
 330:./state.h     ****    * Acceleration in North East Down coordinates.
 331:./state.h     ****    * Units: m/s^2 in BFP with #INT32_ACCEL_FRAC
 332:./state.h     ****    */
 333:./state.h     ****   struct NedCoor_i ned_accel_i;
 334:./state.h     **** 
 335:./state.h     ****   /**
 336:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 337:./state.h     ****    * Units: m/s^2 in BFP with INT32_ACCEL_FRAC
 338:./state.h     ****    */
 339:./state.h     ****   struct EcefCoor_i ecef_accel_i;
 340:./state.h     **** 
 341:./state.h     ****   /**
 342:./state.h     ****    * Acceleration in North East Down coordinates.
 343:./state.h     ****    * Units: m/s^2
 344:./state.h     ****    */
 345:./state.h     ****   struct NedCoor_f ned_accel_f;
 346:./state.h     **** 
 347:./state.h     ****   /**
 348:./state.h     ****    * Acceleration in EarthCenteredEarthFixed coordinates.
 349:./state.h     ****    * Units: m/s^2
 350:./state.h     ****    */
 351:./state.h     ****   struct EcefCoor_f ecef_accel_f;
 352:./state.h     ****   /** @}*/
 353:./state.h     **** 
 354:./state.h     **** 
 355:./state.h     ****   /** @defgroup state_attitude Attitude representations
 356:./state.h     ****    */
 357:./state.h     ****   struct OrientationReps ned_to_body_orientation;
 358:./state.h     **** 
 359:./state.h     **** 
 360:./state.h     ****   /** @addtogroup state_rate
 361:./state.h     ****    *  @{ */
 362:./state.h     ****   /**
 363:./state.h     ****    * Holds the status bits for all angular rate representations.
 364:./state.h     ****    * When the corresponding bit is one the representation
 365:./state.h     ****    * is already computed.
 366:./state.h     ****    */
 367:./state.h     ****   uint8_t rate_status;
 368:./state.h     **** 
 369:./state.h     ****   /**
 370:./state.h     ****    * Angular rates in body frame.
 371:./state.h     ****    * Units: rad/s in BFP with #INT32_RATE_FRAC
 372:./state.h     ****    */
 373:./state.h     ****   struct Int32Rates  body_rates_i;
 374:./state.h     **** 
 375:./state.h     ****   /**
 376:./state.h     ****    * Angular rates in body frame.
 377:./state.h     ****    * Units: rad/s
 378:./state.h     ****    */
 379:./state.h     ****   struct FloatRates  body_rates_f;
 380:./state.h     ****   /** @}*/
 381:./state.h     **** 
 382:./state.h     **** 
 383:./state.h     ****   /** @addtogroup state_wind_airspeed
 384:./state.h     ****    *  @{ */
 385:./state.h     ****   /**
 386:./state.h     ****    * Holds the status bits for all wind- and airspeed representations.
 387:./state.h     ****    * When the corresponding bit is one the representation
 388:./state.h     ****    * is already computed.
 389:./state.h     ****    */
 390:./state.h     ****   uint8_t wind_air_status;
 391:./state.h     **** 
 392:./state.h     ****   /**
 393:./state.h     ****    * Horizontal windspeed in north/east.
 394:./state.h     ****    * Units: m/s in BFP with #INT32_SPEED_FRAC
 395:./state.h     ****    */
 396:./state.h     ****   struct Int32Vect2 h_windspeed_i;
 397:./state.h     **** 
 398:./state.h     ****   /**
 399:./state.h     ****    * Norm of horizontal ground speed.
 400:./state.h     ****    * @details Unit: m/s in BFP with #INT32_SPEED_FRAC
 401:./state.h     ****    */
 402:./state.h     ****   int32_t airspeed_i;
 403:./state.h     **** 
 404:./state.h     ****   /**
 405:./state.h     ****    * Horizontal windspeed.
 406:./state.h     ****    * Units: m/s with x=north, y=east
 407:./state.h     ****    */
 408:./state.h     ****   struct FloatVect2 h_windspeed_f;
 409:./state.h     **** 
 410:./state.h     ****   /**
 411:./state.h     ****    * Norm of relative air speed.
 412:./state.h     ****    * Unit: m/s
 413:./state.h     ****    */
 414:./state.h     ****   float airspeed_f;
 415:./state.h     **** 
 416:./state.h     ****   /**
 417:./state.h     ****    * Angle of attack
 418:./state.h     ****    * Unit: rad
 419:./state.h     ****    */
 420:./state.h     ****   float angle_of_attack_f;
 421:./state.h     **** 
 422:./state.h     ****   /**
 423:./state.h     ****    * Sideslip angle
 424:./state.h     ****    * Unit: rad
 425:./state.h     ****    */
 426:./state.h     ****   float sideslip_f;
 427:./state.h     **** 
 428:./state.h     ****   /** @}*/
 429:./state.h     **** 
 430:./state.h     **** };
 431:./state.h     **** 
 432:./state.h     **** extern struct State state;
 433:./state.h     **** 
 434:./state.h     **** extern void stateInit(void);
 435:./state.h     **** 
 436:./state.h     **** /** @addtogroup state_position
 437:./state.h     ****  *  @{ */
 438:./state.h     **** 
 439:./state.h     **** /// Set the local (flat earth) coordinate frame origin (int).
 440:./state.h     **** static inline void stateSetLocalOrigin_i(struct LtpDef_i *ltp_def)
 441:./state.h     **** {
 442:./state.h     ****   memcpy(&state.ned_origin_i, ltp_def, sizeof(struct LtpDef_i));
 443:./state.h     ****   /* convert to float */
 444:./state.h     ****   ECEF_FLOAT_OF_BFP(state.ned_origin_f.ecef, state.ned_origin_i.ecef);
 445:./state.h     ****   LLA_FLOAT_OF_BFP(state.ned_origin_f.lla, state.ned_origin_i.lla);
 446:./state.h     ****   HIGH_RES_RMAT_FLOAT_OF_BFP(state.ned_origin_f.ltp_of_ecef, state.ned_origin_i.ltp_of_ecef);
 447:./state.h     ****   state.ned_origin_f.hmsl = M_OF_MM(state.ned_origin_i.hmsl);
 448:./state.h     **** 
 449:./state.h     ****   /* clear bits for all local frame representations */
 450:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 451:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 452:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 453:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 454:./state.h     **** 
 455:./state.h     ****   state.ned_initialized_i = TRUE;
 456:./state.h     ****   state.ned_initialized_f = TRUE;
 457:./state.h     **** }
 458:./state.h     **** 
 459:./state.h     **** /// Set the local (flat earth) coordinate frame origin from UTM (float).
 460:./state.h     **** static inline void stateSetLocalUtmOrigin_f(struct UtmCoor_f *utm_def)
 461:./state.h     **** {
 462:./state.h     ****   memcpy(&state.utm_origin_f, utm_def, sizeof(struct UtmCoor_f));
 463:./state.h     ****   state.utm_initialized_f = TRUE;
 464:./state.h     **** 
 465:./state.h     ****   /* clear bits for all local frame representations */
 466:./state.h     ****   state.pos_status &= ~(POS_LOCAL_COORD);
 467:./state.h     ****   state.speed_status &= ~(SPEED_LOCAL_COORD);
 468:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_I);
 469:./state.h     ****   ClearBit(state.accel_status, ACCEL_NED_F);
 470:./state.h     **** }
 471:./state.h     **** /*******************************************************************************
 472:./state.h     ****  *                                                                             *
 473:./state.h     ****  * Set and Get functions for the POSITION representations                      *
 474:./state.h     ****  *                                                                             *
 475:./state.h     ****  ******************************************************************************/
 476:./state.h     **** 
 477:./state.h     **** /************* declaration of transformation functions ************/
 478:./state.h     **** extern void stateCalcPositionEcef_i(void);
 479:./state.h     **** extern void stateCalcPositionNed_i(void);
 480:./state.h     **** extern void stateCalcPositionEnu_i(void);
 481:./state.h     **** extern void stateCalcPositionLla_i(void);
 482:./state.h     **** extern void stateCalcPositionUtm_f(void);
 483:./state.h     **** extern void stateCalcPositionEcef_f(void);
 484:./state.h     **** extern void stateCalcPositionNed_f(void);
 485:./state.h     **** extern void stateCalcPositionEnu_f(void);
 486:./state.h     **** extern void stateCalcPositionLla_f(void);
 487:./state.h     **** 
 488:./state.h     **** /*********************** validity test functions ******************/
 489:./state.h     **** 
 490:./state.h     **** /// Test if local coordinates are valid.
 491:./state.h     **** static inline bool_t stateIsLocalCoordinateValid(void)
 492:./state.h     **** {
 493:./state.h     ****   return ((state.ned_initialized_i || state.ned_initialized_f || state.utm_initialized_f)
 494:./state.h     ****           && (state.pos_status & (POS_LOCAL_COORD)));
 495:./state.h     **** }
 496:./state.h     **** 
 497:./state.h     **** /// Test if global coordinates are valid.
 498:./state.h     **** static inline bool_t stateIsGlobalCoordinateValid(void)
 499:./state.h     **** {
 500:./state.h     ****   return ((state.pos_status & (POS_GLOBAL_COORD)) || stateIsLocalCoordinateValid());
 501:./state.h     **** }
 502:./state.h     **** 
 503:./state.h     **** /************************ Set functions ****************************/
 504:./state.h     **** 
 505:./state.h     **** /// Set position from ECEF coordinates (int).
 506:./state.h     **** static inline void stateSetPositionEcef_i(struct EcefCoor_i *ecef_pos)
 507:./state.h     **** {
 508:./state.h     ****   VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 509:./state.h     ****   /* clear bits for all position representations and only set the new one */
 510:./state.h     ****   state.pos_status = (1 << POS_ECEF_I);
 511:./state.h     **** }
 512:./state.h     **** 
 513:./state.h     **** /// Set position from local NED coordinates (int).
 514:./state.h     **** static inline void stateSetPositionNed_i(struct NedCoor_i *ned_pos)
 515:./state.h     **** {
 516:./state.h     ****   VECT3_COPY(state.ned_pos_i, *ned_pos);
 517:./state.h     ****   /* clear bits for all position representations and only set the new one */
 518:./state.h     ****   state.pos_status = (1 << POS_NED_I);
 519:./state.h     **** }
 520:./state.h     **** 
 521:./state.h     **** /// Set position from local ENU coordinates (int).
 522:./state.h     **** static inline void stateSetPositionEnu_i(struct EnuCoor_i *enu_pos)
 523:./state.h     **** {
 524:./state.h     ****   VECT3_COPY(state.enu_pos_i, *enu_pos);
 525:./state.h     ****   /* clear bits for all position representations and only set the new one */
 526:./state.h     ****   state.pos_status = (1 << POS_ENU_I);
 527:./state.h     **** }
 528:./state.h     **** 
 529:./state.h     **** /// Set position from LLA coordinates (int).
 530:./state.h     **** static inline void stateSetPositionLla_i(struct LlaCoor_i *lla_pos)
 531:./state.h     **** {
 532:./state.h     ****   LLA_COPY(state.lla_pos_i, *lla_pos);
 533:./state.h     ****   /* clear bits for all position representations and only set the new one */
 534:./state.h     ****   state.pos_status = (1 << POS_LLA_I);
 535:./state.h     **** }
 536:./state.h     **** 
 537:./state.h     **** /// Set multiple position coordinates (int).
 538:./state.h     **** static inline void stateSetPosition_i(
 539:./state.h     ****   struct EcefCoor_i *ecef_pos,
 540:./state.h     ****   struct NedCoor_i *ned_pos,
 541:./state.h     ****   struct EnuCoor_i *enu_pos,
 542:./state.h     ****   struct LlaCoor_i *lla_pos)
 543:./state.h     **** {
 544:./state.h     ****   /* clear all status bit */
 545:./state.h     ****   state.pos_status = 0;
 546:./state.h     ****   if (ecef_pos != NULL) {
 547:./state.h     ****     VECT3_COPY(state.ecef_pos_i, *ecef_pos);
 548:./state.h     ****     state.pos_status |= (1 << POS_ECEF_I);
 549:./state.h     ****   }
 550:./state.h     ****   if (ned_pos != NULL) {
 551:./state.h     ****     VECT3_COPY(state.ned_pos_i, *ned_pos);
 552:./state.h     ****     state.pos_status |= (1 << POS_NED_I);
 553:./state.h     ****   }
 554:./state.h     ****   if (enu_pos != NULL) {
 555:./state.h     ****     VECT3_COPY(state.enu_pos_i, *enu_pos);
 556:./state.h     ****     state.pos_status |= (1 << POS_ENU_I);
 557:./state.h     ****   }
 558:./state.h     ****   if (lla_pos != NULL) {
 559:./state.h     ****     LLA_COPY(state.lla_pos_i, *lla_pos);
 560:./state.h     ****     state.pos_status |= (1 << POS_LLA_I);
 561:./state.h     ****   }
 562:./state.h     **** }
 563:./state.h     **** 
 564:./state.h     **** /// Set position from UTM coordinates (float).
 565:./state.h     **** static inline void stateSetPositionUtm_f(struct UtmCoor_f *utm_pos)
 566:./state.h     **** {
 567:./state.h     ****   memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 568:./state.h     ****   /* clear bits for all position representations and only set the new one */
 569:./state.h     ****   state.pos_status = (1 << POS_UTM_F);
 570:./state.h     **** }
 571:./state.h     **** 
 572:./state.h     **** /// Set position from ECEF coordinates (float).
 573:./state.h     **** static inline void stateSetPositionEcef_f(struct EcefCoor_f *ecef_pos)
 574:./state.h     **** {
 575:./state.h     ****   VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 576:./state.h     ****   /* clear bits for all position representations and only set the new one */
 577:./state.h     ****   state.pos_status = (1 << POS_ECEF_F);
 578:./state.h     **** }
 579:./state.h     **** 
 580:./state.h     **** /// Set position from local NED coordinates (float).
 581:./state.h     **** static inline void stateSetPositionNed_f(struct NedCoor_f *ned_pos)
 582:./state.h     **** {
 583:./state.h     ****   VECT3_COPY(state.ned_pos_f, *ned_pos);
 584:./state.h     ****   /* clear bits for all position representations and only set the new one */
 585:./state.h     ****   state.pos_status = (1 << POS_NED_F);
 586:./state.h     **** }
 587:./state.h     **** 
 588:./state.h     **** /// Set position from local ENU coordinates (float).
 589:./state.h     **** static inline void stateSetPositionEnu_f(struct EnuCoor_f *enu_pos)
 590:./state.h     **** {
 591:./state.h     ****   VECT3_COPY(state.enu_pos_f, *enu_pos);
 592:./state.h     ****   /* clear bits for all position representations and only set the new one */
 593:./state.h     ****   state.pos_status = (1 << POS_ENU_F);
 594:./state.h     **** }
 595:./state.h     **** 
 596:./state.h     **** /// Set position from LLA coordinates (float).
 597:./state.h     **** static inline void stateSetPositionLla_f(struct LlaCoor_f *lla_pos)
 598:./state.h     **** {
 599:./state.h     ****   LLA_COPY(state.lla_pos_f, *lla_pos);
 600:./state.h     ****   /* clear bits for all position representations and only set the new one */
 601:./state.h     ****   state.pos_status = (1 << POS_LLA_F);
 602:./state.h     **** }
 603:./state.h     **** 
 604:./state.h     **** /// Set multiple position coordinates (float).
 605:./state.h     **** static inline void stateSetPosition_f(
 606:./state.h     ****   struct EcefCoor_f *ecef_pos,
 607:./state.h     ****   struct NedCoor_f *ned_pos,
 608:./state.h     ****   struct EnuCoor_f *enu_pos,
 609:./state.h     ****   struct LlaCoor_f *lla_pos,
 610:./state.h     ****   struct UtmCoor_f *utm_pos)
 611:./state.h     **** {
 612:./state.h     ****   /* clear all status bit */
 613:./state.h     ****   state.pos_status = 0;
 614:./state.h     ****   if (ecef_pos != NULL) {
 615:./state.h     ****     VECT3_COPY(state.ecef_pos_f, *ecef_pos);
 616:./state.h     ****     state.pos_status |= (1 << POS_ECEF_F);
 617:./state.h     ****   }
 618:./state.h     ****   if (ned_pos != NULL) {
 619:./state.h     ****     VECT3_COPY(state.ned_pos_f, *ned_pos);
 620:./state.h     ****     state.pos_status |= (1 << POS_NED_F);
 621:./state.h     ****   }
 622:./state.h     ****   if (enu_pos != NULL) {
 623:./state.h     ****     VECT3_COPY(state.enu_pos_f, *enu_pos);
 624:./state.h     ****     state.pos_status |= (1 << POS_ENU_F);
 625:./state.h     ****   }
 626:./state.h     ****   if (lla_pos != NULL) {
 627:./state.h     ****     LLA_COPY(state.lla_pos_f, *lla_pos);
 628:./state.h     ****     state.pos_status |= (1 << POS_LLA_F);
 629:./state.h     ****   }
 630:./state.h     ****   if (utm_pos != NULL) {
 631:./state.h     ****     memcpy(&state.utm_pos_f, utm_pos, sizeof(struct UtmCoor_f));
 632:./state.h     ****     state.pos_status |= (1 << POS_UTM_F);
 633:./state.h     ****   }
 634:./state.h     **** }
 635:./state.h     **** 
 636:./state.h     **** /************************ Get functions ****************************/
 637:./state.h     **** 
 638:./state.h     **** /// Get position in ECEF coordinates (int).
 639:./state.h     **** static inline struct EcefCoor_i *stateGetPositionEcef_i(void)
 640:./state.h     **** {
 641:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_I)) {
 642:./state.h     ****     stateCalcPositionEcef_i();
 643:./state.h     ****   }
 644:./state.h     ****   return &state.ecef_pos_i;
 645:./state.h     **** }
 646:./state.h     **** 
 647:./state.h     **** /// Get position in local NED coordinates (int).
 648:./state.h     **** static inline struct NedCoor_i *stateGetPositionNed_i(void)
 649:./state.h     **** {
 650:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_I)) {
 651:./state.h     ****     stateCalcPositionNed_i();
 652:./state.h     ****   }
 653:./state.h     ****   return &state.ned_pos_i;
 654:./state.h     **** }
 655:./state.h     **** 
 656:./state.h     **** /// Get position in local ENU coordinates (int).
 657:./state.h     **** static inline struct EnuCoor_i *stateGetPositionEnu_i(void)
 658:./state.h     **** {
 659:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_I)) {
 660:./state.h     ****     stateCalcPositionEnu_i();
 661:./state.h     ****   }
 662:./state.h     ****   return &state.enu_pos_i;
 663:./state.h     **** }
 664:./state.h     **** 
 665:./state.h     **** /// Get position in LLA coordinates (int).
 666:./state.h     **** static inline struct LlaCoor_i *stateGetPositionLla_i(void)
 667:./state.h     **** {
 668:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_I)) {
 669:./state.h     ****     stateCalcPositionLla_i();
 670:./state.h     ****   }
 671:./state.h     ****   return &state.lla_pos_i;
 672:./state.h     **** }
 673:./state.h     **** 
 674:./state.h     **** /// Get position in UTM coordinates (float).
 675:./state.h     **** static inline struct UtmCoor_f *stateGetPositionUtm_f(void)
 676:./state.h     **** {
 677:./state.h     ****   if (!bit_is_set(state.pos_status, POS_UTM_F)) {
 197              		.loc 2 677 0
 198 000c 254B     		ldr	r3, .L25+4
 199 000e 1A88     		ldrh	r2, [r3]
 200 0010 12F4007F 		tst	r2, #512
 201 0014 1C46     		mov	r4, r3
 202 0016 01D1     		bne	.L5
 678:./state.h     ****     stateCalcPositionUtm_f();
 203              		.loc 2 678 0
 204 0018 FFF7FEFF 		bl	stateCalcPositionUtm_f
 205              	.LVL1:
 206              	.L5:
 207              	.LBE6:
 208              	.LBE5:
 209              		.loc 1 219 0
 210 001c D4ED207A 		flds	s15, [r4, #128]
 211 0020 214B     		ldr	r3, .L25+8
 220:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_setpoint = altitude_pgain_boost * v_ctl_altitude_pgain * v_ctl_altitude_error
 221:firmwares/fixedwing/guidance/guidance_v.c ****                          + v_ctl_altitude_pre_climb * v_ctl_altitude_pre_climb_correction;
 222:firmwares/fixedwing/guidance/guidance_v.c ****   BoundAbs(v_ctl_climb_setpoint, v_ctl_altitude_max_climb);
 212              		.loc 1 222 0
 213 0022 224A     		ldr	r2, .L25+12
 219:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_setpoint = altitude_pgain_boost * v_ctl_altitude_pgain * v_ctl_altitude_error
 214              		.loc 1 219 0
 215 0024 78EE677A 		fsubs	s15, s16, s15
 216 0028 C3ED007A 		fsts	s15, [r3]
 221:firmwares/fixedwing/guidance/guidance_v.c ****   BoundAbs(v_ctl_climb_setpoint, v_ctl_altitude_max_climb);
 217              		.loc 1 221 0
 218 002c 204B     		ldr	r3, .L25+16
 219 002e 93ED007A 		flds	s14, [r3]
 220 0032 204B     		ldr	r3, .L25+20
 221 0034 D3ED006A 		flds	s13, [r3]
 222 0038 1F4B     		ldr	r3, .L25+24
 223 003a 27EE267A 		fmuls	s14, s14, s13
 224 003e D3ED006A 		flds	s13, [r3]
 220:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_setpoint = altitude_pgain_boost * v_ctl_altitude_pgain * v_ctl_altitude_error
 225              		.loc 1 220 0
 226 0042 1E4B     		ldr	r3, .L25+28
 221:firmwares/fixedwing/guidance/guidance_v.c ****   BoundAbs(v_ctl_climb_setpoint, v_ctl_altitude_max_climb);
 227              		.loc 1 221 0
 228 0044 A6EEA77A 		vfma.f32	s14, s13, s15
 229              		.loc 1 222 0
 230 0048 D2ED006A 		flds	s13, [r2]
 220:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_setpoint = altitude_pgain_boost * v_ctl_altitude_pgain * v_ctl_altitude_error
 231              		.loc 1 220 0
 232 004c 83ED007A 		fsts	s14, [r3]
 233              		.loc 1 222 0
 234 0050 B4EEE67A 		fcmpes	s14, s13
 235 0054 F1EE10FA 		fmstat
 236 0058 06DC     		bgt	.L22
 237              		.loc 1 222 0 is_stmt 0 discriminator 2
 238 005a F1EE666A 		fnegs	s13, s13
 239 005e B4EEE67A 		fcmpes	s14, s13
 240 0062 F1EE10FA 		fmstat
 241 0066 01D5     		bpl	.L8
 242              	.L22:
 243              		.loc 1 222 0 discriminator 3
 244 0068 C3ED006A 		fsts	s13, [r3]
 245              	.L8:
 223:firmwares/fixedwing/guidance/guidance_v.c **** 
 224:firmwares/fixedwing/guidance/guidance_v.c **** #ifdef AGR_CLIMB
 225:firmwares/fixedwing/guidance/guidance_v.c ****   if (v_ctl_climb_mode == V_CTL_CLIMB_MODE_AUTO_THROTTLE) {
 246              		.loc 1 225 0 is_stmt 1
 247 006c 144B     		ldr	r3, .L25+32
 248 006e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 249 0070 9AB9     		cbnz	r2, .L4
 250              	.LBB7:
 226:firmwares/fixedwing/guidance/guidance_v.c ****     float dist = fabs(v_ctl_altitude_error);
 251              		.loc 1 226 0
 252 0072 F0EEE77A 		fabss	s15, s15
 253              	.LVL2:
 227:firmwares/fixedwing/guidance/guidance_v.c ****     if (dist < AGR_BLEND_END) {
 254              		.loc 1 227 0
 255 0076 B2EE047A 		fconsts	s14, #36
 256 007a F4EEC77A 		fcmpes	s15, s14
 257 007e F1EE10FA 		fmstat
 258 0082 104B     		ldr	r3, .L25+36
 259 0084 08D4     		bmi	.L23
 228:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_auto_throttle_submode = V_CTL_AUTO_THROTTLE_STANDARD;
 229:firmwares/fixedwing/guidance/guidance_v.c ****     } else if (dist > AGR_BLEND_START) {
 260              		.loc 1 229 0
 261 0086 B3EE047A 		fconsts	s14, #52
 262 008a F4EEC77A 		fcmpes	s15, s14
 263 008e F1EE10FA 		fmstat
 230:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_auto_throttle_submode = V_CTL_AUTO_THROTTLE_AGRESSIVE;
 264              		.loc 1 230 0
 265 0092 CCBF     		ite	gt
 266 0094 0122     		movgt	r2, #1
 231:firmwares/fixedwing/guidance/guidance_v.c ****     } else {
 232:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_auto_throttle_submode = V_CTL_AUTO_THROTTLE_BLENDED;
 267              		.loc 1 232 0
 268 0096 0222     		movle	r2, #2
 269              	.L23:
 270 0098 1A70     		strb	r2, [r3]
 271              	.LVL3:
 272              	.L4:
 273              	.LBE7:
 233:firmwares/fixedwing/guidance/guidance_v.c ****     }
 234:firmwares/fixedwing/guidance/guidance_v.c ****   }
 235:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 236:firmwares/fixedwing/guidance/guidance_v.c **** }
 274              		.loc 1 236 0
 275 009a BDEC028B 		fldmfdd	sp!, {d8}
 276              		.cfi_restore 80
 277              		.cfi_restore 81
 278              		.cfi_def_cfa_offset 8
 279 009e 10BD     		pop	{r4, pc}
 280              	.L26:
 281              		.align	2
 282              	.L25:
 283 00a0 00000000 		.word	.LANCHOR1
 284 00a4 00000000 		.word	state
 285 00a8 00000000 		.word	.LANCHOR4
 286 00ac 00000000 		.word	.LANCHOR6
 287 00b0 00000000 		.word	.LANCHOR2
 288 00b4 00000000 		.word	.LANCHOR5
 289 00b8 00000000 		.word	.LANCHOR3
 290 00bc 00000000 		.word	.LANCHOR7
 291 00c0 00000000 		.word	.LANCHOR8
 292 00c4 00000000 		.word	.LANCHOR9
 293              		.cfi_endproc
 294              	.LFE141:
 296              		.global	__aeabi_f2d
 297              		.global	__aeabi_dsub
 298              		.global	__aeabi_ddiv
 299              		.global	__aeabi_d2f
 300              		.global	__aeabi_dmul
 301              		.global	__aeabi_dadd
 302              		.section	.text.v_ctl_climb_loop,"ax",%progbits
 303              		.align	1
 304              		.global	v_ctl_climb_loop
 305              		.thumb
 306              		.thumb_func
 308              	v_ctl_climb_loop:
 309              	.LFB142:
 237:firmwares/fixedwing/guidance/guidance_v.c **** 
 238:firmwares/fixedwing/guidance/guidance_v.c **** void v_ctl_climb_loop(void)
 239:firmwares/fixedwing/guidance/guidance_v.c **** {
 310              		.loc 1 239 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 8
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              	.LVL4:
 315 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 316              		.cfi_def_cfa_offset 28
 317              		.cfi_offset 4, -28
 318              		.cfi_offset 5, -24
 319              		.cfi_offset 6, -20
 320              		.cfi_offset 7, -16
 321              		.cfi_offset 8, -12
 322              		.cfi_offset 9, -8
 323              		.cfi_offset 14, -4
 324              	.LBB13:
 325              	.LBB14:
 326              	.LBB15:
 327              	.LBB16:
 679:./state.h     ****   }
 680:./state.h     ****   return &state.utm_pos_f;
 681:./state.h     **** }
 682:./state.h     **** 
 683:./state.h     **** /// Get position in ECEF coordinates (float).
 684:./state.h     **** static inline struct EcefCoor_f *stateGetPositionEcef_f(void)
 685:./state.h     **** {
 686:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ECEF_F)) {
 687:./state.h     ****     stateCalcPositionEcef_f();
 688:./state.h     ****   }
 689:./state.h     ****   return &state.ecef_pos_f;
 690:./state.h     **** }
 691:./state.h     **** 
 692:./state.h     **** /// Get position in local NED coordinates (float).
 693:./state.h     **** static inline struct NedCoor_f *stateGetPositionNed_f(void)
 694:./state.h     **** {
 695:./state.h     ****   if (!bit_is_set(state.pos_status, POS_NED_F)) {
 696:./state.h     ****     stateCalcPositionNed_f();
 697:./state.h     ****   }
 698:./state.h     ****   return &state.ned_pos_f;
 699:./state.h     **** }
 700:./state.h     **** 
 701:./state.h     **** /// Get position in local ENU coordinates (float).
 702:./state.h     **** static inline struct EnuCoor_f *stateGetPositionEnu_f(void)
 703:./state.h     **** {
 704:./state.h     ****   if (!bit_is_set(state.pos_status, POS_ENU_F)) {
 705:./state.h     ****     stateCalcPositionEnu_f();
 706:./state.h     ****   }
 707:./state.h     ****   return &state.enu_pos_f;
 708:./state.h     **** }
 709:./state.h     **** 
 710:./state.h     **** /// Get position in LLA coordinates (float).
 711:./state.h     **** static inline struct LlaCoor_f *stateGetPositionLla_f(void)
 712:./state.h     **** {
 713:./state.h     ****   if (!bit_is_set(state.pos_status, POS_LLA_F)) {
 714:./state.h     ****     stateCalcPositionLla_f();
 715:./state.h     ****   }
 716:./state.h     ****   return &state.lla_pos_f;
 717:./state.h     **** }
 718:./state.h     **** 
 719:./state.h     **** /** @}*/
 720:./state.h     **** 
 721:./state.h     **** 
 722:./state.h     **** 
 723:./state.h     **** /******************************************************************************
 724:./state.h     ****  *                                                                            *
 725:./state.h     ****  * Set and Get functions for the SPEED representations                        *
 726:./state.h     ****  *                                                                            *
 727:./state.h     ****  *****************************************************************************/
 728:./state.h     **** /** @addtogroup state_velocity
 729:./state.h     ****  *  @{ */
 730:./state.h     **** 
 731:./state.h     **** /************* declaration of transformation functions ************/
 732:./state.h     **** extern void stateCalcSpeedNed_i(void);
 733:./state.h     **** extern void stateCalcSpeedEnu_i(void);
 734:./state.h     **** extern void stateCalcSpeedEcef_i(void);
 735:./state.h     **** extern void stateCalcHorizontalSpeedNorm_i(void);
 736:./state.h     **** extern void stateCalcHorizontalSpeedDir_i(void);
 737:./state.h     **** extern void stateCalcSpeedNed_f(void);
 738:./state.h     **** extern void stateCalcSpeedEnu_f(void);
 739:./state.h     **** extern void stateCalcSpeedEcef_f(void);
 740:./state.h     **** extern void stateCalcHorizontalSpeedNorm_f(void);
 741:./state.h     **** extern void stateCalcHorizontalSpeedDir_f(void);
 742:./state.h     **** 
 743:./state.h     **** /************************ Set functions ****************************/
 744:./state.h     **** 
 745:./state.h     **** /// Set ground speed in local NED coordinates (int).
 746:./state.h     **** static inline void stateSetSpeedNed_i(struct NedCoor_i *ned_speed)
 747:./state.h     **** {
 748:./state.h     ****   VECT3_COPY(state.ned_speed_i, *ned_speed);
 749:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 750:./state.h     ****   state.speed_status = (1 << SPEED_NED_I);
 751:./state.h     **** }
 752:./state.h     **** 
 753:./state.h     **** /// Set ground speed in local ENU coordinates (int).
 754:./state.h     **** static inline void stateSetSpeedEnu_i(struct EnuCoor_i *enu_speed)
 755:./state.h     **** {
 756:./state.h     ****   VECT3_COPY(state.enu_speed_i, *enu_speed);
 757:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 758:./state.h     ****   state.speed_status = (1 << SPEED_ENU_I);
 759:./state.h     **** }
 760:./state.h     **** 
 761:./state.h     **** /// Set ground speed in ECEF coordinates (int).
 762:./state.h     **** static inline void stateSetSpeedEcef_i(struct EcefCoor_i *ecef_speed)
 763:./state.h     **** {
 764:./state.h     ****   VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 765:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 766:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_I);
 767:./state.h     **** }
 768:./state.h     **** 
 769:./state.h     **** /// Set multiple speed coordinates (int).
 770:./state.h     **** static inline void stateSetSpeed_i(
 771:./state.h     ****   struct EcefCoor_i *ecef_speed,
 772:./state.h     ****   struct NedCoor_i *ned_speed,
 773:./state.h     ****   struct EnuCoor_i *enu_speed)
 774:./state.h     **** {
 775:./state.h     ****   /* clear all status bit */
 776:./state.h     ****   state.speed_status = 0;
 777:./state.h     ****   if (ecef_speed != NULL) {
 778:./state.h     ****     VECT3_COPY(state.ecef_speed_i, *ecef_speed);
 779:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_I);
 780:./state.h     ****   }
 781:./state.h     ****   if (ned_speed != NULL) {
 782:./state.h     ****     VECT3_COPY(state.ned_speed_i, *ned_speed);
 783:./state.h     ****     state.speed_status |= (1 << SPEED_NED_I);
 784:./state.h     ****   }
 785:./state.h     ****   if (enu_speed != NULL) {
 786:./state.h     ****     VECT3_COPY(state.enu_speed_i, *enu_speed);
 787:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_I);
 788:./state.h     ****   }
 789:./state.h     **** }
 790:./state.h     **** 
 791:./state.h     **** /// Set ground speed in local NED coordinates (float).
 792:./state.h     **** static inline void stateSetSpeedNed_f(struct NedCoor_f *ned_speed)
 793:./state.h     **** {
 794:./state.h     ****   VECT3_COPY(state.ned_speed_f, *ned_speed);
 795:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 796:./state.h     ****   state.speed_status = (1 << SPEED_NED_F);
 797:./state.h     **** }
 798:./state.h     **** 
 799:./state.h     **** /// Set ground speed in local ENU coordinates (float).
 800:./state.h     **** static inline void stateSetSpeedEnu_f(struct EnuCoor_f *enu_speed)
 801:./state.h     **** {
 802:./state.h     ****   VECT3_COPY(state.enu_speed_f, *enu_speed);
 803:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 804:./state.h     ****   state.speed_status = (1 << SPEED_ENU_F);
 805:./state.h     **** }
 806:./state.h     **** 
 807:./state.h     **** /// Set ground speed in ECEF coordinates (float).
 808:./state.h     **** static inline void stateSetSpeedEcef_f(struct EcefCoor_f *ecef_speed)
 809:./state.h     **** {
 810:./state.h     ****   VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 811:./state.h     ****   /* clear bits for all speed representations and only set the new one */
 812:./state.h     ****   state.speed_status = (1 << SPEED_ECEF_F);
 813:./state.h     **** }
 814:./state.h     **** 
 815:./state.h     **** /// Set multiple speed coordinates (float).
 816:./state.h     **** static inline void stateSetSpeed_f(
 817:./state.h     ****   struct EcefCoor_f *ecef_speed,
 818:./state.h     ****   struct NedCoor_f *ned_speed,
 819:./state.h     ****   struct EnuCoor_f *enu_speed)
 820:./state.h     **** {
 821:./state.h     ****   /* clear all status bit */
 822:./state.h     ****   state.speed_status = 0;
 823:./state.h     ****   if (ecef_speed != NULL) {
 824:./state.h     ****     VECT3_COPY(state.ecef_speed_f, *ecef_speed);
 825:./state.h     ****     state.speed_status |= (1 << SPEED_ECEF_F);
 826:./state.h     ****   }
 827:./state.h     ****   if (ned_speed != NULL) {
 828:./state.h     ****     VECT3_COPY(state.ned_speed_f, *ned_speed);
 829:./state.h     ****     state.speed_status |= (1 << SPEED_NED_F);
 830:./state.h     ****   }
 831:./state.h     ****   if (enu_speed != NULL) {
 832:./state.h     ****     VECT3_COPY(state.enu_speed_f, *enu_speed);
 833:./state.h     ****     state.speed_status |= (1 << SPEED_ENU_F);
 834:./state.h     ****   }
 835:./state.h     **** }
 836:./state.h     **** 
 837:./state.h     **** /************************ Get functions ****************************/
 838:./state.h     **** 
 839:./state.h     **** /// Get ground speed in local NED coordinates (int).
 840:./state.h     **** static inline struct NedCoor_i *stateGetSpeedNed_i(void)
 841:./state.h     **** {
 842:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_I)) {
 843:./state.h     ****     stateCalcSpeedNed_i();
 844:./state.h     ****   }
 845:./state.h     ****   return &state.ned_speed_i;
 846:./state.h     **** }
 847:./state.h     **** 
 848:./state.h     **** /// Get ground speed in local ENU coordinates (int).
 849:./state.h     **** static inline struct EnuCoor_i *stateGetSpeedEnu_i(void)
 850:./state.h     **** {
 851:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_I)) {
 852:./state.h     ****     stateCalcSpeedEnu_i();
 853:./state.h     ****   }
 854:./state.h     ****   return &state.enu_speed_i;
 855:./state.h     **** }
 856:./state.h     **** 
 857:./state.h     **** /// Get ground speed in ECEF coordinates (int).
 858:./state.h     **** static inline struct EcefCoor_i *stateGetSpeedEcef_i(void)
 859:./state.h     **** {
 860:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ECEF_I)) {
 861:./state.h     ****     stateCalcSpeedEcef_i();
 862:./state.h     ****   }
 863:./state.h     ****   return &state.ecef_speed_i;
 864:./state.h     **** }
 865:./state.h     **** 
 866:./state.h     **** /// Get norm of horizontal ground speed (int).
 867:./state.h     **** static inline uint32_t *stateGetHorizontalSpeedNorm_i(void)
 868:./state.h     **** {
 869:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HNORM_I)) {
 870:./state.h     ****     stateCalcHorizontalSpeedNorm_i();
 871:./state.h     ****   }
 872:./state.h     ****   return &state.h_speed_norm_i;
 873:./state.h     **** }
 874:./state.h     **** 
 875:./state.h     **** /// Get dir of horizontal ground speed (int).
 876:./state.h     **** static inline int32_t *stateGetHorizontalSpeedDir_i(void)
 877:./state.h     **** {
 878:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_HDIR_I)) {
 879:./state.h     ****     stateCalcHorizontalSpeedDir_i();
 880:./state.h     ****   }
 881:./state.h     ****   return &state.h_speed_dir_i;
 882:./state.h     **** }
 883:./state.h     **** 
 884:./state.h     **** /// Get ground speed in local NED coordinates (float).
 885:./state.h     **** static inline struct NedCoor_f *stateGetSpeedNed_f(void)
 886:./state.h     **** {
 887:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_NED_F)) {
 888:./state.h     ****     stateCalcSpeedNed_f();
 889:./state.h     ****   }
 890:./state.h     ****   return &state.ned_speed_f;
 891:./state.h     **** }
 892:./state.h     **** 
 893:./state.h     **** /// Get ground speed in local ENU coordinates (float).
 894:./state.h     **** static inline struct EnuCoor_f *stateGetSpeedEnu_f(void)
 895:./state.h     **** {
 896:./state.h     ****   if (!bit_is_set(state.speed_status, SPEED_ENU_F)) {
 328              		.loc 2 896 0
 329 0004 944B     		ldr	r3, .L59+16
 330              	.LBE16:
 331              	.LBE15:
 332              	.LBE14:
 333              	.LBE13:
 334              		.loc 1 239 0
 335 0006 2DED088B 		fstmfdd	sp!, {d8, d9, d10, d11}
 336              		.cfi_def_cfa_offset 60
 337              		.cfi_offset 80, -60
 338              		.cfi_offset 81, -56
 339              		.cfi_offset 82, -52
 340              		.cfi_offset 83, -48
 341              		.cfi_offset 84, -44
 342              		.cfi_offset 85, -40
 343              		.cfi_offset 86, -36
 344              		.cfi_offset 87, -32
 345              	.LBB24:
 346              	.LBB22:
 347              	.LBB19:
 348              	.LBB17:
 349              		.loc 2 896 0
 350 000a B3F81421 		ldrh	r2, [r3, #276]
 351 000e 12F0800F 		tst	r2, #128
 352              	.LBE17:
 353              	.LBE19:
 354              	.LBE22:
 355              	.LBE24:
 356              		.loc 1 239 0
 357 0012 83B0     		sub	sp, sp, #12
 358              		.cfi_def_cfa_offset 72
 359 0014 1C46     		mov	r4, r3
 360              	.LBB25:
 361              	.LBB23:
 362              	.LBB20:
 363              	.LBB18:
 364              		.loc 2 896 0
 365 0016 01D1     		bne	.L28
 897:./state.h     ****     stateCalcSpeedEnu_f();
 366              		.loc 2 897 0
 367 0018 FFF7FEFF 		bl	stateCalcSpeedEnu_f
 368              	.LVL5:
 369              	.L28:
 370              	.LBE18:
 371              	.LBE20:
 240:firmwares/fixedwing/guidance/guidance_v.c ****   switch (v_ctl_climb_mode) {
 241:firmwares/fixedwing/guidance/guidance_v.c ****     case V_CTL_CLIMB_MODE_AUTO_THROTTLE:
 242:firmwares/fixedwing/guidance/guidance_v.c ****     default:
 243:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_climb_auto_throttle_loop();
 244:firmwares/fixedwing/guidance/guidance_v.c ****       break;
 245:firmwares/fixedwing/guidance/guidance_v.c **** #ifdef V_CTL_AUTO_PITCH_PGAIN
 246:firmwares/fixedwing/guidance/guidance_v.c **** #pragma message "AUTO PITCH Enabled!"
 247:firmwares/fixedwing/guidance/guidance_v.c ****     case V_CTL_CLIMB_MODE_AUTO_PITCH:
 248:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_climb_auto_pitch_loop();
 249:firmwares/fixedwing/guidance/guidance_v.c ****       break;
 250:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 251:firmwares/fixedwing/guidance/guidance_v.c ****   }
 252:firmwares/fixedwing/guidance/guidance_v.c **** }
 253:firmwares/fixedwing/guidance/guidance_v.c **** 
 254:firmwares/fixedwing/guidance/guidance_v.c **** /**
 255:firmwares/fixedwing/guidance/guidance_v.c ****  * auto throttle inner loop
 256:firmwares/fixedwing/guidance/guidance_v.c ****  * \brief
 257:firmwares/fixedwing/guidance/guidance_v.c ****  */
 258:firmwares/fixedwing/guidance/guidance_v.c **** 
 259:firmwares/fixedwing/guidance/guidance_v.c **** #if !USE_AIRSPEED
 260:firmwares/fixedwing/guidance/guidance_v.c **** 
 261:firmwares/fixedwing/guidance/guidance_v.c **** inline static void v_ctl_climb_auto_throttle_loop(void)
 262:firmwares/fixedwing/guidance/guidance_v.c **** {
 263:firmwares/fixedwing/guidance/guidance_v.c ****   static float last_err;
 264:firmwares/fixedwing/guidance/guidance_v.c **** 
 265:firmwares/fixedwing/guidance/guidance_v.c ****   float f_throttle = 0;
 266:firmwares/fixedwing/guidance/guidance_v.c ****   float err  = stateGetSpeedEnu_f()->z - v_ctl_climb_setpoint;
 372              		.loc 1 266 0
 373 001c 8F4B     		ldr	r3, .L59+20
 374 001e 94ED599A 		flds	s18, [r4, #356]
 375 0022 93ED007A 		flds	s14, [r3]
 267:firmwares/fixedwing/guidance/guidance_v.c ****   float d_err = err - last_err;
 376              		.loc 1 267 0
 377 0026 8E4B     		ldr	r3, .L59+24
 268:firmwares/fixedwing/guidance/guidance_v.c ****   last_err = err;
 269:firmwares/fixedwing/guidance/guidance_v.c ****   float controlled_throttle = v_ctl_auto_throttle_cruise_throttle
 270:firmwares/fixedwing/guidance/guidance_v.c ****                               + v_ctl_auto_throttle_climb_throttle_increment * v_ctl_climb_setpoint
 271:firmwares/fixedwing/guidance/guidance_v.c ****                               - v_ctl_auto_throttle_pgain *
 272:firmwares/fixedwing/guidance/guidance_v.c ****                               (err + v_ctl_auto_throttle_igain * v_ctl_auto_throttle_sum_err
 378              		.loc 1 272 0
 379 0028 8E4D     		ldr	r5, .L59+28
 267:firmwares/fixedwing/guidance/guidance_v.c ****   float d_err = err - last_err;
 380              		.loc 1 267 0
 381 002a D3ED007A 		flds	s15, [r3]
 382 002e 8E4C     		ldr	r4, .L59+32
 266:firmwares/fixedwing/guidance/guidance_v.c ****   float d_err = err - last_err;
 383              		.loc 1 266 0
 384 0030 79EE47AA 		fsubs	s21, s18, s14
 385              	.LVL6:
 386              		.loc 1 272 0
 387 0034 95ED009A 		flds	s18, [r5]
 268:firmwares/fixedwing/guidance/guidance_v.c ****   last_err = err;
 388              		.loc 1 268 0
 389 0038 C3ED00AA 		fsts	s21, [r3]
 271:firmwares/fixedwing/guidance/guidance_v.c ****                               (err + v_ctl_auto_throttle_igain * v_ctl_auto_throttle_sum_err
 390              		.loc 1 271 0
 391 003c 8B4B     		ldr	r3, .L59+36
 392 003e 93ED006A 		flds	s12, [r3]
 270:firmwares/fixedwing/guidance/guidance_v.c ****                               - v_ctl_auto_throttle_pgain *
 393              		.loc 1 270 0
 394 0042 8B4B     		ldr	r3, .L59+40
 395 0044 D3ED006A 		flds	s13, [r3]
 396 0048 8A4B     		ldr	r3, .L59+44
 397 004a 93ED008A 		flds	s16, [r3]
 398              		.loc 1 272 0
 399 004e 8A4B     		ldr	r3, .L59+48
 270:firmwares/fixedwing/guidance/guidance_v.c ****                               - v_ctl_auto_throttle_pgain *
 400              		.loc 1 270 0
 401 0050 A6EE878A 		vfma.f32	s16, s13, s14
 402              		.loc 1 272 0
 403 0054 D3ED006A 		flds	s13, [r3]
 273:firmwares/fixedwing/guidance/guidance_v.c ****                                + v_ctl_auto_throttle_dgain * d_err);
 404              		.loc 1 273 0
 405 0058 884B     		ldr	r3, .L59+52
 272:firmwares/fixedwing/guidance/guidance_v.c ****                                + v_ctl_auto_throttle_dgain * d_err);
 406              		.loc 1 272 0
 407 005a F0EE6A5A 		fcpys	s11, s21
 408 005e E6EE895A 		vfma.f32	s11, s13, s18
 267:firmwares/fixedwing/guidance/guidance_v.c ****   last_err = err;
 409              		.loc 1 267 0
 410 0062 7AEEE77A 		fsubs	s15, s21, s15
 411              	.LVL7:
 272:firmwares/fixedwing/guidance/guidance_v.c ****                                + v_ctl_auto_throttle_dgain * d_err);
 412              		.loc 1 272 0
 413 0066 F0EE656A 		fcpys	s13, s11
 414              		.loc 1 273 0
 415 006a D3ED005A 		flds	s11, [r3]
 274:firmwares/fixedwing/guidance/guidance_v.c **** 
 275:firmwares/fixedwing/guidance/guidance_v.c ****   /* pitch pre-command */
 276:firmwares/fixedwing/guidance/guidance_v.c ****   float v_ctl_pitch_of_vz = (v_ctl_climb_setpoint + d_err * v_ctl_auto_throttle_pitch_of_vz_dgain) 
 416              		.loc 1 276 0
 417 006e 844B     		ldr	r3, .L59+56
 273:firmwares/fixedwing/guidance/guidance_v.c **** 
 418              		.loc 1 273 0
 419 0070 E5EEA76A 		vfma.f32	s13, s11, s15
 269:firmwares/fixedwing/guidance/guidance_v.c ****                               + v_ctl_auto_throttle_climb_throttle_increment * v_ctl_climb_setpoint
 420              		.loc 1 269 0
 421 0074 A6EE668A 		vfms.f32	s16, s12, s13
 422              	.LVL8:
 423              		.loc 1 276 0
 424 0078 D3ED006A 		flds	s13, [r3]
 425 007c 814B     		ldr	r3, .L59+60
 426 007e B0EE476A 		fcpys	s12, s14
 427 0082 D3ED008A 		flds	s17, [r3]
 277:firmwares/fixedwing/guidance/guidance_v.c ****                             v_ctl_auto_throttle_pitch_of_vz_pgain;
 278:firmwares/fixedwing/guidance/guidance_v.c **** 
 279:firmwares/fixedwing/guidance/guidance_v.c **** #if defined AGR_CLIMB
 280:firmwares/fixedwing/guidance/guidance_v.c ****   switch (v_ctl_auto_throttle_submode) {
 428              		.loc 1 280 0
 429 0086 804B     		ldr	r3, .L59+64
 276:firmwares/fixedwing/guidance/guidance_v.c ****                             v_ctl_auto_throttle_pitch_of_vz_pgain;
 430              		.loc 1 276 0
 431 0088 A7EEA66A 		vfma.f32	s12, s15, s13
 432              		.loc 1 280 0
 433 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 434 008e 012B     		cmp	r3, #1
 276:firmwares/fixedwing/guidance/guidance_v.c ****                             v_ctl_auto_throttle_pitch_of_vz_pgain;
 435              		.loc 1 276 0
 436 0090 66EE288A 		fmuls	s17, s12, s17
 437              	.LVL9:
 438              		.loc 1 280 0
 439 0094 05D0     		beq	.L30
 440 0096 022B     		cmp	r3, #2
 441 0098 7C4E     		ldr	r6, .L59+68
 442 009a DFED7D9A 		flds	s19, .L59+72
 443 009e 0FD0     		beq	.L31
 444 00a0 92E0     		b	.L58
 445              	.L30:
 281:firmwares/fixedwing/guidance/guidance_v.c ****     case V_CTL_AUTO_THROTTLE_AGRESSIVE:
 282:firmwares/fixedwing/guidance/guidance_v.c ****       if (v_ctl_climb_setpoint > 0) { /* Climbing */
 446              		.loc 1 282 0
 447 00a2 B5EEC07A 		fcmpezs	s14
 448 00a6 F1EE10FA 		fmstat
 449              	.LVL10:
 283:firmwares/fixedwing/guidance/guidance_v.c ****         f_throttle =  AGR_CLIMB_THROTTLE;
 284:firmwares/fixedwing/guidance/guidance_v.c ****         v_ctl_pitch_setpoint = AGR_CLIMB_PITCH;
 450              		.loc 1 284 0
 451 00aa C9BF     		itett	gt
 452 00ac 794B     		ldrgt	r3, .L59+76
 285:firmwares/fixedwing/guidance/guidance_v.c ****       } else { /* Going down */
 286:firmwares/fixedwing/guidance/guidance_v.c ****         f_throttle =  AGR_DESCENT_THROTTLE;
 287:firmwares/fixedwing/guidance/guidance_v.c ****         v_ctl_pitch_setpoint = AGR_DESCENT_PITCH;
 453              		.loc 1 287 0
 454 00ae 7A4B     		ldrle	r3, .L59+80
 284:firmwares/fixedwing/guidance/guidance_v.c ****       } else { /* Going down */
 455              		.loc 1 284 0
 456 00b0 2360     		strgt	r3, [r4]	@ float
 457              	.LVL11:
 283:firmwares/fixedwing/guidance/guidance_v.c ****         f_throttle =  AGR_CLIMB_THROTTLE;
 458              		.loc 1 283 0
 459 00b2 B7EE008A 		fconstsgt	s16, #112
 460              	.LVL12:
 461              		.loc 1 287 0
 462 00b6 DCBF     		itt	le
 463 00b8 2360     		strle	r3, [r4]	@ float
 464              	.LVL13:
 286:firmwares/fixedwing/guidance/guidance_v.c ****         v_ctl_pitch_setpoint = AGR_DESCENT_PITCH;
 465              		.loc 1 286 0
 466 00ba 9FED788A 		fldsle	s16, .L59+84
 467 00be A3E0     		b	.L34
 468              	.LVL14:
 469              	.L31:
 470              	.LBB21:
 288:firmwares/fixedwing/guidance/guidance_v.c ****       }
 289:firmwares/fixedwing/guidance/guidance_v.c ****       break;
 290:firmwares/fixedwing/guidance/guidance_v.c **** 
 291:firmwares/fixedwing/guidance/guidance_v.c ****     case V_CTL_AUTO_THROTTLE_BLENDED: {
 292:firmwares/fixedwing/guidance/guidance_v.c ****       float ratio = (fabs(v_ctl_altitude_error) - AGR_BLEND_END)
 471              		.loc 1 292 0
 472 00c0 774B     		ldr	r3, .L59+88
 473 00c2 93ED00BA 		flds	s22, [r3]
 474 00c6 F0EECB7A 		fabss	s15, s22
 475              	.LVL15:
 476 00ca 17EE900A 		fmrs	r0, s15
 477 00ce FFF7FEFF 		bl	__aeabi_f2d
 478              	.LVL16:
 479 00d2 0022     		movs	r2, #0
 480 00d4 734B     		ldr	r3, .L59+92
 481 00d6 FFF7FEFF 		bl	__aeabi_dsub
 482              	.LVL17:
 293:firmwares/fixedwing/guidance/guidance_v.c ****                     / (AGR_BLEND_START - AGR_BLEND_END);
 483              		.loc 1 293 0
 484 00da 0022     		movs	r2, #0
 485 00dc 714B     		ldr	r3, .L59+92
 486 00de FFF7FEFF 		bl	__aeabi_ddiv
 487              	.LVL18:
 292:firmwares/fixedwing/guidance/guidance_v.c ****                     / (AGR_BLEND_START - AGR_BLEND_END);
 488              		.loc 1 292 0
 489 00e2 FFF7FEFF 		bl	__aeabi_d2f
 490              	.LVL19:
 491 00e6 0AEE100A 		fmsr	s20, r0
 492              	.LVL20:
 294:firmwares/fixedwing/guidance/guidance_v.c ****       f_throttle = (1 - ratio) * controlled_throttle;
 493              		.loc 1 294 0
 494 00ea F7EE007A 		fconsts	s15, #112
 495 00ee 77EECA7A 		fsubs	s15, s15, s20
 295:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_pitch_setpoint = (1 - ratio) * (v_ctl_pitch_of_vz + v_ctl_pitch_trim);
 496              		.loc 1 295 0
 497 00f2 96ED007A 		flds	s14, [r6]
 296:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_auto_throttle_sum_err += (1 - ratio) * err;
 498              		.loc 1 296 0
 499 00f6 A7EEAA9A 		vfma.f32	s18, s15, s21
 295:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_pitch_setpoint = (1 - ratio) * (v_ctl_pitch_of_vz + v_ctl_pitch_trim);
 500              		.loc 1 295 0
 501 00fa 78EE878A 		fadds	s17, s17, s14
 502              	.LVL21:
 297:firmwares/fixedwing/guidance/guidance_v.c ****       BoundAbs(v_ctl_auto_throttle_sum_err, V_CTL_AUTO_THROTTLE_MAX_SUM_ERR);
 503              		.loc 1 297 0
 504 00fe B4EEE99A 		fcmpes	s18, s19
 505 0102 F1EE10FA 		fmstat
 294:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_pitch_setpoint = (1 - ratio) * (v_ctl_pitch_of_vz + v_ctl_pitch_trim);
 506              		.loc 1 294 0
 507 0106 27EE888A 		fmuls	s16, s15, s16
 508              	.LVL22:
 295:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_auto_throttle_sum_err += (1 - ratio) * err;
 509              		.loc 1 295 0
 510 010a 67EEA88A 		fmuls	s17, s15, s17
 511              		.loc 1 297 0
 512 010e 02DD     		ble	.L54
 513 0110 C5ED009A 		fsts	s19, [r5]
 514 0114 0AE0     		b	.L37
 515              	.L54:
 516 0116 DFED647A 		flds	s15, .L59+96
 296:firmwares/fixedwing/guidance/guidance_v.c ****       BoundAbs(v_ctl_auto_throttle_sum_err, V_CTL_AUTO_THROTTLE_MAX_SUM_ERR);
 517              		.loc 1 296 0
 518 011a B4EEE79A 		fcmpes	s18, s15
 519 011e F1EE10FA 		fmstat
 520 0122 58BF     		it	pl
 521 0124 F0EE497A 		fcpyspl	s15, s18
 522 0128 C5ED007A 		fsts	s15, [r5]
 523              	.L37:
 298:firmwares/fixedwing/guidance/guidance_v.c ****       /* positive error -> too low */
 299:firmwares/fixedwing/guidance/guidance_v.c ****       if (v_ctl_altitude_error > 0) {
 524              		.loc 1 299 0
 525 012c B5EEC0BA 		fcmpezs	s22
 526 0130 F1EE10FA 		fmstat
 527 0134 15DD     		ble	.L55
 528              	.LVL23:
 300:firmwares/fixedwing/guidance/guidance_v.c ****         f_throttle +=  ratio * AGR_CLIMB_THROTTLE;
 301:firmwares/fixedwing/guidance/guidance_v.c ****         v_ctl_pitch_setpoint += ratio * AGR_CLIMB_PITCH;
 529              		.loc 1 301 0
 530 0136 18EE900A 		fmrs	r0, s17
 531              	.LVL24:
 532 013a FFF7FEFF 		bl	__aeabi_f2d
 533              	.LVL25:
 534 013e 0646     		mov	r6, r0
 535 0140 1AEE100A 		fmrs	r0, s20
 536 0144 0F46     		mov	r7, r1
 537 0146 FFF7FEFF 		bl	__aeabi_f2d
 538              	.LVL26:
 539 014a 3FA3     		adr	r3, .L59
 540 014c D3E90023 		ldrd	r2, [r3]
 541 0150 FFF7FEFF 		bl	__aeabi_dmul
 542              	.LVL27:
 300:firmwares/fixedwing/guidance/guidance_v.c ****         f_throttle +=  ratio * AGR_CLIMB_THROTTLE;
 543              		.loc 1 300 0
 544 0154 38EE0A8A 		fadds	s16, s16, s20
 545              	.LVL28:
 546              		.loc 1 301 0
 547 0158 0246     		mov	r2, r0
 548 015a 0B46     		mov	r3, r1
 549 015c 3046     		mov	r0, r6
 550 015e 3946     		mov	r1, r7
 551 0160 2CE0     		b	.L57
 552              	.LVL29:
 553              	.L55:
 302:firmwares/fixedwing/guidance/guidance_v.c ****       } else {
 303:firmwares/fixedwing/guidance/guidance_v.c ****         f_throttle += ratio * AGR_DESCENT_THROTTLE;
 554              		.loc 1 303 0
 555 0162 1AEE100A 		fmrs	r0, s20
 556              	.LVL30:
 557 0166 FFF7FEFF 		bl	__aeabi_f2d
 558              	.LVL31:
 559 016a 0646     		mov	r6, r0
 560 016c 18EE100A 		fmrs	r0, s16
 561 0170 0F46     		mov	r7, r1
 562 0172 FFF7FEFF 		bl	__aeabi_f2d
 563              	.LVL32:
 564 0176 36A3     		adr	r3, .L59+8
 565 0178 D3E90023 		ldrd	r2, [r3]
 566 017c 8046     		mov	r8, r0
 567 017e 8946     		mov	r9, r1
 568 0180 3046     		mov	r0, r6
 569 0182 3946     		mov	r1, r7
 570 0184 FFF7FEFF 		bl	__aeabi_dmul
 571              	.LVL33:
 572 0188 0246     		mov	r2, r0
 573 018a 0B46     		mov	r3, r1
 574 018c 4046     		mov	r0, r8
 575 018e 4946     		mov	r1, r9
 576 0190 FFF7FEFF 		bl	__aeabi_dadd
 577              	.LVL34:
 578 0194 FFF7FEFF 		bl	__aeabi_d2f
 579              	.LVL35:
 580 0198 08EE100A 		fmsr	s16, r0
 581              	.LVL36:
 304:firmwares/fixedwing/guidance/guidance_v.c ****         v_ctl_pitch_setpoint += ratio * AGR_DESCENT_PITCH;
 582              		.loc 1 304 0
 583 019c 18EE900A 		fmrs	r0, s17
 584 01a0 FFF7FEFF 		bl	__aeabi_f2d
 585              	.LVL37:
 586 01a4 0022     		movs	r2, #0
 587 01a6 8046     		mov	r8, r0
 588 01a8 8946     		mov	r9, r1
 589 01aa 404B     		ldr	r3, .L59+100
 590 01ac 3046     		mov	r0, r6
 591 01ae 3946     		mov	r1, r7
 592 01b0 FFF7FEFF 		bl	__aeabi_dmul
 593              	.LVL38:
 594 01b4 0246     		mov	r2, r0
 595 01b6 0B46     		mov	r3, r1
 596 01b8 4046     		mov	r0, r8
 597 01ba 4946     		mov	r1, r9
 598              	.L57:
 599 01bc FFF7FEFF 		bl	__aeabi_dadd
 600              	.LVL39:
 601 01c0 FFF7FEFF 		bl	__aeabi_d2f
 602              	.LVL40:
 603 01c4 2060     		str	r0, [r4]	@ float
 604 01c6 1FE0     		b	.L34
 605              	.LVL41:
 606              	.L58:
 607              	.LBE21:
 305:firmwares/fixedwing/guidance/guidance_v.c ****       }
 306:firmwares/fixedwing/guidance/guidance_v.c ****       break;
 307:firmwares/fixedwing/guidance/guidance_v.c ****     }
 308:firmwares/fixedwing/guidance/guidance_v.c **** 
 309:firmwares/fixedwing/guidance/guidance_v.c ****     case V_CTL_AUTO_THROTTLE_STANDARD:
 310:firmwares/fixedwing/guidance/guidance_v.c ****     default:
 311:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 312:firmwares/fixedwing/guidance/guidance_v.c ****       f_throttle = controlled_throttle;
 313:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_auto_throttle_sum_err += err;
 608              		.loc 1 313 0
 609 01c8 39EE2A9A 		fadds	s18, s18, s21
 314:firmwares/fixedwing/guidance/guidance_v.c ****       BoundAbs(v_ctl_auto_throttle_sum_err, V_CTL_AUTO_THROTTLE_MAX_SUM_ERR);
 610              		.loc 1 314 0
 611 01cc B4EEE99A 		fcmpes	s18, s19
 612 01d0 F1EE10FA 		fmstat
 613 01d4 02DD     		ble	.L56
 614 01d6 C5ED009A 		fsts	s19, [r5]
 615 01da 0AE0     		b	.L43
 616              	.L56:
 617 01dc DFED327A 		flds	s15, .L59+96
 618              	.LVL42:
 313:firmwares/fixedwing/guidance/guidance_v.c ****       BoundAbs(v_ctl_auto_throttle_sum_err, V_CTL_AUTO_THROTTLE_MAX_SUM_ERR);
 619              		.loc 1 313 0
 620 01e0 B4EEE79A 		fcmpes	s18, s15
 621 01e4 F1EE10FA 		fmstat
 622 01e8 48BF     		it	mi
 623 01ea B0EE679A 		fcpysmi	s18, s15
 624 01ee 85ED009A 		fsts	s18, [r5]
 625              	.L43:
 315:firmwares/fixedwing/guidance/guidance_v.c ****       v_ctl_pitch_setpoint = v_ctl_pitch_of_vz + v_ctl_pitch_trim + nav_pitch;
 626              		.loc 1 315 0
 627 01f2 D6ED007A 		flds	s15, [r6]
 628 01f6 2E4B     		ldr	r3, .L59+104
 629 01f8 78EEA78A 		fadds	s17, s17, s15
 630              	.LVL43:
 631 01fc D3ED007A 		flds	s15, [r3]
 632 0200 78EEA78A 		fadds	s17, s17, s15
 633 0204 C4ED008A 		fsts	s17, [r4]
 634              	.LVL44:
 635              	.L34:
 316:firmwares/fixedwing/guidance/guidance_v.c **** #if defined AGR_CLIMB
 317:firmwares/fixedwing/guidance/guidance_v.c ****       break;
 318:firmwares/fixedwing/guidance/guidance_v.c ****   } /* switch submode */
 319:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 320:firmwares/fixedwing/guidance/guidance_v.c **** 
 321:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_throttle_setpoint = TRIM_UPPRZ(f_throttle * MAX_PPRZ);
 636              		.loc 1 321 0
 637 0208 DFED2A7A 		flds	s15, .L59+108
 638 020c 28EE278A 		fmuls	s16, s16, s15
 639 0210 B5EEC08A 		fcmpezs	s16
 640 0214 F1EE10FA 		fmstat
 641 0218 0BD4     		bmi	.L46
 642 021a B4EEE78A 		fcmpes	s16, s15
 643 021e F1EE10FA 		fmstat
 644 0222 08DC     		bgt	.L47
 645 0224 BDEEC88A 		ftosizs	s16, s16
 646 0228 8DED018A 		fsts	s16, [sp, #4]	@ int
 647 022c BDF80430 		ldrh	r3, [sp, #4]
 648 0230 03E0     		b	.L45
 649              	.L46:
 650 0232 0023     		movs	r3, #0
 651 0234 01E0     		b	.L45
 652              	.L47:
 653 0236 4FF41653 		mov	r3, #9600
 654              	.L45:
 655 023a 1F4A     		ldr	r2, .L59+112
 656 023c 1380     		strh	r3, [r2]	@ movhi
 657              	.LBE23:
 658              	.LBE25:
 252:firmwares/fixedwing/guidance/guidance_v.c **** 
 659              		.loc 1 252 0
 660 023e 03B0     		add	sp, sp, #12
 661              		.cfi_def_cfa_offset 60
 662              		@ sp needed
 663 0240 BDEC088B 		fldmfdd	sp!, {d8-d11}
 664              		.cfi_restore 86
 665              		.cfi_restore 87
 666              		.cfi_restore 84
 667              		.cfi_restore 85
 668              		.cfi_restore 82
 669              		.cfi_restore 83
 670              		.cfi_restore 80
 671              		.cfi_restore 81
 672              		.cfi_def_cfa_offset 28
 673 0244 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 674              	.L60:
 675              		.align	3
 676              	.L59:
 677 0248 33333333 		.word	858993459
 678 024c 3333D33F 		.word	1070805811
 679 0250 9A999999 		.word	-1717986918
 680 0254 9999B93F 		.word	1069128089
 681 0258 00000000 		.word	state
 682 025c 00000000 		.word	.LANCHOR7
 683 0260 00000000 		.word	.LANCHOR24
 684 0264 00000000 		.word	.LANCHOR20
 685 0268 00000000 		.word	.LANCHOR10
 686 026c 00000000 		.word	.LANCHOR17
 687 0270 00000000 		.word	.LANCHOR16
 688 0274 00000000 		.word	.LANCHOR15
 689 0278 00000000 		.word	.LANCHOR18
 690 027c 00000000 		.word	.LANCHOR19
 691 0280 00000000 		.word	.LANCHOR22
 692 0284 00000000 		.word	.LANCHOR21
 693 0288 00000000 		.word	.LANCHOR9
 694 028c 00000000 		.word	.LANCHOR11
 695 0290 00001643 		.word	1125515264
 696 0294 9A99993E 		.word	1050253722
 697 0298 000080BE 		.word	-1098907648
 698 029c CDCCCC3D 		.word	1036831949
 699 02a0 00000000 		.word	.LANCHOR4
 700 02a4 00002440 		.word	1076101120
 701 02a8 000016C3 		.word	-1021968384
 702 02ac 0000D0BF 		.word	-1076887552
 703 02b0 00000000 		.word	nav_pitch
 704 02b4 00001646 		.word	1175846912
 705 02b8 00000000 		.word	.LANCHOR23
 706              		.cfi_endproc
 707              	.LFE142:
 709              		.global	__aeabi_i2d
 710              		.global	__aeabi_dcmpgt
 711              		.global	__aeabi_dcmplt
 712              		.section	.text.v_ctl_throttle_slew,"ax",%progbits
 713              		.align	1
 714              		.global	v_ctl_throttle_slew
 715              		.thumb
 716              		.thumb_func
 718              	v_ctl_throttle_slew:
 719              	.LFB144:
 322:firmwares/fixedwing/guidance/guidance_v.c **** }
 323:firmwares/fixedwing/guidance/guidance_v.c **** 
 324:firmwares/fixedwing/guidance/guidance_v.c **** #else // USE_AIRSPEED
 325:firmwares/fixedwing/guidance/guidance_v.c **** 
 326:firmwares/fixedwing/guidance/guidance_v.c **** inline static void v_ctl_climb_auto_throttle_loop(void)
 327:firmwares/fixedwing/guidance/guidance_v.c **** {
 328:firmwares/fixedwing/guidance/guidance_v.c ****   float f_throttle = 0;
 329:firmwares/fixedwing/guidance/guidance_v.c ****   float controlled_throttle;
 330:firmwares/fixedwing/guidance/guidance_v.c ****   float v_ctl_pitch_of_vz;
 331:firmwares/fixedwing/guidance/guidance_v.c **** 
 332:firmwares/fixedwing/guidance/guidance_v.c ****   // Limit rate of change of climb setpoint (to ensure that airspeed loop can catch-up)
 333:firmwares/fixedwing/guidance/guidance_v.c ****   static float v_ctl_climb_setpoint_last = 0;
 334:firmwares/fixedwing/guidance/guidance_v.c ****   float diff_climb = v_ctl_climb_setpoint - v_ctl_climb_setpoint_last;
 335:firmwares/fixedwing/guidance/guidance_v.c ****   Bound(diff_climb, -V_CTL_AUTO_CLIMB_LIMIT, V_CTL_AUTO_CLIMB_LIMIT);
 336:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_setpoint = v_ctl_climb_setpoint_last + diff_climb;
 337:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_climb_setpoint_last = v_ctl_climb_setpoint;
 338:firmwares/fixedwing/guidance/guidance_v.c **** 
 339:firmwares/fixedwing/guidance/guidance_v.c ****   // Pitch control (input: rate of climb error, output: pitch setpoint)
 340:firmwares/fixedwing/guidance/guidance_v.c ****   float err  = stateGetSpeedEnu_f()->z - v_ctl_climb_setpoint;
 341:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_pitch_sum_err += err;
 342:firmwares/fixedwing/guidance/guidance_v.c ****   BoundAbs(v_ctl_auto_pitch_sum_err, V_CTL_AUTO_PITCH_MAX_SUM_ERR);
 343:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_pitch_of_vz = -v_ctl_auto_pitch_pgain *
 344:firmwares/fixedwing/guidance/guidance_v.c ****                       (err + v_ctl_auto_pitch_igain * v_ctl_auto_pitch_sum_err);
 345:firmwares/fixedwing/guidance/guidance_v.c **** 
 346:firmwares/fixedwing/guidance/guidance_v.c ****   // Ground speed control loop (input: groundspeed error, output: airspeed controlled)
 347:firmwares/fixedwing/guidance/guidance_v.c ****   float err_groundspeed = (v_ctl_auto_groundspeed_setpoint - *stateGetHorizontalSpeedNorm_f());
 348:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_groundspeed_sum_err += err_groundspeed;
 349:firmwares/fixedwing/guidance/guidance_v.c ****   BoundAbs(v_ctl_auto_groundspeed_sum_err, V_CTL_AUTO_GROUNDSPEED_MAX_SUM_ERR);
 350:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_airspeed_controlled = (err_groundspeed + v_ctl_auto_groundspeed_sum_err * v_ctl_auto_g
 351:firmwares/fixedwing/guidance/guidance_v.c ****                                    v_ctl_auto_groundspeed_pgain;
 352:firmwares/fixedwing/guidance/guidance_v.c **** 
 353:firmwares/fixedwing/guidance/guidance_v.c ****   // Do not allow controlled airspeed below the setpoint
 354:firmwares/fixedwing/guidance/guidance_v.c ****   if (v_ctl_auto_airspeed_controlled < v_ctl_auto_airspeed_setpoint) {
 355:firmwares/fixedwing/guidance/guidance_v.c ****     v_ctl_auto_airspeed_controlled = v_ctl_auto_airspeed_setpoint;
 356:firmwares/fixedwing/guidance/guidance_v.c ****     v_ctl_auto_groundspeed_sum_err = v_ctl_auto_airspeed_controlled / (v_ctl_auto_groundspeed_pgain
 357:firmwares/fixedwing/guidance/guidance_v.c ****                                      v_ctl_auto_groundspeed_igain); // reset integrator of ground s
 358:firmwares/fixedwing/guidance/guidance_v.c ****   }
 359:firmwares/fixedwing/guidance/guidance_v.c **** 
 360:firmwares/fixedwing/guidance/guidance_v.c ****   // Airspeed control loop (input: airspeed controlled, output: throttle controlled)
 361:firmwares/fixedwing/guidance/guidance_v.c ****   float err_airspeed = (v_ctl_auto_airspeed_controlled - *stateGetAirspeed_f());
 362:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_airspeed_sum_err += err_airspeed;
 363:firmwares/fixedwing/guidance/guidance_v.c ****   BoundAbs(v_ctl_auto_airspeed_sum_err, V_CTL_AUTO_AIRSPEED_MAX_SUM_ERR);
 364:firmwares/fixedwing/guidance/guidance_v.c ****   controlled_throttle = (err_airspeed + v_ctl_auto_airspeed_sum_err * v_ctl_auto_airspeed_igain) *
 365:firmwares/fixedwing/guidance/guidance_v.c ****                         v_ctl_auto_airspeed_pgain;
 366:firmwares/fixedwing/guidance/guidance_v.c **** 
 367:firmwares/fixedwing/guidance/guidance_v.c ****   // Done, set outputs
 368:firmwares/fixedwing/guidance/guidance_v.c ****   Bound(controlled_throttle, 0, v_ctl_auto_throttle_max_cruise_throttle);
 369:firmwares/fixedwing/guidance/guidance_v.c ****   f_throttle = controlled_throttle;
 370:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_pitch_setpoint = v_ctl_pitch_of_vz + v_ctl_pitch_trim;
 371:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_throttle_setpoint = TRIM_UPPRZ(f_throttle * MAX_PPRZ);
 372:firmwares/fixedwing/guidance/guidance_v.c ****   Bound(v_ctl_pitch_setpoint, V_CTL_AUTO_PITCH_MIN_PITCH, V_CTL_AUTO_PITCH_MAX_PITCH);
 373:firmwares/fixedwing/guidance/guidance_v.c **** }
 374:firmwares/fixedwing/guidance/guidance_v.c **** 
 375:firmwares/fixedwing/guidance/guidance_v.c **** #endif // USE_AIRSPEED
 376:firmwares/fixedwing/guidance/guidance_v.c **** 
 377:firmwares/fixedwing/guidance/guidance_v.c **** 
 378:firmwares/fixedwing/guidance/guidance_v.c **** /**
 379:firmwares/fixedwing/guidance/guidance_v.c ****  * auto pitch inner loop
 380:firmwares/fixedwing/guidance/guidance_v.c ****  * \brief computes a v_ctl_pitch_setpoint from a climb_setpoint given a fixed throttle
 381:firmwares/fixedwing/guidance/guidance_v.c ****  */
 382:firmwares/fixedwing/guidance/guidance_v.c **** #ifdef V_CTL_AUTO_PITCH_PGAIN
 383:firmwares/fixedwing/guidance/guidance_v.c **** inline static void v_ctl_climb_auto_pitch_loop(void)
 384:firmwares/fixedwing/guidance/guidance_v.c **** {
 385:firmwares/fixedwing/guidance/guidance_v.c ****   float err  = stateGetSpeedEnu_f()->z - v_ctl_climb_setpoint;
 386:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_throttle_setpoint = nav_throttle_setpoint;
 387:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_auto_pitch_sum_err += err;
 388:firmwares/fixedwing/guidance/guidance_v.c ****   BoundAbs(v_ctl_auto_pitch_sum_err, V_CTL_AUTO_PITCH_MAX_SUM_ERR);
 389:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_pitch_setpoint = v_ctl_pitch_trim - v_ctl_auto_pitch_pgain *
 390:firmwares/fixedwing/guidance/guidance_v.c ****                          (err + v_ctl_auto_pitch_igain * v_ctl_auto_pitch_sum_err);
 391:firmwares/fixedwing/guidance/guidance_v.c ****   Bound(v_ctl_pitch_setpoint, V_CTL_AUTO_PITCH_MIN_PITCH, V_CTL_AUTO_PITCH_MAX_PITCH);
 392:firmwares/fixedwing/guidance/guidance_v.c **** }
 393:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 394:firmwares/fixedwing/guidance/guidance_v.c **** 
 395:firmwares/fixedwing/guidance/guidance_v.c **** #ifdef V_CTL_THROTTLE_SLEW_LIMITER
 396:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_THROTTLE_SLEW (1./CONTROL_FREQUENCY/(V_CTL_THROTTLE_SLEW_LIMITER))
 397:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 398:firmwares/fixedwing/guidance/guidance_v.c **** 
 399:firmwares/fixedwing/guidance/guidance_v.c **** #ifndef V_CTL_THROTTLE_SLEW
 400:firmwares/fixedwing/guidance/guidance_v.c **** #define V_CTL_THROTTLE_SLEW 1.
 401:firmwares/fixedwing/guidance/guidance_v.c **** #endif
 402:firmwares/fixedwing/guidance/guidance_v.c **** /** \brief Computes slewed throttle from throttle setpoint
 403:firmwares/fixedwing/guidance/guidance_v.c ****     called at 20Hz
 404:firmwares/fixedwing/guidance/guidance_v.c ****  */
 405:firmwares/fixedwing/guidance/guidance_v.c **** void v_ctl_throttle_slew(void)
 406:firmwares/fixedwing/guidance/guidance_v.c **** {
 720              		.loc 1 406 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 724 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 725              		.cfi_def_cfa_offset 24
 726              		.cfi_offset 4, -24
 727              		.cfi_offset 5, -20
 728              		.cfi_offset 6, -16
 729              		.cfi_offset 7, -12
 730              		.cfi_offset 8, -8
 731              		.cfi_offset 14, -4
 407:firmwares/fixedwing/guidance/guidance_v.c ****   pprz_t diff_throttle = v_ctl_throttle_setpoint - v_ctl_throttle_slewed;
 732              		.loc 1 407 0
 733 0004 114B     		ldr	r3, .L66
 734 0006 124D     		ldr	r5, .L66+4
 735 0008 1B88     		ldrh	r3, [r3]
 736 000a B5F80080 		ldrh	r8, [r5]
 737 000e C8EB0303 		rsb	r3, r8, r3
 738 0012 9CB2     		uxth	r4, r3
 739              	.LVL45:
 408:firmwares/fixedwing/guidance/guidance_v.c ****   BoundAbs(diff_throttle, TRIM_PPRZ(V_CTL_THROTTLE_SLEW * MAX_PPRZ));
 740              		.loc 1 408 0
 741 0014 20B2     		sxth	r0, r4
 742 0016 FFF7FEFF 		bl	__aeabi_i2d
 743              	.LVL46:
 744 001a 0022     		movs	r2, #0
 745 001c 0D4B     		ldr	r3, .L66+8
 746 001e 0646     		mov	r6, r0
 747 0020 0F46     		mov	r7, r1
 748 0022 FFF7FEFF 		bl	__aeabi_dcmpgt
 749              	.LVL47:
 750 0026 58B9     		cbnz	r0, .L64
 751              		.loc 1 408 0 is_stmt 0 discriminator 2
 752 0028 0B4B     		ldr	r3, .L66+12
 753 002a 3046     		mov	r0, r6
 754 002c 3946     		mov	r1, r7
 755 002e 0022     		movs	r2, #0
 756 0030 FFF7FEFF 		bl	__aeabi_dcmplt
 757              	.LVL48:
 758 0034 4FF6B073 		movw	r3, #65456
 759 0038 0028     		cmp	r0, #0
 760 003a 18BF     		it	ne
 761 003c 1C46     		movne	r4, r3
 762              	.LVL49:
 763 003e 00E0     		b	.L62
 764              	.LVL50:
 765              	.L64:
 766              		.loc 1 408 0
 767 0040 5024     		movs	r4, #80
 768              	.LVL51:
 769              	.L62:
 409:firmwares/fixedwing/guidance/guidance_v.c ****   v_ctl_throttle_slewed += diff_throttle;
 770              		.loc 1 409 0 is_stmt 1
 771 0042 4444     		add	r4, r4, r8
 772              	.LVL52:
 773 0044 2C80     		strh	r4, [r5]	@ movhi
 774 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 775              	.L67:
 776 004a 00BF     		.align	2
 777              	.L66:
 778 004c 00000000 		.word	.LANCHOR23
 779 0050 00000000 		.word	.LANCHOR25
 780 0054 00005440 		.word	1079246848
 781 0058 000054C0 		.word	-1068236800
 782              		.cfi_endproc
 783              	.LFE144:
 785              		.global	v_ctl_pitch_trim
 786              		.global	v_ctl_pitch_setpoint
 787              		.global	v_ctl_throttle_slewed
 788              		.global	v_ctl_throttle_setpoint
 789              		.global	v_ctl_auto_pitch_sum_err
 790              		.global	v_ctl_auto_pitch_igain
 791              		.global	v_ctl_auto_pitch_pgain
 792              		.global	v_ctl_auto_throttle_pitch_of_vz_dgain
 793              		.global	v_ctl_auto_throttle_pitch_of_vz_pgain
 794              		.global	v_ctl_auto_throttle_sum_err
 795              		.global	v_ctl_auto_throttle_dgain
 796              		.global	v_ctl_auto_throttle_igain
 797              		.global	v_ctl_auto_throttle_pgain
 798              		.global	v_ctl_auto_throttle_climb_throttle_increment
 799              		.global	v_ctl_auto_throttle_max_cruise_throttle
 800              		.global	v_ctl_auto_throttle_min_cruise_throttle
 801              		.global	v_ctl_auto_throttle_nominal_cruise_throttle
 802              		.global	v_ctl_auto_throttle_cruise_throttle
 803              		.global	v_ctl_auto_throttle_submode
 804              		.global	v_ctl_climb_mode
 805              		.global	v_ctl_climb_setpoint
 806              		.global	v_ctl_altitude_max_climb
 807              		.global	v_ctl_altitude_pre_climb_correction
 808              		.global	v_ctl_altitude_error
 809              		.global	v_ctl_altitude_pgain
 810              		.global	v_ctl_altitude_pre_climb
 811              		.global	v_ctl_altitude_setpoint
 812              		.global	v_ctl_mode
 813              		.section	.bss.v_ctl_auto_throttle_nominal_cruise_throttle,"aw",%nobits
 814              		.align	2
 815              		.set	.LANCHOR12,. + 0
 818              	v_ctl_auto_throttle_nominal_cruise_throttle:
 819 0000 00000000 		.space	4
 820              		.section	.bss.v_ctl_auto_throttle_dgain,"aw",%nobits
 821              		.align	2
 822              		.set	.LANCHOR19,. + 0
 825              	v_ctl_auto_throttle_dgain:
 826 0000 00000000 		.space	4
 827              		.section	.bss.v_ctl_auto_throttle_max_cruise_throttle,"aw",%nobits
 828              		.align	2
 829              		.set	.LANCHOR14,. + 0
 832              	v_ctl_auto_throttle_max_cruise_throttle:
 833 0000 00000000 		.space	4
 834              		.section	.bss.v_ctl_altitude_pre_climb_correction,"aw",%nobits
 835              		.align	2
 836              		.set	.LANCHOR5,. + 0
 839              	v_ctl_altitude_pre_climb_correction:
 840 0000 00000000 		.space	4
 841              		.section	.bss.v_ctl_altitude_setpoint,"aw",%nobits
 842              		.align	2
 843              		.set	.LANCHOR1,. + 0
 846              	v_ctl_altitude_setpoint:
 847 0000 00000000 		.space	4
 848              		.section	.bss.v_ctl_mode,"aw",%nobits
 849              		.set	.LANCHOR0,. + 0
 852              	v_ctl_mode:
 853 0000 00       		.space	1
 854              		.section	.bss.v_ctl_auto_throttle_pitch_of_vz_pgain,"aw",%nobits
 855              		.align	2
 856              		.set	.LANCHOR21,. + 0
 859              	v_ctl_auto_throttle_pitch_of_vz_pgain:
 860 0000 00000000 		.space	4
 861              		.section	.bss.v_ctl_auto_throttle_pitch_of_vz_dgain,"aw",%nobits
 862              		.align	2
 863              		.set	.LANCHOR22,. + 0
 866              	v_ctl_auto_throttle_pitch_of_vz_dgain:
 867 0000 00000000 		.space	4
 868              		.section	.bss.last_err.7071,"aw",%nobits
 869              		.align	2
 870              		.set	.LANCHOR24,. + 0
 873              	last_err.7071:
 874 0000 00000000 		.space	4
 875              		.section	.bss.v_ctl_auto_pitch_pgain,"aw",%nobits
 876              		.align	2
 879              	v_ctl_auto_pitch_pgain:
 880 0000 00000000 		.space	4
 881              		.section	.bss.v_ctl_auto_throttle_climb_throttle_increment,"aw",%nobits
 882              		.align	2
 883              		.set	.LANCHOR16,. + 0
 886              	v_ctl_auto_throttle_climb_throttle_increment:
 887 0000 00000000 		.space	4
 888              		.section	.bss.v_ctl_throttle_setpoint,"aw",%nobits
 889              		.align	1
 890              		.set	.LANCHOR23,. + 0
 893              	v_ctl_throttle_setpoint:
 894 0000 0000     		.space	2
 895              		.section	.bss.v_ctl_auto_throttle_sum_err,"aw",%nobits
 896              		.align	2
 897              		.set	.LANCHOR20,. + 0
 900              	v_ctl_auto_throttle_sum_err:
 901 0000 00000000 		.space	4
 902              		.section	.bss.v_ctl_auto_throttle_igain,"aw",%nobits
 903              		.align	2
 904              		.set	.LANCHOR18,. + 0
 907              	v_ctl_auto_throttle_igain:
 908 0000 00000000 		.space	4
 909              		.section	.bss.v_ctl_climb_setpoint,"aw",%nobits
 910              		.align	2
 911              		.set	.LANCHOR7,. + 0
 914              	v_ctl_climb_setpoint:
 915 0000 00000000 		.space	4
 916              		.section	.bss.v_ctl_auto_pitch_sum_err,"aw",%nobits
 917              		.align	2
 920              	v_ctl_auto_pitch_sum_err:
 921 0000 00000000 		.space	4
 922              		.section	.bss.v_ctl_throttle_slewed,"aw",%nobits
 923              		.align	1
 924              		.set	.LANCHOR25,. + 0
 927              	v_ctl_throttle_slewed:
 928 0000 0000     		.space	2
 929              		.section	.bss.v_ctl_pitch_trim,"aw",%nobits
 930              		.align	2
 931              		.set	.LANCHOR11,. + 0
 934              	v_ctl_pitch_trim:
 935 0000 00000000 		.space	4
 936              		.section	.bss.v_ctl_auto_throttle_submode,"aw",%nobits
 937              		.set	.LANCHOR9,. + 0
 940              	v_ctl_auto_throttle_submode:
 941 0000 00       		.space	1
 942              		.section	.bss.v_ctl_auto_throttle_pgain,"aw",%nobits
 943              		.align	2
 944              		.set	.LANCHOR17,. + 0
 947              	v_ctl_auto_throttle_pgain:
 948 0000 00000000 		.space	4
 949              		.section	.bss.v_ctl_auto_pitch_igain,"aw",%nobits
 950              		.align	2
 953              	v_ctl_auto_pitch_igain:
 954 0000 00000000 		.space	4
 955              		.section	.bss.v_ctl_climb_mode,"aw",%nobits
 956              		.set	.LANCHOR8,. + 0
 959              	v_ctl_climb_mode:
 960 0000 00       		.space	1
 961              		.section	.bss.v_ctl_altitude_pre_climb,"aw",%nobits
 962              		.align	2
 963              		.set	.LANCHOR2,. + 0
 966              	v_ctl_altitude_pre_climb:
 967 0000 00000000 		.space	4
 968              		.section	.bss.v_ctl_altitude_error,"aw",%nobits
 969              		.align	2
 970              		.set	.LANCHOR4,. + 0
 973              	v_ctl_altitude_error:
 974 0000 00000000 		.space	4
 975              		.section	.bss.v_ctl_auto_throttle_cruise_throttle,"aw",%nobits
 976              		.align	2
 977              		.set	.LANCHOR15,. + 0
 980              	v_ctl_auto_throttle_cruise_throttle:
 981 0000 00000000 		.space	4
 982              		.section	.bss.v_ctl_auto_throttle_min_cruise_throttle,"aw",%nobits
 983              		.align	2
 984              		.set	.LANCHOR13,. + 0
 987              	v_ctl_auto_throttle_min_cruise_throttle:
 988 0000 00000000 		.space	4
 989              		.section	.bss.v_ctl_altitude_pgain,"aw",%nobits
 990              		.align	2
 991              		.set	.LANCHOR3,. + 0
 994              	v_ctl_altitude_pgain:
 995 0000 00000000 		.space	4
 996              		.section	.bss.v_ctl_pitch_setpoint,"aw",%nobits
 997              		.align	2
 998              		.set	.LANCHOR10,. + 0
 1001              	v_ctl_pitch_setpoint:
 1002 0000 00000000 		.space	4
 1003              		.section	.bss.v_ctl_altitude_max_climb,"aw",%nobits
 1004              		.align	2
 1005              		.set	.LANCHOR6,. + 0
 1008              	v_ctl_altitude_max_climb:
 1009 0000 00000000 		.space	4
 1010              		.text
 1011              	.Letext0:
 1012              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1013              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1014              		.file 5 "./paparazzi.h"
 1015              		.file 6 "/home/dino/paparazzi/sw/include/std.h"
 1016              		.file 7 "./math/pprz_algebra_int.h"
 1017              		.file 8 "./math/pprz_algebra_float.h"
 1018              		.file 9 "./math/pprz_geodetic_int.h"
 1019              		.file 10 "./math/pprz_geodetic_float.h"
 1020              		.file 11 "./math/pprz_orientation_conversion.h"
 1021              		.file 12 "./firmwares/fixedwing/nav.h"
 1022              		.file 13 "./firmwares/fixedwing/autopilot.h"
 1023              		.file 14 "./subsystems/settings.h"
DEFINED SYMBOLS
                            *ABS*:00000000 guidance_v.c
     /tmp/ccl107jC.s:20     .text.v_ctl_init:00000000 $t
     /tmp/ccl107jC.s:25     .text.v_ctl_init:00000000 v_ctl_init
     /tmp/ccl107jC.s:133    .text.v_ctl_init:00000080 $d
     /tmp/ccl107jC.s:169    .text.v_ctl_altitude_loop:00000000 $t
     /tmp/ccl107jC.s:174    .text.v_ctl_altitude_loop:00000000 v_ctl_altitude_loop
     /tmp/ccl107jC.s:283    .text.v_ctl_altitude_loop:000000a0 $d
     /tmp/ccl107jC.s:303    .text.v_ctl_climb_loop:00000000 $t
     /tmp/ccl107jC.s:308    .text.v_ctl_climb_loop:00000000 v_ctl_climb_loop
     /tmp/ccl107jC.s:677    .text.v_ctl_climb_loop:00000248 $d
     /tmp/ccl107jC.s:713    .text.v_ctl_throttle_slew:00000000 $t
     /tmp/ccl107jC.s:718    .text.v_ctl_throttle_slew:00000000 v_ctl_throttle_slew
     /tmp/ccl107jC.s:778    .text.v_ctl_throttle_slew:0000004c $d
     /tmp/ccl107jC.s:934    .bss.v_ctl_pitch_trim:00000000 v_ctl_pitch_trim
     /tmp/ccl107jC.s:1001   .bss.v_ctl_pitch_setpoint:00000000 v_ctl_pitch_setpoint
     /tmp/ccl107jC.s:927    .bss.v_ctl_throttle_slewed:00000000 v_ctl_throttle_slewed
     /tmp/ccl107jC.s:893    .bss.v_ctl_throttle_setpoint:00000000 v_ctl_throttle_setpoint
     /tmp/ccl107jC.s:920    .bss.v_ctl_auto_pitch_sum_err:00000000 v_ctl_auto_pitch_sum_err
     /tmp/ccl107jC.s:953    .bss.v_ctl_auto_pitch_igain:00000000 v_ctl_auto_pitch_igain
     /tmp/ccl107jC.s:879    .bss.v_ctl_auto_pitch_pgain:00000000 v_ctl_auto_pitch_pgain
     /tmp/ccl107jC.s:866    .bss.v_ctl_auto_throttle_pitch_of_vz_dgain:00000000 v_ctl_auto_throttle_pitch_of_vz_dgain
     /tmp/ccl107jC.s:859    .bss.v_ctl_auto_throttle_pitch_of_vz_pgain:00000000 v_ctl_auto_throttle_pitch_of_vz_pgain
     /tmp/ccl107jC.s:900    .bss.v_ctl_auto_throttle_sum_err:00000000 v_ctl_auto_throttle_sum_err
     /tmp/ccl107jC.s:825    .bss.v_ctl_auto_throttle_dgain:00000000 v_ctl_auto_throttle_dgain
     /tmp/ccl107jC.s:907    .bss.v_ctl_auto_throttle_igain:00000000 v_ctl_auto_throttle_igain
     /tmp/ccl107jC.s:947    .bss.v_ctl_auto_throttle_pgain:00000000 v_ctl_auto_throttle_pgain
     /tmp/ccl107jC.s:886    .bss.v_ctl_auto_throttle_climb_throttle_increment:00000000 v_ctl_auto_throttle_climb_throttle_increment
     /tmp/ccl107jC.s:832    .bss.v_ctl_auto_throttle_max_cruise_throttle:00000000 v_ctl_auto_throttle_max_cruise_throttle
     /tmp/ccl107jC.s:987    .bss.v_ctl_auto_throttle_min_cruise_throttle:00000000 v_ctl_auto_throttle_min_cruise_throttle
     /tmp/ccl107jC.s:818    .bss.v_ctl_auto_throttle_nominal_cruise_throttle:00000000 v_ctl_auto_throttle_nominal_cruise_throttle
     /tmp/ccl107jC.s:980    .bss.v_ctl_auto_throttle_cruise_throttle:00000000 v_ctl_auto_throttle_cruise_throttle
     /tmp/ccl107jC.s:940    .bss.v_ctl_auto_throttle_submode:00000000 v_ctl_auto_throttle_submode
     /tmp/ccl107jC.s:959    .bss.v_ctl_climb_mode:00000000 v_ctl_climb_mode
     /tmp/ccl107jC.s:914    .bss.v_ctl_climb_setpoint:00000000 v_ctl_climb_setpoint
     /tmp/ccl107jC.s:1008   .bss.v_ctl_altitude_max_climb:00000000 v_ctl_altitude_max_climb
     /tmp/ccl107jC.s:839    .bss.v_ctl_altitude_pre_climb_correction:00000000 v_ctl_altitude_pre_climb_correction
     /tmp/ccl107jC.s:973    .bss.v_ctl_altitude_error:00000000 v_ctl_altitude_error
     /tmp/ccl107jC.s:994    .bss.v_ctl_altitude_pgain:00000000 v_ctl_altitude_pgain
     /tmp/ccl107jC.s:966    .bss.v_ctl_altitude_pre_climb:00000000 v_ctl_altitude_pre_climb
     /tmp/ccl107jC.s:846    .bss.v_ctl_altitude_setpoint:00000000 v_ctl_altitude_setpoint
     /tmp/ccl107jC.s:852    .bss.v_ctl_mode:00000000 v_ctl_mode
     /tmp/ccl107jC.s:814    .bss.v_ctl_auto_throttle_nominal_cruise_throttle:00000000 $d
     /tmp/ccl107jC.s:821    .bss.v_ctl_auto_throttle_dgain:00000000 $d
     /tmp/ccl107jC.s:828    .bss.v_ctl_auto_throttle_max_cruise_throttle:00000000 $d
     /tmp/ccl107jC.s:835    .bss.v_ctl_altitude_pre_climb_correction:00000000 $d
     /tmp/ccl107jC.s:842    .bss.v_ctl_altitude_setpoint:00000000 $d
     /tmp/ccl107jC.s:853    .bss.v_ctl_mode:00000000 $d
     /tmp/ccl107jC.s:855    .bss.v_ctl_auto_throttle_pitch_of_vz_pgain:00000000 $d
     /tmp/ccl107jC.s:862    .bss.v_ctl_auto_throttle_pitch_of_vz_dgain:00000000 $d
     /tmp/ccl107jC.s:869    .bss.last_err.7071:00000000 $d
     /tmp/ccl107jC.s:873    .bss.last_err.7071:00000000 last_err.7071
     /tmp/ccl107jC.s:876    .bss.v_ctl_auto_pitch_pgain:00000000 $d
     /tmp/ccl107jC.s:882    .bss.v_ctl_auto_throttle_climb_throttle_increment:00000000 $d
     /tmp/ccl107jC.s:889    .bss.v_ctl_throttle_setpoint:00000000 $d
     /tmp/ccl107jC.s:896    .bss.v_ctl_auto_throttle_sum_err:00000000 $d
     /tmp/ccl107jC.s:903    .bss.v_ctl_auto_throttle_igain:00000000 $d
     /tmp/ccl107jC.s:910    .bss.v_ctl_climb_setpoint:00000000 $d
     /tmp/ccl107jC.s:917    .bss.v_ctl_auto_pitch_sum_err:00000000 $d
     /tmp/ccl107jC.s:923    .bss.v_ctl_throttle_slewed:00000000 $d
     /tmp/ccl107jC.s:930    .bss.v_ctl_pitch_trim:00000000 $d
     /tmp/ccl107jC.s:941    .bss.v_ctl_auto_throttle_submode:00000000 $d
     /tmp/ccl107jC.s:943    .bss.v_ctl_auto_throttle_pgain:00000000 $d
     /tmp/ccl107jC.s:950    .bss.v_ctl_auto_pitch_igain:00000000 $d
     /tmp/ccl107jC.s:960    .bss.v_ctl_climb_mode:00000000 $d
     /tmp/ccl107jC.s:962    .bss.v_ctl_altitude_pre_climb:00000000 $d
     /tmp/ccl107jC.s:969    .bss.v_ctl_altitude_error:00000000 $d
     /tmp/ccl107jC.s:976    .bss.v_ctl_auto_throttle_cruise_throttle:00000000 $d
     /tmp/ccl107jC.s:983    .bss.v_ctl_auto_throttle_min_cruise_throttle:00000000 $d
     /tmp/ccl107jC.s:990    .bss.v_ctl_altitude_pgain:00000000 $d
     /tmp/ccl107jC.s:997    .bss.v_ctl_pitch_setpoint:00000000 $d
     /tmp/ccl107jC.s:1004   .bss.v_ctl_altitude_max_climb:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.7f506cdee5614e5fae524d20989ad8c8
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.stddef.h.263.49e44f5ee9cdd8820580fc4aa239e32a
                           .group:00000000 wm4.inttypes.h.23.a096771aacee9aba4b33c2d04aacc9b1
                           .group:00000000 wm4.paparazzi.h.2.eeb1c9dc8e5acded3c1d3014b2b23af3
                           .group:00000000 wm4.guidance_common.h.36.3840c8257009a305bdcef508783b823d
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4._ansi.h.13.1b5575dc7921a4c0cff7dbaa2f33e670
                           .group:00000000 wm4.stddef.h.39.2b75ea897b59bf67f50e970d678806e4
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.math.h.35.ad242c9287d2217c7d2035216e5d04ca
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_trig_int.h.28.b756be608c9d9f3092a41321446e5fa2
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.pprz_algebra_int.h.68.04ac162ae1e1d94f716d0bb402062624
                           .group:00000000 wm4.pprz_algebra_float.h.98.bb035bcbfa66bb186e7ea81143fd64bc
                           .group:00000000 wm4.pprz_geodetic.h.35.f7fdb5d11659b92d11c7ce67b6317005
                           .group:00000000 wm4.pprz_geodetic_int.h.127.8e737bed5ba4468e470311184b1fca7f
                           .group:00000000 wm4.pprz_orientation_conversion.h.69.5cce798fefad8bb761767fd414e61db5
                           .group:00000000 wm4.state.h.65.b18954aacb3801ec3e27b4e857d620d3
                           .group:00000000 wm4.nav_survey_rectangle.h.40.be8d41ad6903a05cab94fc858d7a6899
                           .group:00000000 wm4.common_flight_plan.h.28.998f628cac1ef266b3e88de20c1aaea2
                           .group:00000000 wm4.common_nav.h.28.8e6fb87079f62fdfc188e60962e671bb
                           .group:00000000 wm4.nav.h.44.3eb88fcdae84be242ba32ecd12ce1b48
                           .group:00000000 wm4.airframe.h.5.55ffe79377b235d0a97162ed16ec170d
                           .group:00000000 wm4.apogee_1.0.h.2.34ab7bb688056eecb54e2e3ffff48ca6
                           .group:00000000 wm4.actuators_pwm_arch.h.27.5a737f85d71223e6481c4ba4068c062a
                           .group:00000000 wm4.airframe.h.14.814d9a421a57ec2d434c7b6efc262c4b
                           .group:00000000 wm4.autopilot.h.30.340d635d311f125ac0430a6b5533bef7
                           .group:00000000 wm4.common.h.21.22efaac882611267214d0a36f6f15e74
                           .group:00000000 wm4.memorymap.h.21.0c01d18fc5814f65c6ceb1822d4030fa
                           .group:00000000 wm4.memorymap.h.28.85f6f5de65b1d4294c70f79052a0b8c0
                           .group:00000000 wm4.gpio_common_all.h.37.fedbbcb9179f773c905aa3c3e4b7dbdd
                           .group:00000000 wm4.gpio_common_f234.h.48.ee30692f386eaf6801df27cae93943b1
                           .group:00000000 wm4.gpio_common_f24.h.48.4e4be5e3ebe26aee10d604e2d0fecde8
                           .group:00000000 wm4.autopilot.h.122.a7c58c4b7871349616be315a4b094581
                           .group:00000000 wm4.settings.h.29.dff4b7c685fcd0dfb04f9f8de0a69e75

UNDEFINED SYMBOLS
stateCalcPositionUtm_f
state
__aeabi_f2d
__aeabi_dsub
__aeabi_ddiv
__aeabi_d2f
__aeabi_dmul
__aeabi_dadd
stateCalcSpeedEnu_f
nav_pitch
__aeabi_i2d
__aeabi_dcmpgt
__aeabi_dcmplt
