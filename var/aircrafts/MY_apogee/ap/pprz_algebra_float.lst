   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"pprz_algebra_float.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.float_quat_wrap_shortest,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	float_quat_wrap_shortest:
  25              	.LFB12:
  26              		.file 1 "math/pprz_algebra_float.h"
   1:math/pprz_algebra_float.h **** /*
   2:math/pprz_algebra_float.h ****  * Copyright (C) 2008-2014 The Paparazzi Team
   3:math/pprz_algebra_float.h ****  *
   4:math/pprz_algebra_float.h ****  * This file is part of paparazzi.
   5:math/pprz_algebra_float.h ****  *
   6:math/pprz_algebra_float.h ****  * paparazzi is free software; you can redistribute it and/or modify
   7:math/pprz_algebra_float.h ****  * it under the terms of the GNU General Public License as published by
   8:math/pprz_algebra_float.h ****  * the Free Software Foundation; either version 2, or (at your option)
   9:math/pprz_algebra_float.h ****  * any later version.
  10:math/pprz_algebra_float.h ****  *
  11:math/pprz_algebra_float.h ****  * paparazzi is distributed in the hope that it will be useful,
  12:math/pprz_algebra_float.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:math/pprz_algebra_float.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:math/pprz_algebra_float.h ****  * GNU General Public License for more details.
  15:math/pprz_algebra_float.h ****  *
  16:math/pprz_algebra_float.h ****  * You should have received a copy of the GNU General Public License
  17:math/pprz_algebra_float.h ****  * along with paparazzi; see the file COPYING.  If not, see
  18:math/pprz_algebra_float.h ****  * <http://www.gnu.org/licenses/>.
  19:math/pprz_algebra_float.h ****  */
  20:math/pprz_algebra_float.h **** 
  21:math/pprz_algebra_float.h **** /**
  22:math/pprz_algebra_float.h ****  * @file pprz_algebra_float.h
  23:math/pprz_algebra_float.h ****  * @brief Paparazzi floating point algebra.
  24:math/pprz_algebra_float.h ****  *
  25:math/pprz_algebra_float.h ****  * @addtogroup math_algebra
  26:math/pprz_algebra_float.h ****  * @{
  27:math/pprz_algebra_float.h ****  * @defgroup math_algebra_float Float Algebra
  28:math/pprz_algebra_float.h ****  * @{
  29:math/pprz_algebra_float.h ****  */
  30:math/pprz_algebra_float.h **** 
  31:math/pprz_algebra_float.h **** #ifndef PPRZ_ALGEBRA_FLOAT_H
  32:math/pprz_algebra_float.h **** #define PPRZ_ALGEBRA_FLOAT_H
  33:math/pprz_algebra_float.h **** 
  34:math/pprz_algebra_float.h **** #ifdef __cplusplus
  35:math/pprz_algebra_float.h **** extern "C" {
  36:math/pprz_algebra_float.h **** #endif
  37:math/pprz_algebra_float.h **** 
  38:math/pprz_algebra_float.h **** #include "pprz_algebra.h"
  39:math/pprz_algebra_float.h **** 
  40:math/pprz_algebra_float.h **** #include <math.h>
  41:math/pprz_algebra_float.h **** #include <float.h> // for FLT_MIN
  42:math/pprz_algebra_float.h **** 
  43:math/pprz_algebra_float.h **** /* this seems to be missing for some arch */
  44:math/pprz_algebra_float.h **** #ifndef M_SQRT2
  45:math/pprz_algebra_float.h **** #define M_SQRT2         1.41421356237309504880
  46:math/pprz_algebra_float.h **** #endif
  47:math/pprz_algebra_float.h **** 
  48:math/pprz_algebra_float.h **** struct FloatVect2 {
  49:math/pprz_algebra_float.h ****   float x;
  50:math/pprz_algebra_float.h ****   float y;
  51:math/pprz_algebra_float.h **** };
  52:math/pprz_algebra_float.h **** 
  53:math/pprz_algebra_float.h **** struct FloatVect3 {
  54:math/pprz_algebra_float.h ****   float x;
  55:math/pprz_algebra_float.h ****   float y;
  56:math/pprz_algebra_float.h ****   float z;
  57:math/pprz_algebra_float.h **** };
  58:math/pprz_algebra_float.h **** 
  59:math/pprz_algebra_float.h **** /**
  60:math/pprz_algebra_float.h ****  * @brief Roation quaternion
  61:math/pprz_algebra_float.h ****  */
  62:math/pprz_algebra_float.h **** struct FloatQuat {
  63:math/pprz_algebra_float.h ****   float qi;
  64:math/pprz_algebra_float.h ****   float qx;
  65:math/pprz_algebra_float.h ****   float qy;
  66:math/pprz_algebra_float.h ****   float qz;
  67:math/pprz_algebra_float.h **** };
  68:math/pprz_algebra_float.h **** 
  69:math/pprz_algebra_float.h **** struct FloatMat33 {
  70:math/pprz_algebra_float.h ****   float m[3 * 3];
  71:math/pprz_algebra_float.h **** };
  72:math/pprz_algebra_float.h **** 
  73:math/pprz_algebra_float.h **** /**
  74:math/pprz_algebra_float.h ****  * @brief rotation matrix
  75:math/pprz_algebra_float.h ****  */
  76:math/pprz_algebra_float.h **** struct FloatRMat {
  77:math/pprz_algebra_float.h ****   float m[3 * 3];
  78:math/pprz_algebra_float.h **** };
  79:math/pprz_algebra_float.h **** 
  80:math/pprz_algebra_float.h **** /**
  81:math/pprz_algebra_float.h ****  * @brief euler angles
  82:math/pprz_algebra_float.h ****  * @details Units: radians */
  83:math/pprz_algebra_float.h **** struct FloatEulers {
  84:math/pprz_algebra_float.h ****   float phi; ///< in radians
  85:math/pprz_algebra_float.h ****   float theta; ///< in radians
  86:math/pprz_algebra_float.h ****   float psi; ///< in radians
  87:math/pprz_algebra_float.h **** };
  88:math/pprz_algebra_float.h **** 
  89:math/pprz_algebra_float.h **** /**
  90:math/pprz_algebra_float.h ****  * @brief angular rates
  91:math/pprz_algebra_float.h ****  * @details Units: rad/s */
  92:math/pprz_algebra_float.h **** struct FloatRates {
  93:math/pprz_algebra_float.h ****   float p; ///< in rad/s
  94:math/pprz_algebra_float.h ****   float q; ///< in rad/s
  95:math/pprz_algebra_float.h ****   float r; ///< in rad/s
  96:math/pprz_algebra_float.h **** };
  97:math/pprz_algebra_float.h **** 
  98:math/pprz_algebra_float.h **** #define FLOAT_ANGLE_NORMALIZE(_a) {             \
  99:math/pprz_algebra_float.h ****     while (_a >  M_PI) _a -= (2.*M_PI);             \
 100:math/pprz_algebra_float.h ****     while (_a < -M_PI) _a += (2.*M_PI);             \
 101:math/pprz_algebra_float.h ****   }
 102:math/pprz_algebra_float.h **** 
 103:math/pprz_algebra_float.h **** //
 104:math/pprz_algebra_float.h **** //
 105:math/pprz_algebra_float.h **** // Vector algebra
 106:math/pprz_algebra_float.h **** //
 107:math/pprz_algebra_float.h **** //
 108:math/pprz_algebra_float.h **** 
 109:math/pprz_algebra_float.h **** 
 110:math/pprz_algebra_float.h **** /*
 111:math/pprz_algebra_float.h ****  * Dimension 2 Vectors
 112:math/pprz_algebra_float.h ****  */
 113:math/pprz_algebra_float.h **** 
 114:math/pprz_algebra_float.h **** #define FLOAT_VECT2_ZERO(_v) VECT2_ASSIGN(_v, 0., 0.)
 115:math/pprz_algebra_float.h **** 
 116:math/pprz_algebra_float.h **** /* macros also usable if _v is not a FloatVect2, but a different struct with x,y members */
 117:math/pprz_algebra_float.h **** #define FLOAT_VECT2_NORM(_v) sqrtf(VECT2_NORM2(_v))
 118:math/pprz_algebra_float.h **** 
 119:math/pprz_algebra_float.h **** static inline float float_vect2_norm2(struct FloatVect2 *v)
 120:math/pprz_algebra_float.h **** {
 121:math/pprz_algebra_float.h ****   return v->x * v->x + v->y * v->y;
 122:math/pprz_algebra_float.h **** }
 123:math/pprz_algebra_float.h **** 
 124:math/pprz_algebra_float.h **** static inline float float_vect2_norm(struct FloatVect2 *v)
 125:math/pprz_algebra_float.h **** {
 126:math/pprz_algebra_float.h ****   return sqrtf(float_vect2_norm2(v));
 127:math/pprz_algebra_float.h **** }
 128:math/pprz_algebra_float.h **** 
 129:math/pprz_algebra_float.h **** /** normalize 2D vector in place */
 130:math/pprz_algebra_float.h **** static inline void float_vect2_normalize(struct FloatVect2 *v)
 131:math/pprz_algebra_float.h **** {
 132:math/pprz_algebra_float.h ****   const float n = float_vect2_norm(v);
 133:math/pprz_algebra_float.h ****   if (n > 0) {
 134:math/pprz_algebra_float.h ****     v->x /= n;
 135:math/pprz_algebra_float.h ****     v->y /= n;
 136:math/pprz_algebra_float.h ****   }
 137:math/pprz_algebra_float.h **** }
 138:math/pprz_algebra_float.h **** 
 139:math/pprz_algebra_float.h **** #define FLOAT_VECT2_NORMALIZE(_v) float_vect2_normalize(&(_v))
 140:math/pprz_algebra_float.h **** 
 141:math/pprz_algebra_float.h **** 
 142:math/pprz_algebra_float.h **** /*
 143:math/pprz_algebra_float.h ****  * Dimension 3 Vectors
 144:math/pprz_algebra_float.h ****  */
 145:math/pprz_algebra_float.h **** 
 146:math/pprz_algebra_float.h **** #define FLOAT_VECT3_ZERO(_v) VECT3_ASSIGN(_v, 0., 0., 0.)
 147:math/pprz_algebra_float.h **** 
 148:math/pprz_algebra_float.h **** /* macros also usable if _v is not a FloatVect3, but a different struct with x,y,z members */
 149:math/pprz_algebra_float.h **** #define FLOAT_VECT3_NORM(_v) sqrtf(VECT3_NORM2(_v))
 150:math/pprz_algebra_float.h **** 
 151:math/pprz_algebra_float.h **** static inline float float_vect3_norm2(struct FloatVect3 *v)
 152:math/pprz_algebra_float.h **** {
 153:math/pprz_algebra_float.h ****   return v->x * v->x + v->y * v->y + v->z * v->z;
 154:math/pprz_algebra_float.h **** }
 155:math/pprz_algebra_float.h **** 
 156:math/pprz_algebra_float.h **** static inline float float_vect3_norm(struct FloatVect3 *v)
 157:math/pprz_algebra_float.h **** {
 158:math/pprz_algebra_float.h ****   return sqrtf(float_vect3_norm2(v));
 159:math/pprz_algebra_float.h **** }
 160:math/pprz_algebra_float.h **** 
 161:math/pprz_algebra_float.h **** /** normalize 3D vector in place */
 162:math/pprz_algebra_float.h **** static inline void float_vect3_normalize(struct FloatVect3 *v)
 163:math/pprz_algebra_float.h **** {
 164:math/pprz_algebra_float.h ****   const float n = float_vect3_norm(v);
 165:math/pprz_algebra_float.h ****   if (n > 0) {
 166:math/pprz_algebra_float.h ****     v->x /= n;
 167:math/pprz_algebra_float.h ****     v->y /= n;
 168:math/pprz_algebra_float.h ****     v->z /= n;
 169:math/pprz_algebra_float.h ****   }
 170:math/pprz_algebra_float.h **** }
 171:math/pprz_algebra_float.h **** 
 172:math/pprz_algebra_float.h **** #define FLOAT_VECT3_NORMALIZE(_v) float_vect3_normalize(&(_v))
 173:math/pprz_algebra_float.h **** 
 174:math/pprz_algebra_float.h **** 
 175:math/pprz_algebra_float.h **** 
 176:math/pprz_algebra_float.h **** #define FLOAT_RATES_ZERO(_r) {          \
 177:math/pprz_algebra_float.h ****     RATES_ASSIGN(_r, 0., 0., 0.);       \
 178:math/pprz_algebra_float.h ****   }
 179:math/pprz_algebra_float.h **** 
 180:math/pprz_algebra_float.h **** #define FLOAT_RATES_NORM(_v) (sqrtf((_v).p*(_v).p + (_v).q*(_v).q + (_v).r*(_v).r))
 181:math/pprz_algebra_float.h **** 
 182:math/pprz_algebra_float.h **** #define FLOAT_RATES_LIN_CMB(_ro, _r1, _s1, _r2, _s2) {          \
 183:math/pprz_algebra_float.h ****     _ro.p = _s1 * _r1.p + _s2 * _r2.p;                  \
 184:math/pprz_algebra_float.h ****     _ro.q = _s1 * _r1.q + _s2 * _r2.q;                  \
 185:math/pprz_algebra_float.h ****     _ro.r = _s1 * _r1.r + _s2 * _r2.r;                  \
 186:math/pprz_algebra_float.h ****   }
 187:math/pprz_algebra_float.h **** 
 188:math/pprz_algebra_float.h **** 
 189:math/pprz_algebra_float.h **** extern void float_vect3_integrate_fi(struct FloatVect3 *vec, struct FloatVect3 *dv,
 190:math/pprz_algebra_float.h ****                                      float dt);
 191:math/pprz_algebra_float.h **** 
 192:math/pprz_algebra_float.h **** extern void float_rates_integrate_fi(struct FloatRates *r, struct FloatRates *dr,
 193:math/pprz_algebra_float.h ****                                      float dt);
 194:math/pprz_algebra_float.h **** 
 195:math/pprz_algebra_float.h **** extern void float_rates_of_euler_dot(struct FloatRates *r, struct FloatEulers *e,
 196:math/pprz_algebra_float.h ****                                      struct FloatEulers *edot);
 197:math/pprz_algebra_float.h **** 
 198:math/pprz_algebra_float.h **** /* defines for backwards compatibility */
 199:math/pprz_algebra_float.h **** #define FLOAT_VECT3_INTEGRATE_FI(_vo, _dv, _dt) float_vect3_integrate_fi(&(_vo), &(_dv), _dt)
 200:math/pprz_algebra_float.h **** #define FLOAT_RATES_INTEGRATE_FI(_ra, _racc, _dt) float_rates_integrate_fi(&(_ra), &(_racc), _dt)
 201:math/pprz_algebra_float.h **** #define FLOAT_RATES_OF_EULER_DOT(_ra, _e, _ed) float_rates_of_euler_dot(&(_ra), &(_e), &(_ed))
 202:math/pprz_algebra_float.h **** 
 203:math/pprz_algebra_float.h **** 
 204:math/pprz_algebra_float.h **** /*
 205:math/pprz_algebra_float.h ****  * 3x3 matrices
 206:math/pprz_algebra_float.h ****  */
 207:math/pprz_algebra_float.h **** #define FLOAT_MAT33_ZERO(_m) {                      \
 208:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 0) = 0.;                      \
 209:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 1) = 0.;                      \
 210:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 2) = 0.;                      \
 211:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 0) = 0.;                      \
 212:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 1) = 0.;                      \
 213:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 2) = 0.;                      \
 214:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 0) = 0.;                      \
 215:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 1) = 0.;                      \
 216:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 2) = 0.;                      \
 217:math/pprz_algebra_float.h ****   }
 218:math/pprz_algebra_float.h **** 
 219:math/pprz_algebra_float.h **** #define FLOAT_MAT33_DIAG(_m, _d00, _d11, _d22) {    \
 220:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 0) = _d00;                    \
 221:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 1) = 0.;                      \
 222:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 0, 2) = 0.;                      \
 223:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 0) = 0.;                      \
 224:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 1) = _d11;                    \
 225:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 1, 2) = 0.;                      \
 226:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 0) = 0.;                      \
 227:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 1) = 0.;                      \
 228:math/pprz_algebra_float.h ****     MAT33_ELMT(_m, 2, 2) = _d22;                    \
 229:math/pprz_algebra_float.h ****   }
 230:math/pprz_algebra_float.h **** 
 231:math/pprz_algebra_float.h **** 
 232:math/pprz_algebra_float.h **** //
 233:math/pprz_algebra_float.h **** //
 234:math/pprz_algebra_float.h **** // Rotation Matrices
 235:math/pprz_algebra_float.h **** //
 236:math/pprz_algebra_float.h **** //
 237:math/pprz_algebra_float.h **** 
 238:math/pprz_algebra_float.h **** 
 239:math/pprz_algebra_float.h **** /** initialises a rotation matrix to identity */
 240:math/pprz_algebra_float.h **** static inline void float_rmat_identity(struct FloatRMat *rm)
 241:math/pprz_algebra_float.h **** {
 242:math/pprz_algebra_float.h ****   FLOAT_MAT33_DIAG(*rm, 1., 1., 1.);
 243:math/pprz_algebra_float.h **** }
 244:math/pprz_algebra_float.h **** 
 245:math/pprz_algebra_float.h **** /** Inverse/transpose of a rotation matrix.
 246:math/pprz_algebra_float.h ****  * m_b2a = inv(_m_a2b) = transp(_m_a2b)
 247:math/pprz_algebra_float.h ****  */
 248:math/pprz_algebra_float.h **** extern void float_rmat_inv(struct FloatRMat *m_b2a, struct FloatRMat *m_a2b);
 249:math/pprz_algebra_float.h **** 
 250:math/pprz_algebra_float.h **** /** Composition (multiplication) of two rotation matrices.
 251:math/pprz_algebra_float.h ****  * m_a2c = m_a2b comp m_b2c , aka  m_a2c = m_b2c * m_a2b
 252:math/pprz_algebra_float.h ****  */
 253:math/pprz_algebra_float.h **** extern void float_rmat_comp(struct FloatRMat *m_a2c, struct FloatRMat *m_a2b,
 254:math/pprz_algebra_float.h ****                             struct FloatRMat *m_b2c);
 255:math/pprz_algebra_float.h **** 
 256:math/pprz_algebra_float.h **** /** Composition (multiplication) of two rotation matrices.
 257:math/pprz_algebra_float.h ****  * m_a2b = m_a2c comp_inv m_b2c , aka  m_a2b = inv(_m_b2c) * m_a2c
 258:math/pprz_algebra_float.h ****  */
 259:math/pprz_algebra_float.h **** extern void float_rmat_comp_inv(struct FloatRMat *m_a2b, struct FloatRMat *m_a2c,
 260:math/pprz_algebra_float.h ****                                 struct FloatRMat *m_b2c);
 261:math/pprz_algebra_float.h **** 
 262:math/pprz_algebra_float.h **** /// Norm of a rotation matrix.
 263:math/pprz_algebra_float.h **** extern float float_rmat_norm(struct FloatRMat *rm);
 264:math/pprz_algebra_float.h **** 
 265:math/pprz_algebra_float.h **** /** rotate 3D vector by rotation matrix.
 266:math/pprz_algebra_float.h ****  * vb = m_a2b * va
 267:math/pprz_algebra_float.h ****  */
 268:math/pprz_algebra_float.h **** extern void float_rmat_vmult(struct FloatVect3 *vb, struct FloatRMat *m_a2b,
 269:math/pprz_algebra_float.h ****                              struct FloatVect3 *va);
 270:math/pprz_algebra_float.h **** 
 271:math/pprz_algebra_float.h **** /** rotate 3D vector by transposed rotation matrix.
 272:math/pprz_algebra_float.h ****  * vb = m_b2a^T * va
 273:math/pprz_algebra_float.h ****  */
 274:math/pprz_algebra_float.h **** extern void float_rmat_transp_vmult(struct FloatVect3 *vb, struct FloatRMat *m_b2a,
 275:math/pprz_algebra_float.h ****                                     struct FloatVect3 *va);
 276:math/pprz_algebra_float.h **** 
 277:math/pprz_algebra_float.h **** /** rotate anglular rates by rotation matrix.
 278:math/pprz_algebra_float.h ****  * rb = m_a2b * ra
 279:math/pprz_algebra_float.h ****  */
 280:math/pprz_algebra_float.h **** extern void float_rmat_ratemult(struct FloatRates *rb, struct FloatRMat *m_a2b,
 281:math/pprz_algebra_float.h ****                                 struct FloatRates *ra);
 282:math/pprz_algebra_float.h **** 
 283:math/pprz_algebra_float.h **** /** rotate anglular rates by transposed rotation matrix.
 284:math/pprz_algebra_float.h ****  * rb = m_b2a^T * ra
 285:math/pprz_algebra_float.h ****  */
 286:math/pprz_algebra_float.h **** extern void float_rmat_transp_ratemult(struct FloatRates *rb, struct FloatRMat *m_b2a,
 287:math/pprz_algebra_float.h ****                                        struct FloatRates *ra);
 288:math/pprz_algebra_float.h **** 
 289:math/pprz_algebra_float.h **** /** initialises a rotation matrix from unit vector axis and angle */
 290:math/pprz_algebra_float.h **** extern void float_rmat_of_axis_angle(struct FloatRMat *rm, struct FloatVect3 *uv, float angle);
 291:math/pprz_algebra_float.h **** 
 292:math/pprz_algebra_float.h **** /** Rotation matrix from 321 Euler angles (float).
 293:math/pprz_algebra_float.h ****  * The Euler angles are interpreted as zy'x'' (intrinsic) rotation.
 294:math/pprz_algebra_float.h ****  * First rotate around z with psi, then around the new y' with theta,
 295:math/pprz_algebra_float.h ****  * then around new x'' with phi.
 296:math/pprz_algebra_float.h ****  * This is the same as a xyz (extrinsic) rotation,
 297:math/pprz_algebra_float.h ****  * rotating around the fixed x, then y then z axis.
 298:math/pprz_algebra_float.h ****  * - psi range: -pi < psi <= pi
 299:math/pprz_algebra_float.h ****  * - theta range: -pi/2 <= theta <= pi/2
 300:math/pprz_algebra_float.h ****  * - phi range: -pi < phi <= pi
 301:math/pprz_algebra_float.h ****  * @param[out] rm pointer to rotation matrix
 302:math/pprz_algebra_float.h ****  * @param[in]  e pointer to Euler angles
 303:math/pprz_algebra_float.h ****  */
 304:math/pprz_algebra_float.h **** extern void float_rmat_of_eulers_321(struct FloatRMat *rm, struct FloatEulers *e);
 305:math/pprz_algebra_float.h **** extern void float_rmat_of_eulers_312(struct FloatRMat *rm, struct FloatEulers *e);
 306:math/pprz_algebra_float.h **** #define float_rmat_of_eulers float_rmat_of_eulers_321
 307:math/pprz_algebra_float.h **** 
 308:math/pprz_algebra_float.h **** extern void float_rmat_of_quat(struct FloatRMat *rm, struct FloatQuat *q);
 309:math/pprz_algebra_float.h **** /** in place first order integration of a rotation matrix */
 310:math/pprz_algebra_float.h **** extern void float_rmat_integrate_fi(struct FloatRMat *rm, struct FloatRates *omega, float dt);
 311:math/pprz_algebra_float.h **** extern float float_rmat_reorthogonalize(struct FloatRMat *rm);
 312:math/pprz_algebra_float.h **** 
 313:math/pprz_algebra_float.h **** /* defines for backwards compatibility */
 314:math/pprz_algebra_float.h **** #define FLOAT_RMAT_INV(_m_b2a, _m_a2b) float_rmat_inv(&(_m_b2a), &(_m_a2b))
 315:math/pprz_algebra_float.h **** #define FLOAT_RMAT_NORM(_m) float_rmat_norm(&(_m))
 316:math/pprz_algebra_float.h **** #define FLOAT_RMAT_COMP(_m_a2c, _m_a2b, _m_b2c) float_rmat_comp(&(_m_a2c), &(_m_a2b), &(_m_b2c))
 317:math/pprz_algebra_float.h **** #define FLOAT_RMAT_COMP_INV(_m_a2b, _m_a2c, _m_b2c) float_rmat_comp_inv(&(_m_a2b), &(_m_a2c), &(_m_
 318:math/pprz_algebra_float.h **** #define FLOAT_RMAT_VMULT(_vb, _m_a2b, _va) float_rmat_vmult(&(_vb), &(_m_a2b), &(_va))
 319:math/pprz_algebra_float.h **** #define FLOAT_RMAT_TRANSP_VMULT(_vb, _m_b2a, _va) float_rmat_transp_vmult(&(_vb), &(_m_b2a), &(_va)
 320:math/pprz_algebra_float.h **** #define FLOAT_RMAT_RATEMULT(_rb, _m_a2b, _ra) float_rmat_ratemult(&(_rb), &(_m_a2b), &(_ra))
 321:math/pprz_algebra_float.h **** #define FLOAT_RMAT_TRANSP_RATEMULT(_rb, _m_b2a, _ra) float_rmat_ratemult(&(_rb), &(_m_b2a), &(_ra))
 322:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_AXIS_ANGLE(_rm, _uv, _an) float_rmat_of_axis_angle(&(_rm), &(_uv), _an)
 323:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_EULERS(_rm, _e)     float_rmat_of_eulers_321(&(_rm), &(_e))
 324:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_EULERS_321(_rm, _e) float_rmat_of_eulers_321(&(_rm), &(_e))
 325:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_EULERS_312(_rm, _e) float_rmat_of_eulers_312(&(_rm), &(_e))
 326:math/pprz_algebra_float.h **** #define FLOAT_RMAT_OF_QUAT(_rm, _q)       float_rmat_of_quat(&(_rm), &(_q))
 327:math/pprz_algebra_float.h **** #define FLOAT_RMAT_INTEGRATE_FI(_rm, _omega, _dt) float_rmat_integrate_fi(&(_rm), &(_omega), &(_dt)
 328:math/pprz_algebra_float.h **** 
 329:math/pprz_algebra_float.h **** 
 330:math/pprz_algebra_float.h **** 
 331:math/pprz_algebra_float.h **** //
 332:math/pprz_algebra_float.h **** //
 333:math/pprz_algebra_float.h **** // Quaternion algebras
 334:math/pprz_algebra_float.h **** //
 335:math/pprz_algebra_float.h **** //
 336:math/pprz_algebra_float.h **** 
 337:math/pprz_algebra_float.h **** /** initialises a quaternion to identity */
 338:math/pprz_algebra_float.h **** static inline void float_quat_identity(struct FloatQuat *q)
 339:math/pprz_algebra_float.h **** {
 340:math/pprz_algebra_float.h ****   q->qi = 1.0;
 341:math/pprz_algebra_float.h ****   q->qx = 0;
 342:math/pprz_algebra_float.h ****   q->qy = 0;
 343:math/pprz_algebra_float.h ****   q->qz = 0;
 344:math/pprz_algebra_float.h **** }
 345:math/pprz_algebra_float.h **** 
 346:math/pprz_algebra_float.h **** #define FLOAT_QUAT_NORM2(_q) (SQUARE((_q).qi) + SQUARE((_q).qx) + SQUARE((_q).qy) + SQUARE((_q).qz)
 347:math/pprz_algebra_float.h **** 
 348:math/pprz_algebra_float.h **** static inline float float_quat_norm(struct FloatQuat *q)
 349:math/pprz_algebra_float.h **** {
 350:math/pprz_algebra_float.h ****   return sqrtf(SQUARE(q->qi) + SQUARE(q->qx) +  SQUARE(q->qy) + SQUARE(q->qz));
 351:math/pprz_algebra_float.h **** }
 352:math/pprz_algebra_float.h **** 
 353:math/pprz_algebra_float.h **** static inline void float_quat_normalize(struct FloatQuat *q)
 354:math/pprz_algebra_float.h **** {
 355:math/pprz_algebra_float.h ****   float qnorm = float_quat_norm(q);
 356:math/pprz_algebra_float.h ****   if (qnorm > FLT_MIN) {
 357:math/pprz_algebra_float.h ****     q->qi = q->qi / qnorm;
 358:math/pprz_algebra_float.h ****     q->qx = q->qx / qnorm;
 359:math/pprz_algebra_float.h ****     q->qy = q->qy / qnorm;
 360:math/pprz_algebra_float.h ****     q->qz = q->qz / qnorm;
 361:math/pprz_algebra_float.h ****   }
 362:math/pprz_algebra_float.h **** }
 363:math/pprz_algebra_float.h **** 
 364:math/pprz_algebra_float.h **** static inline void float_quat_invert(struct FloatQuat *qo, struct FloatQuat *qi)
 365:math/pprz_algebra_float.h **** {
 366:math/pprz_algebra_float.h ****   QUAT_INVERT(*qo, *qi);
 367:math/pprz_algebra_float.h **** }
 368:math/pprz_algebra_float.h **** 
 369:math/pprz_algebra_float.h **** static inline void float_quat_wrap_shortest(struct FloatQuat *q)
 370:math/pprz_algebra_float.h **** {
  27              		.loc 1 370 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 371:math/pprz_algebra_float.h ****   if (q->qi < 0.) {
  33              		.loc 1 371 0
  34 0000 D0ED007A 		flds	s15, [r0]
  35 0004 F5EEC07A 		fcmpezs	s15
  36 0008 F1EE10FA 		fmstat
  37 000c 15D5     		bpl	.L1
 372:math/pprz_algebra_float.h ****     QUAT_EXPLEMENTARY(*q, *q);
  38              		.loc 1 372 0
  39 000e F1EE677A 		fnegs	s15, s15
  40 0012 C0ED007A 		fsts	s15, [r0]
  41 0016 D0ED017A 		flds	s15, [r0, #4]
  42 001a F1EE677A 		fnegs	s15, s15
  43 001e C0ED017A 		fsts	s15, [r0, #4]
  44 0022 D0ED027A 		flds	s15, [r0, #8]
  45 0026 F1EE677A 		fnegs	s15, s15
  46 002a C0ED027A 		fsts	s15, [r0, #8]
  47 002e D0ED037A 		flds	s15, [r0, #12]
  48 0032 F1EE677A 		fnegs	s15, s15
  49 0036 C0ED037A 		fsts	s15, [r0, #12]
  50              	.L1:
  51 003a 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE12:
  55              		.section	.text.float_quat_norm,"ax",%progbits
  56              		.align	1
  57              		.thumb
  58              		.thumb_func
  60              	float_quat_norm:
  61              	.LFB9:
 349:math/pprz_algebra_float.h ****   return sqrtf(SQUARE(q->qi) + SQUARE(q->qx) +  SQUARE(q->qy) + SQUARE(q->qz));
  62              		.loc 1 349 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL1:
 350:math/pprz_algebra_float.h **** }
  67              		.loc 1 350 0
  68 0000 D0ED017A 		flds	s15, [r0, #4]
  69 0004 90ED006A 		flds	s12, [r0]
  70 0008 D0ED026A 		flds	s13, [r0, #8]
  71 000c 90ED037A 		flds	s14, [r0, #12]
  72 0010 67EEA77A 		fmuls	s15, s15, s15
 349:math/pprz_algebra_float.h ****   return sqrtf(SQUARE(q->qi) + SQUARE(q->qx) +  SQUARE(q->qy) + SQUARE(q->qz));
  73              		.loc 1 349 0
  74 0014 08B5     		push	{r3, lr}
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 3, -8
  77              		.cfi_offset 14, -4
 350:math/pprz_algebra_float.h **** }
  78              		.loc 1 350 0
  79 0016 E6EE067A 		vfma.f32	s15, s12, s12
  80 001a E6EEA67A 		vfma.f32	s15, s13, s13
  81 001e E7EE077A 		vfma.f32	s15, s14, s14
  82 0022 17EE900A 		fmrs	r0, s15
  83              	.LVL2:
  84 0026 FFF7FEFF 		bl	sqrtf
  85              	.LVL3:
 351:math/pprz_algebra_float.h **** 
  86              		.loc 1 351 0
  87 002a 00EE100A 		fmsr	s0, r0
  88 002e 08BD     		pop	{r3, pc}
  89              		.cfi_endproc
  90              	.LFE9:
  92              		.section	.text.float_quat_normalize,"ax",%progbits
  93              		.align	1
  94              		.thumb
  95              		.thumb_func
  97              	float_quat_normalize:
  98              	.LFB10:
 354:math/pprz_algebra_float.h ****   float qnorm = float_quat_norm(q);
  99              		.loc 1 354 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              	.LVL4:
 104 0000 10B5     		push	{r4, lr}
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 4, -8
 107              		.cfi_offset 14, -4
 354:math/pprz_algebra_float.h ****   float qnorm = float_quat_norm(q);
 108              		.loc 1 354 0
 109 0002 0446     		mov	r4, r0
 355:math/pprz_algebra_float.h ****   if (qnorm > FLT_MIN) {
 110              		.loc 1 355 0
 111 0004 FFF7FEFF 		bl	float_quat_norm
 112              	.LVL5:
 356:math/pprz_algebra_float.h ****     q->qi = q->qi / qnorm;
 113              		.loc 1 356 0
 114 0008 DFED0F7A 		flds	s15, .L11
 115 000c B4EEE70A 		fcmpes	s0, s15
 116 0010 F1EE10FA 		fmstat
 117 0014 17DD     		ble	.L7
 357:math/pprz_algebra_float.h ****     q->qx = q->qx / qnorm;
 118              		.loc 1 357 0
 119 0016 D4ED007A 		flds	s15, [r4]
 120 001a C7EE807A 		fdivs	s15, s15, s0
 121 001e C4ED007A 		fsts	s15, [r4]
 358:math/pprz_algebra_float.h ****     q->qy = q->qy / qnorm;
 122              		.loc 1 358 0
 123 0022 D4ED017A 		flds	s15, [r4, #4]
 124 0026 C7EE807A 		fdivs	s15, s15, s0
 125 002a C4ED017A 		fsts	s15, [r4, #4]
 359:math/pprz_algebra_float.h ****     q->qz = q->qz / qnorm;
 126              		.loc 1 359 0
 127 002e D4ED027A 		flds	s15, [r4, #8]
 128 0032 C7EE807A 		fdivs	s15, s15, s0
 129 0036 C4ED027A 		fsts	s15, [r4, #8]
 360:math/pprz_algebra_float.h ****   }
 130              		.loc 1 360 0
 131 003a D4ED037A 		flds	s15, [r4, #12]
 132 003e 87EE800A 		fdivs	s0, s15, s0
 133              	.LVL6:
 134 0042 84ED030A 		fsts	s0, [r4, #12]
 135              	.L7:
 136 0046 10BD     		pop	{r4, pc}
 137              	.LVL7:
 138              	.L12:
 139              		.align	2
 140              	.L11:
 141 0048 00008000 		.word	8388608
 142              		.cfi_endproc
 143              	.LFE10:
 145              		.section	.text.renorm_factor,"ax",%progbits
 146              		.align	1
 147              		.thumb
 148              		.thumb_func
 150              	renorm_factor:
 151              	.LFB49:
 152              		.file 2 "math/pprz_algebra_float.c"
   1:math/pprz_algebra_float.c **** /*
   2:math/pprz_algebra_float.c ****  * Copyright (C) 2008-2014 The Paparazzi Team
   3:math/pprz_algebra_float.c ****  *
   4:math/pprz_algebra_float.c ****  * This file is part of paparazzi.
   5:math/pprz_algebra_float.c ****  *
   6:math/pprz_algebra_float.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:math/pprz_algebra_float.c ****  * it under the terms of the GNU General Public License as published by
   8:math/pprz_algebra_float.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:math/pprz_algebra_float.c ****  * any later version.
  10:math/pprz_algebra_float.c ****  *
  11:math/pprz_algebra_float.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:math/pprz_algebra_float.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:math/pprz_algebra_float.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:math/pprz_algebra_float.c ****  * GNU General Public License for more details.
  15:math/pprz_algebra_float.c ****  *
  16:math/pprz_algebra_float.c ****  * You should have received a copy of the GNU General Public License
  17:math/pprz_algebra_float.c ****  * along with paparazzi; see the file COPYING.  If not, see
  18:math/pprz_algebra_float.c ****  * <http://www.gnu.org/licenses/>.
  19:math/pprz_algebra_float.c ****  */
  20:math/pprz_algebra_float.c **** 
  21:math/pprz_algebra_float.c **** /**
  22:math/pprz_algebra_float.c ****  * @file pprz_algebra_float.c
  23:math/pprz_algebra_float.c ****  * @brief Paparazzi floating point algebra.
  24:math/pprz_algebra_float.c ****  *
  25:math/pprz_algebra_float.c ****  */
  26:math/pprz_algebra_float.c **** 
  27:math/pprz_algebra_float.c **** #include "pprz_algebra_float.h"
  28:math/pprz_algebra_float.c **** 
  29:math/pprz_algebra_float.c **** /** in place first order integration of a 3D-vector */
  30:math/pprz_algebra_float.c **** void float_vect3_integrate_fi(struct FloatVect3 *vec, struct FloatVect3 *dv, float dt)
  31:math/pprz_algebra_float.c **** {
  32:math/pprz_algebra_float.c ****   vec->x += dv->x * dt;
  33:math/pprz_algebra_float.c ****   vec->y += dv->y * dt;
  34:math/pprz_algebra_float.c ****   vec->z += dv->z * dt;
  35:math/pprz_algebra_float.c **** }
  36:math/pprz_algebra_float.c **** 
  37:math/pprz_algebra_float.c **** /** in place first order integration of angular rates */
  38:math/pprz_algebra_float.c **** void float_rates_integrate_fi(struct FloatRates *r, struct FloatRates *dr, float dt)
  39:math/pprz_algebra_float.c **** {
  40:math/pprz_algebra_float.c ****   r->p += dr->p * dt;
  41:math/pprz_algebra_float.c ****   r->q += dr->q * dt;
  42:math/pprz_algebra_float.c ****   r->r += dr->r * dt;
  43:math/pprz_algebra_float.c **** }
  44:math/pprz_algebra_float.c **** 
  45:math/pprz_algebra_float.c **** void float_rates_of_euler_dot(struct FloatRates *r, struct FloatEulers *e, struct FloatEulers *edot
  46:math/pprz_algebra_float.c **** {
  47:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
  48:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
  49:math/pprz_algebra_float.c ****   r->r =           -sinf(e->phi) * edot->theta + cosf(e->phi) * cosf(e->theta) * edot->psi;
  50:math/pprz_algebra_float.c **** }
  51:math/pprz_algebra_float.c **** 
  52:math/pprz_algebra_float.c **** 
  53:math/pprz_algebra_float.c **** 
  54:math/pprz_algebra_float.c **** 
  55:math/pprz_algebra_float.c **** void float_rmat_inv(struct FloatRMat *m_b2a, struct FloatRMat *m_a2b)
  56:math/pprz_algebra_float.c **** {
  57:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 0) = RMAT_ELMT(*m_a2b, 0, 0);
  58:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 1) = RMAT_ELMT(*m_a2b, 1, 0);
  59:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 2) = RMAT_ELMT(*m_a2b, 2, 0);
  60:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 0) = RMAT_ELMT(*m_a2b, 0, 1);
  61:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 1) = RMAT_ELMT(*m_a2b, 1, 1);
  62:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 2) = RMAT_ELMT(*m_a2b, 2, 1);
  63:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 0) = RMAT_ELMT(*m_a2b, 0, 2);
  64:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 1) = RMAT_ELMT(*m_a2b, 1, 2);
  65:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 2) = RMAT_ELMT(*m_a2b, 2, 2);
  66:math/pprz_algebra_float.c **** }
  67:math/pprz_algebra_float.c **** 
  68:math/pprz_algebra_float.c **** float float_rmat_norm(struct FloatRMat *rm)
  69:math/pprz_algebra_float.c **** {
  70:math/pprz_algebra_float.c ****   return sqrtf(SQUARE(rm->m[0]) + SQUARE(rm->m[1]) + SQUARE(rm->m[2]) +
  71:math/pprz_algebra_float.c ****                SQUARE(rm->m[3]) + SQUARE(rm->m[4]) + SQUARE(rm->m[5]) +
  72:math/pprz_algebra_float.c ****                SQUARE(rm->m[6]) + SQUARE(rm->m[7]) + SQUARE(rm->m[8]));
  73:math/pprz_algebra_float.c **** }
  74:math/pprz_algebra_float.c **** 
  75:math/pprz_algebra_float.c **** /** Composition (multiplication) of two rotation matrices.
  76:math/pprz_algebra_float.c ****  * m_a2c = m_a2b comp m_b2c , aka  m_a2c = m_b2c * m_a2b
  77:math/pprz_algebra_float.c ****  */
  78:math/pprz_algebra_float.c **** void float_rmat_comp(struct FloatRMat *m_a2c, struct FloatRMat *m_a2b, struct FloatRMat *m_b2c)
  79:math/pprz_algebra_float.c **** {
  80:math/pprz_algebra_float.c ****   m_a2c->m[0] = m_b2c->m[0] * m_a2b->m[0] + m_b2c->m[1] * m_a2b->m[3] + m_b2c->m[2] * m_a2b->m[6];
  81:math/pprz_algebra_float.c ****   m_a2c->m[1] = m_b2c->m[0] * m_a2b->m[1] + m_b2c->m[1] * m_a2b->m[4] + m_b2c->m[2] * m_a2b->m[7];
  82:math/pprz_algebra_float.c ****   m_a2c->m[2] = m_b2c->m[0] * m_a2b->m[2] + m_b2c->m[1] * m_a2b->m[5] + m_b2c->m[2] * m_a2b->m[8];
  83:math/pprz_algebra_float.c ****   m_a2c->m[3] = m_b2c->m[3] * m_a2b->m[0] + m_b2c->m[4] * m_a2b->m[3] + m_b2c->m[5] * m_a2b->m[6];
  84:math/pprz_algebra_float.c ****   m_a2c->m[4] = m_b2c->m[3] * m_a2b->m[1] + m_b2c->m[4] * m_a2b->m[4] + m_b2c->m[5] * m_a2b->m[7];
  85:math/pprz_algebra_float.c ****   m_a2c->m[5] = m_b2c->m[3] * m_a2b->m[2] + m_b2c->m[4] * m_a2b->m[5] + m_b2c->m[5] * m_a2b->m[8];
  86:math/pprz_algebra_float.c ****   m_a2c->m[6] = m_b2c->m[6] * m_a2b->m[0] + m_b2c->m[7] * m_a2b->m[3] + m_b2c->m[8] * m_a2b->m[6];
  87:math/pprz_algebra_float.c ****   m_a2c->m[7] = m_b2c->m[6] * m_a2b->m[1] + m_b2c->m[7] * m_a2b->m[4] + m_b2c->m[8] * m_a2b->m[7];
  88:math/pprz_algebra_float.c ****   m_a2c->m[8] = m_b2c->m[6] * m_a2b->m[2] + m_b2c->m[7] * m_a2b->m[5] + m_b2c->m[8] * m_a2b->m[8];
  89:math/pprz_algebra_float.c **** }
  90:math/pprz_algebra_float.c **** 
  91:math/pprz_algebra_float.c **** /** Composition (multiplication) of two rotation matrices.
  92:math/pprz_algebra_float.c ****  * m_a2b = m_a2c comp_inv m_b2c , aka  m_a2b = inv(_m_b2c) * m_a2c
  93:math/pprz_algebra_float.c ****  */
  94:math/pprz_algebra_float.c **** void float_rmat_comp_inv(struct FloatRMat *m_a2b, struct FloatRMat *m_a2c, struct FloatRMat *m_b2c)
  95:math/pprz_algebra_float.c **** {
  96:math/pprz_algebra_float.c ****   m_a2b->m[0] = m_b2c->m[0] * m_a2c->m[0] + m_b2c->m[3] * m_a2c->m[3] + m_b2c->m[6] * m_a2c->m[6];
  97:math/pprz_algebra_float.c ****   m_a2b->m[1] = m_b2c->m[0] * m_a2c->m[1] + m_b2c->m[3] * m_a2c->m[4] + m_b2c->m[6] * m_a2c->m[7];
  98:math/pprz_algebra_float.c ****   m_a2b->m[2] = m_b2c->m[0] * m_a2c->m[2] + m_b2c->m[3] * m_a2c->m[5] + m_b2c->m[6] * m_a2c->m[8];
  99:math/pprz_algebra_float.c ****   m_a2b->m[3] = m_b2c->m[1] * m_a2c->m[0] + m_b2c->m[4] * m_a2c->m[3] + m_b2c->m[7] * m_a2c->m[6];
 100:math/pprz_algebra_float.c ****   m_a2b->m[4] = m_b2c->m[1] * m_a2c->m[1] + m_b2c->m[4] * m_a2c->m[4] + m_b2c->m[7] * m_a2c->m[7];
 101:math/pprz_algebra_float.c ****   m_a2b->m[5] = m_b2c->m[1] * m_a2c->m[2] + m_b2c->m[4] * m_a2c->m[5] + m_b2c->m[7] * m_a2c->m[8];
 102:math/pprz_algebra_float.c ****   m_a2b->m[6] = m_b2c->m[2] * m_a2c->m[0] + m_b2c->m[5] * m_a2c->m[3] + m_b2c->m[8] * m_a2c->m[6];
 103:math/pprz_algebra_float.c ****   m_a2b->m[7] = m_b2c->m[2] * m_a2c->m[1] + m_b2c->m[5] * m_a2c->m[4] + m_b2c->m[8] * m_a2c->m[7];
 104:math/pprz_algebra_float.c ****   m_a2b->m[8] = m_b2c->m[2] * m_a2c->m[2] + m_b2c->m[5] * m_a2c->m[5] + m_b2c->m[8] * m_a2c->m[8];
 105:math/pprz_algebra_float.c **** }
 106:math/pprz_algebra_float.c **** 
 107:math/pprz_algebra_float.c **** /** rotate 3D vector by rotation matrix.
 108:math/pprz_algebra_float.c ****  * vb = m_a2b * va
 109:math/pprz_algebra_float.c ****  */
 110:math/pprz_algebra_float.c **** void float_rmat_vmult(struct FloatVect3 *vb, struct FloatRMat *m_a2b, struct FloatVect3 *va)
 111:math/pprz_algebra_float.c **** {
 112:math/pprz_algebra_float.c ****   vb->x = m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z;
 113:math/pprz_algebra_float.c ****   vb->y = m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z;
 114:math/pprz_algebra_float.c ****   vb->z = m_a2b->m[6] * va->x + m_a2b->m[7] * va->y + m_a2b->m[8] * va->z;
 115:math/pprz_algebra_float.c **** }
 116:math/pprz_algebra_float.c **** 
 117:math/pprz_algebra_float.c **** /** rotate 3D vector by transposed rotation matrix.
 118:math/pprz_algebra_float.c ****  * vb = m_b2a^T * va
 119:math/pprz_algebra_float.c ****  */
 120:math/pprz_algebra_float.c **** void float_rmat_transp_vmult(struct FloatVect3 *vb, struct FloatRMat *m_b2a, struct FloatVect3 *va)
 121:math/pprz_algebra_float.c **** {
 122:math/pprz_algebra_float.c ****   vb->x = m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z;
 123:math/pprz_algebra_float.c ****   vb->y = m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z;
 124:math/pprz_algebra_float.c ****   vb->z = m_b2a->m[2] * va->x + m_b2a->m[5] * va->y + m_b2a->m[8] * va->z;
 125:math/pprz_algebra_float.c **** }
 126:math/pprz_algebra_float.c **** 
 127:math/pprz_algebra_float.c **** /** rotate anglular rates by rotation matrix.
 128:math/pprz_algebra_float.c ****  * rb = m_a2b * ra
 129:math/pprz_algebra_float.c ****  */
 130:math/pprz_algebra_float.c **** void float_rmat_ratemult(struct FloatRates *rb, struct FloatRMat *m_a2b, struct FloatRates *ra)
 131:math/pprz_algebra_float.c **** {
 132:math/pprz_algebra_float.c ****   rb->p = m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r;
 133:math/pprz_algebra_float.c ****   rb->q = m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r;
 134:math/pprz_algebra_float.c ****   rb->r = m_a2b->m[6] * ra->p + m_a2b->m[7] * ra->q + m_a2b->m[8] * ra->r;
 135:math/pprz_algebra_float.c **** }
 136:math/pprz_algebra_float.c **** 
 137:math/pprz_algebra_float.c **** /** rotate anglular rates by transposed rotation matrix.
 138:math/pprz_algebra_float.c ****  * rb = m_b2a^T * ra
 139:math/pprz_algebra_float.c ****  */
 140:math/pprz_algebra_float.c **** void float_rmat_transp_ratemult(struct FloatRates *rb, struct FloatRMat *m_b2a, struct FloatRates *
 141:math/pprz_algebra_float.c **** {
 142:math/pprz_algebra_float.c ****   rb->p = m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r;
 143:math/pprz_algebra_float.c ****   rb->q = m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r;
 144:math/pprz_algebra_float.c ****   rb->r = m_b2a->m[2] * ra->p + m_b2a->m[5] * ra->q + m_b2a->m[8] * ra->r;
 145:math/pprz_algebra_float.c **** }
 146:math/pprz_algebra_float.c **** 
 147:math/pprz_algebra_float.c **** 
 148:math/pprz_algebra_float.c **** /** initialises a rotation matrix from unit vector axis and angle */
 149:math/pprz_algebra_float.c **** void float_rmat_of_axis_angle(struct FloatRMat *rm, struct FloatVect3 *uv, float angle)
 150:math/pprz_algebra_float.c **** {
 151:math/pprz_algebra_float.c ****   const float ux2  = uv->x * uv->x;
 152:math/pprz_algebra_float.c ****   const float uy2  = uv->y * uv->y;
 153:math/pprz_algebra_float.c ****   const float uz2  = uv->z * uv->z;
 154:math/pprz_algebra_float.c ****   const float uxuy = uv->x * uv->y;
 155:math/pprz_algebra_float.c ****   const float uyuz = uv->y * uv->z;
 156:math/pprz_algebra_float.c ****   const float uxuz = uv->x * uv->z;
 157:math/pprz_algebra_float.c ****   const float can  = cosf(angle);
 158:math/pprz_algebra_float.c ****   const float san  = sinf(angle);
 159:math/pprz_algebra_float.c ****   const float one_m_can = (1. - can);
 160:math/pprz_algebra_float.c **** 
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ux2 + (1. - ux2) * can;
 162:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = uxuy * one_m_can + uv->z * san;
 163:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = uxuz * one_m_can - uv->y * san;
 164:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = RMAT_ELMT(*rm, 0, 1);
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = uy2 + (1. - uy2) * can;
 166:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 167:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = RMAT_ELMT(*rm, 0, 2);
 168:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = RMAT_ELMT(*rm, 1, 2);
 169:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = uz2 + (1. - uz2) * can;
 170:math/pprz_algebra_float.c **** }
 171:math/pprz_algebra_float.c **** 
 172:math/pprz_algebra_float.c **** 
 173:math/pprz_algebra_float.c **** /* C n->b rotation matrix */
 174:math/pprz_algebra_float.c **** void float_rmat_of_eulers_321(struct FloatRMat *rm, struct FloatEulers *e)
 175:math/pprz_algebra_float.c **** {
 176:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 177:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 178:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 179:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 180:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 181:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 182:math/pprz_algebra_float.c **** 
 183:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = ctheta * cpsi;
 184:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = ctheta * spsi;
 185:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -stheta;
 186:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = sphi * stheta * cpsi - cphi * spsi;
 187:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = sphi * stheta * spsi + cphi * cpsi;
 188:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = sphi * ctheta;
 189:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = cphi * stheta * cpsi + sphi * spsi;
 190:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cphi * stheta * spsi - sphi * cpsi;
 191:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = cphi * ctheta;
 192:math/pprz_algebra_float.c **** }
 193:math/pprz_algebra_float.c **** 
 194:math/pprz_algebra_float.c **** void float_rmat_of_eulers_312(struct FloatRMat *rm, struct FloatEulers *e)
 195:math/pprz_algebra_float.c **** {
 196:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 197:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 198:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 199:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 200:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 201:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 202:math/pprz_algebra_float.c **** 
 203:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) =  ctheta * cpsi - sphi * stheta * spsi;
 204:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta * spsi + sphi * stheta * cpsi;
 205:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -cphi * stheta;
 206:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = -cphi * spsi;
 207:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) =  cphi * cpsi;
 208:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) =  sphi;
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta * cpsi + sphi * ctheta * spsi;
 210:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta * spsi - sphi * ctheta * cpsi;
 211:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) =  cphi * ctheta;
 212:math/pprz_algebra_float.c **** }
 213:math/pprz_algebra_float.c **** 
 214:math/pprz_algebra_float.c **** 
 215:math/pprz_algebra_float.c **** /* C n->b rotation matrix */
 216:math/pprz_algebra_float.c **** void float_rmat_of_quat(struct FloatRMat *rm, struct FloatQuat *q)
 217:math/pprz_algebra_float.c **** {
 218:math/pprz_algebra_float.c ****   const float _a = M_SQRT2 * q->qi;
 219:math/pprz_algebra_float.c ****   const float _b = M_SQRT2 * q->qx;
 220:math/pprz_algebra_float.c ****   const float _c = M_SQRT2 * q->qy;
 221:math/pprz_algebra_float.c ****   const float _d = M_SQRT2 * q->qz;
 222:math/pprz_algebra_float.c ****   const float a2_1 = _a * _a - 1;
 223:math/pprz_algebra_float.c ****   const float ab = _a * _b;
 224:math/pprz_algebra_float.c ****   const float ac = _a * _c;
 225:math/pprz_algebra_float.c ****   const float ad = _a * _d;
 226:math/pprz_algebra_float.c ****   const float bc = _b * _c;
 227:math/pprz_algebra_float.c ****   const float bd = _b * _d;
 228:math/pprz_algebra_float.c ****   const float cd = _c * _d;
 229:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = a2_1 + _b * _b;
 230:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = bc + ad;
 231:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = bd - ac;
 232:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = bc - ad;
 233:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = a2_1 + _c * _c;
 234:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = cd + ab;
 235:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = bd + ac;
 236:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cd - ab;
 237:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = a2_1 + _d * _d;
 238:math/pprz_algebra_float.c **** }
 239:math/pprz_algebra_float.c **** 
 240:math/pprz_algebra_float.c **** /** in place first order integration of a rotation matrix */
 241:math/pprz_algebra_float.c **** void float_rmat_integrate_fi(struct FloatRMat *rm, struct FloatRates *omega, float dt)
 242:math/pprz_algebra_float.c **** {
 243:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 244:math/pprz_algebra_float.c ****     {
 245:math/pprz_algebra_float.c ****       1.        ,  dt *omega->r, -dt *omega->q,
 246:math/pprz_algebra_float.c ****       -dt *omega->r,  1.        ,  dt *omega->p,
 247:math/pprz_algebra_float.c ****       dt *omega->q, -dt *omega->p,  1.
 248:math/pprz_algebra_float.c ****     }
 249:math/pprz_algebra_float.c ****   };
 250:math/pprz_algebra_float.c ****   struct FloatRMat R_tdt;
 251:math/pprz_algebra_float.c ****   FLOAT_RMAT_COMP(R_tdt, *rm, exp_omega_dt);
 252:math/pprz_algebra_float.c ****   memcpy(rm, &R_tdt, sizeof(R_tdt));
 253:math/pprz_algebra_float.c **** }
 254:math/pprz_algebra_float.c **** 
 255:math/pprz_algebra_float.c **** static inline float renorm_factor(float n)
 256:math/pprz_algebra_float.c **** {
 153              		.loc 2 256 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              	.LVL8:
 257:math/pprz_algebra_float.c ****   if (n < 1.5625f && n > 0.64f) {
 158              		.loc 2 257 0
 159 0000 F7EE097A 		fconsts	s15, #121
 160 0004 B4EEE70A 		fcmpes	s0, s15
 161 0008 F1EE10FA 		fmstat
 256:math/pprz_algebra_float.c ****   if (n < 1.5625f && n > 0.64f) {
 162              		.loc 2 256 0
 163 000c 08B5     		push	{r3, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 3, -8
 166              		.cfi_offset 14, -4
 167              		.loc 2 257 0
 168 000e 0FD5     		bpl	.L14
 169              		.loc 2 257 0 is_stmt 0 discriminator 1
 170 0010 DFED157A 		flds	s15, .L28
 171 0014 B4EEE70A 		fcmpes	s0, s15
 172 0018 F1EE10FA 		fmstat
 173 001c 08DD     		ble	.L14
 258:math/pprz_algebra_float.c ****     return .5 * (3 - n);
 174              		.loc 2 258 0 is_stmt 1
 175 001e F0EE087A 		fconsts	s15, #8
 176 0022 37EEC00A 		fsubs	s0, s15, s0
 177              	.LVL9:
 178 0026 F6EE007A 		fconsts	s15, #96
 179 002a 20EE270A 		fmuls	s0, s0, s15
 180 002e 08BD     		pop	{r3, pc}
 181              	.LVL10:
 182              	.L14:
 259:math/pprz_algebra_float.c ****   } else if (n < 100.0f && n > 0.01f) {
 183              		.loc 2 259 0
 184 0030 DFED0E7A 		flds	s15, .L28+4
 185 0034 B4EEE70A 		fcmpes	s0, s15
 186 0038 F1EE10FA 		fmstat
 187 003c 11D5     		bpl	.L27
 188              		.loc 2 259 0 is_stmt 0 discriminator 1
 189 003e DFED0C7A 		flds	s15, .L28+8
 190 0042 B4EEE70A 		fcmpes	s0, s15
 191 0046 F1EE10FA 		fmstat
 192 004a 0ADD     		ble	.L27
 193              	.LVL11:
 194              	.LBB4:
 195              	.LBB5:
 260:math/pprz_algebra_float.c ****     return  1. / sqrtf(n);
 196              		.loc 2 260 0 is_stmt 1
 197 004c 10EE100A 		fmrs	r0, s0
 198 0050 FFF7FEFF 		bl	sqrtf
 199              	.LVL12:
 200 0054 07EE900A 		fmsr	s15, r0
 201 0058 B7EE000A 		fconsts	s0, #112
 202 005c 80EE270A 		fdivs	s0, s0, s15
 203 0060 08BD     		pop	{r3, pc}
 204              	.LVL13:
 205              	.L27:
 206              	.LBE5:
 207              	.LBE4:
 261:math/pprz_algebra_float.c ****   } else {
 262:math/pprz_algebra_float.c ****     return 0.;
 208              		.loc 2 262 0
 209 0062 9FED040A 		flds	s0, .L28+12
 210              	.LVL14:
 263:math/pprz_algebra_float.c ****   }
 264:math/pprz_algebra_float.c **** }
 211              		.loc 2 264 0
 212 0066 08BD     		pop	{r3, pc}
 213              	.L29:
 214              		.align	2
 215              	.L28:
 216 0068 0AD7233F 		.word	1059313418
 217 006c 0000C842 		.word	1120403456
 218 0070 0AD7233C 		.word	1008981770
 219 0074 00000000 		.word	0
 220              		.cfi_endproc
 221              	.LFE49:
 223              		.section	.text.float_vect3_integrate_fi,"ax",%progbits
 224              		.align	1
 225              		.global	float_vect3_integrate_fi
 226              		.thumb
 227              		.thumb_func
 229              	float_vect3_integrate_fi:
 230              	.LFB33:
  31:math/pprz_algebra_float.c ****   vec->x += dv->x * dt;
 231              		.loc 2 31 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 236              	.LVL15:
  32:math/pprz_algebra_float.c ****   vec->y += dv->y * dt;
 237              		.loc 2 32 0
 238 0000 D1ED006A 		flds	s13, [r1]
 239 0004 D0ED007A 		flds	s15, [r0]
  31:math/pprz_algebra_float.c ****   vec->x += dv->x * dt;
 240              		.loc 2 31 0
 241 0008 07EE102A 		fmsr	s14, r2
  32:math/pprz_algebra_float.c ****   vec->y += dv->y * dt;
 242              		.loc 2 32 0
 243 000c E6EE877A 		vfma.f32	s15, s13, s14
  33:math/pprz_algebra_float.c ****   vec->z += dv->z * dt;
 244              		.loc 2 33 0
 245 0010 D1ED016A 		flds	s13, [r1, #4]
  32:math/pprz_algebra_float.c ****   vec->y += dv->y * dt;
 246              		.loc 2 32 0
 247 0014 C0ED007A 		fsts	s15, [r0]
  33:math/pprz_algebra_float.c ****   vec->z += dv->z * dt;
 248              		.loc 2 33 0
 249 0018 D0ED017A 		flds	s15, [r0, #4]
 250 001c E6EE877A 		vfma.f32	s15, s13, s14
  34:math/pprz_algebra_float.c **** }
 251              		.loc 2 34 0
 252 0020 D1ED026A 		flds	s13, [r1, #8]
  33:math/pprz_algebra_float.c ****   vec->z += dv->z * dt;
 253              		.loc 2 33 0
 254 0024 C0ED017A 		fsts	s15, [r0, #4]
  34:math/pprz_algebra_float.c **** }
 255              		.loc 2 34 0
 256 0028 D0ED027A 		flds	s15, [r0, #8]
 257 002c E6EE877A 		vfma.f32	s15, s13, s14
 258 0030 C0ED027A 		fsts	s15, [r0, #8]
 259 0034 7047     		bx	lr
 260              		.cfi_endproc
 261              	.LFE33:
 263              		.section	.text.float_rates_integrate_fi,"ax",%progbits
 264              		.align	1
 265              		.global	float_rates_integrate_fi
 266              		.thumb
 267              		.thumb_func
 269              	float_rates_integrate_fi:
 270              	.LFB34:
  39:math/pprz_algebra_float.c ****   r->p += dr->p * dt;
 271              		.loc 2 39 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 0
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              		@ link register save eliminated.
 276              	.LVL16:
  40:math/pprz_algebra_float.c ****   r->q += dr->q * dt;
 277              		.loc 2 40 0
 278 0000 D1ED006A 		flds	s13, [r1]
 279 0004 D0ED007A 		flds	s15, [r0]
  39:math/pprz_algebra_float.c ****   r->p += dr->p * dt;
 280              		.loc 2 39 0
 281 0008 07EE102A 		fmsr	s14, r2
  40:math/pprz_algebra_float.c ****   r->q += dr->q * dt;
 282              		.loc 2 40 0
 283 000c E6EE877A 		vfma.f32	s15, s13, s14
  41:math/pprz_algebra_float.c ****   r->r += dr->r * dt;
 284              		.loc 2 41 0
 285 0010 D1ED016A 		flds	s13, [r1, #4]
  40:math/pprz_algebra_float.c ****   r->q += dr->q * dt;
 286              		.loc 2 40 0
 287 0014 C0ED007A 		fsts	s15, [r0]
  41:math/pprz_algebra_float.c ****   r->r += dr->r * dt;
 288              		.loc 2 41 0
 289 0018 D0ED017A 		flds	s15, [r0, #4]
 290 001c E6EE877A 		vfma.f32	s15, s13, s14
  42:math/pprz_algebra_float.c **** }
 291              		.loc 2 42 0
 292 0020 D1ED026A 		flds	s13, [r1, #8]
  41:math/pprz_algebra_float.c ****   r->r += dr->r * dt;
 293              		.loc 2 41 0
 294 0024 C0ED017A 		fsts	s15, [r0, #4]
  42:math/pprz_algebra_float.c **** }
 295              		.loc 2 42 0
 296 0028 D0ED027A 		flds	s15, [r0, #8]
 297 002c E6EE877A 		vfma.f32	s15, s13, s14
 298 0030 C0ED027A 		fsts	s15, [r0, #8]
 299 0034 7047     		bx	lr
 300              		.cfi_endproc
 301              	.LFE34:
 303              		.section	.text.float_rates_of_euler_dot,"ax",%progbits
 304              		.align	1
 305              		.global	float_rates_of_euler_dot
 306              		.thumb
 307              		.thumb_func
 309              	float_rates_of_euler_dot:
 310              	.LFB35:
  46:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
 311              		.loc 2 46 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              	.LVL17:
 316 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 317              		.cfi_def_cfa_offset 24
 318              		.cfi_offset 3, -24
 319              		.cfi_offset 4, -20
 320              		.cfi_offset 5, -16
 321              		.cfi_offset 6, -12
 322              		.cfi_offset 7, -8
 323              		.cfi_offset 14, -4
  47:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
 324              		.loc 2 47 0
 325 0002 4E68     		ldr	r6, [r1, #4]	@ float
  46:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
 326              		.loc 2 46 0
 327 0004 2DED048B 		fstmfdd	sp!, {d8, d9}
 328              		.cfi_def_cfa_offset 40
 329              		.cfi_offset 80, -40
 330              		.cfi_offset 81, -36
 331              		.cfi_offset 82, -32
 332              		.cfi_offset 83, -28
  46:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
 333              		.loc 2 46 0
 334 0008 0446     		mov	r4, r0
  47:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
 335              		.loc 2 47 0
 336 000a 3046     		mov	r0, r6	@ float
 337              	.LVL18:
  46:math/pprz_algebra_float.c ****   r->p = edot->phi                             -                sinf(e->theta) * edot->psi;
 338              		.loc 2 46 0
 339 000c 1546     		mov	r5, r2
 340 000e 0F46     		mov	r7, r1
  47:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
 341              		.loc 2 47 0
 342 0010 FFF7FEFF 		bl	sinf
 343              	.LVL19:
 344 0014 D5ED028A 		flds	s17, [r5, #8]
 345 0018 D5ED007A 		flds	s15, [r5]
  48:math/pprz_algebra_float.c ****   r->r =           -sinf(e->phi) * edot->theta + cosf(e->phi) * cosf(e->theta) * edot->psi;
 346              		.loc 2 48 0
 347 001c 3F68     		ldr	r7, [r7]	@ float
 348              	.LVL20:
  47:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
 349              		.loc 2 47 0
 350 001e 07EE100A 		fmsr	s14, r0
 351 0022 E7EE687A 		vfms.f32	s15, s14, s17
  48:math/pprz_algebra_float.c ****   r->r =           -sinf(e->phi) * edot->theta + cosf(e->phi) * cosf(e->theta) * edot->psi;
 352              		.loc 2 48 0
 353 0026 3846     		mov	r0, r7	@ float
  47:math/pprz_algebra_float.c ****   r->q =            cosf(e->phi) * edot->theta + sinf(e->phi) * cosf(e->theta) * edot->psi;
 354              		.loc 2 47 0
 355 0028 C4ED007A 		fsts	s15, [r4]
  48:math/pprz_algebra_float.c ****   r->r =           -sinf(e->phi) * edot->theta + cosf(e->phi) * cosf(e->theta) * edot->psi;
 356              		.loc 2 48 0
 357 002c FFF7FEFF 		bl	cosf
 358              	.LVL21:
 359 0030 08EE100A 		fmsr	s16, r0
 360 0034 3846     		mov	r0, r7	@ float
 361 0036 FFF7FEFF 		bl	sinf
 362              	.LVL22:
 363 003a 09EE900A 		fmsr	s19, r0
 364 003e 3046     		mov	r0, r6	@ float
 365 0040 FFF7FEFF 		bl	cosf
 366              	.LVL23:
 367 0044 07EE100A 		fmsr	s14, r0
 368 0048 69EE877A 		fmuls	s15, s19, s14
 369 004c 95ED019A 		flds	s18, [r5, #4]
 370 0050 67EEA87A 		fmuls	s15, s15, s17
 371 0054 E8EE097A 		vfma.f32	s15, s16, s18
  49:math/pprz_algebra_float.c **** }
 372              		.loc 2 49 0
 373 0058 28EE078A 		fmuls	s16, s16, s14
  48:math/pprz_algebra_float.c ****   r->r =           -sinf(e->phi) * edot->theta + cosf(e->phi) * cosf(e->theta) * edot->psi;
 374              		.loc 2 48 0
 375 005c C4ED017A 		fsts	s15, [r4, #4]
  49:math/pprz_algebra_float.c **** }
 376              		.loc 2 49 0
 377 0060 28EE288A 		fmuls	s16, s16, s17
 378 0064 A9EEC98A 		vfms.f32	s16, s19, s18
 379 0068 84ED028A 		fsts	s16, [r4, #8]
  50:math/pprz_algebra_float.c **** 
 380              		.loc 2 50 0
 381 006c BDEC048B 		fldmfdd	sp!, {d8-d9}
 382              		.cfi_restore 82
 383              		.cfi_restore 83
 384              		.cfi_restore 80
 385              		.cfi_restore 81
 386              		.cfi_def_cfa_offset 24
 387 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 388              		.cfi_endproc
 389              	.LFE35:
 391              		.section	.text.float_rmat_inv,"ax",%progbits
 392              		.align	1
 393              		.global	float_rmat_inv
 394              		.thumb
 395              		.thumb_func
 397              	float_rmat_inv:
 398              	.LFB36:
  56:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 0) = RMAT_ELMT(*m_a2b, 0, 0);
 399              		.loc 2 56 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403              		@ link register save eliminated.
 404              	.LVL24:
  57:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 1) = RMAT_ELMT(*m_a2b, 1, 0);
 405              		.loc 2 57 0
 406 0000 0B68     		ldr	r3, [r1]	@ float
 407 0002 0360     		str	r3, [r0]	@ float
  58:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 0, 2) = RMAT_ELMT(*m_a2b, 2, 0);
 408              		.loc 2 58 0
 409 0004 CB68     		ldr	r3, [r1, #12]	@ float
 410 0006 4360     		str	r3, [r0, #4]	@ float
  59:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 0) = RMAT_ELMT(*m_a2b, 0, 1);
 411              		.loc 2 59 0
 412 0008 8B69     		ldr	r3, [r1, #24]	@ float
 413 000a 8360     		str	r3, [r0, #8]	@ float
  60:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 1) = RMAT_ELMT(*m_a2b, 1, 1);
 414              		.loc 2 60 0
 415 000c 4B68     		ldr	r3, [r1, #4]	@ float
 416 000e C360     		str	r3, [r0, #12]	@ float
  61:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 1, 2) = RMAT_ELMT(*m_a2b, 2, 1);
 417              		.loc 2 61 0
 418 0010 0B69     		ldr	r3, [r1, #16]	@ float
 419 0012 0361     		str	r3, [r0, #16]	@ float
  62:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 0) = RMAT_ELMT(*m_a2b, 0, 2);
 420              		.loc 2 62 0
 421 0014 CB69     		ldr	r3, [r1, #28]	@ float
 422 0016 4361     		str	r3, [r0, #20]	@ float
  63:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 1) = RMAT_ELMT(*m_a2b, 1, 2);
 423              		.loc 2 63 0
 424 0018 8B68     		ldr	r3, [r1, #8]	@ float
 425 001a 8361     		str	r3, [r0, #24]	@ float
  64:math/pprz_algebra_float.c ****   RMAT_ELMT(*m_b2a, 2, 2) = RMAT_ELMT(*m_a2b, 2, 2);
 426              		.loc 2 64 0
 427 001c 4B69     		ldr	r3, [r1, #20]	@ float
 428 001e C361     		str	r3, [r0, #28]	@ float
  65:math/pprz_algebra_float.c **** }
 429              		.loc 2 65 0
 430 0020 0B6A     		ldr	r3, [r1, #32]	@ float
 431 0022 0362     		str	r3, [r0, #32]	@ float
 432 0024 7047     		bx	lr
 433              		.cfi_endproc
 434              	.LFE36:
 436              		.section	.text.float_rmat_norm,"ax",%progbits
 437              		.align	1
 438              		.global	float_rmat_norm
 439              		.thumb
 440              		.thumb_func
 442              	float_rmat_norm:
 443              	.LFB37:
  69:math/pprz_algebra_float.c ****   return sqrtf(SQUARE(rm->m[0]) + SQUARE(rm->m[1]) + SQUARE(rm->m[2]) +
 444              		.loc 2 69 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 449              	.LVL25:
  70:math/pprz_algebra_float.c ****                SQUARE(rm->m[3]) + SQUARE(rm->m[4]) + SQUARE(rm->m[5]) +
 450              		.loc 2 70 0
 451 0000 D0ED017A 		flds	s15, [r0, #4]
 452 0004 D0ED003A 		flds	s7, [r0]
 453 0008 90ED024A 		flds	s8, [r0, #8]
  71:math/pprz_algebra_float.c ****                SQUARE(rm->m[6]) + SQUARE(rm->m[7]) + SQUARE(rm->m[8]));
 454              		.loc 2 71 0
 455 000c D0ED034A 		flds	s9, [r0, #12]
 456 0010 90ED045A 		flds	s10, [r0, #16]
 457 0014 D0ED055A 		flds	s11, [r0, #20]
  72:math/pprz_algebra_float.c **** }
 458              		.loc 2 72 0
 459 0018 90ED066A 		flds	s12, [r0, #24]
 460 001c D0ED076A 		flds	s13, [r0, #28]
 461 0020 90ED087A 		flds	s14, [r0, #32]
  70:math/pprz_algebra_float.c ****                SQUARE(rm->m[3]) + SQUARE(rm->m[4]) + SQUARE(rm->m[5]) +
 462              		.loc 2 70 0
 463 0024 67EEA77A 		fmuls	s15, s15, s15
 464 0028 E3EEA37A 		vfma.f32	s15, s7, s7
 465 002c E4EE047A 		vfma.f32	s15, s8, s8
 466 0030 E4EEA47A 		vfma.f32	s15, s9, s9
  71:math/pprz_algebra_float.c ****                SQUARE(rm->m[6]) + SQUARE(rm->m[7]) + SQUARE(rm->m[8]));
 467              		.loc 2 71 0
 468 0034 E5EE057A 		vfma.f32	s15, s10, s10
 469 0038 E5EEA57A 		vfma.f32	s15, s11, s11
 470 003c E6EE067A 		vfma.f32	s15, s12, s12
  72:math/pprz_algebra_float.c **** }
 471              		.loc 2 72 0
 472 0040 E6EEA67A 		vfma.f32	s15, s13, s13
  70:math/pprz_algebra_float.c ****                SQUARE(rm->m[3]) + SQUARE(rm->m[4]) + SQUARE(rm->m[5]) +
 473              		.loc 2 70 0
 474 0044 E7EE077A 		vfma.f32	s15, s14, s14
 475 0048 17EE900A 		fmrs	r0, s15
 476              	.LVL26:
 477 004c FFF7FEBF 		b	sqrtf
 478              	.LVL27:
 479              		.cfi_endproc
 480              	.LFE37:
 482              		.section	.text.float_rmat_comp,"ax",%progbits
 483              		.align	1
 484              		.global	float_rmat_comp
 485              		.thumb
 486              		.thumb_func
 488              	float_rmat_comp:
 489              	.LFB38:
  79:math/pprz_algebra_float.c ****   m_a2c->m[0] = m_b2c->m[0] * m_a2b->m[0] + m_b2c->m[1] * m_a2b->m[3] + m_b2c->m[2] * m_a2b->m[6];
 490              		.loc 2 79 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495              	.LVL28:
  80:math/pprz_algebra_float.c ****   m_a2c->m[1] = m_b2c->m[0] * m_a2b->m[1] + m_b2c->m[1] * m_a2b->m[4] + m_b2c->m[2] * m_a2b->m[7];
 496              		.loc 2 80 0
 497 0000 D2ED017A 		flds	s15, [r2, #4]
 498 0004 D1ED036A 		flds	s13, [r1, #12]
 499 0008 D2ED005A 		flds	s11, [r2]
 500 000c 91ED006A 		flds	s12, [r1]
 501 0010 92ED024A 		flds	s8, [r2, #8]
 502 0014 D1ED064A 		flds	s9, [r1, #24]
 503 0018 27EEA67A 		fmuls	s14, s15, s13
 504 001c A5EE867A 		vfma.f32	s14, s11, s12
 505 0020 A4EE247A 		vfma.f32	s14, s8, s9
 506 0024 80ED007A 		fsts	s14, [r0]
  81:math/pprz_algebra_float.c ****   m_a2c->m[2] = m_b2c->m[0] * m_a2b->m[2] + m_b2c->m[1] * m_a2b->m[5] + m_b2c->m[2] * m_a2b->m[8];
 507              		.loc 2 81 0
 508 0028 D1ED042A 		flds	s5, [r1, #16]
 509 002c 92ED007A 		flds	s14, [r2]
 510 0030 91ED016A 		flds	s12, [r1, #4]
 511 0034 91ED075A 		flds	s10, [r1, #28]
 512 0038 67EEA27A 		fmuls	s15, s15, s5
 513 003c E7EE067A 		vfma.f32	s15, s14, s12
 514 0040 E4EE057A 		vfma.f32	s15, s8, s10
 515 0044 C0ED017A 		fsts	s15, [r0, #4]
  82:math/pprz_algebra_float.c ****   m_a2c->m[3] = m_b2c->m[3] * m_a2b->m[0] + m_b2c->m[4] * m_a2b->m[3] + m_b2c->m[5] * m_a2b->m[6];
 516              		.loc 2 82 0
 517 0048 D1ED057A 		flds	s15, [r1, #20]
 518 004c 92ED016A 		flds	s12, [r2, #4]
 519 0050 D1ED023A 		flds	s7, [r1, #8]
 520 0054 D1ED085A 		flds	s11, [r1, #32]
 521 0058 27EE866A 		fmuls	s12, s15, s12
 522 005c A7EE236A 		vfma.f32	s12, s14, s7
 523 0060 A4EE256A 		vfma.f32	s12, s8, s11
 524 0064 80ED026A 		fsts	s12, [r0, #8]
  83:math/pprz_algebra_float.c ****   m_a2c->m[4] = m_b2c->m[3] * m_a2b->m[1] + m_b2c->m[4] * m_a2b->m[4] + m_b2c->m[5] * m_a2b->m[7];
 525              		.loc 2 83 0
 526 0068 92ED047A 		flds	s14, [r2, #16]
 527 006c 91ED003A 		flds	s6, [r1]
 528 0070 92ED034A 		flds	s8, [r2, #12]
 529 0074 92ED056A 		flds	s12, [r2, #20]
 530 0078 67EE266A 		fmuls	s13, s14, s13
  84:math/pprz_algebra_float.c ****   m_a2c->m[5] = m_b2c->m[3] * m_a2b->m[2] + m_b2c->m[4] * m_a2b->m[5] + m_b2c->m[5] * m_a2b->m[8];
 531              		.loc 2 84 0
 532 007c 27EE227A 		fmuls	s14, s14, s5
  83:math/pprz_algebra_float.c ****   m_a2c->m[4] = m_b2c->m[3] * m_a2b->m[1] + m_b2c->m[4] * m_a2b->m[4] + m_b2c->m[5] * m_a2b->m[7];
 533              		.loc 2 83 0
 534 0080 E4EE036A 		vfma.f32	s13, s8, s6
 535 0084 E6EE246A 		vfma.f32	s13, s12, s9
 536 0088 C0ED036A 		fsts	s13, [r0, #12]
  84:math/pprz_algebra_float.c ****   m_a2c->m[5] = m_b2c->m[3] * m_a2b->m[2] + m_b2c->m[4] * m_a2b->m[5] + m_b2c->m[5] * m_a2b->m[8];
 537              		.loc 2 84 0
 538 008c D2ED036A 		flds	s13, [r2, #12]
 539 0090 D1ED013A 		flds	s7, [r1, #4]
 540 0094 A6EEA37A 		vfma.f32	s14, s13, s7
 541 0098 A6EE057A 		vfma.f32	s14, s12, s10
 542 009c 80ED047A 		fsts	s14, [r0, #16]
  85:math/pprz_algebra_float.c ****   m_a2c->m[6] = m_b2c->m[6] * m_a2b->m[0] + m_b2c->m[7] * m_a2b->m[3] + m_b2c->m[8] * m_a2b->m[6];
 543              		.loc 2 85 0
 544 00a0 92ED047A 		flds	s14, [r2, #16]
 545 00a4 91ED024A 		flds	s8, [r1, #8]
 546 00a8 67EE877A 		fmuls	s15, s15, s14
 547 00ac E6EE847A 		vfma.f32	s15, s13, s8
 548 00b0 E6EE257A 		vfma.f32	s15, s12, s11
 549 00b4 C0ED057A 		fsts	s15, [r0, #20]
  86:math/pprz_algebra_float.c ****   m_a2c->m[7] = m_b2c->m[6] * m_a2b->m[1] + m_b2c->m[7] * m_a2b->m[4] + m_b2c->m[8] * m_a2b->m[7];
 550              		.loc 2 86 0
 551 00b8 D2ED077A 		flds	s15, [r2, #28]
 552 00bc 91ED037A 		flds	s14, [r1, #12]
 553 00c0 92ED066A 		flds	s12, [r2, #24]
 554 00c4 D2ED086A 		flds	s13, [r2, #32]
 555 00c8 27EE877A 		fmuls	s14, s15, s14
 556 00cc A6EE037A 		vfma.f32	s14, s12, s6
 557 00d0 A6EEA47A 		vfma.f32	s14, s13, s9
 558 00d4 80ED067A 		fsts	s14, [r0, #24]
  87:math/pprz_algebra_float.c ****   m_a2c->m[8] = m_b2c->m[6] * m_a2b->m[2] + m_b2c->m[7] * m_a2b->m[5] + m_b2c->m[8] * m_a2b->m[8];
 559              		.loc 2 87 0
 560 00d8 92ED067A 		flds	s14, [r2, #24]
 561 00dc 91ED046A 		flds	s12, [r1, #16]
 562 00e0 67EE867A 		fmuls	s15, s15, s12
 563 00e4 E7EE237A 		vfma.f32	s15, s14, s7
 564 00e8 E6EE857A 		vfma.f32	s15, s13, s10
 565 00ec C0ED077A 		fsts	s15, [r0, #28]
  88:math/pprz_algebra_float.c **** }
 566              		.loc 2 88 0
 567 00f0 D2ED077A 		flds	s15, [r2, #28]
 568 00f4 91ED056A 		flds	s12, [r1, #20]
 569 00f8 67EE867A 		fmuls	s15, s15, s12
 570 00fc E7EE047A 		vfma.f32	s15, s14, s8
 571 0100 E6EEA57A 		vfma.f32	s15, s13, s11
 572 0104 C0ED087A 		fsts	s15, [r0, #32]
 573 0108 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE38:
 577              		.section	.text.float_rmat_comp_inv,"ax",%progbits
 578              		.align	1
 579              		.global	float_rmat_comp_inv
 580              		.thumb
 581              		.thumb_func
 583              	float_rmat_comp_inv:
 584              	.LFB39:
  95:math/pprz_algebra_float.c ****   m_a2b->m[0] = m_b2c->m[0] * m_a2c->m[0] + m_b2c->m[3] * m_a2c->m[3] + m_b2c->m[6] * m_a2c->m[6];
 585              		.loc 2 95 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590              	.LVL29:
  96:math/pprz_algebra_float.c ****   m_a2b->m[1] = m_b2c->m[0] * m_a2c->m[1] + m_b2c->m[3] * m_a2c->m[4] + m_b2c->m[6] * m_a2c->m[7];
 591              		.loc 2 96 0
 592 0000 D2ED037A 		flds	s15, [r2, #12]
 593 0004 D1ED036A 		flds	s13, [r1, #12]
 594 0008 92ED005A 		flds	s10, [r2]
 595 000c 91ED006A 		flds	s12, [r1]
 596 0010 D2ED065A 		flds	s11, [r2, #24]
 597 0014 D1ED064A 		flds	s9, [r1, #24]
 598 0018 27EEA67A 		fmuls	s14, s15, s13
 599 001c A5EE067A 		vfma.f32	s14, s10, s12
 600 0020 A5EEA47A 		vfma.f32	s14, s11, s9
 601 0024 80ED007A 		fsts	s14, [r0]
  97:math/pprz_algebra_float.c ****   m_a2b->m[2] = m_b2c->m[0] * m_a2c->m[2] + m_b2c->m[3] * m_a2c->m[5] + m_b2c->m[6] * m_a2c->m[8];
 602              		.loc 2 97 0
 603 0028 D1ED043A 		flds	s7, [r1, #16]
 604 002c 92ED004A 		flds	s8, [r2]
 605 0030 91ED016A 		flds	s12, [r1, #4]
 606 0034 91ED075A 		flds	s10, [r1, #28]
 607 0038 27EEA37A 		fmuls	s14, s15, s7
 608 003c A4EE067A 		vfma.f32	s14, s8, s12
 609 0040 A5EE857A 		vfma.f32	s14, s11, s10
 610 0044 80ED017A 		fsts	s14, [r0, #4]
  98:math/pprz_algebra_float.c ****   m_a2b->m[3] = m_b2c->m[1] * m_a2c->m[0] + m_b2c->m[4] * m_a2c->m[3] + m_b2c->m[7] * m_a2c->m[6];
 611              		.loc 2 98 0
 612 0048 91ED057A 		flds	s14, [r1, #20]
 613 004c 91ED023A 		flds	s6, [r1, #8]
 614 0050 91ED086A 		flds	s12, [r1, #32]
 615 0054 67EE877A 		fmuls	s15, s15, s14
 616 0058 E4EE037A 		vfma.f32	s15, s8, s6
 617 005c E5EE867A 		vfma.f32	s15, s11, s12
 618 0060 C0ED027A 		fsts	s15, [r0, #8]
  99:math/pprz_algebra_float.c ****   m_a2b->m[4] = m_b2c->m[1] * m_a2c->m[1] + m_b2c->m[4] * m_a2c->m[4] + m_b2c->m[7] * m_a2c->m[7];
 619              		.loc 2 99 0
 620 0064 D2ED047A 		flds	s15, [r2, #16]
 621 0068 92ED014A 		flds	s8, [r2, #4]
 622 006c D1ED002A 		flds	s5, [r1]
 623 0070 D2ED075A 		flds	s11, [r2, #28]
 624 0074 67EEA66A 		fmuls	s13, s15, s13
 100:math/pprz_algebra_float.c ****   m_a2b->m[5] = m_b2c->m[1] * m_a2c->m[2] + m_b2c->m[4] * m_a2c->m[5] + m_b2c->m[7] * m_a2c->m[8];
 625              		.loc 2 100 0
 626 0078 67EEA37A 		fmuls	s15, s15, s7
  99:math/pprz_algebra_float.c ****   m_a2b->m[4] = m_b2c->m[1] * m_a2c->m[1] + m_b2c->m[4] * m_a2c->m[4] + m_b2c->m[7] * m_a2c->m[7];
 627              		.loc 2 99 0
 628 007c E4EE226A 		vfma.f32	s13, s8, s5
 629 0080 E5EEA46A 		vfma.f32	s13, s11, s9
 630 0084 C0ED036A 		fsts	s13, [r0, #12]
 100:math/pprz_algebra_float.c ****   m_a2b->m[5] = m_b2c->m[1] * m_a2c->m[2] + m_b2c->m[4] * m_a2c->m[5] + m_b2c->m[7] * m_a2c->m[8];
 631              		.loc 2 100 0
 632 0088 91ED013A 		flds	s6, [r1, #4]
 633 008c E4EE037A 		vfma.f32	s15, s8, s6
 634 0090 E5EE857A 		vfma.f32	s15, s11, s10
 635 0094 C0ED047A 		fsts	s15, [r0, #16]
 101:math/pprz_algebra_float.c ****   m_a2b->m[6] = m_b2c->m[2] * m_a2c->m[0] + m_b2c->m[5] * m_a2c->m[3] + m_b2c->m[8] * m_a2c->m[6];
 636              		.loc 2 101 0
 637 0098 D2ED047A 		flds	s15, [r2, #16]
 638 009c D1ED023A 		flds	s7, [r1, #8]
 639 00a0 27EE277A 		fmuls	s14, s14, s15
 640 00a4 A4EE237A 		vfma.f32	s14, s8, s7
 641 00a8 A5EE867A 		vfma.f32	s14, s11, s12
 642 00ac 80ED057A 		fsts	s14, [r0, #20]
 102:math/pprz_algebra_float.c ****   m_a2b->m[7] = m_b2c->m[2] * m_a2c->m[1] + m_b2c->m[5] * m_a2c->m[4] + m_b2c->m[8] * m_a2c->m[7];
 643              		.loc 2 102 0
 644 00b0 D2ED057A 		flds	s15, [r2, #20]
 645 00b4 91ED037A 		flds	s14, [r1, #12]
 646 00b8 D2ED025A 		flds	s11, [r2, #8]
 647 00bc D2ED086A 		flds	s13, [r2, #32]
 648 00c0 27EE877A 		fmuls	s14, s15, s14
 649 00c4 A5EEA27A 		vfma.f32	s14, s11, s5
 650 00c8 A6EEA47A 		vfma.f32	s14, s13, s9
 651 00cc 80ED067A 		fsts	s14, [r0, #24]
 103:math/pprz_algebra_float.c ****   m_a2b->m[8] = m_b2c->m[2] * m_a2c->m[2] + m_b2c->m[5] * m_a2c->m[5] + m_b2c->m[8] * m_a2c->m[8];
 652              		.loc 2 103 0
 653 00d0 91ED047A 		flds	s14, [r1, #16]
 654 00d4 27EE877A 		fmuls	s14, s15, s14
 655 00d8 A5EE837A 		vfma.f32	s14, s11, s6
 656 00dc A6EE857A 		vfma.f32	s14, s13, s10
 657 00e0 80ED077A 		fsts	s14, [r0, #28]
 104:math/pprz_algebra_float.c **** }
 658              		.loc 2 104 0
 659 00e4 91ED057A 		flds	s14, [r1, #20]
 660 00e8 67EE877A 		fmuls	s15, s15, s14
 661 00ec E5EEA37A 		vfma.f32	s15, s11, s7
 662 00f0 E6EE867A 		vfma.f32	s15, s13, s12
 663 00f4 C0ED087A 		fsts	s15, [r0, #32]
 664 00f8 7047     		bx	lr
 665              		.cfi_endproc
 666              	.LFE39:
 668              		.section	.text.float_rmat_vmult,"ax",%progbits
 669              		.align	1
 670              		.global	float_rmat_vmult
 671              		.thumb
 672              		.thumb_func
 674              	float_rmat_vmult:
 675              	.LFB40:
 111:math/pprz_algebra_float.c ****   vb->x = m_a2b->m[0] * va->x + m_a2b->m[1] * va->y + m_a2b->m[2] * va->z;
 676              		.loc 2 111 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 0
 679              		@ frame_needed = 0, uses_anonymous_args = 0
 680              		@ link register save eliminated.
 681              	.LVL30:
 112:math/pprz_algebra_float.c ****   vb->y = m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z;
 682              		.loc 2 112 0
 683 0000 D2ED017A 		flds	s15, [r2, #4]
 684 0004 91ED017A 		flds	s14, [r1, #4]
 685 0008 92ED006A 		flds	s12, [r2]
 686 000c D1ED005A 		flds	s11, [r1]
 687 0010 D2ED026A 		flds	s13, [r2, #8]
 688 0014 27EE877A 		fmuls	s14, s15, s14
 689 0018 A5EE867A 		vfma.f32	s14, s11, s12
 690 001c 91ED026A 		flds	s12, [r1, #8]
 691 0020 A6EE267A 		vfma.f32	s14, s12, s13
 113:math/pprz_algebra_float.c ****   vb->z = m_a2b->m[6] * va->x + m_a2b->m[7] * va->y + m_a2b->m[8] * va->z;
 692              		.loc 2 113 0
 693 0024 91ED046A 		flds	s12, [r1, #16]
 112:math/pprz_algebra_float.c ****   vb->y = m_a2b->m[3] * va->x + m_a2b->m[4] * va->y + m_a2b->m[5] * va->z;
 694              		.loc 2 112 0
 695 0028 80ED007A 		fsts	s14, [r0]
 113:math/pprz_algebra_float.c ****   vb->z = m_a2b->m[6] * va->x + m_a2b->m[7] * va->y + m_a2b->m[8] * va->z;
 696              		.loc 2 113 0
 697 002c 92ED007A 		flds	s14, [r2]
 698 0030 67EE867A 		fmuls	s15, s15, s12
 699 0034 91ED036A 		flds	s12, [r1, #12]
 700 0038 E6EE077A 		vfma.f32	s15, s12, s14
 701 003c 91ED056A 		flds	s12, [r1, #20]
 702 0040 E6EE267A 		vfma.f32	s15, s12, s13
 703 0044 C0ED017A 		fsts	s15, [r0, #4]
 114:math/pprz_algebra_float.c **** }
 704              		.loc 2 114 0
 705 0048 92ED016A 		flds	s12, [r2, #4]
 706 004c D1ED077A 		flds	s15, [r1, #28]
 707 0050 67EE867A 		fmuls	s15, s15, s12
 708 0054 91ED066A 		flds	s12, [r1, #24]
 709 0058 E6EE077A 		vfma.f32	s15, s12, s14
 710 005c 91ED087A 		flds	s14, [r1, #32]
 711 0060 E7EE267A 		vfma.f32	s15, s14, s13
 712 0064 C0ED027A 		fsts	s15, [r0, #8]
 713 0068 7047     		bx	lr
 714              		.cfi_endproc
 715              	.LFE40:
 717              		.section	.text.float_rmat_transp_vmult,"ax",%progbits
 718              		.align	1
 719              		.global	float_rmat_transp_vmult
 720              		.thumb
 721              		.thumb_func
 723              	float_rmat_transp_vmult:
 724              	.LFB41:
 121:math/pprz_algebra_float.c ****   vb->x = m_b2a->m[0] * va->x + m_b2a->m[3] * va->y + m_b2a->m[6] * va->z;
 725              		.loc 2 121 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              		@ link register save eliminated.
 730              	.LVL31:
 122:math/pprz_algebra_float.c ****   vb->y = m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z;
 731              		.loc 2 122 0
 732 0000 D2ED017A 		flds	s15, [r2, #4]
 733 0004 91ED037A 		flds	s14, [r1, #12]
 734 0008 92ED006A 		flds	s12, [r2]
 735 000c D1ED005A 		flds	s11, [r1]
 736 0010 D2ED026A 		flds	s13, [r2, #8]
 737 0014 27EE877A 		fmuls	s14, s15, s14
 738 0018 A5EE867A 		vfma.f32	s14, s11, s12
 739 001c 91ED066A 		flds	s12, [r1, #24]
 740 0020 A6EE267A 		vfma.f32	s14, s12, s13
 123:math/pprz_algebra_float.c ****   vb->z = m_b2a->m[2] * va->x + m_b2a->m[5] * va->y + m_b2a->m[8] * va->z;
 741              		.loc 2 123 0
 742 0024 91ED046A 		flds	s12, [r1, #16]
 122:math/pprz_algebra_float.c ****   vb->y = m_b2a->m[1] * va->x + m_b2a->m[4] * va->y + m_b2a->m[7] * va->z;
 743              		.loc 2 122 0
 744 0028 80ED007A 		fsts	s14, [r0]
 123:math/pprz_algebra_float.c ****   vb->z = m_b2a->m[2] * va->x + m_b2a->m[5] * va->y + m_b2a->m[8] * va->z;
 745              		.loc 2 123 0
 746 002c 92ED007A 		flds	s14, [r2]
 747 0030 67EE867A 		fmuls	s15, s15, s12
 748 0034 91ED016A 		flds	s12, [r1, #4]
 749 0038 E6EE077A 		vfma.f32	s15, s12, s14
 750 003c 91ED076A 		flds	s12, [r1, #28]
 751 0040 E6EE267A 		vfma.f32	s15, s12, s13
 752 0044 C0ED017A 		fsts	s15, [r0, #4]
 124:math/pprz_algebra_float.c **** }
 753              		.loc 2 124 0
 754 0048 92ED016A 		flds	s12, [r2, #4]
 755 004c D1ED057A 		flds	s15, [r1, #20]
 756 0050 67EE867A 		fmuls	s15, s15, s12
 757 0054 91ED026A 		flds	s12, [r1, #8]
 758 0058 E6EE077A 		vfma.f32	s15, s12, s14
 759 005c 91ED087A 		flds	s14, [r1, #32]
 760 0060 E7EE267A 		vfma.f32	s15, s14, s13
 761 0064 C0ED027A 		fsts	s15, [r0, #8]
 762 0068 7047     		bx	lr
 763              		.cfi_endproc
 764              	.LFE41:
 766              		.section	.text.float_rmat_ratemult,"ax",%progbits
 767              		.align	1
 768              		.global	float_rmat_ratemult
 769              		.thumb
 770              		.thumb_func
 772              	float_rmat_ratemult:
 773              	.LFB42:
 131:math/pprz_algebra_float.c ****   rb->p = m_a2b->m[0] * ra->p + m_a2b->m[1] * ra->q + m_a2b->m[2] * ra->r;
 774              		.loc 2 131 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 779              	.LVL32:
 132:math/pprz_algebra_float.c ****   rb->q = m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r;
 780              		.loc 2 132 0
 781 0000 D2ED017A 		flds	s15, [r2, #4]
 782 0004 91ED017A 		flds	s14, [r1, #4]
 783 0008 92ED006A 		flds	s12, [r2]
 784 000c D1ED005A 		flds	s11, [r1]
 785 0010 D2ED026A 		flds	s13, [r2, #8]
 786 0014 27EE877A 		fmuls	s14, s15, s14
 787 0018 A5EE867A 		vfma.f32	s14, s11, s12
 788 001c 91ED026A 		flds	s12, [r1, #8]
 789 0020 A6EE267A 		vfma.f32	s14, s12, s13
 133:math/pprz_algebra_float.c ****   rb->r = m_a2b->m[6] * ra->p + m_a2b->m[7] * ra->q + m_a2b->m[8] * ra->r;
 790              		.loc 2 133 0
 791 0024 91ED046A 		flds	s12, [r1, #16]
 132:math/pprz_algebra_float.c ****   rb->q = m_a2b->m[3] * ra->p + m_a2b->m[4] * ra->q + m_a2b->m[5] * ra->r;
 792              		.loc 2 132 0
 793 0028 80ED007A 		fsts	s14, [r0]
 133:math/pprz_algebra_float.c ****   rb->r = m_a2b->m[6] * ra->p + m_a2b->m[7] * ra->q + m_a2b->m[8] * ra->r;
 794              		.loc 2 133 0
 795 002c 92ED007A 		flds	s14, [r2]
 796 0030 67EE867A 		fmuls	s15, s15, s12
 797 0034 91ED036A 		flds	s12, [r1, #12]
 798 0038 E6EE077A 		vfma.f32	s15, s12, s14
 799 003c 91ED056A 		flds	s12, [r1, #20]
 800 0040 E6EE267A 		vfma.f32	s15, s12, s13
 801 0044 C0ED017A 		fsts	s15, [r0, #4]
 134:math/pprz_algebra_float.c **** }
 802              		.loc 2 134 0
 803 0048 92ED016A 		flds	s12, [r2, #4]
 804 004c D1ED077A 		flds	s15, [r1, #28]
 805 0050 67EE867A 		fmuls	s15, s15, s12
 806 0054 91ED066A 		flds	s12, [r1, #24]
 807 0058 E6EE077A 		vfma.f32	s15, s12, s14
 808 005c 91ED087A 		flds	s14, [r1, #32]
 809 0060 E7EE267A 		vfma.f32	s15, s14, s13
 810 0064 C0ED027A 		fsts	s15, [r0, #8]
 811 0068 7047     		bx	lr
 812              		.cfi_endproc
 813              	.LFE42:
 815              		.section	.text.float_rmat_transp_ratemult,"ax",%progbits
 816              		.align	1
 817              		.global	float_rmat_transp_ratemult
 818              		.thumb
 819              		.thumb_func
 821              	float_rmat_transp_ratemult:
 822              	.LFB43:
 141:math/pprz_algebra_float.c ****   rb->p = m_b2a->m[0] * ra->p + m_b2a->m[3] * ra->q + m_b2a->m[6] * ra->r;
 823              		.loc 2 141 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              		@ link register save eliminated.
 828              	.LVL33:
 142:math/pprz_algebra_float.c ****   rb->q = m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r;
 829              		.loc 2 142 0
 830 0000 D2ED017A 		flds	s15, [r2, #4]
 831 0004 91ED037A 		flds	s14, [r1, #12]
 832 0008 92ED006A 		flds	s12, [r2]
 833 000c D1ED005A 		flds	s11, [r1]
 834 0010 D2ED026A 		flds	s13, [r2, #8]
 835 0014 27EE877A 		fmuls	s14, s15, s14
 836 0018 A5EE867A 		vfma.f32	s14, s11, s12
 837 001c 91ED066A 		flds	s12, [r1, #24]
 838 0020 A6EE267A 		vfma.f32	s14, s12, s13
 143:math/pprz_algebra_float.c ****   rb->r = m_b2a->m[2] * ra->p + m_b2a->m[5] * ra->q + m_b2a->m[8] * ra->r;
 839              		.loc 2 143 0
 840 0024 91ED046A 		flds	s12, [r1, #16]
 142:math/pprz_algebra_float.c ****   rb->q = m_b2a->m[1] * ra->p + m_b2a->m[4] * ra->q + m_b2a->m[7] * ra->r;
 841              		.loc 2 142 0
 842 0028 80ED007A 		fsts	s14, [r0]
 143:math/pprz_algebra_float.c ****   rb->r = m_b2a->m[2] * ra->p + m_b2a->m[5] * ra->q + m_b2a->m[8] * ra->r;
 843              		.loc 2 143 0
 844 002c 92ED007A 		flds	s14, [r2]
 845 0030 67EE867A 		fmuls	s15, s15, s12
 846 0034 91ED016A 		flds	s12, [r1, #4]
 847 0038 E6EE077A 		vfma.f32	s15, s12, s14
 848 003c 91ED076A 		flds	s12, [r1, #28]
 849 0040 E6EE267A 		vfma.f32	s15, s12, s13
 850 0044 C0ED017A 		fsts	s15, [r0, #4]
 144:math/pprz_algebra_float.c **** }
 851              		.loc 2 144 0
 852 0048 92ED016A 		flds	s12, [r2, #4]
 853 004c D1ED057A 		flds	s15, [r1, #20]
 854 0050 67EE867A 		fmuls	s15, s15, s12
 855 0054 91ED026A 		flds	s12, [r1, #8]
 856 0058 E6EE077A 		vfma.f32	s15, s12, s14
 857 005c 91ED087A 		flds	s14, [r1, #32]
 858 0060 E7EE267A 		vfma.f32	s15, s14, s13
 859 0064 C0ED027A 		fsts	s15, [r0, #8]
 860 0068 7047     		bx	lr
 861              		.cfi_endproc
 862              	.LFE43:
 864              		.global	__aeabi_f2d
 865              		.global	__aeabi_dsub
 866              		.global	__aeabi_dmul
 867              		.global	__aeabi_dadd
 868              		.global	__aeabi_d2f
 869              		.section	.text.float_rmat_of_axis_angle,"ax",%progbits
 870              		.align	1
 871              		.global	float_rmat_of_axis_angle
 872              		.thumb
 873              		.thumb_func
 875              	float_rmat_of_axis_angle:
 876              	.LFB44:
 150:math/pprz_algebra_float.c ****   const float ux2  = uv->x * uv->x;
 877              		.loc 2 150 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              	.LVL34:
 882 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 883              		.cfi_def_cfa_offset 32
 884              		.cfi_offset 3, -32
 885              		.cfi_offset 4, -28
 886              		.cfi_offset 5, -24
 887              		.cfi_offset 6, -20
 888              		.cfi_offset 7, -16
 889              		.cfi_offset 8, -12
 890              		.cfi_offset 9, -8
 891              		.cfi_offset 14, -4
 892 0004 0446     		mov	r4, r0
 893 0006 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 894              		.cfi_def_cfa_offset 56
 895              		.cfi_offset 80, -56
 896              		.cfi_offset 81, -52
 897              		.cfi_offset 82, -48
 898              		.cfi_offset 83, -44
 899              		.cfi_offset 84, -40
 900              		.cfi_offset 85, -36
 157:math/pprz_algebra_float.c ****   const float san  = sinf(angle);
 901              		.loc 2 157 0
 902 000a 1046     		mov	r0, r2	@ float
 903              	.LVL35:
 153:math/pprz_algebra_float.c ****   const float uxuy = uv->x * uv->y;
 904              		.loc 2 153 0
 905 000c 91ED029A 		flds	s18, [r1, #8]
 151:math/pprz_algebra_float.c ****   const float uy2  = uv->y * uv->y;
 906              		.loc 2 151 0
 907 0010 91ED008A 		flds	s16, [r1]
 908              	.LVL36:
 152:math/pprz_algebra_float.c ****   const float uz2  = uv->z * uv->z;
 909              		.loc 2 152 0
 910 0014 D1ED018A 		flds	s17, [r1, #4]
 911              	.LVL37:
 150:math/pprz_algebra_float.c ****   const float ux2  = uv->x * uv->x;
 912              		.loc 2 150 0
 913 0018 1546     		mov	r5, r2	@ float
 157:math/pprz_algebra_float.c ****   const float san  = sinf(angle);
 914              		.loc 2 157 0
 915 001a FFF7FEFF 		bl	cosf
 916              	.LVL38:
 917 001e 0AEE100A 		fmsr	s20, r0
 918              	.LVL39:
 158:math/pprz_algebra_float.c ****   const float one_m_can = (1. - can);
 919              		.loc 2 158 0
 920 0022 2846     		mov	r0, r5	@ float
 921              	.LVL40:
 922 0024 FFF7FEFF 		bl	sinf
 923              	.LVL41:
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = uxuy * one_m_can + uv->z * san;
 924              		.loc 2 161 0
 925 0028 68EE087A 		fmuls	s15, s16, s16
 926              	.LVL42:
 158:math/pprz_algebra_float.c ****   const float one_m_can = (1. - can);
 927              		.loc 2 158 0
 928 002c 0AEE900A 		fmsr	s21, r0
 929              	.LVL43:
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = uxuy * one_m_can + uv->z * san;
 930              		.loc 2 161 0
 931 0030 17EE900A 		fmrs	r0, s15
 932              	.LVL44:
 933 0034 FFF7FEFF 		bl	__aeabi_f2d
 934              	.LVL45:
 935 0038 8046     		mov	r8, r0
 936 003a 1AEE100A 		fmrs	r0, s20
 937 003e 8946     		mov	r9, r1
 938 0040 FFF7FEFF 		bl	__aeabi_f2d
 939              	.LVL46:
 940 0044 4246     		mov	r2, r8
 941 0046 0646     		mov	r6, r0
 942 0048 0F46     		mov	r7, r1
 943 004a 4B46     		mov	r3, r9
 944 004c 0020     		movs	r0, #0
 945 004e 3649     		ldr	r1, .L42
 946 0050 FFF7FEFF 		bl	__aeabi_dsub
 947              	.LVL47:
 948 0054 3246     		mov	r2, r6
 949 0056 3B46     		mov	r3, r7
 950 0058 FFF7FEFF 		bl	__aeabi_dmul
 951              	.LVL48:
 952 005c 0246     		mov	r2, r0
 953 005e 0B46     		mov	r3, r1
 954 0060 4046     		mov	r0, r8
 955 0062 4946     		mov	r1, r9
 956 0064 FFF7FEFF 		bl	__aeabi_dadd
 957              	.LVL49:
 159:math/pprz_algebra_float.c **** 
 958              		.loc 2 159 0
 959 0068 F7EE009A 		fconsts	s19, #112
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = uxuy * one_m_can + uv->z * san;
 960              		.loc 2 161 0
 961 006c FFF7FEFF 		bl	__aeabi_d2f
 962              	.LVL50:
 159:math/pprz_algebra_float.c **** 
 963              		.loc 2 159 0
 964 0070 79EECA9A 		fsubs	s19, s19, s20
 965              	.LVL51:
 154:math/pprz_algebra_float.c ****   const float uyuz = uv->y * uv->z;
 966              		.loc 2 154 0
 967 0074 28EE287A 		fmuls	s14, s16, s17
 968              	.LVL52:
 162:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = uxuz * one_m_can - uv->y * san;
 969              		.loc 2 162 0
 970 0078 69EE2A7A 		fmuls	s15, s18, s21
 971 007c 2AEEE8AA 		fnmuls	s20, s21, s17
 972              	.LVL53:
 973 0080 E7EE297A 		vfma.f32	s15, s14, s19
 161:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = uxuy * one_m_can + uv->z * san;
 974              		.loc 2 161 0
 975 0084 2060     		str	r0, [r4]	@ float
 156:math/pprz_algebra_float.c ****   const float can  = cosf(angle);
 976              		.loc 2 156 0
 977 0086 28EE097A 		fmuls	s14, s16, s18
 978              	.LVL54:
 162:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = uxuz * one_m_can - uv->y * san;
 979              		.loc 2 162 0
 980 008a C4ED017A 		fsts	s15, [r4, #4]
 163:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = RMAT_ELMT(*rm, 0, 1);
 981              		.loc 2 163 0
 982 008e A7EE29AA 		vfma.f32	s20, s14, s19
 164:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = uy2 + (1. - uy2) * can;
 983              		.loc 2 164 0
 984 0092 C4ED037A 		fsts	s15, [r4, #12]
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 985              		.loc 2 165 0
 986 0096 68EEA87A 		fmuls	s15, s17, s17
 987              	.LVL55:
 163:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = RMAT_ELMT(*rm, 0, 1);
 988              		.loc 2 163 0
 989 009a 84ED02AA 		fsts	s20, [r4, #8]
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 990              		.loc 2 165 0
 991 009e 17EE900A 		fmrs	r0, s15
 992 00a2 FFF7FEFF 		bl	__aeabi_f2d
 993              	.LVL56:
 994 00a6 8046     		mov	r8, r0
 995 00a8 8946     		mov	r9, r1
 996 00aa 4246     		mov	r2, r8
 997 00ac 4B46     		mov	r3, r9
 998 00ae 0020     		movs	r0, #0
 999 00b0 1D49     		ldr	r1, .L42
 1000 00b2 FFF7FEFF 		bl	__aeabi_dsub
 1001              	.LVL57:
 1002 00b6 3246     		mov	r2, r6
 1003 00b8 3B46     		mov	r3, r7
 1004 00ba FFF7FEFF 		bl	__aeabi_dmul
 1005              	.LVL58:
 155:math/pprz_algebra_float.c ****   const float uxuz = uv->x * uv->z;
 1006              		.loc 2 155 0
 1007 00be 68EE898A 		fmuls	s17, s17, s18
 1008              	.LVL59:
 166:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = RMAT_ELMT(*rm, 0, 2);
 1009              		.loc 2 166 0
 1010 00c2 28EE2A8A 		fmuls	s16, s16, s21
 1011              	.LVL60:
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 1012              		.loc 2 165 0
 1013 00c6 0246     		mov	r2, r0
 1014 00c8 0B46     		mov	r3, r1
 1015 00ca 4046     		mov	r0, r8
 1016 00cc 4946     		mov	r1, r9
 1017 00ce FFF7FEFF 		bl	__aeabi_dadd
 1018              	.LVL61:
 166:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = RMAT_ELMT(*rm, 0, 2);
 1019              		.loc 2 166 0
 1020 00d2 A8EEA98A 		vfma.f32	s16, s17, s19
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 1021              		.loc 2 165 0
 1022 00d6 FFF7FEFF 		bl	__aeabi_d2f
 1023              	.LVL62:
 169:math/pprz_algebra_float.c **** }
 1024              		.loc 2 169 0
 1025 00da 69EE097A 		fmuls	s15, s18, s18
 1026              	.LVL63:
 165:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = uyuz * one_m_can + uv->x * san;
 1027              		.loc 2 165 0
 1028 00de 2061     		str	r0, [r4, #16]	@ float
 166:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = RMAT_ELMT(*rm, 0, 2);
 1029              		.loc 2 166 0
 1030 00e0 84ED058A 		fsts	s16, [r4, #20]
 169:math/pprz_algebra_float.c **** }
 1031              		.loc 2 169 0
 1032 00e4 17EE900A 		fmrs	r0, s15
 167:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = RMAT_ELMT(*rm, 1, 2);
 1033              		.loc 2 167 0
 1034 00e8 84ED06AA 		fsts	s20, [r4, #24]
 168:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = uz2 + (1. - uz2) * can;
 1035              		.loc 2 168 0
 1036 00ec 84ED078A 		fsts	s16, [r4, #28]
 169:math/pprz_algebra_float.c **** }
 1037              		.loc 2 169 0
 1038 00f0 FFF7FEFF 		bl	__aeabi_f2d
 1039              	.LVL64:
 1040 00f4 8046     		mov	r8, r0
 1041 00f6 8946     		mov	r9, r1
 1042 00f8 4246     		mov	r2, r8
 1043 00fa 4B46     		mov	r3, r9
 1044 00fc 0020     		movs	r0, #0
 1045 00fe 0A49     		ldr	r1, .L42
 1046 0100 FFF7FEFF 		bl	__aeabi_dsub
 1047              	.LVL65:
 1048 0104 3246     		mov	r2, r6
 1049 0106 3B46     		mov	r3, r7
 1050 0108 FFF7FEFF 		bl	__aeabi_dmul
 1051              	.LVL66:
 1052 010c 0246     		mov	r2, r0
 1053 010e 0B46     		mov	r3, r1
 1054 0110 4046     		mov	r0, r8
 1055 0112 4946     		mov	r1, r9
 1056 0114 FFF7FEFF 		bl	__aeabi_dadd
 1057              	.LVL67:
 1058 0118 FFF7FEFF 		bl	__aeabi_d2f
 1059              	.LVL68:
 170:math/pprz_algebra_float.c **** 
 1060              		.loc 2 170 0
 1061 011c BDEC068B 		fldmfdd	sp!, {d8-d10}
 1062              		.cfi_restore 84
 1063              		.cfi_restore 85
 1064              		.cfi_restore 82
 1065              		.cfi_restore 83
 1066              		.cfi_restore 80
 1067              		.cfi_restore 81
 1068              		.cfi_def_cfa_offset 32
 1069              	.LVL69:
 169:math/pprz_algebra_float.c **** }
 1070              		.loc 2 169 0
 1071 0120 2062     		str	r0, [r4, #32]	@ float
 170:math/pprz_algebra_float.c **** 
 1072              		.loc 2 170 0
 1073 0122 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1074              	.LVL70:
 1075              	.L43:
 1076 0126 00BF     		.align	2
 1077              	.L42:
 1078 0128 0000F03F 		.word	1072693248
 1079              		.cfi_endproc
 1080              	.LFE44:
 1082              		.section	.text.float_rmat_of_eulers_321,"ax",%progbits
 1083              		.align	1
 1084              		.global	float_rmat_of_eulers_321
 1085              		.thumb
 1086              		.thumb_func
 1088              	float_rmat_of_eulers_321:
 1089              	.LFB45:
 175:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1090              		.loc 2 175 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              	.LVL71:
 1095 0000 70B5     		push	{r4, r5, r6, lr}
 1096              		.cfi_def_cfa_offset 16
 1097              		.cfi_offset 4, -16
 1098              		.cfi_offset 5, -12
 1099              		.cfi_offset 6, -8
 1100              		.cfi_offset 14, -4
 176:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1101              		.loc 2 176 0
 1102 0002 0E68     		ldr	r6, [r1]	@ float
 175:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1103              		.loc 2 175 0
 1104 0004 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 1105              		.cfi_def_cfa_offset 40
 1106              		.cfi_offset 80, -40
 1107              		.cfi_offset 81, -36
 1108              		.cfi_offset 82, -32
 1109              		.cfi_offset 83, -28
 1110              		.cfi_offset 84, -24
 1111              		.cfi_offset 85, -20
 175:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1112              		.loc 2 175 0
 1113 0008 0446     		mov	r4, r0
 176:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1114              		.loc 2 176 0
 1115 000a 3046     		mov	r0, r6	@ float
 1116              	.LVL72:
 175:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1117              		.loc 2 175 0
 1118 000c 0D46     		mov	r5, r1
 176:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1119              		.loc 2 176 0
 1120 000e FFF7FEFF 		bl	sinf
 1121              	.LVL73:
 1122 0012 0AEE100A 		fmsr	s20, r0
 1123              	.LVL74:
 177:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 1124              		.loc 2 177 0
 1125 0016 3046     		mov	r0, r6	@ float
 1126              	.LVL75:
 1127 0018 FFF7FEFF 		bl	cosf
 1128              	.LVL76:
 178:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 1129              		.loc 2 178 0
 1130 001c 6E68     		ldr	r6, [r5, #4]	@ float
 177:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 1131              		.loc 2 177 0
 1132 001e 08EE100A 		fmsr	s16, r0
 1133              	.LVL77:
 178:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 1134              		.loc 2 178 0
 1135 0022 3046     		mov	r0, r6	@ float
 1136              	.LVL78:
 1137 0024 FFF7FEFF 		bl	sinf
 1138              	.LVL79:
 1139 0028 08EE900A 		fmsr	s17, r0
 1140              	.LVL80:
 179:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 1141              		.loc 2 179 0
 1142 002c 3046     		mov	r0, r6	@ float
 1143              	.LVL81:
 1144 002e FFF7FEFF 		bl	cosf
 1145              	.LVL82:
 180:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 1146              		.loc 2 180 0
 1147 0032 AD68     		ldr	r5, [r5, #8]	@ float
 1148              	.LVL83:
 179:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 1149              		.loc 2 179 0
 1150 0034 09EE900A 		fmsr	s19, r0
 1151              	.LVL84:
 180:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 1152              		.loc 2 180 0
 1153 0038 2846     		mov	r0, r5	@ float
 1154              	.LVL85:
 1155 003a FFF7FEFF 		bl	sinf
 1156              	.LVL86:
 1157 003e 09EE100A 		fmsr	s18, r0
 1158              	.LVL87:
 181:math/pprz_algebra_float.c **** 
 1159              		.loc 2 181 0
 1160 0042 2846     		mov	r0, r5	@ float
 1161              	.LVL88:
 1162 0044 FFF7FEFF 		bl	cosf
 1163              	.LVL89:
 1164 0048 07EE900A 		fmsr	s15, r0
 1165              	.LVL90:
 183:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = ctheta * spsi;
 1166              		.loc 2 183 0
 1167 004c 29EEA77A 		fmuls	s14, s19, s15
 186:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = sphi * stheta * spsi + cphi * cpsi;
 1168              		.loc 2 186 0
 1169 0050 6AEE286A 		fmuls	s13, s20, s17
 183:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = ctheta * spsi;
 1170              		.loc 2 183 0
 1171 0054 84ED007A 		fsts	s14, [r4]
 184:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -stheta;
 1172              		.loc 2 184 0
 1173 0058 29EE897A 		fmuls	s14, s19, s18
 1174 005c 84ED017A 		fsts	s14, [r4, #4]
 185:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = sphi * stheta * cpsi - cphi * spsi;
 1175              		.loc 2 185 0
 1176 0060 B1EE687A 		fnegs	s14, s17
 1177 0064 84ED027A 		fsts	s14, [r4, #8]
 1178 0068 29EE487A 		fnmuls	s14, s18, s16
 189:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cphi * stheta * spsi - sphi * cpsi;
 1179              		.loc 2 189 0
 1180 006c 68EE288A 		fmuls	s17, s16, s17
 1181              	.LVL91:
 186:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = sphi * stheta * spsi + cphi * cpsi;
 1182              		.loc 2 186 0
 1183 0070 A6EEA77A 		vfma.f32	s14, s13, s15
 1184 0074 84ED037A 		fsts	s14, [r4, #12]
 187:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = sphi * ctheta;
 1185              		.loc 2 187 0
 1186 0078 28EE277A 		fmuls	s14, s16, s15
 191:math/pprz_algebra_float.c **** }
 1187              		.loc 2 191 0
 1188 007c 28EE298A 		fmuls	s16, s16, s19
 1189              	.LVL92:
 187:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = sphi * ctheta;
 1190              		.loc 2 187 0
 1191 0080 A6EE897A 		vfma.f32	s14, s13, s18
 191:math/pprz_algebra_float.c **** }
 1192              		.loc 2 191 0
 1193 0084 84ED088A 		fsts	s16, [r4, #32]
 187:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = sphi * ctheta;
 1194              		.loc 2 187 0
 1195 0088 84ED047A 		fsts	s14, [r4, #16]
 188:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = cphi * stheta * cpsi + sphi * spsi;
 1196              		.loc 2 188 0
 1197 008c 2AEE297A 		fmuls	s14, s20, s19
 1198 0090 84ED057A 		fsts	s14, [r4, #20]
 189:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cphi * stheta * spsi - sphi * cpsi;
 1199              		.loc 2 189 0
 1200 0094 2AEE097A 		fmuls	s14, s20, s18
 1201 0098 A8EEA77A 		vfma.f32	s14, s17, s15
 1202 009c 67EECA7A 		fnmuls	s15, s15, s20
 1203 00a0 84ED067A 		fsts	s14, [r4, #24]
 190:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = cphi * ctheta;
 1204              		.loc 2 190 0
 1205 00a4 E8EE897A 		vfma.f32	s15, s17, s18
 192:math/pprz_algebra_float.c **** 
 1206              		.loc 2 192 0
 1207 00a8 BDEC068B 		fldmfdd	sp!, {d8-d10}
 1208              		.cfi_restore 84
 1209              		.cfi_restore 85
 1210              		.cfi_restore 82
 1211              		.cfi_restore 83
 1212              		.cfi_restore 80
 1213              		.cfi_restore 81
 1214              		.cfi_def_cfa_offset 16
 1215              	.LVL93:
 190:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = cphi * ctheta;
 1216              		.loc 2 190 0
 1217 00ac C4ED077A 		fsts	s15, [r4, #28]
 192:math/pprz_algebra_float.c **** 
 1218              		.loc 2 192 0
 1219 00b0 70BD     		pop	{r4, r5, r6, pc}
 1220              		.cfi_endproc
 1221              	.LFE45:
 1223              		.section	.text.float_rmat_of_eulers_312,"ax",%progbits
 1224              		.align	1
 1225              		.global	float_rmat_of_eulers_312
 1226              		.thumb
 1227              		.thumb_func
 1229              	float_rmat_of_eulers_312:
 1230              	.LFB46:
 195:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1231              		.loc 2 195 0
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 0
 1234              		@ frame_needed = 0, uses_anonymous_args = 0
 1235              	.LVL94:
 1236 0000 70B5     		push	{r4, r5, r6, lr}
 1237              		.cfi_def_cfa_offset 16
 1238              		.cfi_offset 4, -16
 1239              		.cfi_offset 5, -12
 1240              		.cfi_offset 6, -8
 1241              		.cfi_offset 14, -4
 196:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1242              		.loc 2 196 0
 1243 0002 0E68     		ldr	r6, [r1]	@ float
 195:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1244              		.loc 2 195 0
 1245 0004 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 1246              		.cfi_def_cfa_offset 40
 1247              		.cfi_offset 80, -40
 1248              		.cfi_offset 81, -36
 1249              		.cfi_offset 82, -32
 1250              		.cfi_offset 83, -28
 1251              		.cfi_offset 84, -24
 1252              		.cfi_offset 85, -20
 195:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1253              		.loc 2 195 0
 1254 0008 0446     		mov	r4, r0
 196:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1255              		.loc 2 196 0
 1256 000a 3046     		mov	r0, r6	@ float
 1257              	.LVL95:
 195:math/pprz_algebra_float.c ****   const float sphi   = sinf(e->phi);
 1258              		.loc 2 195 0
 1259 000c 0D46     		mov	r5, r1
 196:math/pprz_algebra_float.c ****   const float cphi   = cosf(e->phi);
 1260              		.loc 2 196 0
 1261 000e FFF7FEFF 		bl	sinf
 1262              	.LVL96:
 1263 0012 08EE100A 		fmsr	s16, r0
 1264              	.LVL97:
 197:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 1265              		.loc 2 197 0
 1266 0016 3046     		mov	r0, r6	@ float
 1267              	.LVL98:
 1268 0018 FFF7FEFF 		bl	cosf
 1269              	.LVL99:
 198:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 1270              		.loc 2 198 0
 1271 001c 6E68     		ldr	r6, [r5, #4]	@ float
 197:math/pprz_algebra_float.c ****   const float stheta = sinf(e->theta);
 1272              		.loc 2 197 0
 1273 001e 08EE900A 		fmsr	s17, r0
 1274              	.LVL100:
 198:math/pprz_algebra_float.c ****   const float ctheta = cosf(e->theta);
 1275              		.loc 2 198 0
 1276 0022 3046     		mov	r0, r6	@ float
 1277              	.LVL101:
 1278 0024 FFF7FEFF 		bl	sinf
 1279              	.LVL102:
 1280 0028 0AEE100A 		fmsr	s20, r0
 1281              	.LVL103:
 199:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 1282              		.loc 2 199 0
 1283 002c 3046     		mov	r0, r6	@ float
 1284              	.LVL104:
 1285 002e FFF7FEFF 		bl	cosf
 1286              	.LVL105:
 200:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 1287              		.loc 2 200 0
 1288 0032 AD68     		ldr	r5, [r5, #8]	@ float
 1289              	.LVL106:
 199:math/pprz_algebra_float.c ****   const float spsi   = sinf(e->psi);
 1290              		.loc 2 199 0
 1291 0034 09EE900A 		fmsr	s19, r0
 1292              	.LVL107:
 200:math/pprz_algebra_float.c ****   const float cpsi   = cosf(e->psi);
 1293              		.loc 2 200 0
 1294 0038 2846     		mov	r0, r5	@ float
 1295              	.LVL108:
 1296 003a FFF7FEFF 		bl	sinf
 1297              	.LVL109:
 1298 003e 09EE100A 		fmsr	s18, r0
 1299              	.LVL110:
 201:math/pprz_algebra_float.c **** 
 1300              		.loc 2 201 0
 1301 0042 2846     		mov	r0, r5	@ float
 1302              	.LVL111:
 1303 0044 FFF7FEFF 		bl	cosf
 1304              	.LVL112:
 203:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta * spsi + sphi * stheta * cpsi;
 1305              		.loc 2 203 0
 1306 0048 28EE0A7A 		fmuls	s14, s16, s20
 201:math/pprz_algebra_float.c **** 
 1307              		.loc 2 201 0
 1308 004c 07EE900A 		fmsr	s15, r0
 1309              	.LVL113:
 1310 0050 69EE476A 		fnmuls	s13, s18, s14
 204:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -cphi * stheta;
 1311              		.loc 2 204 0
 1312 0054 27EE277A 		fmuls	s14, s14, s15
 203:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta * spsi + sphi * stheta * cpsi;
 1313              		.loc 2 203 0
 1314 0058 E9EEA76A 		vfma.f32	s13, s19, s15
 204:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -cphi * stheta;
 1315              		.loc 2 204 0
 1316 005c A9EE897A 		vfma.f32	s14, s19, s18
 203:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) =  ctheta * spsi + sphi * stheta * cpsi;
 1317              		.loc 2 203 0
 1318 0060 C4ED006A 		fsts	s13, [r4]
 204:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = -cphi * stheta;
 1319              		.loc 2 204 0
 1320 0064 84ED017A 		fsts	s14, [r4, #4]
 205:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = -cphi * spsi;
 1321              		.loc 2 205 0
 1322 0068 B1EE687A 		fnegs	s14, s17
 1323 006c 67EE0A6A 		fmuls	s13, s14, s20
 206:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) =  cphi * cpsi;
 1324              		.loc 2 206 0
 1325 0070 27EE097A 		fmuls	s14, s14, s18
 208:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) =  stheta * cpsi + sphi * ctheta * spsi;
 1326              		.loc 2 208 0
 1327 0074 84ED058A 		fsts	s16, [r4, #20]
 206:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) =  cphi * cpsi;
 1328              		.loc 2 206 0
 1329 0078 84ED037A 		fsts	s14, [r4, #12]
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta * spsi - sphi * ctheta * cpsi;
 1330              		.loc 2 209 0
 1331 007c 28EE298A 		fmuls	s16, s16, s19
 1332              	.LVL114:
 207:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) =  sphi;
 1333              		.loc 2 207 0
 1334 0080 28EEA77A 		fmuls	s14, s17, s15
 211:math/pprz_algebra_float.c **** }
 1335              		.loc 2 211 0
 1336 0084 68EEA98A 		fmuls	s17, s17, s19
 1337              	.LVL115:
 207:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) =  sphi;
 1338              		.loc 2 207 0
 1339 0088 84ED047A 		fsts	s14, [r4, #16]
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta * spsi - sphi * ctheta * cpsi;
 1340              		.loc 2 209 0
 1341 008c 28EE097A 		fmuls	s14, s16, s18
 211:math/pprz_algebra_float.c **** }
 1342              		.loc 2 211 0
 1343 0090 C4ED088A 		fsts	s17, [r4, #32]
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta * spsi - sphi * ctheta * cpsi;
 1344              		.loc 2 209 0
 1345 0094 AAEE277A 		vfma.f32	s14, s20, s15
 1346 0098 67EEC87A 		fnmuls	s15, s15, s16
 205:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = -cphi * spsi;
 1347              		.loc 2 205 0
 1348 009c C4ED026A 		fsts	s13, [r4, #8]
 210:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) =  cphi * ctheta;
 1349              		.loc 2 210 0
 1350 00a0 EAEE097A 		vfma.f32	s15, s20, s18
 212:math/pprz_algebra_float.c **** 
 1351              		.loc 2 212 0
 1352 00a4 BDEC068B 		fldmfdd	sp!, {d8-d10}
 1353              		.cfi_restore 84
 1354              		.cfi_restore 85
 1355              		.cfi_restore 82
 1356              		.cfi_restore 83
 1357              		.cfi_restore 80
 1358              		.cfi_restore 81
 1359              		.cfi_def_cfa_offset 16
 1360              	.LVL116:
 209:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) =  stheta * spsi - sphi * ctheta * cpsi;
 1361              		.loc 2 209 0
 1362 00a8 84ED067A 		fsts	s14, [r4, #24]
 210:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) =  cphi * ctheta;
 1363              		.loc 2 210 0
 1364 00ac C4ED077A 		fsts	s15, [r4, #28]
 212:math/pprz_algebra_float.c **** 
 1365              		.loc 2 212 0
 1366 00b0 70BD     		pop	{r4, r5, r6, pc}
 1367              		.cfi_endproc
 1368              	.LFE46:
 1370              		.section	.text.float_rmat_of_quat,"ax",%progbits
 1371              		.align	1
 1372              		.global	float_rmat_of_quat
 1373              		.thumb
 1374              		.thumb_func
 1376              	float_rmat_of_quat:
 1377              	.LFB47:
 217:math/pprz_algebra_float.c ****   const float _a = M_SQRT2 * q->qi;
 1378              		.loc 2 217 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 0
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
 1382              	.LVL117:
 1383 0000 38B5     		push	{r3, r4, r5, lr}
 1384              		.cfi_def_cfa_offset 16
 1385              		.cfi_offset 3, -16
 1386              		.cfi_offset 4, -12
 1387              		.cfi_offset 5, -8
 1388              		.cfi_offset 14, -4
 1389 0002 0446     		mov	r4, r0
 1390 0004 2DED048B 		fstmfdd	sp!, {d8, d9}
 1391              		.cfi_def_cfa_offset 32
 1392              		.cfi_offset 80, -32
 1393              		.cfi_offset 81, -28
 1394              		.cfi_offset 82, -24
 1395              		.cfi_offset 83, -20
 218:math/pprz_algebra_float.c ****   const float _b = M_SQRT2 * q->qx;
 1396              		.loc 2 218 0
 1397 0008 0868     		ldr	r0, [r1]	@ float
 1398              	.LVL118:
 217:math/pprz_algebra_float.c ****   const float _a = M_SQRT2 * q->qi;
 1399              		.loc 2 217 0
 1400 000a 0D46     		mov	r5, r1
 218:math/pprz_algebra_float.c ****   const float _b = M_SQRT2 * q->qx;
 1401              		.loc 2 218 0
 1402 000c FFF7FEFF 		bl	__aeabi_f2d
 1403              	.LVL119:
 1404 0010 35A3     		adr	r3, .L47
 1405 0012 D3E90023 		ldrd	r2, [r3]
 1406 0016 FFF7FEFF 		bl	__aeabi_dmul
 1407              	.LVL120:
 1408 001a FFF7FEFF 		bl	__aeabi_d2f
 1409              	.LVL121:
 1410 001e 09EE100A 		fmsr	s18, r0
 1411              	.LVL122:
 219:math/pprz_algebra_float.c ****   const float _c = M_SQRT2 * q->qy;
 1412              		.loc 2 219 0
 1413 0022 6868     		ldr	r0, [r5, #4]	@ float
 1414              	.LVL123:
 1415 0024 FFF7FEFF 		bl	__aeabi_f2d
 1416              	.LVL124:
 1417 0028 2FA3     		adr	r3, .L47
 1418 002a D3E90023 		ldrd	r2, [r3]
 1419 002e FFF7FEFF 		bl	__aeabi_dmul
 1420              	.LVL125:
 1421 0032 FFF7FEFF 		bl	__aeabi_d2f
 1422              	.LVL126:
 1423 0036 08EE100A 		fmsr	s16, r0
 1424              	.LVL127:
 220:math/pprz_algebra_float.c ****   const float _d = M_SQRT2 * q->qz;
 1425              		.loc 2 220 0
 1426 003a A868     		ldr	r0, [r5, #8]	@ float
 1427              	.LVL128:
 1428 003c FFF7FEFF 		bl	__aeabi_f2d
 1429              	.LVL129:
 1430 0040 29A3     		adr	r3, .L47
 1431 0042 D3E90023 		ldrd	r2, [r3]
 1432 0046 FFF7FEFF 		bl	__aeabi_dmul
 1433              	.LVL130:
 1434 004a FFF7FEFF 		bl	__aeabi_d2f
 1435              	.LVL131:
 1436 004e 08EE900A 		fmsr	s17, r0
 1437              	.LVL132:
 221:math/pprz_algebra_float.c ****   const float a2_1 = _a * _a - 1;
 1438              		.loc 2 221 0
 1439 0052 E868     		ldr	r0, [r5, #12]	@ float
 1440              	.LVL133:
 1441 0054 FFF7FEFF 		bl	__aeabi_f2d
 1442              	.LVL134:
 1443 0058 23A3     		adr	r3, .L47
 1444 005a D3E90023 		ldrd	r2, [r3]
 1445 005e FFF7FEFF 		bl	__aeabi_dmul
 1446              	.LVL135:
 1447 0062 FFF7FEFF 		bl	__aeabi_d2f
 1448              	.LVL136:
 222:math/pprz_algebra_float.c ****   const float ab = _a * _b;
 1449              		.loc 2 222 0
 1450 0066 FFEE007A 		fconsts	s15, #240
 1451 006a E9EE097A 		vfma.f32	s15, s18, s18
 226:math/pprz_algebra_float.c ****   const float bd = _b * _d;
 1452              		.loc 2 226 0
 1453 006e 68EE285A 		fmuls	s11, s16, s17
 229:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = bc + ad;
 1454              		.loc 2 229 0
 1455 0072 B0EE675A 		fcpys	s10, s15
 1456 0076 A8EE085A 		vfma.f32	s10, s16, s16
 221:math/pprz_algebra_float.c ****   const float a2_1 = _a * _a - 1;
 1457              		.loc 2 221 0
 1458 007a 07EE100A 		fmsr	s14, r0
 1459              	.LVL137:
 229:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 1) = bc + ad;
 1460              		.loc 2 229 0
 1461 007e 84ED005A 		fsts	s10, [r4]
 230:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = bd - ac;
 1462              		.loc 2 230 0
 1463 0082 B0EE655A 		fcpys	s10, s11
 1464 0086 A9EE075A 		vfma.f32	s10, s18, s14
 227:math/pprz_algebra_float.c ****   const float cd = _c * _d;
 1465              		.loc 2 227 0
 1466 008a 28EE076A 		fmuls	s12, s16, s14
 1467              	.LVL138:
 230:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 2) = bd - ac;
 1468              		.loc 2 230 0
 1469 008e 84ED015A 		fsts	s10, [r4, #4]
 1470 0092 B1EE495A 		fnegs	s10, s18
 232:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = a2_1 + _c * _c;
 1471              		.loc 2 232 0
 1472 0096 E5EE075A 		vfma.f32	s11, s10, s14
 1473              	.LVL139:
 228:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 0, 0) = a2_1 + _b * _b;
 1474              		.loc 2 228 0
 1475 009a 68EE876A 		fmuls	s13, s17, s14
 1476              	.LVL140:
 232:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 1) = a2_1 + _c * _c;
 1477              		.loc 2 232 0
 1478 009e C4ED035A 		fsts	s11, [r4, #12]
 233:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = cd + ab;
 1479              		.loc 2 233 0
 1480 00a2 F0EE675A 		fcpys	s11, s15
 1481 00a6 E8EEA85A 		vfma.f32	s11, s17, s17
 231:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = bc - ad;
 1482              		.loc 2 231 0
 1483 00aa F0EE464A 		fcpys	s9, s12
 233:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 2) = cd + ab;
 1484              		.loc 2 233 0
 1485 00ae C4ED045A 		fsts	s11, [r4, #16]
 234:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = bd + ac;
 1486              		.loc 2 234 0
 1487 00b2 F0EE665A 		fcpys	s11, s13
 231:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = bc - ad;
 1488              		.loc 2 231 0
 1489 00b6 E5EE284A 		vfma.f32	s9, s10, s17
 234:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = bd + ac;
 1490              		.loc 2 234 0
 1491 00ba E9EE085A 		vfma.f32	s11, s18, s16
 235:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cd - ab;
 1492              		.loc 2 235 0
 1493 00be A9EE286A 		vfma.f32	s12, s18, s17
 1494              	.LVL141:
 236:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = a2_1 + _d * _d;
 1495              		.loc 2 236 0
 1496 00c2 E5EE086A 		vfma.f32	s13, s10, s16
 1497              	.LVL142:
 238:math/pprz_algebra_float.c **** 
 1498              		.loc 2 238 0
 1499 00c6 BDEC048B 		fldmfdd	sp!, {d8-d9}
 1500              		.cfi_restore 82
 1501              		.cfi_restore 83
 1502              		.cfi_restore 80
 1503              		.cfi_restore 81
 1504              		.cfi_def_cfa_offset 16
 1505              	.LVL143:
 237:math/pprz_algebra_float.c **** }
 1506              		.loc 2 237 0
 1507 00ca E7EE077A 		vfma.f32	s15, s14, s14
 1508              	.LVL144:
 231:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 1, 0) = bc - ad;
 1509              		.loc 2 231 0
 1510 00ce C4ED024A 		fsts	s9, [r4, #8]
 234:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 0) = bd + ac;
 1511              		.loc 2 234 0
 1512 00d2 C4ED055A 		fsts	s11, [r4, #20]
 235:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 1) = cd - ab;
 1513              		.loc 2 235 0
 1514 00d6 84ED066A 		fsts	s12, [r4, #24]
 236:math/pprz_algebra_float.c ****   RMAT_ELMT(*rm, 2, 2) = a2_1 + _d * _d;
 1515              		.loc 2 236 0
 1516 00da C4ED076A 		fsts	s13, [r4, #28]
 237:math/pprz_algebra_float.c **** }
 1517              		.loc 2 237 0
 1518 00de C4ED087A 		fsts	s15, [r4, #32]
 238:math/pprz_algebra_float.c **** 
 1519              		.loc 2 238 0
 1520 00e2 38BD     		pop	{r3, r4, r5, pc}
 1521              	.LVL145:
 1522              	.L48:
 1523 00e4 AFF30080 		.align	3
 1524              	.L47:
 1525 00e8 CD3B7F66 		.word	1719614413
 1526 00ec 9EA0F63F 		.word	1073127582
 1527              		.cfi_endproc
 1528              	.LFE47:
 1530              		.section	.text.float_rmat_integrate_fi,"ax",%progbits
 1531              		.align	1
 1532              		.global	float_rmat_integrate_fi
 1533              		.thumb
 1534              		.thumb_func
 1536              	float_rmat_integrate_fi:
 1537              	.LFB48:
 242:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 1538              		.loc 2 242 0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 72
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 1542              	.LVL146:
 1543 0000 30B5     		push	{r4, r5, lr}
 1544              		.cfi_def_cfa_offset 12
 1545              		.cfi_offset 4, -12
 1546              		.cfi_offset 5, -8
 1547              		.cfi_offset 14, -4
 1548 0002 07EE902A 		fmsr	s15, r2
 245:math/pprz_algebra_float.c ****       -dt *omega->r,  1.        ,  dt *omega->p,
 1549              		.loc 2 245 0
 1550 0006 D1ED026A 		flds	s13, [r1, #8]
 1551 000a 91ED016A 		flds	s12, [r1, #4]
 1552 000e 27EEA67A 		fmuls	s14, s15, s13
 242:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 1553              		.loc 2 242 0
 1554 0012 93B0     		sub	sp, sp, #76
 1555              		.cfi_def_cfa_offset 88
 243:math/pprz_algebra_float.c ****     {
 1556              		.loc 2 243 0
 1557 0014 8DED017A 		fsts	s14, [sp, #4]
 245:math/pprz_algebra_float.c ****       -dt *omega->r,  1.        ,  dt *omega->p,
 1558              		.loc 2 245 0
 1559 0018 B1EE677A 		fnegs	s14, s15
 246:math/pprz_algebra_float.c ****       dt *omega->q, -dt *omega->p,  1.
 1560              		.loc 2 246 0
 1561 001c 67EE266A 		fmuls	s13, s14, s13
 245:math/pprz_algebra_float.c ****       -dt *omega->r,  1.        ,  dt *omega->p,
 1562              		.loc 2 245 0
 1563 0020 67EE065A 		fmuls	s11, s14, s12
 243:math/pprz_algebra_float.c ****     {
 1564              		.loc 2 243 0
 1565 0024 CDED036A 		fsts	s13, [sp, #12]
 246:math/pprz_algebra_float.c ****       dt *omega->q, -dt *omega->p,  1.
 1566              		.loc 2 246 0
 1567 0028 D1ED006A 		flds	s13, [r1]
 243:math/pprz_algebra_float.c ****     {
 1568              		.loc 2 243 0
 1569 002c CDED025A 		fsts	s11, [sp, #8]
 242:math/pprz_algebra_float.c ****   struct FloatRMat exp_omega_dt = {
 1570              		.loc 2 242 0
 1571 0030 0446     		mov	r4, r0
 246:math/pprz_algebra_float.c ****       dt *omega->q, -dt *omega->p,  1.
 1572              		.loc 2 246 0
 1573 0032 67EEA65A 		fmuls	s11, s15, s13
 247:math/pprz_algebra_float.c ****     }
 1574              		.loc 2 247 0
 1575 0036 27EE267A 		fmuls	s14, s14, s13
 1576 003a 67EE867A 		fmuls	s15, s15, s12
 243:math/pprz_algebra_float.c ****     {
 1577              		.loc 2 243 0
 1578 003e 4FF07E53 		mov	r3, #1065353216
 251:math/pprz_algebra_float.c ****   memcpy(rm, &R_tdt, sizeof(R_tdt));
 1579              		.loc 2 251 0
 1580 0042 6A46     		mov	r2, sp
 1581              	.LVL147:
 1582 0044 09A8     		add	r0, sp, #36
 1583              	.LVL148:
 1584 0046 2146     		mov	r1, r4
 1585              	.LVL149:
 243:math/pprz_algebra_float.c ****     {
 1586              		.loc 2 243 0
 1587 0048 0093     		str	r3, [sp]	@ float
 1588 004a 0493     		str	r3, [sp, #16]	@ float
 1589 004c 0893     		str	r3, [sp, #32]	@ float
 1590 004e CDED055A 		fsts	s11, [sp, #20]
 1591 0052 CDED067A 		fsts	s15, [sp, #24]
 1592 0056 8DED077A 		fsts	s14, [sp, #28]
 252:math/pprz_algebra_float.c **** }
 1593              		.loc 2 252 0
 1594 005a 11AD     		add	r5, sp, #68
 251:math/pprz_algebra_float.c ****   memcpy(rm, &R_tdt, sizeof(R_tdt));
 1595              		.loc 2 251 0
 1596 005c FFF7FEFF 		bl	float_rmat_comp
 1597              	.LVL150:
 252:math/pprz_algebra_float.c **** }
 1598              		.loc 2 252 0
 1599 0060 09AA     		add	r2, sp, #36
 1600 0062 2346     		mov	r3, r4
 1601              	.LVL151:
 1602              	.L50:
 1603 0064 1446     		mov	r4, r2
 1604 0066 03CC     		ldmia	r4!, {r0, r1}
 1605 0068 AC42     		cmp	r4, r5
 1606 006a 1860     		str	r0, [r3]	@ unaligned
 1607 006c 5960     		str	r1, [r3, #4]	@ unaligned
 1608 006e 2246     		mov	r2, r4
 1609 0070 03F10803 		add	r3, r3, #8
 1610 0074 F6D1     		bne	.L50
 1611 0076 2068     		ldr	r0, [r4]	@ unaligned
 1612 0078 1860     		str	r0, [r3]	@ unaligned
 253:math/pprz_algebra_float.c **** 
 1613              		.loc 2 253 0
 1614 007a 13B0     		add	sp, sp, #76
 1615              		.cfi_def_cfa_offset 12
 1616              		@ sp needed
 1617 007c 30BD     		pop	{r4, r5, pc}
 1618              		.cfi_endproc
 1619              	.LFE48:
 1621              		.section	.text.float_rmat_reorthogonalize,"ax",%progbits
 1622              		.align	1
 1623              		.global	float_rmat_reorthogonalize
 1624              		.thumb
 1625              		.thumb_func
 1627              	float_rmat_reorthogonalize:
 1628              	.LFB50:
 265:math/pprz_algebra_float.c **** 
 266:math/pprz_algebra_float.c **** float float_rmat_reorthogonalize(struct FloatRMat *rm)
 267:math/pprz_algebra_float.c **** {
 1629              		.loc 2 267 0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
 1633              	.LVL152:
 1634 0000 10B5     		push	{r4, lr}
 1635              		.cfi_def_cfa_offset 8
 1636              		.cfi_offset 4, -8
 1637              		.cfi_offset 14, -4
 268:math/pprz_algebra_float.c ****   const struct FloatVect3 r0 = {RMAT_ELMT(*rm, 0, 0),
 269:math/pprz_algebra_float.c ****           RMAT_ELMT(*rm, 0, 1),
 1638              		.loc 2 269 0
 1639 0002 90ED017A 		flds	s14, [r0, #4]
 268:math/pprz_algebra_float.c ****   const struct FloatVect3 r0 = {RMAT_ELMT(*rm, 0, 0),
 1640              		.loc 2 268 0
 1641 0006 D0ED006A 		flds	s13, [r0]
 1642              	.LVL153:
 270:math/pprz_algebra_float.c ****           RMAT_ELMT(*rm, 0, 2)
 1643              		.loc 2 270 0
 1644 000a D0ED027A 		flds	s15, [r0, #8]
 1645              	.LVL154:
 267:math/pprz_algebra_float.c ****   const struct FloatVect3 r0 = {RMAT_ELMT(*rm, 0, 0),
 1646              		.loc 2 267 0
 1647 000e 2DED0A8B 		fstmfdd	sp!, {d8, d9, d10, d11, d12}
 1648              		.cfi_def_cfa_offset 48
 1649              		.cfi_offset 80, -48
 1650              		.cfi_offset 81, -44
 1651              		.cfi_offset 82, -40
 1652              		.cfi_offset 83, -36
 1653              		.cfi_offset 84, -32
 1654              		.cfi_offset 85, -28
 1655              		.cfi_offset 86, -24
 1656              		.cfi_offset 87, -20
 1657              		.cfi_offset 88, -16
 1658              		.cfi_offset 89, -12
 271:math/pprz_algebra_float.c ****   };
 272:math/pprz_algebra_float.c ****   const struct FloatVect3 r1 = {RMAT_ELMT(*rm, 1, 0),
 273:math/pprz_algebra_float.c ****           RMAT_ELMT(*rm, 1, 1),
 1659              		.loc 2 273 0
 1660 0012 90ED049A 		flds	s18, [r0, #16]
 272:math/pprz_algebra_float.c ****           RMAT_ELMT(*rm, 1, 1),
 1661              		.loc 2 272 0
 1662 0016 D0ED039A 		flds	s19, [r0, #12]
 1663              	.LVL155:
 274:math/pprz_algebra_float.c ****           RMAT_ELMT(*rm, 1, 2)
 1664              		.loc 2 274 0
 1665 001a D0ED058A 		flds	s17, [r0, #20]
 1666              	.LVL156:
 275:math/pprz_algebra_float.c ****   };
 276:math/pprz_algebra_float.c ****   float _err = -0.5 * VECT3_DOT_PRODUCT(r0, r1);
 1667              		.loc 2 276 0
 1668 001e 27EE098A 		fmuls	s16, s14, s18
 1669 0022 BEEE006A 		fconsts	s12, #224
 1670 0026 A6EEA98A 		vfma.f32	s16, s13, s19
 267:math/pprz_algebra_float.c ****   const struct FloatVect3 r0 = {RMAT_ELMT(*rm, 0, 0),
 1671              		.loc 2 267 0
 1672 002a 0446     		mov	r4, r0
 277:math/pprz_algebra_float.c ****   struct FloatVect3 r0_t;
 278:math/pprz_algebra_float.c ****   VECT3_SUM_SCALED(r0_t, r0, r1, _err);
 1673              		.loc 2 278 0
 1674 002c B0EE47CA 		fcpys	s24, s14
 276:math/pprz_algebra_float.c ****   struct FloatVect3 r0_t;
 1675              		.loc 2 276 0
 1676 0030 A7EEA88A 		vfma.f32	s16, s15, s17
 1677              		.loc 2 278 0
 1678 0034 F0EE66CA 		fcpys	s25, s13
 276:math/pprz_algebra_float.c ****   struct FloatVect3 r0_t;
 1679              		.loc 2 276 0
 1680 0038 28EE068A 		fmuls	s16, s16, s12
 1681              	.LVL157:
 1682              		.loc 2 278 0
 1683 003c F0EE67BA 		fcpys	s23, s15
 1684 0040 A8EE09CA 		vfma.f32	s24, s16, s18
 1685 0044 E8EE29CA 		vfma.f32	s25, s16, s19
 1686              	.LVL158:
 279:math/pprz_algebra_float.c ****   struct FloatVect3 r1_t;
 280:math/pprz_algebra_float.c ****   VECT3_SUM_SCALED(r1_t,  r1, r0, _err);
 281:math/pprz_algebra_float.c ****   struct FloatVect3 r2_t;
 282:math/pprz_algebra_float.c ****   VECT3_CROSS_PRODUCT(r2_t, r0_t, r1_t);
 283:math/pprz_algebra_float.c ****   float s = renorm_factor(VECT3_NORM2(r0_t));
 1687              		.loc 2 283 0
 1688 0048 2CEE0C0A 		fmuls	s0, s24, s24
 278:math/pprz_algebra_float.c ****   struct FloatVect3 r1_t;
 1689              		.loc 2 278 0
 1690 004c E8EE28BA 		vfma.f32	s23, s16, s17
 1691              	.LVL159:
 1692              		.loc 2 283 0
 1693 0050 ACEEAC0A 		vfma.f32	s0, s25, s25
 280:math/pprz_algebra_float.c ****   struct FloatVect3 r2_t;
 1694              		.loc 2 280 0
 1695 0054 E8EE269A 		vfma.f32	s19, s16, s13
 1696              	.LVL160:
 1697 0058 A8EE079A 		vfma.f32	s18, s16, s14
 1698              	.LVL161:
 1699 005c E8EE278A 		vfma.f32	s17, s16, s15
 1700              	.LVL162:
 1701              		.loc 2 283 0
 1702 0060 ABEEAB0A 		vfma.f32	s0, s23, s23
 1703 0064 FFF7FEFF 		bl	renorm_factor
 1704              	.LVL163:
 1705 0068 29EE6BBA 		fnmuls	s22, s18, s23
 1706 006c 68EEECAA 		fnmuls	s21, s17, s25
 1707 0070 29EECCAA 		fnmuls	s20, s19, s24
 282:math/pprz_algebra_float.c ****   float s = renorm_factor(VECT3_NORM2(r0_t));
 1708              		.loc 2 282 0
 1709 0074 ACEE28BA 		vfma.f32	s22, s24, s17
 1710              	.LVL164:
 1711 0078 EBEEA9AA 		vfma.f32	s21, s23, s19
 1712              	.LVL165:
 1713 007c ACEE89AA 		vfma.f32	s20, s25, s18
 1714              	.LVL166:
 284:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 0, r0_t, s);
 1715              		.loc 2 284 0
 1716 0080 2CEE00CA 		fmuls	s24, s24, s0
 1717              	.LVL167:
 1718 0084 6CEE80CA 		fmuls	s25, s25, s0
 1719              	.LVL168:
 1720 0088 6BEE80BA 		fmuls	s23, s23, s0
 1721              	.LVL169:
 285:math/pprz_algebra_float.c ****   s = renorm_factor(VECT3_NORM2(r1_t));
 1722              		.loc 2 285 0
 1723 008c 29EE090A 		fmuls	s0, s18, s18
 1724              	.LVL170:
 284:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 0, r0_t, s);
 1725              		.loc 2 284 0
 1726 0090 C4ED00CA 		fsts	s25, [r4]
 1727              		.loc 2 285 0
 1728 0094 A9EEA90A 		vfma.f32	s0, s19, s19
 284:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 0, r0_t, s);
 1729              		.loc 2 284 0
 1730 0098 84ED01CA 		fsts	s24, [r4, #4]
 1731 009c C4ED02BA 		fsts	s23, [r4, #8]
 1732              		.loc 2 285 0
 1733 00a0 A8EEA80A 		vfma.f32	s0, s17, s17
 1734 00a4 FFF7FEFF 		bl	renorm_factor
 1735              	.LVL171:
 286:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 1, r1_t, s);
 1736              		.loc 2 286 0
 1737 00a8 69EE809A 		fmuls	s19, s19, s0
 1738              	.LVL172:
 1739 00ac 29EE009A 		fmuls	s18, s18, s0
 1740              	.LVL173:
 1741 00b0 68EE808A 		fmuls	s17, s17, s0
 1742              	.LVL174:
 287:math/pprz_algebra_float.c ****   s = renorm_factor(VECT3_NORM2(r2_t));
 1743              		.loc 2 287 0
 1744 00b4 2AEEAA0A 		fmuls	s0, s21, s21
 1745              	.LVL175:
 286:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 1, r1_t, s);
 1746              		.loc 2 286 0
 1747 00b8 C4ED039A 		fsts	s19, [r4, #12]
 1748              		.loc 2 287 0
 1749 00bc ABEE0B0A 		vfma.f32	s0, s22, s22
 286:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 1, r1_t, s);
 1750              		.loc 2 286 0
 1751 00c0 84ED049A 		fsts	s18, [r4, #16]
 1752 00c4 C4ED058A 		fsts	s17, [r4, #20]
 1753              		.loc 2 287 0
 1754 00c8 AAEE0A0A 		vfma.f32	s0, s20, s20
 1755 00cc FFF7FEFF 		bl	renorm_factor
 1756              	.LVL176:
 288:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 2, r2_t, s);
 1757              		.loc 2 288 0
 1758 00d0 2BEE00BA 		fmuls	s22, s22, s0
 1759              	.LVL177:
 1760 00d4 6AEE80AA 		fmuls	s21, s21, s0
 1761              	.LVL178:
 1762 00d8 2AEE00AA 		fmuls	s20, s20, s0
 1763              	.LVL179:
 289:math/pprz_algebra_float.c **** 
 290:math/pprz_algebra_float.c ****   return _err;
 291:math/pprz_algebra_float.c **** }
 1764              		.loc 2 291 0
 1765 00dc 18EE100A 		fmrs	r0, s16
 288:math/pprz_algebra_float.c ****   MAT33_ROW_VECT3_SMUL(*rm, 2, r2_t, s);
 1766              		.loc 2 288 0
 1767 00e0 84ED06BA 		fsts	s22, [r4, #24]
 1768 00e4 C4ED07AA 		fsts	s21, [r4, #28]
 1769 00e8 84ED08AA 		fsts	s20, [r4, #32]
 1770              		.loc 2 291 0
 1771 00ec BDEC0A8B 		fldmfdd	sp!, {d8-d12}
 1772              		.cfi_restore 88
 1773              		.cfi_restore 89
 1774              		.cfi_restore 86
 1775              		.cfi_restore 87
 1776              		.cfi_restore 84
 1777              		.cfi_restore 85
 1778              		.cfi_restore 82
 1779              		.cfi_restore 83
 1780              		.cfi_restore 80
 1781              		.cfi_restore 81
 1782              		.cfi_def_cfa_offset 8
 1783              	.LVL180:
 1784 00f0 10BD     		pop	{r4, pc}
 1785              		.cfi_endproc
 1786              	.LFE50:
 1788              		.section	.text.float_quat_comp,"ax",%progbits
 1789              		.align	1
 1790              		.global	float_quat_comp
 1791              		.thumb
 1792              		.thumb_func
 1794              	float_quat_comp:
 1795              	.LFB51:
 292:math/pprz_algebra_float.c **** 
 293:math/pprz_algebra_float.c **** 
 294:math/pprz_algebra_float.c **** /*
 295:math/pprz_algebra_float.c ****  *
 296:math/pprz_algebra_float.c ****  * Quaternion functions.
 297:math/pprz_algebra_float.c ****  *
 298:math/pprz_algebra_float.c ****  */
 299:math/pprz_algebra_float.c **** 
 300:math/pprz_algebra_float.c **** void float_quat_comp(struct FloatQuat *a2c, struct FloatQuat *a2b, struct FloatQuat *b2c)
 301:math/pprz_algebra_float.c **** {
 1796              		.loc 2 301 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 1800              		@ link register save eliminated.
 1801              	.LVL181:
 302:math/pprz_algebra_float.c ****   a2c->qi = a2b->qi * b2c->qi - a2b->qx * b2c->qx - a2b->qy * b2c->qy - a2b->qz * b2c->qz;
 1802              		.loc 2 302 0
 1803 0000 D1ED017A 		flds	s15, [r1, #4]
 1804 0004 92ED013A 		flds	s6, [r2, #4]
 1805 0008 91ED005A 		flds	s10, [r1]
 1806 000c 92ED006A 		flds	s12, [r2]
 1807 0010 D1ED024A 		flds	s9, [r1, #8]
 1808 0014 92ED024A 		flds	s8, [r2, #8]
 1809 0018 D1ED035A 		flds	s11, [r1, #12]
 1810 001c D2ED036A 		flds	s13, [r2, #12]
 1811 0020 23EE677A 		fnmuls	s14, s6, s15
 1812 0024 F1EE653A 		fnegs	s7, s11
 1813 0028 A5EE067A 		vfma.f32	s14, s10, s12
 1814 002c A4EEC47A 		vfms.f32	s14, s9, s8
 1815 0030 A3EEA67A 		vfma.f32	s14, s7, s13
 1816 0034 80ED007A 		fsts	s14, [r0]
 303:math/pprz_algebra_float.c ****   a2c->qx = a2b->qi * b2c->qx + a2b->qx * b2c->qi + a2b->qy * b2c->qz - a2b->qz * b2c->qy;
 1817              		.loc 2 303 0
 1818 0038 92ED006A 		flds	s12, [r2]
 1819 003c 91ED005A 		flds	s10, [r1]
 1820 0040 67EE867A 		fmuls	s15, s15, s12
 1821 0044 E5EE037A 		vfma.f32	s15, s10, s6
 1822 0048 E4EEA67A 		vfma.f32	s15, s9, s13
 1823 004c E3EE847A 		vfma.f32	s15, s7, s8
 1824 0050 C0ED017A 		fsts	s15, [r0, #4]
 304:math/pprz_algebra_float.c ****   a2c->qy = a2b->qi * b2c->qy - a2b->qx * b2c->qz + a2b->qy * b2c->qi + a2b->qz * b2c->qx;
 1825              		.loc 2 304 0
 1826 0054 D1ED017A 		flds	s15, [r1, #4]
 1827 0058 D2ED013A 		flds	s7, [r2, #4]
 1828 005c 26EEE77A 		fnmuls	s14, s13, s15
 1829 0060 A5EE047A 		vfma.f32	s14, s10, s8
 1830 0064 A4EE867A 		vfma.f32	s14, s9, s12
 1831 0068 A5EEA37A 		vfma.f32	s14, s11, s7
 1832 006c 80ED027A 		fsts	s14, [r0, #8]
 305:math/pprz_algebra_float.c ****   a2c->qz = a2b->qi * b2c->qz + a2b->qx * b2c->qy - a2b->qy * b2c->qx + a2b->qz * b2c->qi;
 1833              		.loc 2 305 0
 1834 0070 D2ED024A 		flds	s9, [r2, #8]
 1835 0074 91ED027A 		flds	s14, [r1, #8]
 1836 0078 67EEA47A 		fmuls	s15, s15, s9
 1837 007c E5EE267A 		vfma.f32	s15, s10, s13
 1838 0080 E7EE637A 		vfms.f32	s15, s14, s7
 1839 0084 E5EE867A 		vfma.f32	s15, s11, s12
 1840 0088 C0ED037A 		fsts	s15, [r0, #12]
 1841 008c 7047     		bx	lr
 1842              		.cfi_endproc
 1843              	.LFE51:
 1845              		.section	.text.float_quat_comp_inv,"ax",%progbits
 1846              		.align	1
 1847              		.global	float_quat_comp_inv
 1848              		.thumb
 1849              		.thumb_func
 1851              	float_quat_comp_inv:
 1852              	.LFB52:
 306:math/pprz_algebra_float.c **** }
 307:math/pprz_algebra_float.c **** 
 308:math/pprz_algebra_float.c **** void float_quat_comp_inv(struct FloatQuat *a2b, struct FloatQuat *a2c, struct FloatQuat *b2c)
 309:math/pprz_algebra_float.c **** {
 1853              		.loc 2 309 0
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 0, uses_anonymous_args = 0
 1857              		@ link register save eliminated.
 1858              	.LVL182:
 310:math/pprz_algebra_float.c ****   a2b->qi =  a2c->qi * b2c->qi + a2c->qx * b2c->qx + a2c->qy * b2c->qy + a2c->qz * b2c->qz;
 1859              		.loc 2 310 0
 1860 0000 D2ED013A 		flds	s7, [r2, #4]
 1861 0004 D1ED017A 		flds	s15, [r1, #4]
 1862 0008 91ED005A 		flds	s10, [r1]
 1863 000c D2ED006A 		flds	s13, [r2]
 1864 0010 D1ED024A 		flds	s9, [r1, #8]
 1865 0014 92ED024A 		flds	s8, [r2, #8]
 1866 0018 91ED036A 		flds	s12, [r1, #12]
 1867 001c D2ED035A 		flds	s11, [r2, #12]
 1868 0020 27EEA37A 		fmuls	s14, s15, s7
 1869 0024 A5EE267A 		vfma.f32	s14, s10, s13
 1870 0028 A4EE847A 		vfma.f32	s14, s9, s8
 1871 002c A6EE257A 		vfma.f32	s14, s12, s11
 1872 0030 80ED007A 		fsts	s14, [r0]
 311:math/pprz_algebra_float.c ****   a2b->qx = -a2c->qi * b2c->qx + a2c->qx * b2c->qi - a2c->qy * b2c->qz + a2c->qz * b2c->qy;
 1873              		.loc 2 311 0
 1874 0034 92ED005A 		flds	s10, [r2]
 1875 0038 D1ED006A 		flds	s13, [r1]
 1876 003c 67EE857A 		fmuls	s15, s15, s10
 1877 0040 F1EE666A 		fnegs	s13, s13
 1878 0044 E6EEA37A 		vfma.f32	s15, s13, s7
 1879 0048 E4EEE57A 		vfms.f32	s15, s9, s11
 1880 004c E6EE047A 		vfma.f32	s15, s12, s8
 1881 0050 C0ED017A 		fsts	s15, [r0, #4]
 312:math/pprz_algebra_float.c ****   a2b->qy = -a2c->qi * b2c->qy + a2c->qx * b2c->qz + a2c->qy * b2c->qi - a2c->qz * b2c->qx;
 1882              		.loc 2 312 0
 1883 0054 91ED013A 		flds	s6, [r1, #4]
 1884 0058 D2ED013A 		flds	s7, [r2, #4]
 1885 005c 23EE257A 		fmuls	s14, s6, s11
 1886 0060 A6EE847A 		vfma.f32	s14, s13, s8
 1887 0064 A4EE857A 		vfma.f32	s14, s9, s10
 1888 0068 A6EE637A 		vfms.f32	s14, s12, s7
 1889 006c 80ED027A 		fsts	s14, [r0, #8]
 313:math/pprz_algebra_float.c ****   a2b->qz = -a2c->qi * b2c->qz - a2c->qx * b2c->qy + a2c->qy * b2c->qx + a2c->qz * b2c->qi;
 1890              		.loc 2 313 0
 1891 0070 D2ED027A 		flds	s15, [r2, #8]
 1892 0074 91ED027A 		flds	s14, [r1, #8]
 1893 0078 67EEC37A 		fnmuls	s15, s15, s6
 1894 007c E6EEA57A 		vfma.f32	s15, s13, s11
 1895 0080 E7EE237A 		vfma.f32	s15, s14, s7
 1896 0084 E6EE057A 		vfma.f32	s15, s12, s10
 1897 0088 C0ED037A 		fsts	s15, [r0, #12]
 1898 008c 7047     		bx	lr
 1899              		.cfi_endproc
 1900              	.LFE52:
 1902              		.section	.text.float_quat_inv_comp,"ax",%progbits
 1903              		.align	1
 1904              		.global	float_quat_inv_comp
 1905              		.thumb
 1906              		.thumb_func
 1908              	float_quat_inv_comp:
 1909              	.LFB53:
 314:math/pprz_algebra_float.c **** }
 315:math/pprz_algebra_float.c **** 
 316:math/pprz_algebra_float.c **** void float_quat_inv_comp(struct FloatQuat *b2c, struct FloatQuat *a2b, struct FloatQuat *a2c)
 317:math/pprz_algebra_float.c **** {
 1910              		.loc 2 317 0
 1911              		.cfi_startproc
 1912              		@ args = 0, pretend = 0, frame = 0
 1913              		@ frame_needed = 0, uses_anonymous_args = 0
 1914              		@ link register save eliminated.
 1915              	.LVL183:
 318:math/pprz_algebra_float.c ****   b2c->qi = a2b->qi * a2c->qi + a2b->qx * a2c->qx + a2b->qy * a2c->qy + a2b->qz * a2c->qz;
 1916              		.loc 2 318 0
 1917 0000 D2ED013A 		flds	s7, [r2, #4]
 1918 0004 D1ED017A 		flds	s15, [r1, #4]
 1919 0008 D1ED004A 		flds	s9, [r1]
 1920 000c 92ED005A 		flds	s10, [r2]
 1921 0010 92ED024A 		flds	s8, [r2, #8]
 1922 0014 91ED026A 		flds	s12, [r1, #8]
 1923 0018 D2ED035A 		flds	s11, [r2, #12]
 1924 001c D1ED036A 		flds	s13, [r1, #12]
 1925 0020 27EEA37A 		fmuls	s14, s15, s7
 1926 0024 A4EE857A 		vfma.f32	s14, s9, s10
 1927 0028 A6EE047A 		vfma.f32	s14, s12, s8
 1928 002c B1EE466A 		fnegs	s12, s12
 1929 0030 A6EEA57A 		vfma.f32	s14, s13, s11
 1930 0034 80ED007A 		fsts	s14, [r0]
 319:math/pprz_algebra_float.c ****   b2c->qx = a2b->qi * a2c->qx - a2b->qx * a2c->qi - a2b->qy * a2c->qz + a2b->qz * a2c->qy;
 1931              		.loc 2 319 0
 1932 0038 92ED005A 		flds	s10, [r2]
 1933 003c D1ED004A 		flds	s9, [r1]
 1934 0040 65EE677A 		fnmuls	s15, s10, s15
 1935 0044 E4EEA37A 		vfma.f32	s15, s9, s7
 1936 0048 E6EE257A 		vfma.f32	s15, s12, s11
 1937 004c E6EE847A 		vfma.f32	s15, s13, s8
 1938 0050 F1EE666A 		fnegs	s13, s13
 1939 0054 C0ED017A 		fsts	s15, [r0, #4]
 320:math/pprz_algebra_float.c ****   b2c->qy = a2b->qi * a2c->qy + a2b->qx * a2c->qz - a2b->qy * a2c->qi - a2b->qz * a2c->qx;
 1940              		.loc 2 320 0
 1941 0058 91ED013A 		flds	s6, [r1, #4]
 1942 005c D2ED013A 		flds	s7, [r2, #4]
 1943 0060 23EE257A 		fmuls	s14, s6, s11
 1944 0064 A4EE847A 		vfma.f32	s14, s9, s8
 1945 0068 A6EE057A 		vfma.f32	s14, s12, s10
 1946 006c A6EEA37A 		vfma.f32	s14, s13, s7
 1947 0070 80ED027A 		fsts	s14, [r0, #8]
 321:math/pprz_algebra_float.c ****   b2c->qz = a2b->qi * a2c->qz - a2b->qx * a2c->qy + a2b->qy * a2c->qx - a2b->qz * a2c->qi;
 1948              		.loc 2 321 0
 1949 0074 D2ED027A 		flds	s15, [r2, #8]
 1950 0078 91ED027A 		flds	s14, [r1, #8]
 1951 007c 67EEC37A 		fnmuls	s15, s15, s6
 1952 0080 E4EEA57A 		vfma.f32	s15, s9, s11
 1953 0084 E7EE237A 		vfma.f32	s15, s14, s7
 1954 0088 E6EE857A 		vfma.f32	s15, s13, s10
 1955 008c C0ED037A 		fsts	s15, [r0, #12]
 1956 0090 7047     		bx	lr
 1957              		.cfi_endproc
 1958              	.LFE53:
 1960              		.section	.text.float_quat_comp_norm_shortest,"ax",%progbits
 1961              		.align	1
 1962              		.global	float_quat_comp_norm_shortest
 1963              		.thumb
 1964              		.thumb_func
 1966              	float_quat_comp_norm_shortest:
 1967              	.LFB54:
 322:math/pprz_algebra_float.c **** }
 323:math/pprz_algebra_float.c **** 
 324:math/pprz_algebra_float.c **** void float_quat_comp_norm_shortest(struct FloatQuat *a2c, struct FloatQuat *a2b, struct FloatQuat *
 325:math/pprz_algebra_float.c **** {
 1968              		.loc 2 325 0
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 0
 1971              		@ frame_needed = 0, uses_anonymous_args = 0
 1972              	.LVL184:
 1973 0000 10B5     		push	{r4, lr}
 1974              		.cfi_def_cfa_offset 8
 1975              		.cfi_offset 4, -8
 1976              		.cfi_offset 14, -4
 1977              		.loc 2 325 0
 1978 0002 0446     		mov	r4, r0
 326:math/pprz_algebra_float.c ****   float_quat_comp(a2c, a2b, b2c);
 1979              		.loc 2 326 0
 1980 0004 FFF7FEFF 		bl	float_quat_comp
 1981              	.LVL185:
 327:math/pprz_algebra_float.c ****   float_quat_wrap_shortest(a2c);
 1982              		.loc 2 327 0
 1983 0008 2046     		mov	r0, r4
 1984 000a FFF7FEFF 		bl	float_quat_wrap_shortest
 1985              	.LVL186:
 328:math/pprz_algebra_float.c ****   float_quat_normalize(a2c);
 1986              		.loc 2 328 0
 1987 000e 2046     		mov	r0, r4
 329:math/pprz_algebra_float.c **** }
 1988              		.loc 2 329 0
 1989 0010 BDE81040 		pop	{r4, lr}
 1990              		.cfi_restore 14
 1991              		.cfi_restore 4
 1992              		.cfi_def_cfa_offset 0
 1993              	.LVL187:
 328:math/pprz_algebra_float.c ****   float_quat_normalize(a2c);
 1994              		.loc 2 328 0
 1995 0014 FFF7FEBF 		b	float_quat_normalize
 1996              	.LVL188:
 1997              		.cfi_endproc
 1998              	.LFE54:
 2000              		.section	.text.float_quat_comp_inv_norm_shortest,"ax",%progbits
 2001              		.align	1
 2002              		.global	float_quat_comp_inv_norm_shortest
 2003              		.thumb
 2004              		.thumb_func
 2006              	float_quat_comp_inv_norm_shortest:
 2007              	.LFB55:
 330:math/pprz_algebra_float.c **** 
 331:math/pprz_algebra_float.c **** void float_quat_comp_inv_norm_shortest(struct FloatQuat *a2b, struct FloatQuat *a2c, struct FloatQu
 332:math/pprz_algebra_float.c **** {
 2008              		.loc 2 332 0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 0
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
 2012              	.LVL189:
 2013 0000 10B5     		push	{r4, lr}
 2014              		.cfi_def_cfa_offset 8
 2015              		.cfi_offset 4, -8
 2016              		.cfi_offset 14, -4
 2017              		.loc 2 332 0
 2018 0002 0446     		mov	r4, r0
 333:math/pprz_algebra_float.c ****   float_quat_comp_inv(a2b, a2c, b2c);
 2019              		.loc 2 333 0
 2020 0004 FFF7FEFF 		bl	float_quat_comp_inv
 2021              	.LVL190:
 334:math/pprz_algebra_float.c ****   float_quat_wrap_shortest(a2b);
 2022              		.loc 2 334 0
 2023 0008 2046     		mov	r0, r4
 2024 000a FFF7FEFF 		bl	float_quat_wrap_shortest
 2025              	.LVL191:
 335:math/pprz_algebra_float.c ****   float_quat_normalize(a2b);
 2026              		.loc 2 335 0
 2027 000e 2046     		mov	r0, r4
 336:math/pprz_algebra_float.c **** }
 2028              		.loc 2 336 0
 2029 0010 BDE81040 		pop	{r4, lr}
 2030              		.cfi_restore 14
 2031              		.cfi_restore 4
 2032              		.cfi_def_cfa_offset 0
 2033              	.LVL192:
 335:math/pprz_algebra_float.c ****   float_quat_normalize(a2b);
 2034              		.loc 2 335 0
 2035 0014 FFF7FEBF 		b	float_quat_normalize
 2036              	.LVL193:
 2037              		.cfi_endproc
 2038              	.LFE55:
 2040              		.section	.text.float_quat_inv_comp_norm_shortest,"ax",%progbits
 2041              		.align	1
 2042              		.global	float_quat_inv_comp_norm_shortest
 2043              		.thumb
 2044              		.thumb_func
 2046              	float_quat_inv_comp_norm_shortest:
 2047              	.LFB56:
 337:math/pprz_algebra_float.c **** 
 338:math/pprz_algebra_float.c **** void float_quat_inv_comp_norm_shortest(struct FloatQuat *b2c, struct FloatQuat *a2b, struct FloatQu
 339:math/pprz_algebra_float.c **** {
 2048              		.loc 2 339 0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              	.LVL194:
 2053 0000 10B5     		push	{r4, lr}
 2054              		.cfi_def_cfa_offset 8
 2055              		.cfi_offset 4, -8
 2056              		.cfi_offset 14, -4
 2057              		.loc 2 339 0
 2058 0002 0446     		mov	r4, r0
 340:math/pprz_algebra_float.c ****   float_quat_inv_comp(b2c, a2b, a2c);
 2059              		.loc 2 340 0
 2060 0004 FFF7FEFF 		bl	float_quat_inv_comp
 2061              	.LVL195:
 341:math/pprz_algebra_float.c ****   float_quat_wrap_shortest(b2c);
 2062              		.loc 2 341 0
 2063 0008 2046     		mov	r0, r4
 2064 000a FFF7FEFF 		bl	float_quat_wrap_shortest
 2065              	.LVL196:
 342:math/pprz_algebra_float.c ****   float_quat_normalize(b2c);
 2066              		.loc 2 342 0
 2067 000e 2046     		mov	r0, r4
 343:math/pprz_algebra_float.c **** }
 2068              		.loc 2 343 0
 2069 0010 BDE81040 		pop	{r4, lr}
 2070              		.cfi_restore 14
 2071              		.cfi_restore 4
 2072              		.cfi_def_cfa_offset 0
 2073              	.LVL197:
 342:math/pprz_algebra_float.c ****   float_quat_normalize(b2c);
 2074              		.loc 2 342 0
 2075 0014 FFF7FEBF 		b	float_quat_normalize
 2076              	.LVL198:
 2077              		.cfi_endproc
 2078              	.LFE56:
 2080              		.global	__aeabi_dcmplt
 2081              		.section	.text.float_quat_differential,"ax",%progbits
 2082              		.align	1
 2083              		.global	float_quat_differential
 2084              		.thumb
 2085              		.thumb_func
 2087              	float_quat_differential:
 2088              	.LFB57:
 344:math/pprz_algebra_float.c **** 
 345:math/pprz_algebra_float.c **** void float_quat_differential(struct FloatQuat *q_out, struct FloatRates *w, float dt)
 346:math/pprz_algebra_float.c **** {
 2089              		.loc 2 346 0
 2090              		.cfi_startproc
 2091              		@ args = 0, pretend = 0, frame = 0
 2092              		@ frame_needed = 0, uses_anonymous_args = 0
 2093              	.LVL199:
 347:math/pprz_algebra_float.c ****   const float v_norm = sqrtf(w->p * w->p + w->q * w->q + w->r * w->r);
 2094              		.loc 2 347 0
 2095 0000 D1ED017A 		flds	s15, [r1, #4]
 2096 0004 D1ED006A 		flds	s13, [r1]
 2097 0008 91ED027A 		flds	s14, [r1, #8]
 2098 000c 67EEA77A 		fmuls	s15, s15, s15
 346:math/pprz_algebra_float.c ****   const float v_norm = sqrtf(w->p * w->p + w->q * w->q + w->r * w->r);
 2099              		.loc 2 346 0
 2100 0010 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2101              		.cfi_def_cfa_offset 32
 2102              		.cfi_offset 3, -32
 2103              		.cfi_offset 4, -28
 2104              		.cfi_offset 5, -24
 2105              		.cfi_offset 6, -20
 2106              		.cfi_offset 7, -16
 2107              		.cfi_offset 8, -12
 2108              		.cfi_offset 9, -8
 2109              		.cfi_offset 14, -4
 2110              		.loc 2 347 0
 2111 0014 E6EEA67A 		vfma.f32	s15, s13, s13
 346:math/pprz_algebra_float.c ****   const float v_norm = sqrtf(w->p * w->p + w->q * w->q + w->r * w->r);
 2112              		.loc 2 346 0
 2113 0018 0446     		mov	r4, r0
 2114 001a 0D46     		mov	r5, r1
 2115 001c 2DED028B 		fstmfdd	sp!, {d8}
 2116              		.cfi_def_cfa_offset 40
 2117              		.cfi_offset 80, -40
 2118              		.cfi_offset 81, -36
 2119              		.loc 2 347 0
 2120 0020 E7EE077A 		vfma.f32	s15, s14, s14
 346:math/pprz_algebra_float.c ****   const float v_norm = sqrtf(w->p * w->p + w->q * w->q + w->r * w->r);
 2121              		.loc 2 346 0
 2122 0024 08EE902A 		fmsr	s17, r2
 2123              		.loc 2 347 0
 2124 0028 17EE900A 		fmrs	r0, s15
 2125              	.LVL200:
 2126 002c FFF7FEFF 		bl	sqrtf
 2127              	.LVL201:
 2128 0030 08EE100A 		fmsr	s16, r0
 2129              	.LVL202:
 348:math/pprz_algebra_float.c ****   const float c2 = cos(dt * v_norm / 2.0);
 2130              		.loc 2 348 0
 2131 0034 68EE887A 		fmuls	s15, s17, s16
 2132 0038 17EE900A 		fmrs	r0, s15
 2133              	.LVL203:
 2134 003c FFF7FEFF 		bl	__aeabi_f2d
 2135              	.LVL204:
 2136 0040 0022     		movs	r2, #0
 2137 0042 274B     		ldr	r3, .L65+8
 2138 0044 FFF7FEFF 		bl	__aeabi_dmul
 2139              	.LVL205:
 2140 0048 8046     		mov	r8, r0
 2141 004a 8946     		mov	r9, r1
 2142 004c FFF7FEFF 		bl	cos
 2143              	.LVL206:
 2144 0050 0646     		mov	r6, r0
 2145 0052 0F46     		mov	r7, r1
 2146              	.LVL207:
 349:math/pprz_algebra_float.c ****   const float s2 = sin(dt * v_norm / 2.0);
 2147              		.loc 2 349 0
 2148 0054 4046     		mov	r0, r8
 2149 0056 4946     		mov	r1, r9
 2150 0058 FFF7FEFF 		bl	sin
 2151              	.LVL208:
 2152 005c 8046     		mov	r8, r0
 350:math/pprz_algebra_float.c ****   if (v_norm < 1e-8) {
 2153              		.loc 2 350 0
 2154 005e 18EE100A 		fmrs	r0, s16
 349:math/pprz_algebra_float.c ****   const float s2 = sin(dt * v_norm / 2.0);
 2155              		.loc 2 349 0
 2156 0062 8946     		mov	r9, r1
 2157              	.LVL209:
 2158              		.loc 2 350 0
 2159 0064 FFF7FEFF 		bl	__aeabi_f2d
 2160              	.LVL210:
 2161 0068 1BA3     		adr	r3, .L65
 2162 006a D3E90023 		ldrd	r2, [r3]
 2163 006e FFF7FEFF 		bl	__aeabi_dcmplt
 2164              	.LVL211:
 2165 0072 38B1     		cbz	r0, .L64
 351:math/pprz_algebra_float.c ****     q_out->qi = 1;
 2166              		.loc 2 351 0
 2167 0074 4FF07E53 		mov	r3, #1065353216
 2168 0078 2360     		str	r3, [r4]	@ float
 352:math/pprz_algebra_float.c ****     q_out->qx = 0;
 2169              		.loc 2 352 0
 2170 007a 0023     		movs	r3, #0
 2171 007c 6360     		str	r3, [r4, #4]	@ float
 353:math/pprz_algebra_float.c ****     q_out->qy = 0;
 2172              		.loc 2 353 0
 2173 007e A360     		str	r3, [r4, #8]	@ float
 354:math/pprz_algebra_float.c ****     q_out->qz = 0;
 2174              		.loc 2 354 0
 2175 0080 E360     		str	r3, [r4, #12]	@ float
 2176 0082 22E0     		b	.L59
 2177              	.L64:
 349:math/pprz_algebra_float.c ****   if (v_norm < 1e-8) {
 2178              		.loc 2 349 0
 2179 0084 4946     		mov	r1, r9
 2180 0086 4046     		mov	r0, r8
 2181 0088 FFF7FEFF 		bl	__aeabi_d2f
 2182              	.LVL212:
 348:math/pprz_algebra_float.c ****   const float s2 = sin(dt * v_norm / 2.0);
 2183              		.loc 2 348 0
 2184 008c 3946     		mov	r1, r7
 349:math/pprz_algebra_float.c ****   if (v_norm < 1e-8) {
 2185              		.loc 2 349 0
 2186 008e 08EE900A 		fmsr	s17, r0
 2187              	.LVL213:
 348:math/pprz_algebra_float.c ****   const float s2 = sin(dt * v_norm / 2.0);
 2188              		.loc 2 348 0
 2189 0092 3046     		mov	r0, r6
 2190 0094 FFF7FEFF 		bl	__aeabi_d2f
 2191              	.LVL214:
 355:math/pprz_algebra_float.c ****   } else {
 356:math/pprz_algebra_float.c ****     q_out->qi = c2;
 357:math/pprz_algebra_float.c ****     q_out->qx = w->p / v_norm * s2;
 2192              		.loc 2 357 0
 2193 0098 D5ED007A 		flds	s15, [r5]
 348:math/pprz_algebra_float.c ****   const float s2 = sin(dt * v_norm / 2.0);
 2194              		.loc 2 348 0
 2195 009c 2060     		str	r0, [r4]	@ float
 2196              		.loc 2 357 0
 2197 009e C7EE887A 		fdivs	s15, s15, s16
 2198 00a2 67EEA87A 		fmuls	s15, s15, s17
 2199 00a6 C4ED017A 		fsts	s15, [r4, #4]
 358:math/pprz_algebra_float.c ****     q_out->qy = w->q / v_norm * s2;
 2200              		.loc 2 358 0
 2201 00aa D5ED017A 		flds	s15, [r5, #4]
 2202 00ae C7EE887A 		fdivs	s15, s15, s16
 2203 00b2 67EEA87A 		fmuls	s15, s15, s17
 2204 00b6 C4ED027A 		fsts	s15, [r4, #8]
 359:math/pprz_algebra_float.c ****     q_out->qz = w->r / v_norm * s2;
 2205              		.loc 2 359 0
 2206 00ba D5ED027A 		flds	s15, [r5, #8]
 2207 00be C7EE887A 		fdivs	s15, s15, s16
 2208 00c2 67EEA87A 		fmuls	s15, s15, s17
 2209 00c6 C4ED037A 		fsts	s15, [r4, #12]
 2210              	.L59:
 360:math/pprz_algebra_float.c ****   }
 361:math/pprz_algebra_float.c **** }
 2211              		.loc 2 361 0
 2212 00ca BDEC028B 		fldmfdd	sp!, {d8}
 2213              		.cfi_restore 80
 2214              		.cfi_restore 81
 2215              		.cfi_def_cfa_offset 32
 2216              	.LVL215:
 2217 00ce BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2218              	.LVL216:
 2219              	.L66:
 2220 00d2 00BFAFF3 		.align	3
 2220      0080
 2221              	.L65:
 2222 00d8 3A8C30E2 		.word	-500134854
 2223 00dc 8E79453E 		.word	1044740494
 2224 00e0 0000E03F 		.word	1071644672
 2225              		.cfi_endproc
 2226              	.LFE57:
 2228              		.section	.text.float_quat_integrate_fi,"ax",%progbits
 2229              		.align	1
 2230              		.global	float_quat_integrate_fi
 2231              		.thumb
 2232              		.thumb_func
 2234              	float_quat_integrate_fi:
 2235              	.LFB58:
 362:math/pprz_algebra_float.c **** 
 363:math/pprz_algebra_float.c **** /** in place first order quaternion integration with constant rotational velocity */
 364:math/pprz_algebra_float.c **** void float_quat_integrate_fi(struct FloatQuat *q, struct FloatRates *omega, float dt)
 365:math/pprz_algebra_float.c **** {
 2236              		.loc 2 365 0
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 0
 2239              		@ frame_needed = 0, uses_anonymous_args = 0
 2240              	.LVL217:
 2241 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2242              		.cfi_def_cfa_offset 24
 2243              		.cfi_offset 3, -24
 2244              		.cfi_offset 4, -20
 2245              		.cfi_offset 5, -16
 2246              		.cfi_offset 6, -12
 2247              		.cfi_offset 7, -8
 2248              		.cfi_offset 14, -4
 2249 0002 0446     		mov	r4, r0
 2250 0004 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 2251              		.cfi_def_cfa_offset 48
 2252              		.cfi_offset 80, -48
 2253              		.cfi_offset 81, -44
 2254              		.cfi_offset 82, -40
 2255              		.cfi_offset 83, -36
 2256              		.cfi_offset 84, -32
 2257              		.cfi_offset 85, -28
 366:math/pprz_algebra_float.c ****   const float qi = q->qi;
 2258              		.loc 2 366 0
 2259 0008 D0ED009A 		flds	s19, [r0]
 2260              	.LVL218:
 367:math/pprz_algebra_float.c ****   const float qx = q->qx;
 2261              		.loc 2 367 0
 2262 000c 90ED01AA 		flds	s20, [r0, #4]
 2263              	.LVL219:
 368:math/pprz_algebra_float.c ****   const float qy = q->qy;
 2264              		.loc 2 368 0
 2265 0010 90ED029A 		flds	s18, [r0, #8]
 2266              	.LVL220:
 369:math/pprz_algebra_float.c ****   const float qz = q->qz;
 2267              		.loc 2 369 0
 2268 0014 D0ED038A 		flds	s17, [r0, #12]
 2269              	.LVL221:
 370:math/pprz_algebra_float.c ****   const float dp = 0.5 * dt * omega->p;
 2270              		.loc 2 370 0
 2271 0018 1046     		mov	r0, r2	@ float
 2272              	.LVL222:
 365:math/pprz_algebra_float.c ****   const float qi = q->qi;
 2273              		.loc 2 365 0
 2274 001a 0D46     		mov	r5, r1
 2275              		.loc 2 370 0
 2276 001c FFF7FEFF 		bl	__aeabi_f2d
 2277              	.LVL223:
 2278 0020 0022     		movs	r2, #0
 2279 0022 2D4B     		ldr	r3, .L68
 2280 0024 FFF7FEFF 		bl	__aeabi_dmul
 2281              	.LVL224:
 2282 0028 0646     		mov	r6, r0
 2283 002a 2868     		ldr	r0, [r5]	@ float
 2284 002c 0F46     		mov	r7, r1
 2285 002e FFF7FEFF 		bl	__aeabi_f2d
 2286              	.LVL225:
 2287 0032 0246     		mov	r2, r0
 2288 0034 0B46     		mov	r3, r1
 2289 0036 3046     		mov	r0, r6
 2290 0038 3946     		mov	r1, r7
 2291 003a FFF7FEFF 		bl	__aeabi_dmul
 2292              	.LVL226:
 2293 003e FFF7FEFF 		bl	__aeabi_d2f
 2294              	.LVL227:
 2295 0042 0AEE900A 		fmsr	s21, r0
 2296              	.LVL228:
 371:math/pprz_algebra_float.c ****   const float dq = 0.5 * dt * omega->q;
 2297              		.loc 2 371 0
 2298 0046 6868     		ldr	r0, [r5, #4]	@ float
 2299              	.LVL229:
 2300 0048 FFF7FEFF 		bl	__aeabi_f2d
 2301              	.LVL230:
 2302 004c 0246     		mov	r2, r0
 2303 004e 0B46     		mov	r3, r1
 2304 0050 3046     		mov	r0, r6
 2305 0052 3946     		mov	r1, r7
 2306 0054 FFF7FEFF 		bl	__aeabi_dmul
 2307              	.LVL231:
 2308 0058 FFF7FEFF 		bl	__aeabi_d2f
 2309              	.LVL232:
 2310 005c 08EE100A 		fmsr	s16, r0
 2311              	.LVL233:
 372:math/pprz_algebra_float.c ****   const float dr = 0.5 * dt * omega->r;
 2312              		.loc 2 372 0
 2313 0060 A868     		ldr	r0, [r5, #8]	@ float
 2314              	.LVL234:
 2315 0062 FFF7FEFF 		bl	__aeabi_f2d
 2316              	.LVL235:
 2317 0066 0246     		mov	r2, r0
 2318 0068 0B46     		mov	r3, r1
 2319 006a 3046     		mov	r0, r6
 2320 006c 3946     		mov	r1, r7
 2321 006e FFF7FEFF 		bl	__aeabi_dmul
 2322              	.LVL236:
 2323 0072 FFF7FEFF 		bl	__aeabi_d2f
 2324              	.LVL237:
 2325 0076 F1EE6A6A 		fnegs	s13, s21
 373:math/pprz_algebra_float.c ****   q->qi = qi    - dp * qx - dq * qy - dr * qz;
 2326              		.loc 2 373 0
 2327 007a F0EE697A 		fcpys	s15, s19
 2328 007e E6EE8A7A 		vfma.f32	s15, s13, s20
 2329 0082 B1EE486A 		fnegs	s12, s16
 2330 0086 E6EE097A 		vfma.f32	s15, s12, s18
 372:math/pprz_algebra_float.c ****   const float dr = 0.5 * dt * omega->r;
 2331              		.loc 2 372 0
 2332 008a 07EE100A 		fmsr	s14, r0
 2333              	.LVL238:
 2334              		.loc 2 373 0
 2335 008e E7EE687A 		vfms.f32	s15, s14, s17
 2336 0092 C4ED007A 		fsts	s15, [r4]
 374:math/pprz_algebra_float.c ****   q->qx = dp * qi +    qx + dr * qy - dq * qz;
 2337              		.loc 2 374 0
 2338 0096 F0EE4A7A 		fcpys	s15, s20
 2339 009a EAEEA97A 		vfma.f32	s15, s21, s19
 2340 009e E7EE097A 		vfma.f32	s15, s14, s18
 2341 00a2 E6EE287A 		vfma.f32	s15, s12, s17
 2342 00a6 C4ED017A 		fsts	s15, [r4, #4]
 2343 00aa 6AEE477A 		fnmuls	s15, s20, s14
 375:math/pprz_algebra_float.c ****   q->qy = dq * qi - dr * qx +    qy + dp * qz;
 2344              		.loc 2 375 0
 2345 00ae E8EE297A 		vfma.f32	s15, s16, s19
 376:math/pprz_algebra_float.c ****   q->qz = dr * qi + dq * qx - dp * qy +    qz;
 2346              		.loc 2 376 0
 2347 00b2 28EE0A8A 		fmuls	s16, s16, s20
 2348              	.LVL239:
 375:math/pprz_algebra_float.c ****   q->qy = dq * qi - dr * qx +    qy + dp * qz;
 2349              		.loc 2 375 0
 2350 00b6 77EE897A 		fadds	s15, s15, s18
 2351              		.loc 2 376 0
 2352 00ba A7EE298A 		vfma.f32	s16, s14, s19
 375:math/pprz_algebra_float.c ****   q->qy = dq * qi - dr * qx +    qy + dp * qz;
 2353              		.loc 2 375 0
 2354 00be EAEEA87A 		vfma.f32	s15, s21, s17
 2355              		.loc 2 376 0
 2356 00c2 A6EE898A 		vfma.f32	s16, s13, s18
 375:math/pprz_algebra_float.c ****   q->qy = dq * qi - dr * qx +    qy + dp * qz;
 2357              		.loc 2 375 0
 2358 00c6 C4ED027A 		fsts	s15, [r4, #8]
 2359              		.loc 2 376 0
 2360 00ca 38EE288A 		fadds	s16, s16, s17
 2361 00ce 84ED038A 		fsts	s16, [r4, #12]
 377:math/pprz_algebra_float.c **** }
 2362              		.loc 2 377 0
 2363 00d2 BDEC068B 		fldmfdd	sp!, {d8-d10}
 2364              		.cfi_restore 84
 2365              		.cfi_restore 85
 2366              		.cfi_restore 82
 2367              		.cfi_restore 83
 2368              		.cfi_restore 80
 2369              		.cfi_restore 81
 2370              		.cfi_def_cfa_offset 24
 2371              	.LVL240:
 2372 00d6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2373              	.LVL241:
 2374              	.L69:
 2375              		.align	2
 2376              	.L68:
 2377 00d8 0000E03F 		.word	1071644672
 2378              		.cfi_endproc
 2379              	.LFE58:
 2381              		.section	.text.float_quat_integrate,"ax",%progbits
 2382              		.align	1
 2383              		.global	float_quat_integrate
 2384              		.thumb
 2385              		.thumb_func
 2387              	float_quat_integrate:
 2388              	.LFB59:
 378:math/pprz_algebra_float.c **** 
 379:math/pprz_algebra_float.c **** /** in place quaternion integration with constant rotational velocity */
 380:math/pprz_algebra_float.c **** void float_quat_integrate(struct FloatQuat *q, struct FloatRates *omega, float dt)
 381:math/pprz_algebra_float.c **** {
 2389              		.loc 2 381 0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 0
 2392              		@ frame_needed = 0, uses_anonymous_args = 0
 2393              	.LVL242:
 382:math/pprz_algebra_float.c ****   const float no = FLOAT_RATES_NORM(*omega);
 2394              		.loc 2 382 0
 2395 0000 D1ED017A 		flds	s15, [r1, #4]
 2396 0004 D1ED006A 		flds	s13, [r1]
 2397 0008 91ED027A 		flds	s14, [r1, #8]
 2398 000c 67EEA77A 		fmuls	s15, s15, s15
 381:math/pprz_algebra_float.c ****   const float no = FLOAT_RATES_NORM(*omega);
 2399              		.loc 2 381 0
 2400 0010 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2401              		.cfi_def_cfa_offset 24
 2402              		.cfi_offset 4, -24
 2403              		.cfi_offset 5, -20
 2404              		.cfi_offset 6, -16
 2405              		.cfi_offset 7, -12
 2406              		.cfi_offset 8, -8
 2407              		.cfi_offset 14, -4
 2408              		.loc 2 382 0
 2409 0014 E6EEA67A 		vfma.f32	s15, s13, s13
 381:math/pprz_algebra_float.c ****   const float no = FLOAT_RATES_NORM(*omega);
 2410              		.loc 2 381 0
 2411 0018 0446     		mov	r4, r0
 2412 001a 0D46     		mov	r5, r1
 2413 001c 2DED028B 		fstmfdd	sp!, {d8}
 2414              		.cfi_def_cfa_offset 32
 2415              		.cfi_offset 80, -32
 2416              		.cfi_offset 81, -28
 2417              		.loc 2 382 0
 2418 0020 E7EE077A 		vfma.f32	s15, s14, s14
 381:math/pprz_algebra_float.c ****   const float no = FLOAT_RATES_NORM(*omega);
 2419              		.loc 2 381 0
 2420 0024 9046     		mov	r8, r2	@ float
 2421              		.loc 2 382 0
 2422 0026 17EE900A 		fmrs	r0, s15
 2423              	.LVL243:
 2424 002a FFF7FEFF 		bl	sqrtf
 2425              	.LVL244:
 383:math/pprz_algebra_float.c ****   if (no > FLT_MIN) {
 2426              		.loc 2 383 0
 2427 002e DFED357A 		flds	s15, .L74
 382:math/pprz_algebra_float.c ****   const float no = FLOAT_RATES_NORM(*omega);
 2428              		.loc 2 382 0
 2429 0032 08EE100A 		fmsr	s16, r0
 2430              	.LVL245:
 2431              		.loc 2 383 0
 2432 0036 B4EEE78A 		fcmpes	s16, s15
 2433 003a F1EE10FA 		fmstat
 2434 003e 5CDD     		ble	.L70
 2435              	.LBB6:
 384:math/pprz_algebra_float.c ****     const float a  = 0.5 * no * dt;
 2436              		.loc 2 384 0
 2437 0040 FFF7FEFF 		bl	__aeabi_f2d
 2438              	.LVL246:
 2439 0044 0022     		movs	r2, #0
 2440 0046 304B     		ldr	r3, .L74+4
 2441 0048 FFF7FEFF 		bl	__aeabi_dmul
 2442              	.LVL247:
 2443 004c 0646     		mov	r6, r0
 2444 004e 4046     		mov	r0, r8	@ float
 2445 0050 0F46     		mov	r7, r1
 2446 0052 FFF7FEFF 		bl	__aeabi_f2d
 2447              	.LVL248:
 2448 0056 0246     		mov	r2, r0
 2449 0058 0B46     		mov	r3, r1
 2450 005a 3046     		mov	r0, r6
 2451 005c 3946     		mov	r1, r7
 2452 005e FFF7FEFF 		bl	__aeabi_dmul
 2453              	.LVL249:
 2454 0062 FFF7FEFF 		bl	__aeabi_d2f
 2455              	.LVL250:
 2456 0066 0646     		mov	r6, r0	@ float
 2457              	.LVL251:
 385:math/pprz_algebra_float.c ****     const float ca = cosf(a);
 2458              		.loc 2 385 0
 2459 0068 FFF7FEFF 		bl	cosf
 2460              	.LVL252:
 2461 006c 08EE900A 		fmsr	s17, r0
 2462              	.LVL253:
 386:math/pprz_algebra_float.c ****     const float sa_ov_no = sinf(a) / no;
 2463              		.loc 2 386 0
 2464 0070 3046     		mov	r0, r6	@ float
 2465              	.LVL254:
 2466 0072 FFF7FEFF 		bl	sinf
 2467              	.LVL255:
 2468 0076 07EE900A 		fmsr	s15, r0
 2469 007a 87EE887A 		fdivs	s14, s15, s16
 2470              	.LVL256:
 387:math/pprz_algebra_float.c ****     const float dp = sa_ov_no * omega->p;
 2471              		.loc 2 387 0
 2472 007e 95ED006A 		flds	s12, [r5]
 388:math/pprz_algebra_float.c ****     const float dq = sa_ov_no * omega->q;
 389:math/pprz_algebra_float.c ****     const float dr = sa_ov_no * omega->r;
 2473              		.loc 2 389 0
 2474 0082 D5ED026A 		flds	s13, [r5, #8]
 388:math/pprz_algebra_float.c ****     const float dq = sa_ov_no * omega->q;
 2475              		.loc 2 388 0
 2476 0086 D5ED017A 		flds	s15, [r5, #4]
 390:math/pprz_algebra_float.c ****     const float qi = q->qi;
 391:math/pprz_algebra_float.c ****     const float qx = q->qx;
 2477              		.loc 2 391 0
 2478 008a 94ED014A 		flds	s8, [r4, #4]
 390:math/pprz_algebra_float.c ****     const float qi = q->qi;
 2479              		.loc 2 390 0
 2480 008e D4ED004A 		flds	s9, [r4]
 392:math/pprz_algebra_float.c ****     const float qy = q->qy;
 2481              		.loc 2 392 0
 2482 0092 94ED025A 		flds	s10, [r4, #8]
 393:math/pprz_algebra_float.c ****     const float qz = q->qz;
 2483              		.loc 2 393 0
 2484 0096 D4ED035A 		flds	s11, [r4, #12]
 387:math/pprz_algebra_float.c ****     const float dq = sa_ov_no * omega->q;
 2485              		.loc 2 387 0
 2486 009a 27EE066A 		fmuls	s12, s14, s12
 2487              	.LVL257:
 388:math/pprz_algebra_float.c ****     const float dr = sa_ov_no * omega->r;
 2488              		.loc 2 388 0
 2489 009e 67EE277A 		fmuls	s15, s14, s15
 2490              	.LVL258:
 389:math/pprz_algebra_float.c ****     const float qi = q->qi;
 2491              		.loc 2 389 0
 2492 00a2 27EE267A 		fmuls	s14, s14, s13
 2493              	.LVL259:
 2494 00a6 64EE466A 		fnmuls	s13, s8, s12
 2495 00aa F1EE673A 		fnegs	s7, s15
 394:math/pprz_algebra_float.c ****     q->qi = ca * qi - dp * qx - dq * qy - dr * qz;
 2496              		.loc 2 394 0
 2497 00ae E8EEA46A 		vfma.f32	s13, s17, s9
 2498 00b2 E3EE856A 		vfma.f32	s13, s7, s10
 2499 00b6 E7EE656A 		vfms.f32	s13, s14, s11
 2500 00ba C4ED006A 		fsts	s13, [r4]
 395:math/pprz_algebra_float.c ****     q->qx = dp * qi + ca * qx + dr * qy - dq * qz;
 2501              		.loc 2 395 0
 2502 00be 68EE846A 		fmuls	s13, s17, s8
 2503 00c2 E6EE246A 		vfma.f32	s13, s12, s9
 2504 00c6 E7EE056A 		vfma.f32	s13, s14, s10
 2505 00ca E3EEA56A 		vfma.f32	s13, s7, s11
 2506 00ce C4ED016A 		fsts	s13, [r4, #4]
 2507 00d2 64EE476A 		fnmuls	s13, s8, s14
 396:math/pprz_algebra_float.c ****     q->qy = dq * qi - dr * qx + ca * qy + dp * qz;
 2508              		.loc 2 396 0
 2509 00d6 E7EEA46A 		vfma.f32	s13, s15, s9
 397:math/pprz_algebra_float.c ****     q->qz = dr * qi + dq * qx - dp * qy + ca * qz;
 2510              		.loc 2 397 0
 2511 00da 67EE847A 		fmuls	s15, s15, s8
 2512              	.LVL260:
 396:math/pprz_algebra_float.c ****     q->qy = dq * qi - dr * qx + ca * qy + dp * qz;
 2513              		.loc 2 396 0
 2514 00de E8EE856A 		vfma.f32	s13, s17, s10
 2515              		.loc 2 397 0
 2516 00e2 E7EE247A 		vfma.f32	s15, s14, s9
 396:math/pprz_algebra_float.c ****     q->qy = dq * qi - dr * qx + ca * qy + dp * qz;
 2517              		.loc 2 396 0
 2518 00e6 E6EE256A 		vfma.f32	s13, s12, s11
 2519              		.loc 2 397 0
 2520 00ea E6EE457A 		vfms.f32	s15, s12, s10
 396:math/pprz_algebra_float.c ****     q->qy = dq * qi - dr * qx + ca * qy + dp * qz;
 2521              		.loc 2 396 0
 2522 00ee C4ED026A 		fsts	s13, [r4, #8]
 2523              		.loc 2 397 0
 2524 00f2 E8EEA57A 		vfma.f32	s15, s17, s11
 2525 00f6 C4ED037A 		fsts	s15, [r4, #12]
 2526              	.LVL261:
 2527              	.L70:
 2528              	.LBE6:
 398:math/pprz_algebra_float.c ****   }
 399:math/pprz_algebra_float.c **** }
 2529              		.loc 2 399 0
 2530 00fa BDEC028B 		fldmfdd	sp!, {d8}
 2531              		.cfi_restore 80
 2532              		.cfi_restore 81
 2533              		.cfi_def_cfa_offset 24
 2534              	.LVL262:
 2535 00fe BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2536              	.LVL263:
 2537              	.L75:
 2538 0102 00BF     		.align	2
 2539              	.L74:
 2540 0104 00008000 		.word	8388608
 2541 0108 0000E03F 		.word	1071644672
 2542              		.cfi_endproc
 2543              	.LFE59:
 2545              		.section	.text.float_quat_vmult,"ax",%progbits
 2546              		.align	1
 2547              		.global	float_quat_vmult
 2548              		.thumb
 2549              		.thumb_func
 2551              	float_quat_vmult:
 2552              	.LFB60:
 400:math/pprz_algebra_float.c **** 
 401:math/pprz_algebra_float.c **** void float_quat_vmult(struct FloatVect3 *v_out, struct FloatQuat *q, const struct FloatVect3 *v_in)
 402:math/pprz_algebra_float.c **** {
 2553              		.loc 2 402 0
 2554              		.cfi_startproc
 2555              		@ args = 0, pretend = 0, frame = 0
 2556              		@ frame_needed = 0, uses_anonymous_args = 0
 2557              		@ link register save eliminated.
 2558              	.LVL264:
 403:math/pprz_algebra_float.c ****   const float qi2_M1_2  = q->qi * q->qi - 0.5;
 2559              		.loc 2 403 0
 2560 0000 D1ED004A 		flds	s9, [r1]
 404:math/pprz_algebra_float.c ****   const float qiqx = q->qi * q->qx;
 2561              		.loc 2 404 0
 2562 0004 D1ED015A 		flds	s11, [r1, #4]
 405:math/pprz_algebra_float.c ****   const float qiqy = q->qi * q->qy;
 2563              		.loc 2 405 0
 2564 0008 91ED025A 		flds	s10, [r1, #8]
 406:math/pprz_algebra_float.c ****   const float qiqz = q->qi * q->qz;
 2565              		.loc 2 406 0
 2566 000c 91ED034A 		flds	s8, [r1, #12]
 407:math/pprz_algebra_float.c ****   float m01  = q->qx * q->qy; /* aka qxqy */
 408:math/pprz_algebra_float.c ****   float m02  = q->qx * q->qz; /* aka qxqz */
 409:math/pprz_algebra_float.c ****   float m12  = q->qy * q->qz; /* aka qyqz */
 410:math/pprz_algebra_float.c **** 
 411:math/pprz_algebra_float.c ****   const float m00  = qi2_M1_2 + q->qx * q->qx;
 412:math/pprz_algebra_float.c ****   const float m10  = m01 - qiqz;
 413:math/pprz_algebra_float.c ****   const float m20  = m02 + qiqy;
 414:math/pprz_algebra_float.c ****   const float m21  = m12 - qiqx;
 415:math/pprz_algebra_float.c ****   m01 += qiqz;
 416:math/pprz_algebra_float.c ****   m02 -= qiqy;
 417:math/pprz_algebra_float.c ****   m12 += qiqx;
 418:math/pprz_algebra_float.c ****   const float m11  = qi2_M1_2 + q->qy * q->qy;
 419:math/pprz_algebra_float.c ****   const float m22  = qi2_M1_2 + q->qz * q->qz;
 420:math/pprz_algebra_float.c ****   v_out->x = 2 * (m00 * v_in->x + m01 * v_in->y + m02 * v_in->z);
 2567              		.loc 2 420 0
 2568 0010 D2ED011A 		flds	s3, [r2, #4]
 2569 0014 92ED001A 		flds	s2, [r2]
 2570 0018 D2ED022A 		flds	s5, [r2, #8]
 403:math/pprz_algebra_float.c ****   const float qiqx = q->qi * q->qx;
 2571              		.loc 2 403 0
 2572 001c BEEE006A 		fconsts	s12, #224
 2573 0020 A4EEA46A 		vfma.f32	s12, s9, s9
 2574              	.LVL265:
 407:math/pprz_algebra_float.c ****   float m01  = q->qx * q->qy; /* aka qxqy */
 2575              		.loc 2 407 0
 2576 0024 25EE853A 		fmuls	s6, s11, s10
 2577              	.LVL266:
 411:math/pprz_algebra_float.c ****   const float m10  = m01 - qiqz;
 2578              		.loc 2 411 0
 2579 0028 F0EE460A 		fcpys	s1, s12
 415:math/pprz_algebra_float.c ****   m02 -= qiqy;
 2580              		.loc 2 415 0
 2581 002c F0EE436A 		fcpys	s13, s6
 2582 0030 E4EE846A 		vfma.f32	s13, s9, s8
 411:math/pprz_algebra_float.c ****   const float m10  = m01 - qiqz;
 2583              		.loc 2 411 0
 2584 0034 E5EEA50A 		vfma.f32	s1, s11, s11
 408:math/pprz_algebra_float.c ****   float m12  = q->qy * q->qz; /* aka qyqz */
 2585              		.loc 2 408 0
 2586 0038 65EE843A 		fmuls	s7, s11, s8
 2587              	.LVL267:
 2588              		.loc 2 420 0
 2589 003c 66EEA16A 		fmuls	s13, s13, s3
 2590 0040 B1EE642A 		fnegs	s4, s9
 416:math/pprz_algebra_float.c ****   m12 += qiqx;
 2591              		.loc 2 416 0
 2592 0044 B0EE637A 		fcpys	s14, s7
 2593 0048 A2EE057A 		vfma.f32	s14, s4, s10
 2594              		.loc 2 420 0
 2595 004c E0EE816A 		vfma.f32	s13, s1, s2
 412:math/pprz_algebra_float.c ****   const float m20  = m02 + qiqy;
 2596              		.loc 2 412 0
 2597 0050 A2EE043A 		vfma.f32	s6, s4, s8
 2598              	.LVL268:
 2599              		.loc 2 420 0
 2600 0054 E7EE226A 		vfma.f32	s13, s14, s5
 418:math/pprz_algebra_float.c ****   const float m22  = qi2_M1_2 + q->qz * q->qz;
 2601              		.loc 2 418 0
 2602 0058 B0EE467A 		fcpys	s14, s12
 2603 005c A5EE057A 		vfma.f32	s14, s10, s10
 2604              		.loc 2 420 0
 2605 0060 76EEA66A 		fadds	s13, s13, s13
 409:math/pprz_algebra_float.c **** 
 2606              		.loc 2 409 0
 2607 0064 65EE047A 		fmuls	s15, s10, s8
 2608              	.LVL269:
 2609              		.loc 2 420 0
 2610 0068 C0ED006A 		fsts	s13, [r0]
 421:math/pprz_algebra_float.c ****   v_out->y = 2 * (m10 * v_in->x + m11 * v_in->y + m12 * v_in->z);
 2611              		.loc 2 421 0
 2612 006c D2ED006A 		flds	s13, [r2]
 2613 0070 27EE217A 		fmuls	s14, s14, s3
 2614              	.LVL270:
 417:math/pprz_algebra_float.c ****   const float m11  = qi2_M1_2 + q->qy * q->qy;
 2615              		.loc 2 417 0
 2616 0074 B0EE671A 		fcpys	s2, s15
 2617 0078 A4EEA51A 		vfma.f32	s2, s9, s11
 2618              	.LVL271:
 2619              		.loc 2 421 0
 2620 007c A3EE267A 		vfma.f32	s14, s6, s13
 414:math/pprz_algebra_float.c ****   m01 += qiqz;
 2621              		.loc 2 414 0
 2622 0080 E2EE257A 		vfma.f32	s15, s4, s11
 2623              	.LVL272:
 2624              		.loc 2 421 0
 2625 0084 A1EE227A 		vfma.f32	s14, s2, s5
 413:math/pprz_algebra_float.c ****   const float m21  = m12 - qiqx;
 2626              		.loc 2 413 0
 2627 0088 E4EE853A 		vfma.f32	s7, s9, s10
 2628              	.LVL273:
 2629              		.loc 2 421 0
 2630 008c 37EE077A 		fadds	s14, s14, s14
 419:math/pprz_algebra_float.c ****   v_out->x = 2 * (m00 * v_in->x + m01 * v_in->y + m02 * v_in->z);
 2631              		.loc 2 419 0
 2632 0090 A4EE046A 		vfma.f32	s12, s8, s8
 2633              	.LVL274:
 2634              		.loc 2 421 0
 2635 0094 80ED017A 		fsts	s14, [r0, #4]
 422:math/pprz_algebra_float.c ****   v_out->z = 2 * (m20 * v_in->x + m21 * v_in->y + m22 * v_in->z);
 2636              		.loc 2 422 0
 2637 0098 92ED017A 		flds	s14, [r2, #4]
 2638 009c 67EE877A 		fmuls	s15, s15, s14
 2639              	.LVL275:
 2640 00a0 E3EEA67A 		vfma.f32	s15, s7, s13
 2641 00a4 E6EE227A 		vfma.f32	s15, s12, s5
 2642 00a8 77EEA77A 		fadds	s15, s15, s15
 2643 00ac C0ED027A 		fsts	s15, [r0, #8]
 2644 00b0 7047     		bx	lr
 2645              		.cfi_endproc
 2646              	.LFE60:
 2648              		.section	.text.float_quat_derivative,"ax",%progbits
 2649              		.align	1
 2650              		.global	float_quat_derivative
 2651              		.thumb
 2652              		.thumb_func
 2654              	float_quat_derivative:
 2655              	.LFB61:
 423:math/pprz_algebra_float.c **** }
 424:math/pprz_algebra_float.c **** 
 425:math/pprz_algebra_float.c **** /** Quaternion derivative from rotational velocity.
 426:math/pprz_algebra_float.c ****  * qd = -0.5*omega(r) * q
 427:math/pprz_algebra_float.c ****  * or equally:
 428:math/pprz_algebra_float.c ****  * qd = 0.5 * q * omega(r)
 429:math/pprz_algebra_float.c ****  */
 430:math/pprz_algebra_float.c **** void float_quat_derivative(struct FloatQuat *qd, struct FloatRates *r, struct FloatQuat *q)
 431:math/pprz_algebra_float.c **** {
 2656              		.loc 2 431 0
 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 0, uses_anonymous_args = 0
 2660              		@ link register save eliminated.
 2661              	.LVL276:
 432:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2662              		.loc 2 432 0
 2663 0000 91ED015A 		flds	s10, [r1, #4]
 2664 0004 92ED027A 		flds	s14, [r2, #8]
 2665 0008 D1ED004A 		flds	s9, [r1]
 2666 000c D2ED017A 		flds	s15, [r2, #4]
 2667 0010 D1ED025A 		flds	s11, [r1, #8]
 2668 0014 92ED034A 		flds	s8, [r2, #12]
 2669 0018 65EE076A 		fmuls	s13, s10, s14
 2670 001c BEEE006A 		fconsts	s12, #224
 2671 0020 E4EEA76A 		vfma.f32	s13, s9, s15
 2672 0024 27EE657A 		fnmuls	s14, s14, s11
 2673 0028 E5EE846A 		vfma.f32	s13, s11, s8
 433:math/pprz_algebra_float.c ****   qd->qx = -0.5 * (-r->p * q->qi - r->r * q->qy + r->q * q->qz);
 2674              		.loc 2 433 0
 2675 002c F1EE643A 		fnegs	s7, s9
 432:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2676              		.loc 2 432 0
 2677 0030 66EE866A 		fmuls	s13, s13, s12
 2678 0034 C0ED006A 		fsts	s13, [r0]
 2679              		.loc 2 433 0
 2680 0038 D2ED006A 		flds	s13, [r2]
 2681 003c A3EEA67A 		vfma.f32	s14, s7, s13
 2682 0040 A5EE047A 		vfma.f32	s14, s10, s8
 2683 0044 27EE067A 		fmuls	s14, s14, s12
 2684 0048 80ED017A 		fsts	s14, [r0, #4]
 434:math/pprz_algebra_float.c ****   qd->qy = -0.5 * (-r->q * q->qi + r->r * q->qx - r->p * q->qz);
 2685              		.loc 2 434 0
 2686 004c D2ED017A 		flds	s15, [r2, #4]
 2687 0050 25EEA77A 		fmuls	s14, s11, s15
 2688 0054 67EEC57A 		fnmuls	s15, s15, s10
 2689 0058 A5EE667A 		vfms.f32	s14, s10, s13
 435:math/pprz_algebra_float.c ****   qd->qz = -0.5 * (-r->r * q->qi - r->q * q->qx + r->p * q->qy);
 2690              		.loc 2 435 0
 2691 005c E5EEE67A 		vfms.f32	s15, s11, s13
 434:math/pprz_algebra_float.c ****   qd->qy = -0.5 * (-r->q * q->qi + r->r * q->qx - r->p * q->qz);
 2692              		.loc 2 434 0
 2693 0060 A3EE847A 		vfma.f32	s14, s7, s8
 2694 0064 27EE067A 		fmuls	s14, s14, s12
 2695 0068 80ED027A 		fsts	s14, [r0, #8]
 2696              		.loc 2 435 0
 2697 006c 92ED027A 		flds	s14, [r2, #8]
 2698 0070 E4EE877A 		vfma.f32	s15, s9, s14
 2699 0074 67EE867A 		fmuls	s15, s15, s12
 2700 0078 C0ED037A 		fsts	s15, [r0, #12]
 2701 007c 7047     		bx	lr
 2702              		.cfi_endproc
 2703              	.LFE61:
 2705              		.section	.text.float_quat_derivative_lagrange,"ax",%progbits
 2706              		.align	1
 2707              		.global	float_quat_derivative_lagrange
 2708              		.thumb
 2709              		.thumb_func
 2711              	float_quat_derivative_lagrange:
 2712              	.LFB62:
 436:math/pprz_algebra_float.c **** }
 437:math/pprz_algebra_float.c **** 
 438:math/pprz_algebra_float.c **** /** Quaternion derivative from rotational velocity.
 439:math/pprz_algebra_float.c ****  * qd = -0.5*omega(r) * q
 440:math/pprz_algebra_float.c ****  */
 441:math/pprz_algebra_float.c **** void float_quat_derivative_lagrange(struct FloatQuat *qd, struct FloatRates *r, struct FloatQuat *q
 442:math/pprz_algebra_float.c **** {
 2713              		.loc 2 442 0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 0
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 2717              	.LVL277:
 2718 0000 70B5     		push	{r4, r5, r6, lr}
 2719              		.cfi_def_cfa_offset 16
 2720              		.cfi_offset 4, -16
 2721              		.cfi_offset 5, -12
 2722              		.cfi_offset 6, -8
 2723              		.cfi_offset 14, -4
 2724              		.loc 2 442 0
 2725 0002 0546     		mov	r5, r0
 443:math/pprz_algebra_float.c ****   const float K_LAGRANGE = 1.;
 444:math/pprz_algebra_float.c ****   const float c = K_LAGRANGE * (1 - float_quat_norm(q)) / -0.5;
 2726              		.loc 2 444 0
 2727 0004 1046     		mov	r0, r2
 2728              	.LVL278:
 442:math/pprz_algebra_float.c ****   const float K_LAGRANGE = 1.;
 2729              		.loc 2 442 0
 2730 0006 1446     		mov	r4, r2
 2731 0008 0E46     		mov	r6, r1
 2732              		.loc 2 444 0
 2733 000a FFF7FEFF 		bl	float_quat_norm
 2734              	.LVL279:
 2735 000e F7EE007A 		fconsts	s15, #112
 445:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (c * q->qi + r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2736              		.loc 2 445 0
 2737 0012 96ED004A 		flds	s8, [r6]
 2738 0016 D4ED016A 		flds	s13, [r4, #4]
 2739 001a 94ED007A 		flds	s14, [r4]
 2740 001e D6ED014A 		flds	s9, [r6, #4]
 2741 0022 D4ED023A 		flds	s7, [r4, #8]
 2742 0026 94ED035A 		flds	s10, [r4, #12]
 444:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (c * q->qi + r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2743              		.loc 2 444 0
 2744 002a 37EEC00A 		fsubs	s0, s15, s0
 2745 002e F8EE007A 		fconsts	s15, #128
 2746 0032 20EE270A 		fmuls	s0, s0, s15
 2747              	.LVL280:
 2748              		.loc 2 445 0
 2749 0036 24EE266A 		fmuls	s12, s8, s13
 2750 003a D6ED027A 		flds	s15, [r6, #8]
 2751 003e A0EE076A 		vfma.f32	s12, s0, s14
 2752 0042 FEEE005A 		fconsts	s11, #224
 2753 0046 A4EEA36A 		vfma.f32	s12, s9, s7
 446:math/pprz_algebra_float.c ****   qd->qx = -0.5 * (-r->p * q->qi +      c * q->qx - r->r * q->qy + r->q * q->qz);
 2754              		.loc 2 446 0
 2755 004a 60EE266A 		fmuls	s13, s0, s13
 445:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (c * q->qi + r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2756              		.loc 2 445 0
 2757 004e A7EE856A 		vfma.f32	s12, s15, s10
 2758              		.loc 2 446 0
 2759 0052 F1EE442A 		fnegs	s5, s8
 445:math/pprz_algebra_float.c ****   qd->qi = -0.5 * (c * q->qi + r->p * q->qx + r->q * q->qy + r->r * q->qz);
 2760              		.loc 2 445 0
 2761 0056 26EE256A 		fmuls	s12, s12, s11
 2762 005a B1EE673A 		fnegs	s6, s15
 2763 005e 85ED006A 		fsts	s12, [r5]
 2764              		.loc 2 446 0
 2765 0062 94ED006A 		flds	s12, [r4]
 2766 0066 E2EE866A 		vfma.f32	s13, s5, s12
 2767 006a E3EE236A 		vfma.f32	s13, s6, s7
 2768 006e E4EE856A 		vfma.f32	s13, s9, s10
 2769 0072 66EEA56A 		fmuls	s13, s13, s11
 2770 0076 C5ED016A 		fsts	s13, [r5, #4]
 447:math/pprz_algebra_float.c ****   qd->qy = -0.5 * (-r->q * q->qi + r->r * q->qx +      c * q->qy - r->p * q->qz);
 2771              		.loc 2 447 0
 2772 007a 94ED017A 		flds	s14, [r4, #4]
 2773 007e 67EE877A 		fmuls	s15, s15, s14
 2774 0082 E4EEC67A 		vfms.f32	s15, s9, s12
 2775 0086 E0EE237A 		vfma.f32	s15, s0, s7
 2776 008a E2EE857A 		vfma.f32	s15, s5, s10
 2777 008e 67EEA57A 		fmuls	s15, s15, s11
 2778 0092 C5ED027A 		fsts	s15, [r5, #8]
 2779 0096 67EE647A 		fnmuls	s15, s14, s9
 448:math/pprz_algebra_float.c ****   qd->qz = -0.5 * (-r->r * q->qi - r->q * q->qx + r->p * q->qy +      c * q->qz);
 2780              		.loc 2 448 0
 2781 009a 94ED027A 		flds	s14, [r4, #8]
 2782 009e E3EE067A 		vfma.f32	s15, s6, s12
 2783 00a2 E4EE077A 		vfma.f32	s15, s8, s14
 2784 00a6 E0EE057A 		vfma.f32	s15, s0, s10
 2785 00aa 67EEA57A 		fmuls	s15, s15, s11
 2786 00ae C5ED037A 		fsts	s15, [r5, #12]
 2787 00b2 70BD     		pop	{r4, r5, r6, pc}
 2788              		.cfi_endproc
 2789              	.LFE62:
 2791              		.section	.text.float_quat_of_eulers,"ax",%progbits
 2792              		.align	1
 2793              		.global	float_quat_of_eulers
 2794              		.thumb
 2795              		.thumb_func
 2797              	float_quat_of_eulers:
 2798              	.LFB63:
 449:math/pprz_algebra_float.c **** }
 450:math/pprz_algebra_float.c **** 
 451:math/pprz_algebra_float.c **** void float_quat_of_eulers(struct FloatQuat *q, struct FloatEulers *e)
 452:math/pprz_algebra_float.c **** {
 2799              		.loc 2 452 0
 2800              		.cfi_startproc
 2801              		@ args = 0, pretend = 0, frame = 0
 2802              		@ frame_needed = 0, uses_anonymous_args = 0
 2803              	.LVL281:
 2804 0000 10B5     		push	{r4, lr}
 2805              		.cfi_def_cfa_offset 8
 2806              		.cfi_offset 4, -8
 2807              		.cfi_offset 14, -4
 2808 0002 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 2809              		.cfi_def_cfa_offset 32
 2810              		.cfi_offset 80, -32
 2811              		.cfi_offset 81, -28
 2812              		.cfi_offset 82, -24
 2813              		.cfi_offset 83, -20
 2814              		.cfi_offset 84, -16
 2815              		.cfi_offset 85, -12
 453:math/pprz_algebra_float.c **** 
 454:math/pprz_algebra_float.c ****   const float phi2   = e->phi / 2.0;
 2816              		.loc 2 454 0
 2817 0006 D1ED008A 		flds	s17, [r1]
 455:math/pprz_algebra_float.c ****   const float theta2 = e->theta / 2.0;
 456:math/pprz_algebra_float.c ****   const float psi2   = e->psi / 2.0;
 2818              		.loc 2 456 0
 2819 000a D1ED027A 		flds	s15, [r1, #8]
 455:math/pprz_algebra_float.c ****   const float theta2 = e->theta / 2.0;
 2820              		.loc 2 455 0
 2821 000e 91ED019A 		flds	s18, [r1, #4]
 454:math/pprz_algebra_float.c ****   const float theta2 = e->theta / 2.0;
 2822              		.loc 2 454 0
 2823 0012 F6EE009A 		fconsts	s19, #96
 2824 0016 68EEA98A 		fmuls	s17, s17, s19
 2825              	.LVL282:
 452:math/pprz_algebra_float.c **** 
 2826              		.loc 2 452 0
 2827 001a 0446     		mov	r4, r0
 457:math/pprz_algebra_float.c **** 
 458:math/pprz_algebra_float.c ****   const float s_phi2   = sinf(phi2);
 2828              		.loc 2 458 0
 2829 001c 18EE900A 		fmrs	r0, s17
 2830              	.LVL283:
 455:math/pprz_algebra_float.c ****   const float psi2   = e->psi / 2.0;
 2831              		.loc 2 455 0
 2832 0020 29EE299A 		fmuls	s18, s18, s19
 2833              	.LVL284:
 456:math/pprz_algebra_float.c **** 
 2834              		.loc 2 456 0
 2835 0024 67EEA99A 		fmuls	s19, s15, s19
 2836              	.LVL285:
 2837              		.loc 2 458 0
 2838 0028 FFF7FEFF 		bl	sinf
 2839              	.LVL286:
 2840 002c 08EE100A 		fmsr	s16, r0
 2841              	.LVL287:
 459:math/pprz_algebra_float.c ****   const float c_phi2   = cosf(phi2);
 2842              		.loc 2 459 0
 2843 0030 18EE900A 		fmrs	r0, s17
 2844              	.LVL288:
 2845 0034 FFF7FEFF 		bl	cosf
 2846              	.LVL289:
 2847 0038 08EE900A 		fmsr	s17, r0
 2848              	.LVL290:
 460:math/pprz_algebra_float.c ****   const float s_theta2 = sinf(theta2);
 2849              		.loc 2 460 0
 2850 003c 19EE100A 		fmrs	r0, s18
 2851              	.LVL291:
 2852 0040 FFF7FEFF 		bl	sinf
 2853              	.LVL292:
 2854 0044 0AEE100A 		fmsr	s20, r0
 2855              	.LVL293:
 461:math/pprz_algebra_float.c ****   const float c_theta2 = cosf(theta2);
 2856              		.loc 2 461 0
 2857 0048 19EE100A 		fmrs	r0, s18
 2858              	.LVL294:
 2859 004c FFF7FEFF 		bl	cosf
 2860              	.LVL295:
 2861 0050 0AEE900A 		fmsr	s21, r0
 2862              	.LVL296:
 462:math/pprz_algebra_float.c ****   const float s_psi2   = sinf(psi2);
 2863              		.loc 2 462 0
 2864 0054 19EE900A 		fmrs	r0, s19
 2865              	.LVL297:
 2866 0058 FFF7FEFF 		bl	sinf
 2867              	.LVL298:
 2868 005c 09EE100A 		fmsr	s18, r0
 2869              	.LVL299:
 463:math/pprz_algebra_float.c ****   const float c_psi2   = cosf(psi2);
 2870              		.loc 2 463 0
 2871 0060 19EE900A 		fmrs	r0, s19
 2872              	.LVL300:
 2873 0064 FFF7FEFF 		bl	cosf
 2874              	.LVL301:
 464:math/pprz_algebra_float.c **** 
 465:math/pprz_algebra_float.c ****   q->qi =  c_phi2 * c_theta2 * c_psi2 + s_phi2 * s_theta2 * s_psi2;
 2875              		.loc 2 465 0
 2876 0068 28EE0A6A 		fmuls	s12, s16, s20
 463:math/pprz_algebra_float.c ****   const float c_psi2   = cosf(psi2);
 2877              		.loc 2 463 0
 2878 006c 07EE900A 		fmsr	s15, r0
 2879              	.LVL302:
 2880              		.loc 2 465 0
 2881 0070 68EEAA6A 		fmuls	s13, s17, s21
 2882 0074 26EE097A 		fmuls	s14, s12, s18
 466:math/pprz_algebra_float.c ****   q->qx = -c_phi2 * s_theta2 * s_psi2 + s_phi2 * c_theta2 * c_psi2;
 2883              		.loc 2 466 0
 2884 0078 28EE2A8A 		fmuls	s16, s16, s21
 2885              	.LVL303:
 465:math/pprz_algebra_float.c ****   q->qx = -c_phi2 * s_theta2 * s_psi2 + s_phi2 * c_theta2 * c_psi2;
 2886              		.loc 2 465 0
 2887 007c A6EEA77A 		vfma.f32	s14, s13, s15
 2888              		.loc 2 466 0
 2889 0080 68EECA5A 		fnmuls	s11, s17, s20
 465:math/pprz_algebra_float.c ****   q->qx = -c_phi2 * s_theta2 * s_psi2 + s_phi2 * c_theta2 * c_psi2;
 2890              		.loc 2 465 0
 2891 0084 84ED007A 		fsts	s14, [r4]
 467:math/pprz_algebra_float.c ****   q->qy =  c_phi2 * s_theta2 * c_psi2 + s_phi2 * c_theta2 * s_psi2;
 2892              		.loc 2 467 0
 2893 0088 68EE8A8A 		fmuls	s17, s17, s20
 2894              	.LVL304:
 466:math/pprz_algebra_float.c ****   q->qx = -c_phi2 * s_theta2 * s_psi2 + s_phi2 * c_theta2 * c_psi2;
 2895              		.loc 2 466 0
 2896 008c 28EE277A 		fmuls	s14, s16, s15
 2897              		.loc 2 467 0
 2898 0090 28EE098A 		fmuls	s16, s16, s18
 466:math/pprz_algebra_float.c ****   q->qx = -c_phi2 * s_theta2 * s_psi2 + s_phi2 * c_theta2 * c_psi2;
 2899              		.loc 2 466 0
 2900 0094 A5EE897A 		vfma.f32	s14, s11, s18
 2901              		.loc 2 467 0
 2902 0098 A8EEA78A 		vfma.f32	s16, s17, s15
 2903 009c 67EEC67A 		fnmuls	s15, s15, s12
 2904 00a0 84ED028A 		fsts	s16, [r4, #8]
 468:math/pprz_algebra_float.c ****   q->qz =  c_phi2 * c_theta2 * s_psi2 - s_phi2 * s_theta2 * c_psi2;
 2905              		.loc 2 468 0
 2906 00a4 E6EE897A 		vfma.f32	s15, s13, s18
 469:math/pprz_algebra_float.c **** }
 2907              		.loc 2 469 0
 2908 00a8 BDEC068B 		fldmfdd	sp!, {d8-d10}
 2909              		.cfi_restore 84
 2910              		.cfi_restore 85
 2911              		.cfi_restore 82
 2912              		.cfi_restore 83
 2913              		.cfi_restore 80
 2914              		.cfi_restore 81
 2915              		.cfi_def_cfa_offset 8
 2916              	.LVL305:
 466:math/pprz_algebra_float.c ****   q->qy =  c_phi2 * s_theta2 * c_psi2 + s_phi2 * c_theta2 * s_psi2;
 2917              		.loc 2 466 0
 2918 00ac 84ED017A 		fsts	s14, [r4, #4]
 468:math/pprz_algebra_float.c ****   q->qz =  c_phi2 * c_theta2 * s_psi2 - s_phi2 * s_theta2 * c_psi2;
 2919              		.loc 2 468 0
 2920 00b0 C4ED037A 		fsts	s15, [r4, #12]
 2921              		.loc 2 469 0
 2922 00b4 10BD     		pop	{r4, pc}
 2923              		.cfi_endproc
 2924              	.LFE63:
 2926              		.section	.text.float_quat_of_axis_angle,"ax",%progbits
 2927              		.align	1
 2928              		.global	float_quat_of_axis_angle
 2929              		.thumb
 2930              		.thumb_func
 2932              	float_quat_of_axis_angle:
 2933              	.LFB64:
 470:math/pprz_algebra_float.c **** 
 471:math/pprz_algebra_float.c **** void float_quat_of_axis_angle(struct FloatQuat *q, const struct FloatVect3 *uv, float angle)
 472:math/pprz_algebra_float.c **** {
 2934              		.loc 2 472 0
 2935              		.cfi_startproc
 2936              		@ args = 0, pretend = 0, frame = 0
 2937              		@ frame_needed = 0, uses_anonymous_args = 0
 2938              	.LVL306:
 2939 0000 38B5     		push	{r3, r4, r5, lr}
 2940              		.cfi_def_cfa_offset 16
 2941              		.cfi_offset 3, -16
 2942              		.cfi_offset 4, -12
 2943              		.cfi_offset 5, -8
 2944              		.cfi_offset 14, -4
 473:math/pprz_algebra_float.c ****   const float san = sinf(angle / 2.);
 2945              		.loc 2 473 0
 2946 0002 07EE902A 		fmsr	s15, r2
 472:math/pprz_algebra_float.c ****   const float san = sinf(angle / 2.);
 2947              		.loc 2 472 0
 2948 0006 2DED028B 		fstmfdd	sp!, {d8}
 2949              		.cfi_def_cfa_offset 24
 2950              		.cfi_offset 80, -24
 2951              		.cfi_offset 81, -20
 2952              		.loc 2 473 0
 2953 000a F6EE008A 		fconsts	s17, #96
 2954 000e 67EEA88A 		fmuls	s17, s15, s17
 472:math/pprz_algebra_float.c ****   const float san = sinf(angle / 2.);
 2955              		.loc 2 472 0
 2956 0012 0446     		mov	r4, r0
 2957              		.loc 2 473 0
 2958 0014 18EE900A 		fmrs	r0, s17
 2959              	.LVL307:
 472:math/pprz_algebra_float.c ****   const float san = sinf(angle / 2.);
 2960              		.loc 2 472 0
 2961 0018 0D46     		mov	r5, r1
 2962              		.loc 2 473 0
 2963 001a FFF7FEFF 		bl	sinf
 2964              	.LVL308:
 2965 001e 08EE100A 		fmsr	s16, r0
 2966              	.LVL309:
 474:math/pprz_algebra_float.c ****   q->qi = cosf(angle / 2.);
 2967              		.loc 2 474 0
 2968 0022 18EE900A 		fmrs	r0, s17
 2969              	.LVL310:
 2970 0026 FFF7FEFF 		bl	cosf
 2971              	.LVL311:
 475:math/pprz_algebra_float.c ****   q->qx = san * uv->x;
 2972              		.loc 2 475 0
 2973 002a D5ED007A 		flds	s15, [r5]
 474:math/pprz_algebra_float.c ****   q->qi = cosf(angle / 2.);
 2974              		.loc 2 474 0
 2975 002e 2060     		str	r0, [r4]	@ float
 2976              		.loc 2 475 0
 2977 0030 68EE277A 		fmuls	s15, s16, s15
 2978 0034 C4ED017A 		fsts	s15, [r4, #4]
 476:math/pprz_algebra_float.c ****   q->qy = san * uv->y;
 2979              		.loc 2 476 0
 2980 0038 D5ED017A 		flds	s15, [r5, #4]
 2981 003c 68EE277A 		fmuls	s15, s16, s15
 2982 0040 C4ED027A 		fsts	s15, [r4, #8]
 477:math/pprz_algebra_float.c ****   q->qz = san * uv->z;
 2983              		.loc 2 477 0
 2984 0044 D5ED027A 		flds	s15, [r5, #8]
 2985 0048 28EE278A 		fmuls	s16, s16, s15
 2986              	.LVL312:
 2987 004c 84ED038A 		fsts	s16, [r4, #12]
 478:math/pprz_algebra_float.c **** }
 2988              		.loc 2 478 0
 2989 0050 BDEC028B 		fldmfdd	sp!, {d8}
 2990              		.cfi_restore 80
 2991              		.cfi_restore 81
 2992              		.cfi_def_cfa_offset 16
 2993 0054 38BD     		pop	{r3, r4, r5, pc}
 2994              		.cfi_endproc
 2995              	.LFE64:
 2997              		.section	.text.float_quat_of_orientation_vect,"ax",%progbits
 2998              		.align	1
 2999              		.global	float_quat_of_orientation_vect
 3000              		.thumb
 3001              		.thumb_func
 3003              	float_quat_of_orientation_vect:
 3004              	.LFB65:
 479:math/pprz_algebra_float.c **** 
 480:math/pprz_algebra_float.c **** void float_quat_of_orientation_vect(struct FloatQuat *q, const struct FloatVect3 *ov)
 481:math/pprz_algebra_float.c **** {
 3005              		.loc 2 481 0
 3006              		.cfi_startproc
 3007              		@ args = 0, pretend = 0, frame = 0
 3008              		@ frame_needed = 0, uses_anonymous_args = 0
 3009              	.LVL313:
 482:math/pprz_algebra_float.c ****   const float ov_norm = sqrtf(ov->x * ov->x + ov->y * ov->y + ov->z * ov->z);
 3010              		.loc 2 482 0
 3011 0000 D1ED017A 		flds	s15, [r1, #4]
 3012 0004 D1ED006A 		flds	s13, [r1]
 3013 0008 91ED027A 		flds	s14, [r1, #8]
 3014 000c 67EEA77A 		fmuls	s15, s15, s15
 481:math/pprz_algebra_float.c ****   const float ov_norm = sqrtf(ov->x * ov->x + ov->y * ov->y + ov->z * ov->z);
 3015              		.loc 2 481 0
 3016 0010 38B5     		push	{r3, r4, r5, lr}
 3017              		.cfi_def_cfa_offset 16
 3018              		.cfi_offset 3, -16
 3019              		.cfi_offset 4, -12
 3020              		.cfi_offset 5, -8
 3021              		.cfi_offset 14, -4
 3022              		.loc 2 482 0
 3023 0012 E6EEA67A 		vfma.f32	s15, s13, s13
 481:math/pprz_algebra_float.c ****   const float ov_norm = sqrtf(ov->x * ov->x + ov->y * ov->y + ov->z * ov->z);
 3024              		.loc 2 481 0
 3025 0016 0446     		mov	r4, r0
 3026 0018 0D46     		mov	r5, r1
 3027 001a 2DED028B 		fstmfdd	sp!, {d8}
 3028              		.cfi_def_cfa_offset 24
 3029              		.cfi_offset 80, -24
 3030              		.cfi_offset 81, -20
 3031              		.loc 2 482 0
 3032 001e E7EE077A 		vfma.f32	s15, s14, s14
 3033 0022 17EE900A 		fmrs	r0, s15
 3034              	.LVL314:
 3035 0026 FFF7FEFF 		bl	sqrtf
 3036              	.LVL315:
 3037 002a 08EE100A 		fmsr	s16, r0
 3038              	.LVL316:
 483:math/pprz_algebra_float.c ****   if (ov_norm < 1e-8) {
 3039              		.loc 2 483 0
 3040 002e FFF7FEFF 		bl	__aeabi_f2d
 3041              	.LVL317:
 3042 0032 1BA3     		adr	r3, .L87
 3043 0034 D3E90023 		ldrd	r2, [r3]
 3044 0038 FFF7FEFF 		bl	__aeabi_dcmplt
 3045              	.LVL318:
 3046 003c 38B1     		cbz	r0, .L86
 484:math/pprz_algebra_float.c ****     q->qi = 1;
 3047              		.loc 2 484 0
 3048 003e 4FF07E53 		mov	r3, #1065353216
 3049 0042 2360     		str	r3, [r4]	@ float
 485:math/pprz_algebra_float.c ****     q->qx = 0;
 3050              		.loc 2 485 0
 3051 0044 0023     		movs	r3, #0
 3052 0046 6360     		str	r3, [r4, #4]	@ float
 486:math/pprz_algebra_float.c ****     q->qy = 0;
 3053              		.loc 2 486 0
 3054 0048 A360     		str	r3, [r4, #8]	@ float
 487:math/pprz_algebra_float.c ****     q->qz = 0;
 3055              		.loc 2 487 0
 3056 004a E360     		str	r3, [r4, #12]	@ float
 3057 004c 22E0     		b	.L81
 3058              	.L86:
 3059              	.LBB7:
 488:math/pprz_algebra_float.c ****   } else {
 489:math/pprz_algebra_float.c ****     const float s2_normalized = sinf(ov_norm / 2.0) / ov_norm;
 3060              		.loc 2 489 0
 3061 004e F6EE008A 		fconsts	s17, #96
 3062 0052 68EE288A 		fmuls	s17, s16, s17
 3063 0056 18EE900A 		fmrs	r0, s17
 3064 005a FFF7FEFF 		bl	sinf
 3065              	.LVL319:
 3066 005e 07EE900A 		fmsr	s15, r0
 3067 0062 87EE888A 		fdivs	s16, s15, s16
 3068              	.LVL320:
 490:math/pprz_algebra_float.c ****     q->qi = cosf(ov_norm / 2.0);
 3069              		.loc 2 490 0
 3070 0066 18EE900A 		fmrs	r0, s17
 3071 006a FFF7FEFF 		bl	cosf
 3072              	.LVL321:
 491:math/pprz_algebra_float.c ****     q->qx = ov->x * s2_normalized;
 3073              		.loc 2 491 0
 3074 006e D5ED007A 		flds	s15, [r5]
 490:math/pprz_algebra_float.c ****     q->qi = cosf(ov_norm / 2.0);
 3075              		.loc 2 490 0
 3076 0072 2060     		str	r0, [r4]	@ float
 3077              		.loc 2 491 0
 3078 0074 67EE887A 		fmuls	s15, s15, s16
 3079 0078 C4ED017A 		fsts	s15, [r4, #4]
 492:math/pprz_algebra_float.c ****     q->qy = ov->y * s2_normalized;
 3080              		.loc 2 492 0
 3081 007c D5ED017A 		flds	s15, [r5, #4]
 3082 0080 67EE887A 		fmuls	s15, s15, s16
 3083 0084 C4ED027A 		fsts	s15, [r4, #8]
 493:math/pprz_algebra_float.c ****     q->qz = ov->z * s2_normalized;
 3084              		.loc 2 493 0
 3085 0088 D5ED027A 		flds	s15, [r5, #8]
 3086 008c 27EE888A 		fmuls	s16, s15, s16
 3087              	.LVL322:
 3088 0090 84ED038A 		fsts	s16, [r4, #12]
 3089              	.L81:
 3090              	.LBE7:
 494:math/pprz_algebra_float.c ****   }
 495:math/pprz_algebra_float.c **** }
 3091              		.loc 2 495 0
 3092 0094 BDEC028B 		fldmfdd	sp!, {d8}
 3093              		.cfi_restore 80
 3094              		.cfi_restore 81
 3095              		.cfi_def_cfa_offset 16
 3096 0098 38BD     		pop	{r3, r4, r5, pc}
 3097              	.LVL323:
 3098              	.L88:
 3099 009a 00BFAFF3 		.align	3
 3099      0080
 3100              	.L87:
 3101 00a0 3A8C30E2 		.word	-500134854
 3102 00a4 8E79453E 		.word	1044740494
 3103              		.cfi_endproc
 3104              	.LFE65:
 3106              		.section	.text.float_quat_of_rmat,"ax",%progbits
 3107              		.align	1
 3108              		.global	float_quat_of_rmat
 3109              		.thumb
 3110              		.thumb_func
 3112              	float_quat_of_rmat:
 3113              	.LFB66:
 496:math/pprz_algebra_float.c **** 
 497:math/pprz_algebra_float.c **** void float_quat_of_rmat(struct FloatQuat *q, struct FloatRMat *rm)
 498:math/pprz_algebra_float.c **** {
 3114              		.loc 2 498 0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 0
 3117              		@ frame_needed = 0, uses_anonymous_args = 0
 3118              	.LVL324:
 499:math/pprz_algebra_float.c ****   const float tr = RMAT_TRACE(*rm);
 3119              		.loc 2 499 0
 3120 0000 D1ED006A 		flds	s13, [r1]
 3121 0004 91ED047A 		flds	s14, [r1, #16]
 3122 0008 D1ED087A 		flds	s15, [r1, #32]
 3123 000c 76EE875A 		fadds	s11, s13, s14
 498:math/pprz_algebra_float.c ****   const float tr = RMAT_TRACE(*rm);
 3124              		.loc 2 498 0
 3125 0010 38B5     		push	{r3, r4, r5, lr}
 3126              		.cfi_def_cfa_offset 16
 3127              		.cfi_offset 3, -16
 3128              		.cfi_offset 4, -12
 3129              		.cfi_offset 5, -8
 3130              		.cfi_offset 14, -4
 3131              		.loc 2 499 0
 3132 0012 75EEA75A 		fadds	s11, s11, s15
 3133              	.LVL325:
 498:math/pprz_algebra_float.c ****   const float tr = RMAT_TRACE(*rm);
 3134              		.loc 2 498 0
 3135 0016 2DED028B 		fstmfdd	sp!, {d8}
 3136              		.cfi_def_cfa_offset 24
 3137              		.cfi_offset 80, -24
 3138              		.cfi_offset 81, -20
 500:math/pprz_algebra_float.c ****   if (tr > 0) {
 3139              		.loc 2 500 0
 3140 001a F5EEC05A 		fcmpezs	s11
 3141 001e F1EE10FA 		fmstat
 498:math/pprz_algebra_float.c ****   const float tr = RMAT_TRACE(*rm);
 3142              		.loc 2 498 0
 3143 0022 0546     		mov	r5, r0
 3144 0024 0C46     		mov	r4, r1
 3145 0026 B7EE006A 		fconsts	s12, #112
 3146 002a B6EE008A 		fconsts	s16, #96
 3147              		.loc 2 500 0
 3148 002e 2ADD     		ble	.L102
 3149              	.LBB8:
 501:math/pprz_algebra_float.c ****     const float two_qi = sqrtf(1. + tr);
 3150              		.loc 2 501 0
 3151 0030 75EE867A 		fadds	s15, s11, s12
 3152 0034 17EE900A 		fmrs	r0, s15
 3153              	.LVL326:
 3154 0038 FFF7FEFF 		bl	sqrtf
 3155              	.LVL327:
 3156 003c 07EE100A 		fmsr	s14, r0
 3157              	.LVL328:
 502:math/pprz_algebra_float.c ****     const float four_qi = 2. * two_qi;
 503:math/pprz_algebra_float.c ****     q->qi = 0.5 * two_qi;
 504:math/pprz_algebra_float.c ****     q->qx = (RMAT_ELMT(*rm, 1, 2) - RMAT_ELMT(*rm, 2, 1)) / four_qi;
 3158              		.loc 2 504 0
 3159 0040 D4ED077A 		flds	s15, [r4, #28]
 502:math/pprz_algebra_float.c ****     const float four_qi = 2. * two_qi;
 3160              		.loc 2 502 0
 3161 0044 77EE076A 		fadds	s13, s14, s14
 3162              	.LVL329:
 503:math/pprz_algebra_float.c ****     q->qx = (RMAT_ELMT(*rm, 1, 2) - RMAT_ELMT(*rm, 2, 1)) / four_qi;
 3163              		.loc 2 503 0
 3164 0048 27EE088A 		fmuls	s16, s14, s16
 3165              		.loc 2 504 0
 3166 004c 94ED057A 		flds	s14, [r4, #20]
 503:math/pprz_algebra_float.c ****     q->qx = (RMAT_ELMT(*rm, 1, 2) - RMAT_ELMT(*rm, 2, 1)) / four_qi;
 3167              		.loc 2 503 0
 3168 0050 85ED008A 		fsts	s16, [r5]
 3169              		.loc 2 504 0
 3170 0054 37EE677A 		fsubs	s14, s14, s15
 505:math/pprz_algebra_float.c ****     q->qy = (RMAT_ELMT(*rm, 2, 0) - RMAT_ELMT(*rm, 0, 2)) / four_qi;
 3171              		.loc 2 505 0
 3172 0058 D4ED027A 		flds	s15, [r4, #8]
 504:math/pprz_algebra_float.c ****     q->qy = (RMAT_ELMT(*rm, 2, 0) - RMAT_ELMT(*rm, 0, 2)) / four_qi;
 3173              		.loc 2 504 0
 3174 005c 87EE267A 		fdivs	s14, s14, s13
 3175 0060 85ED017A 		fsts	s14, [r5, #4]
 3176              		.loc 2 505 0
 3177 0064 94ED067A 		flds	s14, [r4, #24]
 3178 0068 37EE677A 		fsubs	s14, s14, s15
 506:math/pprz_algebra_float.c ****     q->qz = (RMAT_ELMT(*rm, 0, 1) - RMAT_ELMT(*rm, 1, 0)) / four_qi;
 3179              		.loc 2 506 0
 3180 006c D4ED037A 		flds	s15, [r4, #12]
 505:math/pprz_algebra_float.c ****     q->qy = (RMAT_ELMT(*rm, 2, 0) - RMAT_ELMT(*rm, 0, 2)) / four_qi;
 3181              		.loc 2 505 0
 3182 0070 87EE267A 		fdivs	s14, s14, s13
 3183 0074 85ED027A 		fsts	s14, [r5, #8]
 3184              		.loc 2 506 0
 3185 0078 94ED017A 		flds	s14, [r4, #4]
 3186 007c 77EE677A 		fsubs	s15, s14, s15
 3187 0080 C7EEA67A 		fdivs	s15, s15, s13
 3188 0084 96E0     		b	.L104
 3189              	.LVL330:
 3190              	.L102:
 3191              	.LBE8:
 507:math/pprz_algebra_float.c ****     /*printf("tr > 0\n");*/
 508:math/pprz_algebra_float.c ****   } else {
 509:math/pprz_algebra_float.c ****     if (RMAT_ELMT(*rm, 0, 0) > RMAT_ELMT(*rm, 1, 1) &&
 3192              		.loc 2 509 0
 3193 0086 F4EEC76A 		fcmpes	s13, s14
 3194 008a F1EE10FA 		fmstat
 3195 008e 2FDD     		ble	.L93
 3196              		.loc 2 509 0 is_stmt 0 discriminator 1
 3197 0090 F4EEE76A 		fcmpes	s13, s15
 3198 0094 F1EE10FA 		fmstat
 3199 0098 2ADD     		ble	.L93
 3200              	.LBB9:
 510:math/pprz_algebra_float.c ****         RMAT_ELMT(*rm, 0, 0) > RMAT_ELMT(*rm, 2, 2)) {
 511:math/pprz_algebra_float.c ****       const float two_qx = sqrtf(RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 1, 1)
 3201              		.loc 2 511 0 is_stmt 1
 3202 009a 36EEC77A 		fsubs	s14, s13, s14
 512:math/pprz_algebra_float.c ****                                  - RMAT_ELMT(*rm, 2, 2) + 1);
 3203              		.loc 2 512 0
 3204 009e 77EE677A 		fsubs	s15, s14, s15
 511:math/pprz_algebra_float.c ****                                  - RMAT_ELMT(*rm, 2, 2) + 1);
 3205              		.loc 2 511 0
 3206 00a2 77EE867A 		fadds	s15, s15, s12
 3207 00a6 17EE900A 		fmrs	r0, s15
 3208              	.LVL331:
 3209 00aa FFF7FEFF 		bl	sqrtf
 3210              	.LVL332:
 513:math/pprz_algebra_float.c ****       const float four_qx = 2. * two_qx;
 514:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 1, 2) - RMAT_ELMT(*rm, 2, 1)) / four_qx;
 3211              		.loc 2 514 0
 3212 00ae D4ED077A 		flds	s15, [r4, #28]
 3213 00b2 D4ED056A 		flds	s13, [r4, #20]
 511:math/pprz_algebra_float.c ****                                  - RMAT_ELMT(*rm, 2, 2) + 1);
 3214              		.loc 2 511 0
 3215 00b6 07EE100A 		fmsr	s14, r0
 3216              	.LVL333:
 3217              		.loc 2 514 0
 3218 00ba 76EEE76A 		fsubs	s13, s13, s15
 513:math/pprz_algebra_float.c ****       const float four_qx = 2. * two_qx;
 3219              		.loc 2 513 0
 3220 00be 37EE076A 		fadds	s12, s14, s14
 3221              	.LVL334:
 515:math/pprz_algebra_float.c ****       q->qx = 0.5 * two_qx;
 516:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qx;
 3222              		.loc 2 516 0
 3223 00c2 D4ED037A 		flds	s15, [r4, #12]
 515:math/pprz_algebra_float.c ****       q->qx = 0.5 * two_qx;
 3224              		.loc 2 515 0
 3225 00c6 27EE088A 		fmuls	s16, s14, s16
 3226              		.loc 2 516 0
 3227 00ca 94ED017A 		flds	s14, [r4, #4]
 515:math/pprz_algebra_float.c ****       q->qx = 0.5 * two_qx;
 3228              		.loc 2 515 0
 3229 00ce 85ED018A 		fsts	s16, [r5, #4]
 3230              		.loc 2 516 0
 3231 00d2 37EE277A 		fadds	s14, s14, s15
 514:math/pprz_algebra_float.c ****       q->qx = 0.5 * two_qx;
 3232              		.loc 2 514 0
 3233 00d6 C6EE866A 		fdivs	s13, s13, s12
 3234              		.loc 2 516 0
 3235 00da 87EE067A 		fdivs	s14, s14, s12
 514:math/pprz_algebra_float.c ****       q->qx = 0.5 * two_qx;
 3236              		.loc 2 514 0
 3237 00de C5ED006A 		fsts	s13, [r5]
 3238              		.loc 2 516 0
 3239 00e2 85ED027A 		fsts	s14, [r5, #8]
 517:math/pprz_algebra_float.c ****       q->qz = (RMAT_ELMT(*rm, 2, 0) + RMAT_ELMT(*rm, 0, 2)) / four_qx;
 3240              		.loc 2 517 0
 3241 00e6 D4ED027A 		flds	s15, [r4, #8]
 3242 00ea 94ED067A 		flds	s14, [r4, #24]
 3243 00ee 2EE0     		b	.L105
 3244              	.LVL335:
 3245              	.L93:
 3246              	.LBE9:
 518:math/pprz_algebra_float.c ****       /*printf("m00 largest\n");*/
 519:math/pprz_algebra_float.c ****     } else if (RMAT_ELMT(*rm, 1, 1) > RMAT_ELMT(*rm, 2, 2)) {
 3247              		.loc 2 519 0
 3248 00f0 B4EEE77A 		fcmpes	s14, s15
 3249 00f4 F1EE10FA 		fmstat
 3250 00f8 2EDD     		ble	.L103
 3251              	.LBB10:
 520:math/pprz_algebra_float.c ****       const float two_qy =
 521:math/pprz_algebra_float.c ****         sqrtf(RMAT_ELMT(*rm, 1, 1) - RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 2, 2) + 1);
 3252              		.loc 2 521 0
 3253 00fa 37EE667A 		fsubs	s14, s14, s13
 3254 00fe 77EE677A 		fsubs	s15, s14, s15
 520:math/pprz_algebra_float.c ****       const float two_qy =
 3255              		.loc 2 520 0
 3256 0102 77EE867A 		fadds	s15, s15, s12
 3257 0106 17EE900A 		fmrs	r0, s15
 3258              	.LVL336:
 3259 010a FFF7FEFF 		bl	sqrtf
 3260              	.LVL337:
 522:math/pprz_algebra_float.c ****       const float four_qy = 2. * two_qy;
 523:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 2, 0) - RMAT_ELMT(*rm, 0, 2)) / four_qy;
 3261              		.loc 2 523 0
 3262 010e D4ED027A 		flds	s15, [r4, #8]
 3263 0112 D4ED066A 		flds	s13, [r4, #24]
 520:math/pprz_algebra_float.c ****       const float two_qy =
 3264              		.loc 2 520 0
 3265 0116 07EE100A 		fmsr	s14, r0
 3266              	.LVL338:
 3267              		.loc 2 523 0
 3268 011a 76EEE76A 		fsubs	s13, s13, s15
 522:math/pprz_algebra_float.c ****       const float four_qy = 2. * two_qy;
 3269              		.loc 2 522 0
 3270 011e 37EE076A 		fadds	s12, s14, s14
 3271              	.LVL339:
 524:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qy;
 3272              		.loc 2 524 0
 3273 0122 D4ED037A 		flds	s15, [r4, #12]
 523:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qy;
 3274              		.loc 2 523 0
 3275 0126 C6EE866A 		fdivs	s13, s13, s12
 525:math/pprz_algebra_float.c ****       q->qy = 0.5 * two_qy;
 3276              		.loc 2 525 0
 3277 012a 27EE088A 		fmuls	s16, s14, s16
 523:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qy;
 3278              		.loc 2 523 0
 3279 012e C5ED006A 		fsts	s13, [r5]
 524:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 0, 1) + RMAT_ELMT(*rm, 1, 0)) / four_qy;
 3280              		.loc 2 524 0
 3281 0132 D4ED016A 		flds	s13, [r4, #4]
 526:math/pprz_algebra_float.c ****       q->qz = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qy;
 3282              		.loc 2 526 0
 3283 0136 94ED057A 		flds	s14, [r4, #20]
 525:math/pprz_algebra_float.c ****       q->qy = 0.5 * two_qy;
 3284              		.loc 2 525 0
 3285 013a 85ED028A 		fsts	s16, [r5, #8]
 524:math/pprz_algebra_float.c ****       q->qy = 0.5 * two_qy;
 3286              		.loc 2 524 0
 3287 013e 76EEA76A 		fadds	s13, s13, s15
 3288              		.loc 2 526 0
 3289 0142 D4ED077A 		flds	s15, [r4, #28]
 524:math/pprz_algebra_float.c ****       q->qy = 0.5 * two_qy;
 3290              		.loc 2 524 0
 3291 0146 C6EE866A 		fdivs	s13, s13, s12
 3292 014a C5ED016A 		fsts	s13, [r5, #4]
 3293              	.LVL340:
 3294              	.L105:
 3295              		.loc 2 526 0
 3296 014e 77EE277A 		fadds	s15, s14, s15
 3297 0152 C7EE867A 		fdivs	s15, s15, s12
 3298 0156 2DE0     		b	.L104
 3299              	.LVL341:
 3300              	.L103:
 3301              	.LBE10:
 3302              	.LBB11:
 527:math/pprz_algebra_float.c ****       /*printf("m11 largest\n");*/
 528:math/pprz_algebra_float.c ****     } else {
 529:math/pprz_algebra_float.c ****       const float two_qz =
 530:math/pprz_algebra_float.c ****         sqrtf(RMAT_ELMT(*rm, 2, 2) - RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 1, 1) + 1);
 3303              		.loc 2 530 0
 3304 0158 77EEE67A 		fsubs	s15, s15, s13
 3305 015c 77EEC77A 		fsubs	s15, s15, s14
 529:math/pprz_algebra_float.c ****         sqrtf(RMAT_ELMT(*rm, 2, 2) - RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 1, 1) + 1);
 3306              		.loc 2 529 0
 3307 0160 77EE867A 		fadds	s15, s15, s12
 3308 0164 17EE900A 		fmrs	r0, s15
 3309              	.LVL342:
 3310 0168 FFF7FEFF 		bl	sqrtf
 3311              	.LVL343:
 531:math/pprz_algebra_float.c ****       const float four_qz = 2. * two_qz;
 532:math/pprz_algebra_float.c ****       q->qi = (RMAT_ELMT(*rm, 0, 1) - RMAT_ELMT(*rm, 1, 0)) / four_qz;
 3312              		.loc 2 532 0
 3313 016c 94ED037A 		flds	s14, [r4, #12]
 3314 0170 D4ED016A 		flds	s13, [r4, #4]
 529:math/pprz_algebra_float.c ****         sqrtf(RMAT_ELMT(*rm, 2, 2) - RMAT_ELMT(*rm, 0, 0) - RMAT_ELMT(*rm, 1, 1) + 1);
 3315              		.loc 2 529 0
 3316 0174 07EE900A 		fmsr	s15, r0
 3317              	.LVL344:
 3318              		.loc 2 532 0
 3319 0178 76EEC76A 		fsubs	s13, s13, s14
 531:math/pprz_algebra_float.c ****       const float four_qz = 2. * two_qz;
 3320              		.loc 2 531 0
 3321 017c 37EEA76A 		fadds	s12, s15, s15
 3322              	.LVL345:
 533:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 2, 0) + RMAT_ELMT(*rm, 0, 2)) / four_qz;
 3323              		.loc 2 533 0
 3324 0180 94ED027A 		flds	s14, [r4, #8]
 532:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 2, 0) + RMAT_ELMT(*rm, 0, 2)) / four_qz;
 3325              		.loc 2 532 0
 3326 0184 C6EE866A 		fdivs	s13, s13, s12
 534:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qz;
 535:math/pprz_algebra_float.c ****       q->qz = 0.5 * two_qz;
 3327              		.loc 2 535 0
 3328 0188 67EE887A 		fmuls	s15, s15, s16
 532:math/pprz_algebra_float.c ****       q->qx = (RMAT_ELMT(*rm, 2, 0) + RMAT_ELMT(*rm, 0, 2)) / four_qz;
 3329              		.loc 2 532 0
 3330 018c C5ED006A 		fsts	s13, [r5]
 533:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qz;
 3331              		.loc 2 533 0
 3332 0190 D4ED066A 		flds	s13, [r4, #24]
 3333 0194 76EE876A 		fadds	s13, s13, s14
 534:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qz;
 3334              		.loc 2 534 0
 3335 0198 94ED077A 		flds	s14, [r4, #28]
 533:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qz;
 3336              		.loc 2 533 0
 3337 019c C6EE866A 		fdivs	s13, s13, s12
 3338 01a0 C5ED016A 		fsts	s13, [r5, #4]
 534:math/pprz_algebra_float.c ****       q->qy = (RMAT_ELMT(*rm, 1, 2) + RMAT_ELMT(*rm, 2, 1)) / four_qz;
 3339              		.loc 2 534 0
 3340 01a4 D4ED056A 		flds	s13, [r4, #20]
 3341 01a8 36EE877A 		fadds	s14, s13, s14
 3342 01ac 87EE067A 		fdivs	s14, s14, s12
 3343 01b0 85ED027A 		fsts	s14, [r5, #8]
 3344              	.LVL346:
 3345              	.L104:
 3346              	.LBE11:
 536:math/pprz_algebra_float.c ****       /*printf("m22 largest\n");*/
 537:math/pprz_algebra_float.c ****     }
 538:math/pprz_algebra_float.c ****   }
 539:math/pprz_algebra_float.c **** }
 3347              		.loc 2 539 0
 3348 01b4 BDEC028B 		fldmfdd	sp!, {d8}
 3349              		.cfi_restore 80
 3350              		.cfi_restore 81
 3351              		.cfi_def_cfa_offset 16
 3352              	.LBB12:
 535:math/pprz_algebra_float.c ****       /*printf("m22 largest\n");*/
 3353              		.loc 2 535 0
 3354 01b8 C5ED037A 		fsts	s15, [r5, #12]
 3355              	.LBE12:
 3356              		.loc 2 539 0
 3357 01bc 38BD     		pop	{r3, r4, r5, pc}
 3358              		.cfi_endproc
 3359              	.LFE66:
 3361              		.section	.text.float_eulers_of_rmat,"ax",%progbits
 3362              		.align	1
 3363              		.global	float_eulers_of_rmat
 3364              		.thumb
 3365              		.thumb_func
 3367              	float_eulers_of_rmat:
 3368              	.LFB67:
 540:math/pprz_algebra_float.c **** 
 541:math/pprz_algebra_float.c **** 
 542:math/pprz_algebra_float.c **** /*
 543:math/pprz_algebra_float.c ****  *
 544:math/pprz_algebra_float.c ****  * Euler angle functions.
 545:math/pprz_algebra_float.c ****  *
 546:math/pprz_algebra_float.c ****  */
 547:math/pprz_algebra_float.c **** 
 548:math/pprz_algebra_float.c **** void float_eulers_of_rmat(struct FloatEulers *e, struct FloatRMat *rm)
 549:math/pprz_algebra_float.c **** {
 3369              		.loc 2 549 0
 3370              		.cfi_startproc
 3371              		@ args = 0, pretend = 0, frame = 0
 3372              		@ frame_needed = 0, uses_anonymous_args = 0
 3373              	.LVL347:
 3374 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3375              		.cfi_def_cfa_offset 24
 3376              		.cfi_offset 3, -24
 3377              		.cfi_offset 4, -20
 3378              		.cfi_offset 5, -16
 3379              		.cfi_offset 6, -12
 3380              		.cfi_offset 7, -8
 3381              		.cfi_offset 14, -4
 3382              		.loc 2 549 0
 3383 0002 0446     		mov	r4, r0
 550:math/pprz_algebra_float.c ****   const float dcm00 = rm->m[0];
 3384              		.loc 2 550 0
 3385 0004 0D68     		ldr	r5, [r1]	@ float
 3386              	.LVL348:
 551:math/pprz_algebra_float.c ****   const float dcm01 = rm->m[1];
 3387              		.loc 2 551 0
 3388 0006 4E68     		ldr	r6, [r1, #4]	@ float
 3389              	.LVL349:
 552:math/pprz_algebra_float.c ****   const float dcm02 = rm->m[2];
 3390              		.loc 2 552 0
 3391 0008 8F68     		ldr	r7, [r1, #8]	@ float
 3392              	.LVL350:
 553:math/pprz_algebra_float.c ****   const float dcm12 = rm->m[5];
 554:math/pprz_algebra_float.c ****   const float dcm22 = rm->m[8];
 555:math/pprz_algebra_float.c ****   e->phi   = atan2f(dcm12, dcm22);
 3393              		.loc 2 555 0
 3394 000a 4869     		ldr	r0, [r1, #20]	@ float
 3395              	.LVL351:
 3396 000c 096A     		ldr	r1, [r1, #32]	@ float
 3397              	.LVL352:
 3398 000e FFF7FEFF 		bl	atan2f
 3399              	.LVL353:
 3400 0012 2060     		str	r0, [r4]	@ float
 556:math/pprz_algebra_float.c ****   e->theta = -asinf(dcm02);
 3401              		.loc 2 556 0
 3402 0014 3846     		mov	r0, r7	@ float
 3403 0016 FFF7FEFF 		bl	asinf
 3404              	.LVL354:
 3405 001a 80F00040 		eor	r0, r0, #-2147483648
 3406 001e 6060     		str	r0, [r4, #4]	@ float
 557:math/pprz_algebra_float.c ****   e->psi   = atan2f(dcm01, dcm00);
 3407              		.loc 2 557 0
 3408 0020 2946     		mov	r1, r5	@ float
 3409 0022 3046     		mov	r0, r6	@ float
 3410 0024 FFF7FEFF 		bl	atan2f
 3411              	.LVL355:
 3412 0028 A060     		str	r0, [r4, #8]	@ float
 3413 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3414              		.cfi_endproc
 3415              	.LFE67:
 3417              		.section	.text.float_eulers_of_quat,"ax",%progbits
 3418              		.align	1
 3419              		.global	float_eulers_of_quat
 3420              		.thumb
 3421              		.thumb_func
 3423              	float_eulers_of_quat:
 3424              	.LFB68:
 558:math/pprz_algebra_float.c **** }
 559:math/pprz_algebra_float.c **** 
 560:math/pprz_algebra_float.c **** void float_eulers_of_quat(struct FloatEulers *e, struct FloatQuat *q)
 561:math/pprz_algebra_float.c **** {
 3425              		.loc 2 561 0
 3426              		.cfi_startproc
 3427              		@ args = 0, pretend = 0, frame = 0
 3428              		@ frame_needed = 0, uses_anonymous_args = 0
 3429              	.LVL356:
 3430 0000 10B5     		push	{r4, lr}
 3431              		.cfi_def_cfa_offset 8
 3432              		.cfi_offset 4, -8
 3433              		.cfi_offset 14, -4
 3434 0002 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 3435              		.cfi_def_cfa_offset 32
 3436              		.cfi_offset 80, -32
 3437              		.cfi_offset 81, -28
 3438              		.cfi_offset 82, -24
 3439              		.cfi_offset 83, -20
 3440              		.cfi_offset 84, -16
 3441              		.cfi_offset 85, -12
 562:math/pprz_algebra_float.c ****   const float qx2  = q->qx * q->qx;
 563:math/pprz_algebra_float.c ****   const float qy2  = q->qy * q->qy;
 3442              		.loc 2 563 0
 3443 0006 D1ED029A 		flds	s19, [r1, #8]
 564:math/pprz_algebra_float.c ****   const float qz2  = q->qz * q->qz;
 3444              		.loc 2 564 0
 3445 000a 91ED039A 		flds	s18, [r1, #12]
 562:math/pprz_algebra_float.c ****   const float qx2  = q->qx * q->qx;
 3446              		.loc 2 562 0
 3447 000e 91ED018A 		flds	s16, [r1, #4]
 3448              	.LVL357:
 565:math/pprz_algebra_float.c ****   const float qiqx = q->qi * q->qx;
 3449              		.loc 2 565 0
 3450 0012 91ED00AA 		flds	s20, [r1]
 566:math/pprz_algebra_float.c ****   const float qiqy = q->qi * q->qy;
 567:math/pprz_algebra_float.c ****   const float qiqz = q->qi * q->qz;
 568:math/pprz_algebra_float.c ****   const float qxqy = q->qx * q->qy;
 569:math/pprz_algebra_float.c ****   const float qxqz = q->qx * q->qz;
 570:math/pprz_algebra_float.c ****   const float qyqz = q->qy * q->qz;
 3451              		.loc 2 570 0
 3452 0016 69EE897A 		fmuls	s15, s19, s18
 563:math/pprz_algebra_float.c ****   const float qz2  = q->qz * q->qz;
 3453              		.loc 2 563 0
 3454 001a 69EEA9AA 		fmuls	s21, s19, s19
 3455              	.LVL358:
 571:math/pprz_algebra_float.c ****   const float dcm00 = 1.0 - 2.*(qy2 +  qz2);
 572:math/pprz_algebra_float.c ****   const float dcm01 =       2.*(qxqy + qiqz);
 573:math/pprz_algebra_float.c ****   const float dcm02 =       2.*(qxqz - qiqy);
 574:math/pprz_algebra_float.c ****   const float dcm12 =       2.*(qyqz + qiqx);
 3456              		.loc 2 574 0
 3457 001e EAEE087A 		vfma.f32	s15, s20, s16
 3458              	.LVL359:
 561:math/pprz_algebra_float.c ****   const float qx2  = q->qx * q->qx;
 3459              		.loc 2 561 0
 3460 0022 0446     		mov	r4, r0
 3461              		.loc 2 574 0
 3462 0024 77EEA78A 		fadds	s17, s15, s15
 3463              	.LVL360:
 575:math/pprz_algebra_float.c ****   const float dcm22 = 1.0 - 2.*(qx2 +  qy2);
 3464              		.loc 2 575 0
 3465 0028 F0EE6A7A 		fcpys	s15, s21
 3466 002c E8EE087A 		vfma.f32	s15, s16, s16
 3467              	.LVL361:
 3468 0030 17EE900A 		fmrs	r0, s15
 3469              	.LVL362:
 3470 0034 FFF7FEFF 		bl	__aeabi_f2d
 3471              	.LVL363:
 3472 0038 0246     		mov	r2, r0
 3473 003a 0B46     		mov	r3, r1
 3474 003c FFF7FEFF 		bl	__aeabi_dadd
 3475              	.LVL364:
 3476 0040 0246     		mov	r2, r0
 3477 0042 0B46     		mov	r3, r1
 3478 0044 0020     		movs	r0, #0
 3479 0046 1C49     		ldr	r1, .L108
 3480 0048 FFF7FEFF 		bl	__aeabi_dsub
 3481              	.LVL365:
 3482 004c FFF7FEFF 		bl	__aeabi_d2f
 3483              	.LVL366:
 3484 0050 0146     		mov	r1, r0	@ float
 576:math/pprz_algebra_float.c **** 
 577:math/pprz_algebra_float.c ****   e->phi = atan2f(dcm12, dcm22);
 3485              		.loc 2 577 0
 3486 0052 18EE900A 		fmrs	r0, s17
 3487 0056 FFF7FEFF 		bl	atan2f
 3488              	.LVL367:
 569:math/pprz_algebra_float.c ****   const float qyqz = q->qy * q->qz;
 3489              		.loc 2 569 0
 3490 005a 68EE097A 		fmuls	s15, s16, s18
 3491              	.LVL368:
 3492              		.loc 2 577 0
 3493 005e 2060     		str	r0, [r4]	@ float
 573:math/pprz_algebra_float.c ****   const float dcm12 =       2.*(qyqz + qiqx);
 3494              		.loc 2 573 0
 3495 0060 EAEE697A 		vfms.f32	s15, s20, s19
 3496              	.LVL369:
 578:math/pprz_algebra_float.c ****   e->theta = -asinf(dcm02);
 3497              		.loc 2 578 0
 3498 0064 77EEA77A 		fadds	s15, s15, s15
 3499              	.LVL370:
 3500 0068 17EE900A 		fmrs	r0, s15
 3501 006c FFF7FEFF 		bl	asinf
 3502              	.LVL371:
 571:math/pprz_algebra_float.c ****   const float dcm01 =       2.*(qxqy + qiqz);
 3503              		.loc 2 571 0
 3504 0070 E9EE09AA 		vfma.f32	s21, s18, s18
 3505              	.LVL372:
 3506              		.loc 2 578 0
 3507 0074 80F00040 		eor	r0, r0, #-2147483648
 3508 0078 6060     		str	r0, [r4, #4]	@ float
 571:math/pprz_algebra_float.c ****   const float dcm01 =       2.*(qxqy + qiqz);
 3509              		.loc 2 571 0
 3510 007a 1AEE900A 		fmrs	r0, s21
 3511 007e FFF7FEFF 		bl	__aeabi_f2d
 3512              	.LVL373:
 3513 0082 0246     		mov	r2, r0
 3514 0084 0B46     		mov	r3, r1
 3515 0086 FFF7FEFF 		bl	__aeabi_dadd
 3516              	.LVL374:
 568:math/pprz_algebra_float.c ****   const float qxqz = q->qx * q->qz;
 3517              		.loc 2 568 0
 3518 008a 28EE298A 		fmuls	s16, s16, s19
 3519              	.LVL375:
 571:math/pprz_algebra_float.c ****   const float dcm01 =       2.*(qxqy + qiqz);
 3520              		.loc 2 571 0
 3521 008e 0246     		mov	r2, r0
 572:math/pprz_algebra_float.c ****   const float dcm02 =       2.*(qxqz - qiqy);
 3522              		.loc 2 572 0
 3523 0090 AAEE098A 		vfma.f32	s16, s20, s18
 3524              	.LVL376:
 571:math/pprz_algebra_float.c ****   const float dcm01 =       2.*(qxqy + qiqz);
 3525              		.loc 2 571 0
 3526 0094 0B46     		mov	r3, r1
 3527 0096 0020     		movs	r0, #0
 3528 0098 0749     		ldr	r1, .L108
 3529 009a FFF7FEFF 		bl	__aeabi_dsub
 3530              	.LVL377:
 3531 009e FFF7FEFF 		bl	__aeabi_d2f
 3532              	.LVL378:
 572:math/pprz_algebra_float.c ****   const float dcm02 =       2.*(qxqz - qiqy);
 3533              		.loc 2 572 0
 3534 00a2 38EE088A 		fadds	s16, s16, s16
 3535              	.LVL379:
 571:math/pprz_algebra_float.c ****   const float dcm01 =       2.*(qxqy + qiqz);
 3536              		.loc 2 571 0
 3537 00a6 0146     		mov	r1, r0	@ float
 579:math/pprz_algebra_float.c ****   e->psi = atan2f(dcm01, dcm00);
 3538              		.loc 2 579 0
 3539 00a8 18EE100A 		fmrs	r0, s16
 3540 00ac FFF7FEFF 		bl	atan2f
 3541              	.LVL380:
 580:math/pprz_algebra_float.c **** }
 3542              		.loc 2 580 0
 3543 00b0 BDEC068B 		fldmfdd	sp!, {d8-d10}
 3544              		.cfi_restore 84
 3545              		.cfi_restore 85
 3546              		.cfi_restore 82
 3547              		.cfi_restore 83
 3548              		.cfi_restore 80
 3549              		.cfi_restore 81
 3550              		.cfi_def_cfa_offset 8
 3551              	.LVL381:
 579:math/pprz_algebra_float.c ****   e->psi = atan2f(dcm01, dcm00);
 3552              		.loc 2 579 0
 3553 00b4 A060     		str	r0, [r4, #8]	@ float
 3554              		.loc 2 580 0
 3555 00b6 10BD     		pop	{r4, pc}
 3556              	.LVL382:
 3557              	.L109:
 3558              		.align	2
 3559              	.L108:
 3560 00b8 0000F03F 		.word	1072693248
 3561              		.cfi_endproc
 3562              	.LFE68:
 3564              		.text
 3565              	.Letext0:
 3566              		.file 3 "/usr/arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pprz_algebra_float.c
     /tmp/cc0cKc5r.s:20     .text.float_quat_wrap_shortest:00000000 $t
     /tmp/cc0cKc5r.s:24     .text.float_quat_wrap_shortest:00000000 float_quat_wrap_shortest
     /tmp/cc0cKc5r.s:56     .text.float_quat_norm:00000000 $t
     /tmp/cc0cKc5r.s:60     .text.float_quat_norm:00000000 float_quat_norm
     /tmp/cc0cKc5r.s:93     .text.float_quat_normalize:00000000 $t
     /tmp/cc0cKc5r.s:97     .text.float_quat_normalize:00000000 float_quat_normalize
     /tmp/cc0cKc5r.s:141    .text.float_quat_normalize:00000048 $d
     /tmp/cc0cKc5r.s:146    .text.renorm_factor:00000000 $t
     /tmp/cc0cKc5r.s:150    .text.renorm_factor:00000000 renorm_factor
     /tmp/cc0cKc5r.s:216    .text.renorm_factor:00000068 $d
     /tmp/cc0cKc5r.s:224    .text.float_vect3_integrate_fi:00000000 $t
     /tmp/cc0cKc5r.s:229    .text.float_vect3_integrate_fi:00000000 float_vect3_integrate_fi
     /tmp/cc0cKc5r.s:264    .text.float_rates_integrate_fi:00000000 $t
     /tmp/cc0cKc5r.s:269    .text.float_rates_integrate_fi:00000000 float_rates_integrate_fi
     /tmp/cc0cKc5r.s:304    .text.float_rates_of_euler_dot:00000000 $t
     /tmp/cc0cKc5r.s:309    .text.float_rates_of_euler_dot:00000000 float_rates_of_euler_dot
     /tmp/cc0cKc5r.s:392    .text.float_rmat_inv:00000000 $t
     /tmp/cc0cKc5r.s:397    .text.float_rmat_inv:00000000 float_rmat_inv
     /tmp/cc0cKc5r.s:437    .text.float_rmat_norm:00000000 $t
     /tmp/cc0cKc5r.s:442    .text.float_rmat_norm:00000000 float_rmat_norm
     /tmp/cc0cKc5r.s:483    .text.float_rmat_comp:00000000 $t
     /tmp/cc0cKc5r.s:488    .text.float_rmat_comp:00000000 float_rmat_comp
     /tmp/cc0cKc5r.s:578    .text.float_rmat_comp_inv:00000000 $t
     /tmp/cc0cKc5r.s:583    .text.float_rmat_comp_inv:00000000 float_rmat_comp_inv
     /tmp/cc0cKc5r.s:669    .text.float_rmat_vmult:00000000 $t
     /tmp/cc0cKc5r.s:674    .text.float_rmat_vmult:00000000 float_rmat_vmult
     /tmp/cc0cKc5r.s:718    .text.float_rmat_transp_vmult:00000000 $t
     /tmp/cc0cKc5r.s:723    .text.float_rmat_transp_vmult:00000000 float_rmat_transp_vmult
     /tmp/cc0cKc5r.s:767    .text.float_rmat_ratemult:00000000 $t
     /tmp/cc0cKc5r.s:772    .text.float_rmat_ratemult:00000000 float_rmat_ratemult
     /tmp/cc0cKc5r.s:816    .text.float_rmat_transp_ratemult:00000000 $t
     /tmp/cc0cKc5r.s:821    .text.float_rmat_transp_ratemult:00000000 float_rmat_transp_ratemult
     /tmp/cc0cKc5r.s:870    .text.float_rmat_of_axis_angle:00000000 $t
     /tmp/cc0cKc5r.s:875    .text.float_rmat_of_axis_angle:00000000 float_rmat_of_axis_angle
     /tmp/cc0cKc5r.s:1078   .text.float_rmat_of_axis_angle:00000128 $d
     /tmp/cc0cKc5r.s:1083   .text.float_rmat_of_eulers_321:00000000 $t
     /tmp/cc0cKc5r.s:1088   .text.float_rmat_of_eulers_321:00000000 float_rmat_of_eulers_321
     /tmp/cc0cKc5r.s:1224   .text.float_rmat_of_eulers_312:00000000 $t
     /tmp/cc0cKc5r.s:1229   .text.float_rmat_of_eulers_312:00000000 float_rmat_of_eulers_312
     /tmp/cc0cKc5r.s:1371   .text.float_rmat_of_quat:00000000 $t
     /tmp/cc0cKc5r.s:1376   .text.float_rmat_of_quat:00000000 float_rmat_of_quat
     /tmp/cc0cKc5r.s:1525   .text.float_rmat_of_quat:000000e8 $d
     /tmp/cc0cKc5r.s:1531   .text.float_rmat_integrate_fi:00000000 $t
     /tmp/cc0cKc5r.s:1536   .text.float_rmat_integrate_fi:00000000 float_rmat_integrate_fi
     /tmp/cc0cKc5r.s:1622   .text.float_rmat_reorthogonalize:00000000 $t
     /tmp/cc0cKc5r.s:1627   .text.float_rmat_reorthogonalize:00000000 float_rmat_reorthogonalize
     /tmp/cc0cKc5r.s:1789   .text.float_quat_comp:00000000 $t
     /tmp/cc0cKc5r.s:1794   .text.float_quat_comp:00000000 float_quat_comp
     /tmp/cc0cKc5r.s:1846   .text.float_quat_comp_inv:00000000 $t
     /tmp/cc0cKc5r.s:1851   .text.float_quat_comp_inv:00000000 float_quat_comp_inv
     /tmp/cc0cKc5r.s:1903   .text.float_quat_inv_comp:00000000 $t
     /tmp/cc0cKc5r.s:1908   .text.float_quat_inv_comp:00000000 float_quat_inv_comp
     /tmp/cc0cKc5r.s:1961   .text.float_quat_comp_norm_shortest:00000000 $t
     /tmp/cc0cKc5r.s:1966   .text.float_quat_comp_norm_shortest:00000000 float_quat_comp_norm_shortest
     /tmp/cc0cKc5r.s:2001   .text.float_quat_comp_inv_norm_shortest:00000000 $t
     /tmp/cc0cKc5r.s:2006   .text.float_quat_comp_inv_norm_shortest:00000000 float_quat_comp_inv_norm_shortest
     /tmp/cc0cKc5r.s:2041   .text.float_quat_inv_comp_norm_shortest:00000000 $t
     /tmp/cc0cKc5r.s:2046   .text.float_quat_inv_comp_norm_shortest:00000000 float_quat_inv_comp_norm_shortest
     /tmp/cc0cKc5r.s:2082   .text.float_quat_differential:00000000 $t
     /tmp/cc0cKc5r.s:2087   .text.float_quat_differential:00000000 float_quat_differential
     /tmp/cc0cKc5r.s:2222   .text.float_quat_differential:000000d8 $d
     /tmp/cc0cKc5r.s:2229   .text.float_quat_integrate_fi:00000000 $t
     /tmp/cc0cKc5r.s:2234   .text.float_quat_integrate_fi:00000000 float_quat_integrate_fi
     /tmp/cc0cKc5r.s:2377   .text.float_quat_integrate_fi:000000d8 $d
     /tmp/cc0cKc5r.s:2382   .text.float_quat_integrate:00000000 $t
     /tmp/cc0cKc5r.s:2387   .text.float_quat_integrate:00000000 float_quat_integrate
     /tmp/cc0cKc5r.s:2540   .text.float_quat_integrate:00000104 $d
     /tmp/cc0cKc5r.s:2546   .text.float_quat_vmult:00000000 $t
     /tmp/cc0cKc5r.s:2551   .text.float_quat_vmult:00000000 float_quat_vmult
     /tmp/cc0cKc5r.s:2649   .text.float_quat_derivative:00000000 $t
     /tmp/cc0cKc5r.s:2654   .text.float_quat_derivative:00000000 float_quat_derivative
     /tmp/cc0cKc5r.s:2706   .text.float_quat_derivative_lagrange:00000000 $t
     /tmp/cc0cKc5r.s:2711   .text.float_quat_derivative_lagrange:00000000 float_quat_derivative_lagrange
     /tmp/cc0cKc5r.s:2792   .text.float_quat_of_eulers:00000000 $t
     /tmp/cc0cKc5r.s:2797   .text.float_quat_of_eulers:00000000 float_quat_of_eulers
     /tmp/cc0cKc5r.s:2927   .text.float_quat_of_axis_angle:00000000 $t
     /tmp/cc0cKc5r.s:2932   .text.float_quat_of_axis_angle:00000000 float_quat_of_axis_angle
     /tmp/cc0cKc5r.s:2998   .text.float_quat_of_orientation_vect:00000000 $t
     /tmp/cc0cKc5r.s:3003   .text.float_quat_of_orientation_vect:00000000 float_quat_of_orientation_vect
     /tmp/cc0cKc5r.s:3101   .text.float_quat_of_orientation_vect:000000a0 $d
     /tmp/cc0cKc5r.s:3107   .text.float_quat_of_rmat:00000000 $t
     /tmp/cc0cKc5r.s:3112   .text.float_quat_of_rmat:00000000 float_quat_of_rmat
     /tmp/cc0cKc5r.s:3362   .text.float_eulers_of_rmat:00000000 $t
     /tmp/cc0cKc5r.s:3367   .text.float_eulers_of_rmat:00000000 float_eulers_of_rmat
     /tmp/cc0cKc5r.s:3418   .text.float_eulers_of_quat:00000000 $t
     /tmp/cc0cKc5r.s:3423   .text.float_eulers_of_quat:00000000 float_eulers_of_quat
     /tmp/cc0cKc5r.s:3560   .text.float_eulers_of_quat:000000b8 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.7f506cdee5614e5fae524d20989ad8c8
                           .group:00000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.inttypes.h.23.a096771aacee9aba4b33c2d04aacc9b1
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.math.h.35.1ee5c20b09553bed5d7eb3c445ef70bd
                           .group:00000000 wm4.message_pragmas.h.2.a703592919ab94db061a475289156c21
                           .group:00000000 wm4.std.h.37.c94f17957e155d4dda789b7ad0549a32
                           .group:00000000 wm4.pprz_algebra.h.47.d249264ea6bacf2198e290d461cf6dbe
                           .group:00000000 wm4.pprz_algebra_float.h.98.bb035bcbfa66bb186e7ea81143fd64bc

UNDEFINED SYMBOLS
sqrtf
sinf
cosf
__aeabi_f2d
__aeabi_dsub
__aeabi_dmul
__aeabi_dadd
__aeabi_d2f
__aeabi_dcmplt
cos
sin
atan2f
asinf
